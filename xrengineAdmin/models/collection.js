// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Collection = sequelize.define('collection', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    sid: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    description: {
      type: DataTypes.STRING,
    },
    version: {
      type: DataTypes.INTEGER,
    },
    metadata: {
      type: DataTypes.STRING,
    },
    isPublic: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    thumbnailOwnedFileId: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'collection',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Collection.associate = (models) => {
    Collection.belongsTo(models.user, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'user',
    });
    Collection.belongsTo(models.collectionType, {
      foreignKey: {
        name: 'typeKey',
        field: 'type',
      },
      targetKey: 'type',
      as: 'type',
    });
    Collection.belongsTo(models.location, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'locationId',
      },
      as: 'location',
    });
    Collection.belongsToMany(models.tag, {
      through: 'collectionTag',
      foreignKey: 'collectionId',
      otherKey: 'tagTag',
      as: 'tagThroughCollectionTags',
    });
    Collection.hasMany(models.attribution, {
      foreignKey: {
        name: 'collectionIdKey',
        field: 'collectionId',
      },
      as: 'attributions',
    });
    Collection.hasMany(models.tag, {
      foreignKey: {
        name: 'collectionIdKey',
        field: 'collectionId',
      },
      as: 'tags',
    });
  };

  return Collection;
};
