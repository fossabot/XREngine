// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Location = sequelize.define('location', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    sceneId: {
      type: DataTypes.STRING,
    },
    locationSettingsId: {
      type: DataTypes.STRING,
    },
    slugifiedName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    maxUsersPerInstance: {
      type: DataTypes.INTEGER,
      defaultValue: 50,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'location',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Location.associate = (models) => {
    Location.belongsToMany(models.user, {
      through: 'locationBan',
      foreignKey: 'locationId',
      otherKey: 'userId',
      as: 'userThroughLocationBans',
    });
    Location.belongsToMany(models.instance, {
      through: 'party',
      foreignKey: 'locationId',
      otherKey: 'instanceId',
      as: 'instanceThroughParties',
    });
    Location.hasMany(models.instance, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'locationId',
      },
      as: 'instances',
    });
    Location.hasMany(models.collection, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'locationId',
      },
      as: 'collections',
    });
    Location.hasMany(models.locationSettings, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'locationId',
      },
      as: 'locationSettings',
    });
  };

  return Location;
};
