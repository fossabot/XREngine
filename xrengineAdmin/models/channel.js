// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Channel = sequelize.define('channel', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'channel',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Channel.associate = (models) => {
    Channel.belongsTo(models.instance, {
      foreignKey: {
        name: 'instanceIdKey',
        field: 'instanceId',
      },
      as: 'instance',
    });
    Channel.belongsTo(models.channelType, {
      foreignKey: {
        name: 'channelTypeKey',
        field: 'channelType',
      },
      targetKey: 'type',
      as: 'channelType',
    });
    Channel.belongsTo(models.user, {
      foreignKey: {
        name: 'userId1Key',
        field: 'userId1',
      },
      as: 'userId1',
    });
    Channel.belongsTo(models.party, {
      foreignKey: {
        name: 'partyIdKey',
        field: 'partyId',
      },
      as: 'party',
    });
    Channel.belongsTo(models.group, {
      foreignKey: {
        name: 'groupIdKey',
        field: 'groupId',
      },
      as: 'group',
    });
    Channel.belongsTo(models.user, {
      foreignKey: {
        name: 'userId2Key',
        field: 'userId2',
      },
      as: 'userId2',
    });
    Channel.hasMany(models.message, {
      foreignKey: {
        name: 'channelIdKey',
        field: 'channelId',
      },
      as: 'messages',
    });
  };

  return Channel;
};
