{"ast":null,"code":"var _jsxFileName = \"/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* global AFRAME, NAF */\nimport React from 'react';\nimport dynamic from 'next/dynamic';\ndynamic( // @ts-ignore\n() => {\n  // @ts-ignore\n  import('webrtc-adapter');\n  import('aframe'); // @ts-ignore\n\n  import('networked-aframe'); // @ts-ignore\n\n  import('naf-janus-adapter/dist/naf-janus-adapter');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('webrtc-adapter'), require.resolveWeak('aframe'), require.resolveWeak('networked-aframe'), require.resolveWeak('naf-janus-adapter/dist/naf-janus-adapter')],\n    modules: ['webrtc-adapter', 'aframe', 'networked-aframe', 'naf-janus-adapter/dist/naf-janus-adapter']\n  }\n}); //Networking\n\nexport default class Scene extends React.Component {\n  isLoggedIn() {\n    return this.state.loggedIn;\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"NetworkedScene\", dynamic(() => {\n      import('./scene-networked');\n    }, {\n      ssr: false,\n      loadableGenerated: {\n        webpack: () => [require.resolveWeak('./scene-networked')],\n        modules: ['./scene-networked']\n      }\n    }));\n\n    _defineProperty(this, \"LocalScene\", dynamic(() => {\n      import('./scene-local');\n    }, {\n      ssr: false,\n      loadableGenerated: {\n        webpack: () => [require.resolveWeak('./scene-local')],\n        modules: ['./scene-local']\n      }\n    }));\n\n    _defineProperty(this, \"state\", {\n      loggedIn: false // TODO: Add auth and vuex store\n\n    });\n  }\n\n  render() {\n    if (this.isLoggedIn()) return __jsx(this.NetworkedScene, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 18\n      }\n    });else return __jsx(this.LocalScene, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx"],"names":["React","dynamic","ssr","Scene","Component","isLoggedIn","state","loggedIn","constructor","props","render"],"mappings":";;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEAA,OAAO,EACH;AACF,MAAM;AACA;AAEJ,SAAO,gBAAP;AACA,SAAO,QAAP,EAJI,CAKJ;;AACA,SAAO,kBAAP,EANI,CAOA;;AACJ,SAAO,0CAAP;AACD,CAXI,EAYL;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAA;AAAA,wCAPS,gBAOT,uBANS,QAMT,uBAJS,kBAIT,uBAFS,0CAET;AAAA,cAPS,gBAOT,EANS,QAMT,EAJS,kBAIT,EAFS,0CAET;AAAA;AAAA,CAZK,CAAP,C,CAgBA;;AACA,eAAe,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAmBjDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKC,KAAL,CAAWC,QAAlB;AACD;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,4CAtBPR,OAAO,CAAC,MAAY;AACnC,aAAO,mBAAP;AACD,KAFuB,EAGtB;AACAC,MAAAA,GAAG,EAAE,KADL;AAAA;AAAA,4CAFO,mBAEP;AAAA,kBAFO,mBAEP;AAAA;AAAA,KAHsB,CAsBA;;AAAA,wCAfXD,OAAO,CAAC,MAAY;AAC/B,aAAO,eAAP;AACD,KAFmB,EAGlB;AACAC,MAAAA,GAAG,EAAE,KADL;AAAA;AAAA,4CAFO,eAEP;AAAA,kBAFO,eAEP;AAAA;AAAA,KAHkB,CAeI;;AAAA,mCARhB;AACNK,MAAAA,QAAQ,EAAE,KADJ,CACU;;AADV,KAQgB;AAGvB;;AACDG,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKL,UAAL,EAAH,EACE,OAAS,WAAM,cAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT,CADF,KAGE,OAAS,WAAM,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AACL;;AAhCgD","sourcesContent":["/* global AFRAME, NAF */\n\nimport React from 'react'\nimport dynamic from 'next/dynamic';\n\ndynamic(\n    // @ts-ignore\n  () => {\n        // @ts-ignore\n\n    import('webrtc-adapter')\n    import('aframe')\n    // @ts-ignore\n    import('networked-aframe')\n        // @ts-ignore\n    import('naf-janus-adapter/dist/naf-janus-adapter')\n  },\n  { ssr: false }\n)\n\n\n//Networking\nexport default class Scene extends React.Component {\n  NetworkedScene = dynamic(() : any => {\n    import('./scene-networked')\n  }\n  , {\n    ssr: false\n  });\n  \n  LocalScene = dynamic(() : any => {\n    import('./scene-local')\n  }\n  , {\n    ssr: false\n  });\n  \n  state = {\n    loggedIn: false // TODO: Add auth and vuex store\n  };\n\n  isLoggedIn() {\n    return this.state.loggedIn\n  }\n\n  constructor(props: any) {\n    super(props);\n    \n  }\n  render() {\n      if(this.isLoggedIn()) \n        return ( <this.NetworkedScene /> )\n      else\n        return ( <this.LocalScene /> )\n  }\n}"]},"metadata":{},"sourceType":"module"}