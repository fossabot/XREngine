{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* global AFRAME, NAF */\nimport React from 'react';\nimport dynamic from 'next/dynamic';\ndynamic( // @ts-ignore\n() => {\n  // @ts-ignore\n  import('webrtc-adapter');\n  import('aframe'); // @ts-ignore\n\n  import('networked-aframe'); // @ts-ignore\n\n  import('naf-janus-adapter/dist/naf-janus-adapter');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('webrtc-adapter'), require.resolveWeak('aframe'), require.resolveWeak('networked-aframe'), require.resolveWeak('naf-janus-adapter/dist/naf-janus-adapter')],\n    modules: ['webrtc-adapter', 'aframe', 'networked-aframe', 'naf-janus-adapter/dist/naf-janus-adapter']\n  }\n});\nconst NetworkedScene = dynamic(() => {\n  import('./scene-networked');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./scene-networked')],\n    modules: ['./scene-networked']\n  }\n});\nconst LocalScene = dynamic(() => {\n  import('./scene-local');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./scene-local')],\n    modules: ['./scene-local']\n  }\n}); //Networking\n\nexport default class Scene extends React.Component {\n  isLoggedIn() {\n    return this.state.loggedIn;\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      loggedIn: false // TODO: Add auth and vuex store\n\n    });\n  }\n\n  render() {\n    if (this.isLoggedIn()) return __jsx(NetworkedScene, null);else return __jsx(LocalScene, null);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}