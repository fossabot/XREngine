{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* global AFRAME, NAF */\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nvar NetworkedScene = dynamic(function () {\n  import('./scene-networked');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./scene-networked')];\n    },\n    modules: ['./scene-networked']\n  }\n});\nvar LocalScene = dynamic(function () {\n  import('./scene-local');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./scene-local')];\n    },\n    modules: ['./scene-local']\n  }\n}); //Networking\n\nvar Scene = /*#__PURE__*/function (_React$Component) {\n  _inherits(Scene, _React$Component);\n\n  var _super = _createSuper(Scene);\n\n  _createClass(Scene, [{\n    key: \"isLoggedIn\",\n    value: function isLoggedIn() {\n      return this.state.loggedIn;\n    }\n  }]);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loggedIn: false // TODO: Add auth and vuex store\n\n    });\n\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"render\",\n    value: function render() {\n      __jsx(\"div\", {\n        id: \"sceneContainer\",\n        style: \"height: 100%; width: 100%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      });\n\n      if (this.isLoggedIn()) return __jsx(NetworkedScene, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 18\n        }\n      });else return __jsx(LocalScene, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 18\n        }\n      });\n    }\n  }]);\n\n  return Scene;\n}(React.Component);\n\nexport { Scene as default };","map":{"version":3,"sources":["/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx"],"names":["React","dynamic","NetworkedScene","ssr","LocalScene","Scene","state","loggedIn","props","isLoggedIn","Component"],"mappings":";;;;;;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,IAAMC,cAAc,GAAGD,OAAO,CAAC,YAAY;AACzC,SAAO,mBAAP;AACD,CAF6B,EAG5B;AACDE,EAAAA,GAAG,EAAE,KADJ;AAAA;AAAA;AAAA,kCAFO,mBAEP;AAAA;AAAA,cAFO,mBAEP;AAAA;AAAA,CAH4B,CAA9B;AAOA,IAAMC,UAAU,GAAGH,OAAO,CAAC,YAAY;AACrC,SAAO,eAAP;AACD,CAFyB,EAGxB;AACDE,EAAAA,GAAG,EAAE,KADJ;AAAA;AAAA;AAAA,kCAFO,eAEP;AAAA;AAAA,cAFO,eAEP;AAAA;AAAA,CAHwB,CAA1B,C,CAOA;;IACqBE,K;;;;;;;iCAKN;AACX,aAAO,KAAKC,KAAL,CAAWC,QAAlB;AACD;;;AAED,iBAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;;AADsB,4DARhB;AACND,MAAAA,QAAQ,EAAE,KADJ,CACU;;AADV,KAQgB;;AAAA;AAEvB;;;;6BAEQ;AACH;AAAK,QAAA,EAAE,EAAC,gBAAR;AAAyB,QAAA,KAAK,EAAC,2BAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEF,UAAG,KAAKE,UAAL,EAAH,EACE,OAAS,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAT,CADF,KAGE,OAAS,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAT;AACL;;;;EApBgCT,KAAK,CAACU,S;;SAApBL,K","sourcesContent":["/* global AFRAME, NAF */\n\nimport React from 'react'\nimport dynamic from 'next/dynamic';\n\nconst NetworkedScene = dynamic(() : any => {\n  import('./scene-networked')\n}\n, {\n\tssr: false\n});\n\nconst LocalScene = dynamic(() : any => {\n  import('./scene-local')\n}\n, {\n\tssr: false\n})\n\n//Networking\nexport default class Scene extends React.Component {\n  state = {\n    loggedIn: false // TODO: Add auth and vuex store\n  };\n\n  isLoggedIn() {\n    return this.state.loggedIn\n  }\n\n  constructor(props: any) {\n    super(props);  \n  }\n\n  render() {\n        <div id=\"sceneContainer\" style=\"height: 100%; width: 100%\"></div>\n\n      if(this.isLoggedIn()) \n        return ( <NetworkedScene /> )\n      else\n        return ( <LocalScene /> )\n  }\n}"]},"metadata":{},"sourceType":"module"}