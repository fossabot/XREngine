{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport 'aframe';\nimport 'aframe-particle-system-component';\nimport 'babel-polyfill'; //@ts-ignore\n\nimport { Entity, Scene } from 'aframe-react';\nimport ReactDOM from 'react-dom';\n\nvar LocalScene = /*#__PURE__*/function (_React$Component) {\n  _inherits(LocalScene, _React$Component);\n\n  var _super = _createSuper(LocalScene);\n\n  function LocalScene(props) {\n    var _this;\n\n    _classCallCheck(this, LocalScene);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      color: ''\n    });\n\n    _this.state = {\n      color: 'red'\n    };\n    return _this;\n  }\n\n  _createClass(LocalScene, [{\n    key: \"changeColor\",\n    value: function changeColor() {\n      var colors = ['red', 'orange', 'yellow', 'green', 'blue'];\n      this.setState({\n        color: colors[Math.floor(Math.random() * colors.length)]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Scene, {\n        renderer: \"antialias: true\",\n        environment: {\n          preset: 'starry',\n          seed: 2,\n          lightPosition: {\n            x: 0.0,\n            y: 0.03,\n            z: -0.5\n          },\n          fog: 0.8,\n          ground: 'canyon',\n          groundYScale: 6.31,\n          groundTexture: 'walkernoise',\n          groundColor: '#8a7f8a',\n          grid: 'none'\n        }\n      }, __jsx(\"a-assets\", null, __jsx(\"img\", {\n        id: \"groundTexture\",\n        src: \"https://cdn.aframe.io/a-painter/images/floor.jpg\"\n      }), __jsx(\"img\", {\n        id: \"skyTexture\",\n        src: \"https://cdn.aframe.io/a-painter/images/sky.jpg\"\n      })), __jsx(Entity, {\n        primitive: \"a-plane\",\n        src: \"#groundTexture\",\n        rotation: \"-90 0 0\",\n        height: \"100\",\n        width: \"100\"\n      }), __jsx(Entity, {\n        primitive: \"a-light\",\n        type: \"ambient\",\n        color: \"#445451\"\n      }), __jsx(Entity, {\n        primitive: \"a-light\",\n        type: \"point\",\n        intensity: \"2\",\n        position: \"2 4 4\"\n      }), __jsx(Entity, {\n        primitive: \"a-sky\",\n        height: \"2048\",\n        radius: \"30\",\n        src: \"#skyTexture\",\n        \"theta-length\": \"90\",\n        width: \"2048\"\n      }), __jsx(Entity, {\n        \"particle-system\": {\n          preset: 'snow',\n          particleCount: 2000\n        }\n      }), __jsx(Entity, {\n        text: {\n          value: 'Hello, A-Frame React!',\n          align: 'center'\n        },\n        position: {\n          x: 0,\n          y: 2,\n          z: -1\n        }\n      }), __jsx(Entity, {\n        id: \"box\",\n        geometry: {\n          primitive: 'box'\n        },\n        material: {\n          color: this.state.color,\n          opacity: 0.6\n        },\n        animation__rotate: {\n          property: 'rotation',\n          dur: 2000,\n          loop: true,\n          to: '360 360 360'\n        },\n        animation__scale: {\n          property: 'scale',\n          dir: 'alternate',\n          dur: 100,\n          loop: true,\n          to: '1.1 1.1 1.1'\n        },\n        position: {\n          x: 0,\n          y: 1,\n          z: -3\n        },\n        events: {\n          click: this.changeColor.bind(this)\n        }\n      }, __jsx(Entity, {\n        animation__scale: {\n          property: 'scale',\n          dir: 'alternate',\n          dur: 100,\n          loop: true,\n          to: '2 2 2'\n        },\n        geometry: {\n          primitive: 'box',\n          depth: 0.2,\n          height: 0.2,\n          width: 0.2\n        },\n        material: {\n          color: '#24CAFF'\n        }\n      })), __jsx(Entity, {\n        primitive: \"a-camera\"\n      }, __jsx(Entity, {\n        primitive: \"a-cursor\",\n        animation__click: {\n          property: 'scale',\n          startEvents: 'click',\n          from: '0.1 0.1 0.1',\n          to: '1 1 1',\n          dur: 150\n        }\n      })));\n    }\n  }]);\n\n  return LocalScene;\n}(React.Component);\n\nexport { LocalScene as default };\nReactDOM.render(__jsx(LocalScene, null), document.querySelector('#sceneContainer'));","map":null,"metadata":{},"sourceType":"module"}