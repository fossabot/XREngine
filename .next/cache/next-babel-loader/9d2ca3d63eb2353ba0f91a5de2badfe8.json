{"ast":null,"code":"var _jsxFileName = \"/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport dynamic from 'next/dynamic';\nimport ReactDOM from 'react-dom';\nimport NetworkedScene from './scene-networked';\nimport LocalScene from './scene-local'; //Networking\n\nexport default class SceneRoot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      loggedIn: true // TODO: Add auth and redux store\n\n    });\n  }\n\n  render() {\n    if (this.state.loggedIn) return __jsx(NetworkedScene, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    });else return __jsx(LocalScene, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    });\n  }\n\n  componentDidMount() {\n    console.log(\"component mounted\");\n    const Scene = dynamic(() => {}, {\n      ssr: false\n    });\n    ReactDOM.render(__jsx(Scene, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }), document.querySelector('#sceneContainer'));\n  }\n\n}","map":{"version":3,"sources":["/home/beast/Documents/xrchat-client/components/xr/scene/index.tsx"],"names":["React","dynamic","ReactDOM","NetworkedScene","LocalScene","SceneRoot","Component","constructor","props","loggedIn","render","state","componentDidMount","console","log","Scene","ssr","document","querySelector"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,eAAvB,C,CAEA;;AACA,eAAe,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AAKrDC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,mCAJhB;AACNC,MAAAA,QAAQ,EAAE,IADJ,CACS;;AADT,KAIgB;AAEvB;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAG,KAAKC,KAAL,CAAWF,QAAd,EACA,OACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADA,KAIK,OACH,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG;AAGN;;AAEDG,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMC,KAAK,GAAGd,OAAO,CAAC,MAAW,CAEhC,CAFoB,EAElB;AACDe,MAAAA,GAAG,EAAE;AADJ,KAFkB,CAArB;AAKAd,IAAAA,QAAQ,CAACQ,MAAT,CAAgB,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB,EAA2BO,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAA3B;AACD;;AA3BoD","sourcesContent":["import React from 'react'\nimport dynamic from 'next/dynamic'\nimport ReactDOM from 'react-dom'\nimport NetworkedScene from './scene-networked'\nimport LocalScene from './scene-local'\n\n//Networking\nexport default class SceneRoot extends React.Component {\n  state = {\n    loggedIn: true // TODO: Add auth and redux store\n  };\n\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    if(this.state.loggedIn)\n    return (\n      <NetworkedScene />\n    )\n    else return (\n      <LocalScene /> \n    )\n  }\n\n  componentDidMount() {\n    console.log(\"component mounted\")\n    const Scene = dynamic((): any => {\n      \n    }, {\n      ssr: false\n    })\n    ReactDOM.render(<Scene />, document.querySelector('#sceneContainer'))\n  }\n}"]},"metadata":{},"sourceType":"module"}