(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tty'), require('util'), require('os'), require('fs'), require('url'), require('child_process'), require('http'), require('https'), require('events'), require('crypto'), require('net'), require('tls'), require('zlib'), require('path'), require('stream'), require('process'), require('assert'), require('string_decoder'), require('buffer'), require('querystring')) :
  typeof define === 'function' && define.amd ? define(['exports', 'tty', 'util', 'os', 'fs', 'url', 'child_process', 'http', 'https', 'events', 'crypto', 'net', 'tls', 'zlib', 'path', 'stream', 'process', 'assert', 'string_decoder', 'buffer', 'querystring'], factory) :
  (global = global || self, factory(global.ARMADA = {}, global.tty, global.util$2, global.os, global.fs, global.url$1, global.child_process, global.http, global.https, global.events, global.crypto, global.net, global.tls$1, global.zlib, global.path$3, global.stream$1, global.process$1, global.assert, global.string_decoder, global.buffer, global.querystring));
}(this, (function (exports, tty, util$2, os, fs, url$1, child_process, http, https, events, crypto, net, tls$1, zlib, path$3, stream$1, process$1, assert, string_decoder, buffer, querystring) { 'use strict';

  tty = tty && Object.prototype.hasOwnProperty.call(tty, 'default') ? tty['default'] : tty;
  util$2 = util$2 && Object.prototype.hasOwnProperty.call(util$2, 'default') ? util$2['default'] : util$2;
  os = os && Object.prototype.hasOwnProperty.call(os, 'default') ? os['default'] : os;
  fs = fs && Object.prototype.hasOwnProperty.call(fs, 'default') ? fs['default'] : fs;
  url$1 = url$1 && Object.prototype.hasOwnProperty.call(url$1, 'default') ? url$1['default'] : url$1;
  child_process = child_process && Object.prototype.hasOwnProperty.call(child_process, 'default') ? child_process['default'] : child_process;
  http = http && Object.prototype.hasOwnProperty.call(http, 'default') ? http['default'] : http;
  https = https && Object.prototype.hasOwnProperty.call(https, 'default') ? https['default'] : https;
  events = events && Object.prototype.hasOwnProperty.call(events, 'default') ? events['default'] : events;
  crypto = crypto && Object.prototype.hasOwnProperty.call(crypto, 'default') ? crypto['default'] : crypto;
  net = net && Object.prototype.hasOwnProperty.call(net, 'default') ? net['default'] : net;
  tls$1 = tls$1 && Object.prototype.hasOwnProperty.call(tls$1, 'default') ? tls$1['default'] : tls$1;
  zlib = zlib && Object.prototype.hasOwnProperty.call(zlib, 'default') ? zlib['default'] : zlib;
  path$3 = path$3 && Object.prototype.hasOwnProperty.call(path$3, 'default') ? path$3['default'] : path$3;
  stream$1 = stream$1 && Object.prototype.hasOwnProperty.call(stream$1, 'default') ? stream$1['default'] : stream$1;
  process$1 = process$1 && Object.prototype.hasOwnProperty.call(process$1, 'default') ? process$1['default'] : process$1;
  assert = assert && Object.prototype.hasOwnProperty.call(assert, 'default') ? assert['default'] : assert;
  string_decoder = string_decoder && Object.prototype.hasOwnProperty.call(string_decoder, 'default') ? string_decoder['default'] : string_decoder;
  buffer = buffer && Object.prototype.hasOwnProperty.call(buffer, 'default') ? buffer['default'] : buffer;
  querystring = querystring && Object.prototype.hasOwnProperty.call(querystring, 'default') ? querystring['default'] : querystring;

  /**
   * Return the name of a component
   * @param {Component} Component
   * @private
   */
  function getName(Component) {
    return Component.name;
  }

  /**
   * Get a key from a list of components
   * @param {Array(Component)} Components Array of components to generate the key
   * @private
   */
  function queryKey(Components) {
    var names = [];
    for (var n = 0; n < Components.length; n++) {
      var T = Components[n];
      if (typeof T === "object") {
        var operator = T.operator === "not" ? "!" : T.operator;
        names.push(operator + getName(T.Component));
      } else {
        names.push(getName(T));
      }
    }

    return names.sort().join("-");
  }

  // Detector for browser's "window"
  const hasWindow = typeof window !== "undefined";

  // performance.now() "polyfill"
  const now =
    hasWindow && typeof window.performance !== "undefined"
      ? performance.now.bind(performance)
      : Date.now.bind(Date);

  /**
   * @private
   * @class EventDispatcher
   */
  class EventDispatcher {
    constructor() {
      this._listeners = {};
      this.stats = {
        fired: 0,
        handled: 0
      };
    }

    /**
     * Add an event listener
     * @param {String} eventName Name of the event to listen
     * @param {Function} listener Callback to trigger when the event is fired
     */
    addEventListener(eventName, listener) {
      let listeners = this._listeners;
      if (listeners[eventName] === undefined) {
        listeners[eventName] = [];
      }

      if (listeners[eventName].indexOf(listener) === -1) {
        listeners[eventName].push(listener);
      }
    }

    /**
     * Check if an event listener is already added to the list of listeners
     * @param {String} eventName Name of the event to check
     * @param {Function} listener Callback for the specified event
     */
    hasEventListener(eventName, listener) {
      return (
        this._listeners[eventName] !== undefined &&
        this._listeners[eventName].indexOf(listener) !== -1
      );
    }

    /**
     * Remove an event listener
     * @param {String} eventName Name of the event to remove
     * @param {Function} listener Callback for the specified event
     */
    removeEventListener(eventName, listener) {
      var listenerArray = this._listeners[eventName];
      if (listenerArray !== undefined) {
        var index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }

    /**
     * Dispatch an event
     * @param {String} eventName Name of the event to dispatch
     * @param {Entity} entity (Optional) Entity to emit
     * @param {Component} component
     */
    dispatchEvent(eventName, entity, component) {
      this.stats.fired++;

      var listenerArray = this._listeners[eventName];
      if (listenerArray !== undefined) {
        var array = listenerArray.slice(0);

        for (var i = 0; i < array.length; i++) {
          array[i].call(this, entity, component);
        }
      }
    }

    /**
     * Reset stats counters
     */
    resetCounters() {
      this.stats.fired = this.stats.handled = 0;
    }
  }

  class Query {
    /**
     * @param {Array(Component)} Components List of types of components to query
     */
    constructor(Components, manager) {
      this.Components = [];
      this.NotComponents = [];

      Components.forEach(component => {
        if (typeof component === "object") {
          this.NotComponents.push(component.Component);
        } else {
          this.Components.push(component);
        }
      });

      if (this.Components.length === 0) {
        throw new Error("Can't create a query without components");
      }

      this.entities = [];

      this.eventDispatcher = new EventDispatcher();

      // This query is being used by a reactive system
      this.reactive = false;

      this.key = queryKey(Components);

      // Fill the query with the existing entities
      for (var i = 0; i < manager._entities.length; i++) {
        var entity = manager._entities[i];
        if (this.match(entity)) {
          // @todo ??? this.addEntity(entity); => preventing the event to be generated
          entity.queries.push(this);
          this.entities.push(entity);
        }
      }
    }

    /**
     * Add entity to this query
     * @param {Entity} entity
     */
    addEntity(entity) {
      entity.queries.push(this);
      this.entities.push(entity);

      this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);
    }

    /**
     * Remove entity from this query
     * @param {Entity} entity
     */
    removeEntity(entity) {
      let index = this.entities.indexOf(entity);
      if (~index) {
        this.entities.splice(index, 1);

        index = entity.queries.indexOf(this);
        entity.queries.splice(index, 1);

        this.eventDispatcher.dispatchEvent(
          Query.prototype.ENTITY_REMOVED,
          entity
        );
      }
    }

    match(entity) {
      return (
        entity.hasAllComponents(this.Components) &&
        !entity.hasAnyComponents(this.NotComponents)
      );
    }

    toJSON() {
      return {
        key: this.key,
        reactive: this.reactive,
        components: {
          included: this.Components.map(C => C.name),
          not: this.NotComponents.map(C => C.name)
        },
        numEntities: this.entities.length
      };
    }

    /**
     * Return stats for this query
     */
    stats() {
      return {
        numComponents: this.Components.length,
        numEntities: this.entities.length
      };
    }
  }

  Query.prototype.ENTITY_ADDED = "Query#ENTITY_ADDED";
  Query.prototype.ENTITY_REMOVED = "Query#ENTITY_REMOVED";
  Query.prototype.COMPONENT_CHANGED = "Query#COMPONENT_CHANGED";

  class Component {
    constructor(props) {
      if (props !== false) {
        const schema = this.constructor.schema;

        for (const key in schema) {
          if (props && props.hasOwnProperty(key)) {
            this[key] = props[key];
          } else {
            const schemaProp = schema[key];
            if (schemaProp.hasOwnProperty("default")) {
              this[key] = schemaProp.type.clone(schemaProp.default);
            } else {
              const type = schemaProp.type;
              this[key] = type.clone(type.default);
            }
          }
        }
      }

      this._pool = null;
    }

    copy(source) {
      const schema = this.constructor.schema;

      for (const key in schema) {
        const prop = schema[key];

        if (source.hasOwnProperty(key)) {
          this[key] = prop.type.copy(source[key], this[key]);
        }
      }

      return this;
    }

    clone() {
      return new this.constructor().copy(this);
    }

    reset() {
      const schema = this.constructor.schema;

      for (const key in schema) {
        const schemaProp = schema[key];

        if (schemaProp.hasOwnProperty("default")) {
          this[key] = schemaProp.type.copy(schemaProp.default, this[key]);
        } else {
          const type = schemaProp.type;
          this[key] = type.copy(type.default, this[key]);
        }
      }
    }

    dispose() {
      if (this._pool) {
        this._pool.release(this);
      }
    }

    getName() {
      return this.constructor.getName();
    }
  }

  Component.schema = {};
  Component.isComponent = true;
  Component.getName = function() {
    return this.displayName || this.name;
  };

  class System {
    canExecute() {
      if (this._mandatoryQueries.length === 0) return true;

      for (let i = 0; i < this._mandatoryQueries.length; i++) {
        var query = this._mandatoryQueries[i];
        if (query.entities.length === 0) {
          return false;
        }
      }

      return true;
    }

    getName() {
      return this.constructor.getName();
    }

    constructor(world, attributes) {
      this.world = world;
      this.enabled = true;

      // @todo Better naming :)
      this._queries = {};
      this.queries = {};

      this.priority = 0;

      // Used for stats
      this.executeTime = 0;

      if (attributes && attributes.priority) {
        this.priority = attributes.priority;
      }

      this._mandatoryQueries = [];

      this.initialized = true;

      if (this.constructor.queries) {
        for (var queryName in this.constructor.queries) {
          var queryConfig = this.constructor.queries[queryName];
          var Components = queryConfig.components;
          if (!Components || Components.length === 0) {
            throw new Error("'components' attribute can't be empty in a query");
          }
          var query = this.world.entityManager.queryComponents(Components);
          this._queries[queryName] = query;
          if (queryConfig.mandatory === true) {
            this._mandatoryQueries.push(query);
          }
          this.queries[queryName] = {
            results: query.entities
          };

          // Reactive configuration added/removed/changed
          var validEvents = ["added", "removed", "changed"];

          const eventMapping = {
            added: Query.prototype.ENTITY_ADDED,
            removed: Query.prototype.ENTITY_REMOVED,
            changed: Query.prototype.COMPONENT_CHANGED // Query.prototype.ENTITY_CHANGED
          };

          if (queryConfig.listen) {
            validEvents.forEach(eventName => {
              if (!this.execute) {
                console.warn(
                  `System '${this.getName()}' has defined listen events (${validEvents.join(
                  ", "
                )}) for query '${queryName}' but it does not implement the 'execute' method.`
                );
              }

              // Is the event enabled on this system's query?
              if (queryConfig.listen[eventName]) {
                let event = queryConfig.listen[eventName];

                if (eventName === "changed") {
                  query.reactive = true;
                  if (event === true) {
                    // Any change on the entity from the components in the query
                    let eventList = (this.queries[queryName][eventName] = []);
                    query.eventDispatcher.addEventListener(
                      Query.prototype.COMPONENT_CHANGED,
                      entity => {
                        // Avoid duplicates
                        if (eventList.indexOf(entity) === -1) {
                          eventList.push(entity);
                        }
                      }
                    );
                  } else if (Array.isArray(event)) {
                    let eventList = (this.queries[queryName][eventName] = []);
                    query.eventDispatcher.addEventListener(
                      Query.prototype.COMPONENT_CHANGED,
                      (entity, changedComponent) => {
                        // Avoid duplicates
                        if (
                          event.indexOf(changedComponent.constructor) !== -1 &&
                          eventList.indexOf(entity) === -1
                        ) {
                          eventList.push(entity);
                        }
                      }
                    );
                  }
                } else {
                  let eventList = (this.queries[queryName][eventName] = []);

                  query.eventDispatcher.addEventListener(
                    eventMapping[eventName],
                    entity => {
                      // @fixme overhead?
                      if (eventList.indexOf(entity) === -1)
                        eventList.push(entity);
                    }
                  );
                }
              }
            });
          }
        }
      }
    }

    stop() {
      this.executeTime = 0;
      this.enabled = false;
    }

    play() {
      this.enabled = true;
    }

    // @question rename to clear queues?
    clearEvents() {
      for (let queryName in this.queries) {
        var query = this.queries[queryName];
        if (query.added) {
          query.added.length = 0;
        }
        if (query.removed) {
          query.removed.length = 0;
        }
        if (query.changed) {
          if (Array.isArray(query.changed)) {
            query.changed.length = 0;
          } else {
            for (let name in query.changed) {
              query.changed[name].length = 0;
            }
          }
        }
      }
    }

    toJSON() {
      var json = {
        name: this.getName(),
        enabled: this.enabled,
        executeTime: this.executeTime,
        priority: this.priority,
        queries: {}
      };

      if (this.constructor.queries) {
        var queries = this.constructor.queries;
        for (let queryName in queries) {
          let query = this.queries[queryName];
          let queryDefinition = queries[queryName];
          let jsonQuery = (json.queries[queryName] = {
            key: this._queries[queryName].key
          });

          jsonQuery.mandatory = queryDefinition.mandatory === true;
          jsonQuery.reactive =
            queryDefinition.listen &&
            (queryDefinition.listen.added === true ||
              queryDefinition.listen.removed === true ||
              queryDefinition.listen.changed === true ||
              Array.isArray(queryDefinition.listen.changed));

          if (jsonQuery.reactive) {
            jsonQuery.listen = {};

            const methods = ["added", "removed", "changed"];
            methods.forEach(method => {
              if (query[method]) {
                jsonQuery.listen[method] = {
                  entities: query[method].length
                };
              }
            });
          }
        }
      }

      return json;
    }
  }

  System.isSystem = true;
  System.getName = function() {
    return this.displayName || this.name;
  };

  const copyValue = src => src;

  const cloneValue = src => src;

  const copyArray = (src, dest) => {
    if (!src) {
      return src;
    }

    if (!dest) {
      return src.slice();
    }

    dest.length = 0;

    for (let i = 0; i < src.length; i++) {
      dest.push(src[i]);
    }

    return dest;
  };

  const cloneArray = src => src && src.slice();

  const copyJSON = src => JSON.parse(JSON.stringify(src));

  const cloneJSON = src => JSON.parse(JSON.stringify(src));

  function createType(typeDefinition) {
    var mandatoryProperties = ["name", "default", "copy", "clone"];

    var undefinedProperties = mandatoryProperties.filter(p => {
      return !typeDefinition.hasOwnProperty(p);
    });

    if (undefinedProperties.length > 0) {
      throw new Error(
        `createType expects a type definition with the following properties: ${undefinedProperties.join(
        ", "
      )}`
      );
    }

    typeDefinition.isType = true;

    return typeDefinition;
  }

  /**
   * Standard types
   */
  const Types = {
    Number: createType({
      name: "Number",
      default: 0,
      copy: copyValue,
      clone: cloneValue
    }),

    Boolean: createType({
      name: "Boolean",
      default: false,
      copy: copyValue,
      clone: cloneValue
    }),

    String: createType({
      name: "String",
      default: "",
      copy: copyValue,
      clone: cloneValue
    }),

    Array: createType({
      name: "Array",
      default: [],
      copy: copyArray,
      clone: cloneArray
    }),

    Ref: createType({
      name: "Ref",
      default: undefined,
      copy: copyValue,
      clone: cloneValue
    }),

    JSON: createType({
      name: "JSON",
      default: null,
      copy: copyJSON,
      clone: cloneJSON
    })
  };

  function generateId(length) {
    var result = "";
    var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }

  function injectScript(src, onLoad) {
    var script = document.createElement("script");
    // @todo Use link to the ecsy-devtools repo?
    script.src = src;
    script.onload = onLoad;
    (document.head || document.documentElement).appendChild(script);
  }

  /* global Peer */

  function hookConsoleAndErrors(connection) {
    var wrapFunctions = ["error", "warning", "log"];
    wrapFunctions.forEach(key => {
      if (typeof console[key] === "function") {
        var fn = console[key].bind(console);
        console[key] = (...args) => {
          connection.send({
            method: "console",
            type: key,
            args: JSON.stringify(args)
          });
          return fn.apply(null, args);
        };
      }
    });

    window.addEventListener("error", error => {
      connection.send({
        method: "error",
        error: JSON.stringify({
          message: error.error.message,
          stack: error.error.stack
        })
      });
    });
  }

  function includeRemoteIdHTML(remoteId) {
    let infoDiv = document.createElement("div");
    infoDiv.style.cssText = `
    align-items: center;
    background-color: #333;
    color: #aaa;
    display:flex;
    font-family: Arial;
    font-size: 1.1em;
    height: 40px;
    justify-content: center;
    left: 0;
    opacity: 0.9;
    position: absolute;
    right: 0;
    text-align: center;
    top: 0;
  `;

    infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style="color: #fff">${remoteId}</b>&nbsp;<button onClick="generateNewCode()">Generate new code</button>`;
    document.body.appendChild(infoDiv);

    return infoDiv;
  }

  function enableRemoteDevtools(remoteId) {
    if (!hasWindow) {
      console.warn("Remote devtools not available outside the browser");
      return;
    }

    window.generateNewCode = () => {
      window.localStorage.clear();
      remoteId = generateId(6);
      window.localStorage.setItem("ecsyRemoteId", remoteId);
      window.location.reload(false);
    };

    remoteId = remoteId || window.localStorage.getItem("ecsyRemoteId");
    if (!remoteId) {
      remoteId = generateId(6);
      window.localStorage.setItem("ecsyRemoteId", remoteId);
    }

    let infoDiv = includeRemoteIdHTML(remoteId);

    window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;
    window.__ECSY_REMOTE_DEVTOOLS = {};

    let Version = "";

    // This is used to collect the worlds created before the communication is being established
    let worldsBeforeLoading = [];
    let onWorldCreated = e => {
      var world = e.detail.world;
      Version = e.detail.version;
      worldsBeforeLoading.push(world);
    };
    window.addEventListener("ecsy-world-created", onWorldCreated);

    let onLoaded = () => {
      var peer = new Peer(remoteId);
      peer.on("open", (/* id */) => {
        peer.on("connection", connection => {
          window.__ECSY_REMOTE_DEVTOOLS.connection = connection;
          connection.on("open", function() {
            // infoDiv.style.visibility = "hidden";
            infoDiv.innerHTML = "Connected";

            // Receive messages
            connection.on("data", function(data) {
              if (data.type === "init") {
                var script = document.createElement("script");
                script.setAttribute("type", "text/javascript");
                script.onload = () => {
                  script.parentNode.removeChild(script);

                  // Once the script is injected we don't need to listen
                  window.removeEventListener(
                    "ecsy-world-created",
                    onWorldCreated
                  );
                  worldsBeforeLoading.forEach(world => {
                    var event = new CustomEvent("ecsy-world-created", {
                      detail: { world: world, version: Version }
                    });
                    window.dispatchEvent(event);
                  });
                };
                script.innerHTML = data.script;
                (document.head || document.documentElement).appendChild(script);
                script.onload();

                hookConsoleAndErrors(connection);
              } else if (data.type === "executeScript") {
                let value = eval(data.script);
                if (data.returnEval) {
                  connection.send({
                    method: "evalReturn",
                    value: value
                  });
                }
              }
            });
          });
        });
      });
    };

    // Inject PeerJS script
    injectScript(
      "https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js",
      onLoaded
    );
  }

  if (hasWindow) {
    const urlParams = new URLSearchParams(window.location.search);

    // @todo Provide a way to disable it if needed
    if (urlParams.has("enable-remote-devtools")) {
      enableRemoteDevtools();
    }
  }

  // Constructs a component with a map and data values
  // Data contains a map() of arbitrary data
  class BehaviorComponent extends Component {
      constructor() {
          super(false);
          this.data = new Map();
          this.data = new Map();
      }
      copy(src) {
          this.map = src.map;
          this.data = new Map(src.data);
          return this;
      }
      reset() {
          this.data.clear();
      }
  }

  // Default component, holds data about what behaviors our character has.
  const defaultJumpValues = {
      canJump: true,
      t: 0,
      height: 1.0,
      duration: 1
  };
  class Actor extends Component {
      constructor() {
          super();
          this.jump = defaultJumpValues;
          this.reset();
      }
      copy(src) {
          this.rotationSpeedX = src.rotationSpeedX;
          this.rotationSpeedY = src.rotationSpeedY;
          this.maxSpeed = src.maxSpeed;
          this.accelerationSpeed = src.accelerationSpeed;
          this.jump = src.jump;
          return this;
      }
      reset() {
          this.rotationSpeedX = 1;
          this.rotationSpeedY = 1;
          this.maxSpeed = 10;
          this.accelerationSpeed = 1;
          this.jump = defaultJumpValues;
      }
  }

  const vector3Identity = [0, 0, 0];
  const vector3ScaleIdentity = [1, 1, 1];
  const quaternionIdentity = [0, 0, 0, 1];
  class TransformComponent extends Component {
      constructor() {
          super();
          this.position = vector3Identity;
          this.rotation = quaternionIdentity;
          this.scale = vector3ScaleIdentity;
          this.velocity = vector3Identity;
          this.position = vector3Identity;
          this.rotation = quaternionIdentity;
          this.scale = vector3ScaleIdentity;
          this.velocity = vector3Identity;
      }
      copy(src) {
          this.position = src.position;
          this.rotation = src.rotation;
          this.scale = src.scale;
          this.velocity = src.velocity;
          return this;
      }
      reset() {
          this.position = vector3Identity;
          this.rotation = quaternionIdentity;
          this.scale = vector3ScaleIdentity;
          this.velocity = vector3Identity;
      }
  }

  /**
   * Common utilities
   * @module glMatrix
   */
  // Configuration Constants
  var EPSILON = 0.000001;
  var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
  if (!Math.hypot) Math.hypot = function () {
    var y = 0,
        i = arguments.length;

    while (i--) {
      y += arguments[i] * arguments[i];
    }

    return Math.sqrt(y);
  };

  /**
   * 3x3 Matrix
   * @module mat3
   */

  /**
   * Creates a new identity mat3
   *
   * @returns {mat3} a new 3x3 matrix
   */

  function create() {
    var out = new ARRAY_TYPE(9);

    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }

    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }

  /**
   * 3 Dimensional Vector
   * @module vec3
   */

  /**
   * Creates a new, empty vec3
   *
   * @returns {vec3} a new 3D vector
   */

  function create$1() {
    var out = new ARRAY_TYPE(3);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }

    return out;
  }
  /**
   * Calculates the length of a vec3
   *
   * @param {ReadonlyVec3} a vector to calculate length of
   * @returns {Number} length of a
   */

  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  /**
   * Creates a new vec3 initialized with the given values
   *
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} a new 3D vector
   */

  function fromValues(x, y, z) {
    var out = new ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  /**
   * Adds two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {vec3} out
   */

  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  /**
   * Scales a vec3 by a scalar number
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the vector to scale
   * @param {Number} b amount to scale the vector by
   * @returns {vec3} out
   */

  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  /**
   * Normalize a vec3
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a vector to normalize
   * @returns {vec3} out
   */

  function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len = x * x + y * y + z * z;

    if (len > 0) {
      //TODO: evaluate use of glm_invsqrt here?
      len = 1 / Math.sqrt(len);
    }

    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
    return out;
  }
  /**
   * Calculates the dot product of two vec3's
   *
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {Number} dot product of a and b
   */

  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  /**
   * Computes the cross product of two vec3's
   *
   * @param {vec3} out the receiving vector
   * @param {ReadonlyVec3} a the first operand
   * @param {ReadonlyVec3} b the second operand
   * @returns {vec3} out
   */

  function cross(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    var bx = b[0],
        by = b[1],
        bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  /**
   * Alias for {@link vec3.length}
   * @function
   */

  var len = length;
  /**
   * Perform some operation over an array of vec3s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */

  var forEach = function () {
    var vec = create$1();
    return function (a, stride, offset, count, fn, arg) {
      var i, l;

      if (!stride) {
        stride = 3;
      }

      if (!offset) {
        offset = 0;
      }

      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }

      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }

      return a;
    };
  }();

  /**
   * 4 Dimensional Vector
   * @module vec4
   */

  /**
   * Creates a new, empty vec4
   *
   * @returns {vec4} a new 4D vector
   */

  function create$2() {
    var out = new ARRAY_TYPE(4);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }

    return out;
  }
  /**
   * Set the components of a vec4 to the given values
   *
   * @param {vec4} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {vec4} out
   */

  function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  /**
   * Normalize a vec4
   *
   * @param {vec4} out the receiving vector
   * @param {ReadonlyVec4} a vector to normalize
   * @returns {vec4} out
   */

  function normalize$1(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len = x * x + y * y + z * z + w * w;

    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }

    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
    return out;
  }
  /**
   * Perform some operation over an array of vec4s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */

  var forEach$1 = function () {
    var vec = create$2();
    return function (a, stride, offset, count, fn, arg) {
      var i, l;

      if (!stride) {
        stride = 4;
      }

      if (!offset) {
        offset = 0;
      }

      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }

      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }

      return a;
    };
  }();

  /**
   * Quaternion
   * @module quat
   */

  /**
   * Creates a new identity quat
   *
   * @returns {quat} a new quaternion
   */

  function create$3() {
    var out = new ARRAY_TYPE(4);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }

    out[3] = 1;
    return out;
  }
  /**
   * Sets a quat from the given angle and rotation axis,
   * then returns it.
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyVec3} axis the axis around which to rotate
   * @param {Number} rad the angle in radians
   * @returns {quat} out
   **/

  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  /**
   * Multiplies two quat's
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @returns {quat} out
   */

  function multiply(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    var bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  /**
   * Performs a spherical linear interpolation between two quat
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
   * @returns {quat} out
   */

  function slerp(out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    var bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    var omega, cosom, sinom, scale0, scale1; // calc cosine

    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

    if (cosom < 0.0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    } // calculate coefficients


    if (1.0 - cosom > EPSILON) {
      // standard case (slerp)
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1.0 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      // "from" and "to" quaternions are very close
      //  ... so we can do a linear interpolation
      scale0 = 1.0 - t;
      scale1 = t;
    } // calculate final values


    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  /**
   * Creates a quaternion from the given 3x3 rotation matrix.
   *
   * NOTE: The resultant quaternion is not normalized, so you should be sure
   * to renormalize the quaternion yourself where necessary.
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyMat3} m rotation matrix
   * @returns {quat} out
   * @function
   */

  function fromMat3(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if (fTrace > 0.0) {
      // |w| > 1/2, may as well choose w > 1/2
      fRoot = Math.sqrt(fTrace + 1.0); // 2w

      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot; // 1/(4w)

      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      // |w| <= 1/2
      var i = 0;
      if (m[4] > m[0]) i = 1;
      if (m[8] > m[i * 3 + i]) i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }

    return out;
  }
  /**
   * Creates a quaternion from the given euler angle x, y, z.
   *
   * @param {quat} out the receiving quaternion
   * @param {x} Angle to rotate around X axis in degrees.
   * @param {y} Angle to rotate around Y axis in degrees.
   * @param {z} Angle to rotate around Z axis in degrees.
   * @returns {quat} out
   * @function
   */

  function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180.0;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  /**
   * Set the components of a quat to the given values
   *
   * @param {quat} out the receiving quaternion
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @param {Number} w W component
   * @returns {quat} out
   * @function
   */

  var set$1 = set;
  /**
   * Alias for {@link quat.multiply}
   * @function
   */

  var mul = multiply;
  /**
   * Normalize a quat
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a quaternion to normalize
   * @returns {quat} out
   * @function
   */

  var normalize$2 = normalize$1;
  /**
   * Sets a quaternion to represent the shortest rotation from one
   * vector to another.
   *
   * Both vectors are assumed to be unit length.
   *
   * @param {quat} out the receiving quaternion.
   * @param {ReadonlyVec3} a the initial vector
   * @param {ReadonlyVec3} b the destination vector
   * @returns {quat} out
   */

  var rotationTo = function () {
    var tmpvec3 = create$1();
    var xUnitVec3 = fromValues(1, 0, 0);
    var yUnitVec3 = fromValues(0, 1, 0);
    return function (out, a, b) {
      var dot$1 = dot(a, b);

      if (dot$1 < -0.999999) {
        cross(tmpvec3, xUnitVec3, a);
        if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
        normalize(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot$1 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot$1;
        return normalize$2(out, out);
      }
    };
  }();
  /**
   * Performs a spherical linear interpolation with two control points
   *
   * @param {quat} out the receiving quaternion
   * @param {ReadonlyQuat} a the first operand
   * @param {ReadonlyQuat} b the second operand
   * @param {ReadonlyQuat} c the third operand
   * @param {ReadonlyQuat} d the fourth operand
   * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
   * @returns {quat} out
   */

  var sqlerp = function () {
    var temp1 = create$3();
    var temp2 = create$3();
    return function (out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }();
  /**
   * Sets the specified quaternion with values corresponding to the given
   * axes. Each axis is a vec3 and is expected to be unit length and
   * perpendicular to all other specified axes.
   *
   * @param {ReadonlyVec3} view  the vector representing the viewing direction
   * @param {ReadonlyVec3} right the vector representing the local "right" direction
   * @param {ReadonlyVec3} up    the vector representing the local "up" direction
   * @returns {quat} out
   */

  var setAxes = function () {
    var matr = create();
    return function (out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize$2(out, fromMat3(out, matr));
    };
  }();

  let actor;
  let transform;
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const decelerate = (entity, delta) => {
      // get actor comonent
      actor = entity.getComponent(Actor);
      // get the transform
      transform = entity.getComponent(TransformComponent);
      // if magnitude of velocity is more than .001
      if (length(transform.velocity) > 0.001) {
          // add to velocity by adding state value * acceleration * delta
          transform.velocity[0] *= Math.max(1.0 - actor.accelerationSpeed * delta, 0);
          // transform.velocity[1] *= Math.max(1.0 - actor.accelerationSpeed * delta, 0)
          transform.velocity[2] *= Math.max(1.0 - actor.accelerationSpeed * delta, 0);
          console.log(transform.velocity[0] + " | " + transform.velocity[1] + " | " + transform.velocity[2]);
      }
      // clamp velocity to max value
  };

  class State extends BehaviorComponent {
  }

  const BinaryValue = {
      ON: 1,
      OFF: 0
  };

  (function (StateType) {
      StateType[StateType["DISCRETE"] = 0] = "DISCRETE";
      StateType[StateType["ONED"] = 1] = "ONED";
      StateType[StateType["TWOD"] = 2] = "TWOD";
      StateType[StateType["THREED"] = 3] = "THREED";
  })(exports.StateType || (exports.StateType = {}));

  var LifecycleValue;
  (function (LifecycleValue) {
      LifecycleValue[LifecycleValue["STARTED"] = 0] = "STARTED";
      LifecycleValue[LifecycleValue["CONTINUED"] = 1] = "CONTINUED";
      LifecycleValue[LifecycleValue["ENDED"] = 2] = "ENDED";
  })(LifecycleValue || (LifecycleValue = {}));
  var LifecycleValue$1 = LifecycleValue;

  let stateComponent;
  let stateGroup;
  const toggleState = (entity, args) => {
      if (args.value === BinaryValue.ON)
          addState(entity, args);
      else
          removeState(entity, args);
  };
  const addState = (entity, args) => {
      stateComponent = entity.getComponent(State);
      if (stateComponent.data.has(args.state))
          return;
      console.log("Adding state: " + args.state);
      stateComponent.data.set(args.state, {
          state: args.state,
          type: exports.StateType.DISCRETE,
          lifecycleState: LifecycleValue$1.STARTED,
          group: stateComponent.map.states[args.state].group
      });
      stateGroup = stateComponent.map.states[args.state].group;
      // If state group is set to exclusive (XOR) then check if other states from state group are on
      if (stateComponent.map.groups[stateGroup].exclusive) {
          stateComponent.map.groups[stateGroup].states.forEach(state => {
              if (state === args.state || !stateComponent.data.has(state))
                  return;
              stateComponent.data.delete(state);
              console.log("Removed mutex state " + state);
          });
      }
  };
  const removeState = (entity, args) => {
      // check state group
      stateComponent = entity.getComponent(State);
      if (stateComponent.data.has(args.state)) {
          stateComponent.data.delete(args.state);
          console.log("Removed component from " + entity.id);
      }
  };
  const hasState = (entity, args) => {
      // check state group
      stateComponent = entity.getComponent(State);
      if (stateComponent.data.has(args.state))
          return true;
      return false;
  };

  const DefaultStateTypes = {
      // Main States
      IDLE: 0,
      MOVING: 1,
      JUMPING: 2,
      FALLING: 3,
      // Modifier States
      CROUCHING: 4,
      WALKING: 5,
      SPRINTING: 6,
      INTERACTING: 7,
      // Moving substates
      MOVING_FORWARD: 8,
      MOVING_BACKWARD: 9,
      MOVING_LEFT: 10,
      MOVING_RIGHT: 11
  };

  let actor$1;
  let transform$1;
  const jump = (entity) => {
      console.log("Jump!");
      addState(entity, { state: DefaultStateTypes.JUMPING });
      actor$1 = entity.getMutableComponent(Actor);
      actor$1.jump.t = 0;
  };
  const jumping = (entity, args, delta) => {
      transform$1 = entity.getComponent(TransformComponent);
      actor$1 = entity.getMutableComponent(Actor);
      actor$1.jump.t += delta;
      if (actor$1.jump.t < actor$1.jump.duration) {
          transform$1.velocity[1] = transform$1.velocity[1] + Math.cos((actor$1.jump.t / actor$1.jump.duration) * Math.PI);
          console.log("Jumping: " + actor$1.jump.t);
          return;
      }
      removeState(entity, { state: DefaultStateTypes.JUMPING });
      console.log("Jumped");
  };

  // Input inherits from BehaviorComponent, which adds .map and .data
  class Input extends BehaviorComponent {
  }
  // Set schema to itself plus gamepad data
  Input.schema = Object.assign(Object.assign({}, Input.schema), { gamepadConnected: { type: Types.Boolean, default: false }, gamepadThreshold: { type: Types.Number, default: 0.1 }, gamepadButtons: { type: Types.Array, default: [] }, gamepadInput: { type: Types.Array, default: [] } });

  // Button -- discrete states of ON and OFF, like a button
  (function (InputType) {
      InputType[InputType["BUTTON"] = 0] = "BUTTON";
      InputType[InputType["ONED"] = 1] = "ONED";
      InputType[InputType["TWOD"] = 2] = "TWOD";
      InputType[InputType["THREED"] = 3] = "THREED";
      InputType[InputType["SIXDOF"] = 4] = "SIXDOF";
  })(exports.InputType || (exports.InputType = {}));

  let input;
  let actor$2;
  let transform$2;
  let inputValue; // Could be a (small) source of garbage
  let inputType;
  const movementModifer = 1.0; // TODO: Add sprinting and crouching
  let outputSpeed;
  const move = (entity, args, delta) => {
      input = entity.getComponent(Input);
      actor$2 = entity.getComponent(Actor);
      transform$2 = entity.getComponent(TransformComponent);
      // movementModifer = entity.hasComponent(Crouching) ? 0.5 : entity.hasComponent(Sprinting) ? 1.5 : 1.0
      outputSpeed = actor$2.accelerationSpeed * delta * movementModifer;
      if (inputType === exports.InputType.TWOD) {
          inputValue = input.data.get(args.input).value;
          transform$2.velocity[0] += Math.min(inputValue[0] + inputValue[0] * outputSpeed, actor$2.maxSpeed);
          transform$2.velocity[2] += Math.min(inputValue[1] + inputValue[1] * outputSpeed, actor$2.maxSpeed);
      }
      if (inputType === exports.InputType.THREED) {
          inputValue = input.data.get(args.input).value;
          transform$2.velocity[0] += Math.min(inputValue[0] + inputValue[0] * outputSpeed, actor$2.maxSpeed);
          transform$2.velocity[1] += Math.min(inputValue[1] + inputValue[1] * outputSpeed, actor$2.maxSpeed);
          transform$2.velocity[2] += Math.min(inputValue[2] + inputValue[2] * outputSpeed, actor$2.maxSpeed);
      }
      else {
          console.error("Movement is only available for 2D and 3D inputs");
      }
      console.log("Moved");
  };

  let actor$3;
  let transform$3;
  let inputValue$1;
  const q = [0, 0, 0, 0];
  const qOut = [0, 0, 0, 0];
  let inputComponent;
  const rotateAround = (entity, args, delta) => {
      inputComponent = entity.getComponent(Input);
      actor$3 = entity.getComponent(Actor);
      transform$3 = entity.getComponent(TransformComponent);
      if (!inputComponent.data.has(args.input)) {
          inputComponent.data.set(args.input, { type: args.inputType, value: create$1() });
      }
      set$1(qOut, transform$3.rotation[0], transform$3.rotation[1], transform$3.rotation[2], transform$3.rotation[3]);
      if (args.inputType === exports.InputType.TWOD) {
          if (inputComponent.data.has(args.input)) {
              inputValue$1 = inputComponent.data.get(args.input).value;
              fromEuler(q, inputValue$1[1] * actor$3.rotationSpeedY * delta, inputValue$1[0] * actor$3.rotationSpeedX * delta, 0);
          }
      }
      else if (args.inputType === exports.InputType.THREED) {
          inputValue$1 = inputComponent.data.get(args.input).value;
          fromEuler(q, inputValue$1[0] * actor$3.rotationSpeedY * delta, inputValue$1[1] * actor$3.rotationSpeedX * delta, inputValue$1[2] * actor$3.rotationSpeedZ * delta);
      }
      else {
          console.error("Rotation is only available for 2D and 3D inputs");
      }
      mul(qOut, q, qOut);
      transform$3.rotation = [qOut[0], qOut[1], qOut[2], qOut[3]];
      console.log("rotated ");
  };

  const _output = [0, 0, 0];
  let transform$4;
  const updatePosition = (entity, delta) => {
      transform$4 = entity.getComponent(TransformComponent);
      if (length(transform$4.velocity) > 0.001)
          add(transform$4.position, transform$4.position, scale(_output, transform$4.velocity, delta));
      console.log("updatePosition");
  };

  (function (Thumbsticks) {
      Thumbsticks[Thumbsticks["Left"] = 0] = "Left";
      Thumbsticks[Thumbsticks["Right"] = 1] = "Right";
  })(exports.Thumbsticks || (exports.Thumbsticks = {}));

  // Local reference to input component
  let input$1;
  const _value = [0, 0];
  // System behavior called whenever the mouse pressed
  const handleMouseMovement = (entity, args) => {
      input$1 = entity.getComponent(Input);
      _value[0] = (args.event.clientX / window.innerWidth) * 2 - 1;
      _value[1] = (args.event.clientY / window.innerHeight) * -2 + 1;
      // Set type to TWOD (two-dimensional axis) and value to a normalized -1, 1 on X and Y
      input$1.data.set(input$1.map.mouseInputMap.axes["mousePosition"], {
          type: exports.InputType.TWOD,
          value: _value
      });
  };
  // System behavior called when a mouse button is fired
  const handleMouseButton = (entity, args) => {
      // Get immutable reference to Input and check if the button is defined -- ignore undefined buttons
      input$1 = entity.getComponent(Input);
      if (input$1.map.mouseInputMap.buttons[args.event.button] === undefined)
          return; // Set type to BUTTON (up/down discrete state) and value to up or down, as called by the DOM mouse events
      if (args.value === BinaryValue.ON) {
          console.log("Mouse button down: " + args.event.button);
          input$1.data.set(input$1.map.mouseInputMap.buttons[args.event.button], {
              type: exports.InputType.BUTTON,
              value: args.value
          });
      }
      else {
          console.log("Mouse button up" + args.event.button);
          input$1.data.delete(input$1.map.mouseInputMap.buttons[args.event.button]);
      }
  };
  // System behavior called when a keyboard key is pressed
  function handleKey(entity, args) {
      // Get immutable reference to Input and check if the button is defined -- ignore undefined keys
      input$1 = entity.getComponent(Input);
      if (input$1.map.keyboardInputMap[args.event.key] === undefined)
          return;
      // If the key is in the map but it's in the same state as now, let's skip it (debounce)
      if (input$1.data.has(input$1.map.keyboardInputMap[args.event.key]) && input$1.data.get(input$1.map.keyboardInputMap[args.event.key]).value === args.value)
          return;
      // Set type to BUTTON (up/down discrete state) and value to up or down, depending on what the value is set to
      if (args.value === BinaryValue.ON) {
          console.log("Key down: " + args.event.key);
          input$1.data.set(input$1.map.keyboardInputMap[args.event.key], {
              type: exports.InputType.BUTTON,
              value: args.value
          });
      }
      else {
          console.log("Key up:" + args.event.key);
          input$1.data.delete(input$1.map.mouseInputMap.buttons[args.event.key]);
      }
  }

  /**
   *
   * @param value -1 to 1
   * @param threshold 0 to 1
   */
  function applyThreshold(value, threshold) {
      if (threshold >= 1) {
          return 0;
      }
      if (value < threshold && value > -threshold) {
          return 0;
      }
      return (Math.sign(value) * (Math.abs(value) - threshold)) / (1 - threshold);
  }

  const inputPerGamepad = 2;
  let input$2;
  let gamepads;
  let input0;
  let input1;
  let gamepad;
  let inputBase;
  let x;
  let y;
  let prevLeftX;
  let prevLeftY;
  let _index; // temp var for iterator loops
  // System behavior to handle gamepad input
  const handleGamepads = (entity) => {
      if (!input$2.gamepadConnected)
          return;
      // Get an immutable reference to input
      input$2 = entity.getComponent(Input);
      // Get gamepads from the DOM
      gamepads = navigator.getGamepads();
      // Loop over connected gamepads
      for (_index = 0; _index < gamepads.length; _index++) {
          // If there's no gamepad at this index, skip
          if (!gamepads[_index])
              return;
          // Hold reference to this gamepad
          gamepad = gamepads[_index];
          // If the gamepad has analog inputs (dpads that aren't up UP/DOWN/L/R but have -1 to 1 values for X and Y)
          if (gamepad.axes) {
              input0 = inputPerGamepad * _index;
              input1 = inputPerGamepad * _index + 1;
              // GamePad 0 LStick XY
              if (input$2.map.eventBindings.input[input0] && gamepad.axes.length >= inputPerGamepad)
                  handleGamepadAxis(entity, { gamepad: gamepad, inputIndex: 0, mappedInputValue: input$2.map.gamepadInputMap.axes[input0] });
              // GamePad 1 LStick XY
              if (input$2.map.gamepadInputMap.axes[input1] && gamepad.axes.length >= inputPerGamepad * 2)
                  handleGamepadAxis(entity, { gamepad, inputIndex: 1, mappedInputValue: input$2.map.gamepadInputMap.axes[input1] });
          }
          // If the gamepad doesn't have buttons, or the input isn't mapped, return
          if (!gamepad.buttons || !input$2.map.gamepadInputMap.axes)
              return;
          // Otherwise, loop through gamepad buttons
          for (_index = 0; _index < gamepad.buttons.length; _index++) {
              handleGamepadButton(entity, { gamepad, index: _index, mappedInputValue: input$2.map.gamepadInputMap.axes[input1] });
          }
      }
  };
  const handleGamepadButton = (entity, args) => {
      // Get mutable component reference
      input$2 = entity.getMutableComponent(Input);
      // Make sure button is in the map
      if (typeof input$2.map.gamepadInputMap.axes[args.index] === "undefined" ||
          gamepad.buttons[args.index].touched === (input$2.gamepadButtons[args.index] === BinaryValue.ON))
          return;
      // Set input data
      input$2.data.set(input$2.map.gamepadInputMap.axes[args.index], {
          type: exports.InputType.BUTTON,
          value: gamepad.buttons[args.index].touched ? BinaryValue.ON : BinaryValue.OFF
      });
      input$2.gamepadButtons[args.index] = gamepad.buttons[args.index].touched ? 1 : 0;
  };
  const handleGamepadAxis = (entity, args) => {
      // get immutable component reference
      input$2 = entity.getComponent(Input);
      inputBase = args.inputIndex * 2;
      x = applyThreshold(gamepad.axes[inputBase], input$2.gamepadThreshold);
      y = applyThreshold(gamepad.axes[inputBase + 1], input$2.gamepadThreshold);
      prevLeftX = input$2.gamepadInput[inputBase];
      prevLeftY = input$2.gamepadInput[inputBase + 1];
      // Axis has changed, so get mutable reference to Input and set data
      if (x !== prevLeftX || y !== prevLeftY) {
          entity.getMutableComponent(Input).data.set(args.mappedInputValue, {
              type: exports.InputType.TWOD,
              value: [x, y]
          });
          input$2.gamepadInput[inputBase] = x;
          input$2.gamepadInput[inputBase + 1] = y;
      }
  };
  // When a gamepad connects
  const handleGamepadConnected = (entity, args) => {
      input$2 = entity.getMutableComponent(Input);
      console.log("A gamepad connected:", args.event.gamepad, args.event.gamepad.mapping);
      if (args.event.gamepad.mapping !== "standard")
          return console.error("Non-standard gamepad mapping detected, not properly handled");
      input$2.gamepadConnected = true;
      gamepad = args.event.gamepad;
      for (let index = 0; index < gamepad.buttons.length; index++) {
          if (typeof input$2.gamepadButtons[index] === "undefined")
              input$2.gamepadButtons[index] = 0;
      }
  };
  // When a gamepad disconnects
  const handleGamepadDisconnected = (entity, args) => {
      input$2 = entity.getMutableComponent(Input);
      console.log("A gamepad disconnected:", args.event.gamepad);
      input$2.gamepadConnected = false;
      if (!input$2.map)
          return; // Already disconnected?
      for (let index = 0; index < input$2.gamepadButtons.length; index++) {
          if (input$2.gamepadButtons[index] === BinaryValue.ON && typeof input$2.map.gamepadInputMap.axes[index] !== "undefined") {
              input$2.data.set(input$2.map.gamepadInputMap.axes[index], {
                  type: exports.InputType.BUTTON,
                  value: BinaryValue.OFF
              });
          }
          input$2.gamepadButtons[index] = 0;
      }
  };

  (function (GamepadButtons) {
      GamepadButtons[GamepadButtons["A"] = 0] = "A";
      GamepadButtons[GamepadButtons["B"] = 1] = "B";
      GamepadButtons[GamepadButtons["X"] = 2] = "X";
      GamepadButtons[GamepadButtons["Y"] = 3] = "Y";
      GamepadButtons[GamepadButtons["LBumper"] = 4] = "LBumper";
      GamepadButtons[GamepadButtons["RBumper"] = 5] = "RBumper";
      GamepadButtons[GamepadButtons["LTrigger"] = 6] = "LTrigger";
      GamepadButtons[GamepadButtons["RTrigger"] = 7] = "RTrigger";
      GamepadButtons[GamepadButtons["Back"] = 8] = "Back";
      GamepadButtons[GamepadButtons["Start"] = 9] = "Start";
      GamepadButtons[GamepadButtons["LStick"] = 10] = "LStick";
      GamepadButtons[GamepadButtons["RString"] = 11] = "RString";
      GamepadButtons[GamepadButtons["DPad1"] = 12] = "DPad1";
      GamepadButtons[GamepadButtons["DPad2"] = 13] = "DPad2";
      GamepadButtons[GamepadButtons["DPad3"] = 14] = "DPad3";
      GamepadButtons[GamepadButtons["DPad4"] = 15] = "DPad4";
  })(exports.GamepadButtons || (exports.GamepadButtons = {}));

  function preventDefault(e) {
      event.preventDefault();
  }

  const keys = { 37: 1, 38: 1, 39: 1, 40: 1 };
  function preventDefault$1(e) {
      e.preventDefault();
  }
  function preventDefaultForScrollKeys(e) {
      if (keys[e.keyCode]) {
          preventDefault$1(e);
          return false;
      }
  }
  // modern Chrome requires { passive: false } when adding event
  let supportsPassive = false;
  try {
      window.addEventListener("test", null, Object.defineProperty({}, "passive", {
          get: function () {
              supportsPassive = true;
          }
      }));
      // eslint-disable-next-line no-empty
  }
  catch (e) { }
  const wheelOpt = supportsPassive ? { passive: false } : false;
  // const wheelEvent = "onwheel" in document.createElement("div") ? "wheel" : "mousewheel"
  // call this to Disable
  function disableScroll() {
      window.addEventListener("DOMMouseScroll", preventDefault$1, false); // older FF
      // window.addEventListener(wheelEvent, preventDefault, wheelOpt) // modern desktop
      window.addEventListener("touchmove", preventDefault$1, wheelOpt); // mobile
      window.addEventListener("keydown", preventDefaultForScrollKeys, false);
  }
  // call this to Enable
  function enableScroll() {
      window.removeEventListener("DOMMouseScroll", preventDefault$1, false);
      // window.removeEventListener(wheelEvent, preventDefault)
      window.removeEventListener("touchmove", preventDefault$1);
      window.removeEventListener("keydown", preventDefaultForScrollKeys, false);
  }

  const MouseButtons = {
      LeftButton: 0,
      MiddleButton: 1,
      RightButton: 2
  };

  // Abstract inputs that all input devices get mapped to
  const DefaultInput = {
      PRIMARY: 0,
      SECONDARY: 1,
      FORWARD: 2,
      BACKWARD: 3,
      UP: 4,
      DOWN: 5,
      LEFT: 6,
      RIGHT: 7,
      INTERACT: 8,
      CROUCH: 9,
      JUMP: 10,
      WALK: 11,
      RUN: 12,
      SPRINT: 13,
      SNEAK: 14,
      SCREENXY: 15,
      MOVEMENT_PLAYERONE: 16,
      LOOKTURN_PLAYERONE: 17,
      MOVEMENT_PLAYERTWO: 18,
      LOOKTURN_PLAYERTWO: 19,
      ALTERNATE: 20
  };
  const DefaultInputMap = {
      // When an Input component is added, the system will call this array of behaviors
      onAdded: [
          {
              behavior: disableScroll
              // args: { }
          }
      ],
      // When an Input component is removed, the system will call this array of behaviors
      onRemoved: [
          {
              behavior: enableScroll
              // args: { }
          }
      ],
      // When the input component is added or removed, the system will bind/unbind these events to the DOM
      eventBindings: {
          // Mouse
          ["contextmenu"]: {
              behavior: preventDefault
          },
          ["mousemove"]: {
              behavior: handleMouseMovement,
              args: {
                  value: DefaultInput.SCREENXY
              }
          },
          ["mouseup"]: {
              behavior: handleMouseButton,
              args: {
                  value: BinaryValue.OFF
              }
          },
          ["mousedown"]: {
              behavior: handleMouseButton,
              args: {
                  value: BinaryValue.ON
              }
          },
          // Keys
          ["keyup"]: {
              behavior: handleKey,
              args: {
                  value: BinaryValue.OFF
              }
          },
          ["keydown"]: {
              behavior: handleKey,
              args: {
                  value: BinaryValue.ON
              }
          },
          // Gamepad
          ["gamepadconnected"]: {
              behavior: handleGamepadConnected
          },
          ["gamepaddisconnected"]: {
              behavior: handleGamepadDisconnected
          }
      },
      // Map mouse buttons to abstract input
      mouseInputMap: {
          buttons: {
              [MouseButtons.LeftButton]: DefaultInput.PRIMARY,
              [MouseButtons.RightButton]: DefaultInput.SECONDARY
              // [MouseButtons.MiddleButton]: DefaultInput.INTERACT
          },
          axes: {
              mousePosition: DefaultInput.SCREENXY
          }
      },
      // Map gamepad buttons to abstract input
      gamepadInputMap: {
          buttons: {
              [exports.GamepadButtons.A]: DefaultInput.JUMP,
              [exports.GamepadButtons.B]: DefaultInput.CROUCH,
              // [GamepadButtons.X]: DefaultInput.SPRINT, // X - secondary input
              // [GamepadButtons.Y]: DefaultInput.INTERACT, // Y - tertiary input
              // 4: DefaultInput.DEFAULT, // LB
              // 5: DefaultInput.DEFAULT, // RB
              // 6: DefaultInput.DEFAULT, // LT
              // 7: DefaultInput.DEFAULT, // RT
              // 8: DefaultInput.DEFAULT, // Back
              // 9: DefaultInput.DEFAULT, // Start
              // 10: DefaultInput.DEFAULT, // LStick
              // 11: DefaultInput.DEFAULT, // RStick
              [exports.GamepadButtons.DPad1]: DefaultInput.FORWARD,
              [exports.GamepadButtons.DPad2]: DefaultInput.BACKWARD,
              [exports.GamepadButtons.DPad3]: DefaultInput.LEFT,
              [exports.GamepadButtons.DPad4]: DefaultInput.RIGHT // DPAD 4
          },
          axes: {
              [exports.Thumbsticks.Left]: DefaultInput.MOVEMENT_PLAYERONE,
              [exports.Thumbsticks.Right]: DefaultInput.LOOKTURN_PLAYERONE
          }
      },
      // Map keyboard buttons to abstract input
      keyboardInputMap: {
          w: DefaultInput.FORWARD,
          a: DefaultInput.LEFT,
          s: DefaultInput.RIGHT,
          d: DefaultInput.BACKWARD,
          [" "]: DefaultInput.JUMP,
          shift: DefaultInput.CROUCH
      },
      // Map how inputs relate to each other
      inputRelationships: {
          [DefaultInput.FORWARD]: { opposes: [DefaultInput.BACKWARD] },
          [DefaultInput.BACKWARD]: { opposes: [DefaultInput.FORWARD] },
          [DefaultInput.LEFT]: { opposes: [DefaultInput.RIGHT] },
          [DefaultInput.RIGHT]: { opposes: [DefaultInput.LEFT] },
          [DefaultInput.CROUCH]: { blockedBy: [DefaultInput.JUMP, DefaultInput.SPRINT] },
          [DefaultInput.JUMP]: { overrides: [DefaultInput.CROUCH] }
      },
      // "Button behaviors" are called when button input is called (i.e. not axis input)
      inputButtonBehaviors: {
          [DefaultInput.JUMP]: {
              [BinaryValue.ON]: {
                  behavior: jump,
                  args: {}
              }
          }
          // [DefaultInput.CROUCH]: {
          //   [BinaryValue.ON]: {
          //     behavior: startCrouching,
          //     args: { state: DefaultStateTypes.CROUCHING }
          //   },
          //   [BinaryValue.OFF]: {
          //     behavior: stopCrouching,
          //     args: { state: DefaultStateTypes.CROUCHING }
          //   }
          // }
      },
      // Axis behaviors are called by continuous input and map to a scalar, vec2 or vec3
      inputAxisBehaviors: {
          [DefaultInput.MOVEMENT_PLAYERONE]: {
              behavior: move,
              args: {
                  input: DefaultInput.MOVEMENT_PLAYERONE,
                  inputType: exports.InputType.TWOD
              }
          },
          [DefaultInput.SCREENXY]: {
              behavior: rotateAround,
              args: {
                  input: DefaultInput.LOOKTURN_PLAYERONE,
                  inputType: exports.InputType.TWOD
              }
          }
      }
  };

  class InputSystem extends System {
      execute(delta) {
          // Called when input component is added to entity
          this.queries.inputs.added.forEach(entity => {
              var _a;
              // Get component reference
              this._inputComponent = entity.getComponent(Input);
              // If input doesn't have a map, set the default
              if (this._inputComponent.map === undefined)
                  this._inputComponent.map = DefaultInputMap;
              // Call all behaviors in "onAdded" of input map
              this._inputComponent.map.onAdded.forEach(behavior => {
                  behavior.behavior(entity, Object.assign({}, behavior.args));
              });
              // Bind DOM events to event behavior
              (_a = Object.keys(this._inputComponent.map.eventBindings)) === null || _a === void 0 ? void 0 : _a.forEach((key) => {
                  document.addEventListener(key, e => {
                      this._inputComponent.map.eventBindings[key].behavior(entity, Object.assign({ event: e }, this._inputComponent.map.eventBindings[key].args));
                  });
              });
          });
          // Called when input component is removed from entity
          this.queries.inputs.removed.forEach(entity => {
              // Get component reference
              this._inputComponent = entity.getComponent(Input);
              // Call all behaviors in "onRemoved" of input map
              this._inputComponent.map.onRemoved.forEach(behavior => {
                  behavior.behavior(entity, behavior.args);
              });
              // Unbind events from DOM
              Object.keys(this._inputComponent.map.eventBindings).forEach((key) => {
                  document.addEventListener(key, e => {
                      this._inputComponent.map.eventBindings[key].behavior(entity, Object.assign({ event: e }, this._inputComponent.map.eventBindings[key].args));
                  });
              });
          });
          // Called every frame on all input components
          this.queries.inputs.results.forEach(entity => handleInput(entity, delta));
      }
  }
  let input$3;
  const handleInput = (entity, delta) => {
      input$3 = entity.getComponent(Input);
      input$3.data.forEach((value, key) => {
          if (value.type === exports.InputType.BUTTON) {
              if (input$3.map.inputButtonBehaviors[key] && input$3.map.inputButtonBehaviors[key][value.value]) {
                  if (value.lifecycleState === undefined || value.lifecycleState === LifecycleValue$1.STARTED) {
                      input$3.data.set(key, {
                          type: value.type,
                          value: value.value,
                          lifecycleState: LifecycleValue$1.CONTINUED
                      });
                      input$3.map.inputButtonBehaviors[key][value.value].behavior(entity, input$3.map.inputButtonBehaviors[key][value.value].args, delta);
                  }
              }
          }
          else if (value.type === exports.InputType.ONED || value.type === exports.InputType.TWOD || value.type === exports.InputType.THREED) {
              if (input$3.map.inputAxisBehaviors[key]) {
                  if (value.lifecycleState === undefined || value.lifecycleState === LifecycleValue$1.STARTED) {
                      input$3.data.set(key, {
                          type: value.type,
                          value: value.value,
                          lifecycleState: LifecycleValue$1.CONTINUED
                      });
                      input$3.map.inputAxisBehaviors[key].behavior(entity, input$3.map.inputAxisBehaviors[key].args, delta);
                  }
              }
          }
          else {
              console.error("handleInput called with an invalid input type");
          }
      });
      input$3.data.clear();
  };
  InputSystem.queries = {
      inputs: {
          components: [Input],
          listen: {
              added: true,
              removed: true
          }
      }
  };

  const jumpingBehavior = jumping;
  const DefaultStateGroups = {
      MOVEMENT: 0,
      MOVEMENT_MODIFIERS: 1
  };
  const DefaultStateSchema = {
      groups: {
          [DefaultStateGroups.MOVEMENT]: {
              exclusive: true,
              default: DefaultStateTypes.IDLE,
              states: [DefaultStateTypes.IDLE, DefaultStateTypes.MOVING]
          },
          [DefaultStateGroups.MOVEMENT_MODIFIERS]: {
              exclusive: true,
              states: [DefaultStateTypes.CROUCHING, DefaultStateTypes.SPRINTING, DefaultStateTypes.JUMPING]
          }
      },
      states: {
          [DefaultStateTypes.IDLE]: { group: DefaultStateGroups.MOVEMENT, onUpdate: { behavior: decelerate } },
          [DefaultStateTypes.MOVING]: {
              group: DefaultStateGroups.MOVEMENT
          },
          [DefaultStateTypes.JUMPING]: { group: DefaultStateGroups.MOVEMENT_MODIFIERS, onUpdate: { behavior: jumpingBehavior } },
          [DefaultStateTypes.CROUCHING]: { group: DefaultStateGroups.MOVEMENT_MODIFIERS, blockedBy: DefaultStateTypes.JUMPING },
          [DefaultStateTypes.SPRINTING]: { group: DefaultStateGroups.MOVEMENT_MODIFIERS }
      }
  };

  class StateSystem extends System {
      constructor() {
          super(...arguments);
          this.callBehaviors = (entity, args, delta) => {
              this._state = entity.getComponent(State);
              this._state.data.forEach((stateValue) => {
                  if (this._state.map.states[stateValue.state] !== undefined && this._state.map.states[stateValue.state][args.phase] !== undefined) {
                      if (stateValue.lifecycleState === LifecycleValue$1.STARTED) {
                          this._state.data.set(stateValue.state, Object.assign(Object.assign({}, stateValue), { lifecycleState: LifecycleValue$1.CONTINUED }));
                      }
                      this._state.map.states[stateValue.state][args.phase].behavior(entity, this._state.map.states[stateValue.state][args.phase].args, delta);
                  }
              });
          };
      }
      execute(delta, time) {
          var _a, _b;
          (_a = this.queries.state.added) === null || _a === void 0 ? void 0 : _a.forEach(entity => {
              // If stategroup has a default, add it to our state map
              this._state = entity.getComponent(State);
              Object.keys(this._state.map.groups).forEach((stateGroup) => {
                  if (this._state.map.groups[stateGroup] !== undefined && this._state.map.groups[stateGroup].default !== undefined) {
                      addState(entity, { state: this._state.map.groups[stateGroup].default });
                      console.log("Added default state: " + this._state.map.groups[stateGroup].default);
                  }
              });
          });
          (_b = this.queries.state.results) === null || _b === void 0 ? void 0 : _b.forEach(entity => {
              this.callBehaviors(entity, { phase: "onUpdate" }, delta);
              this.callBehaviors(entity, { phase: "onLateUpdate" }, delta);
          });
      }
  }
  StateSystem.queries = {
      state: {
          components: [State],
          listen: {
              added: true,
              changed: true,
              removed: true
          }
      }
  };

  const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";

  class Subscription extends BehaviorComponent {
  }

  class NetworkPlayer extends Component {
  }
  NetworkPlayer.schema = {
      networkId: { type: Types.Number },
      userId: { type: Types.String, default: "" },
      name: { type: Types.String, default: "Player" }
  };

  class MessageSchema {
      constructor(_messageType, _struct) {
          this._messageType = _messageType;
          this._struct = _struct;
          this._bytes = 0;
          this.calcBytes();
      }
      get messageType() {
          return this._messageType;
      }
      calcBytes() {
          const iterate = (obj) => {
              var _a, _b;
              for (const property in obj) {
                  const type = (obj === null || obj === void 0 ? void 0 : obj._type) || ((_a = obj === null || obj === void 0 ? void 0 : obj.type) === null || _a === void 0 ? void 0 : _a._type);
                  const bytes = obj._bytes || ((_b = obj.type) === null || _b === void 0 ? void 0 : _b._bytes);
                  if (!type) {
                      if (typeof obj[property] === "object") {
                          iterate(obj[property]);
                      }
                  }
                  else {
                      if (property !== "_type" && property !== "type")
                          return;
                      if (!bytes)
                          return;
                      // we multiply the bytes by the String8 / String16 length.
                      if (type === "String8" || type === "String16") {
                          const length = obj.length || 12;
                          this._bytes += bytes * length;
                      }
                      else {
                          this._bytes += bytes;
                      }
                  }
              }
          };
          iterate(this._struct);
      }
      get struct() {
          return this._struct;
      }
      get bytes() {
          return this._bytes;
      }
  }

  const set$2 = (obj, path, value) => {
      const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);
      pathArray.reduce((acc, key, i) => {
          if (acc[key] === undefined)
              acc[key] = {};
          if (i === pathArray.length - 1)
              acc[key] = value;
          return acc[key];
      }, obj);
  };

  function cropString(str, length) {
      return str.padEnd(length, " ").slice(0, length);
  }

  class NetworkObject extends Component {
  }
  NetworkObject.schema = {
      ownerId: { type: Types.Number },
      networkId: { type: Types.Number }
  };

  // TODO: Clean me up, add schema, etc
  class NetworkTransportComponent extends Component {
      constructor() {
          super();
          this.initialized = false;
          NetworkTransportComponent.instance = this;
      }
  }

  class NetworkSystem extends System {
      constructor(world) {
          super(world);
          this.clients = []; // TODO: Replace with ringbuffer
          this._schemas = new Map();
          this._buffer = new ArrayBuffer(0);
          this._dataView = new DataView(this._buffer);
          this._bytes = 0;
      }
      initializeSession(world, transport) {
          NetworkSystem.instance = this;
          this.networkTransport = world
              .registerComponent(NetworkTransportComponent)
              .createEntity()
              .addComponent(NetworkTransportComponent)
              .getComponent(NetworkTransportComponent);
          this._isInitialized = true;
          NetworkTransportComponent.instance.transport = transport;
          transport.initialize();
      }
      setLocalConnectionId(_id) {
          console.log(`Initialized with socket ID ${_id}`);
          this.mySocketID = _id;
      }
      initializeClient(myClientId, allClientIds) {
          this.setLocalConnectionId(myClientId);
          console.log("ids: ");
          console.log(allClientIds);
          if (allClientIds === undefined)
              return;
          // for each existing user, add them as a client and add tracks to their peer connection
          for (let i = 0; i < allClientIds.length; i++)
              this.addClient(allClientIds[i]);
      }
      addClient(_id) {
          if (this.clients.includes(_id))
              return console.error("Client is already in client list");
          if (_id === this.mySocketID)
              return console.log("Not adding client because we are that client");
          console.log(`A new user connected with the id: ${_id}`);
          // Create an entity, add component NetworkClient and set id
          this.clients.push(_id);
      }
      getClosestPeers() {
          return this.clients;
      }
      onConnected() {
          console.log("Client connected to server!");
      }
      removeClient(_id) {
          if (_id in this.clients) {
              if (_id === this.mySocketID) {
                  console.log("Server thinks that we disconnected!");
              }
              else {
                  console.log(`A user was disconnected with the id: ${_id}`);
                  // Get NetworkClient component where id is _id, and destroy the entity
              }
          }
      }
      execute(delta) {
          if (!this._isInitialized)
              return;
          // Ask transport for all new messages
      }
      addMessageSchema(messageType, messageData) {
          const s = new MessageSchema(messageType, messageData);
          this._schemas.set(messageType, s);
          return s;
      }
      getLocalConnectionId() {
          return this.mySocketID;
      }
      deinitializeSession() {
          var _a;
          (_a = this._sessionEntity) === null || _a === void 0 ? void 0 : _a.remove();
          this._isInitialized = false;
          // NetworkTransport.instance.transport.deinitialize()
      }
      toBuffer(input) {
          // deep clone the worldState
          const data = Object.assign({}, input);
          this._buffer = new ArrayBuffer(8 * 1024);
          this._dataView = new DataView(this._buffer);
          this._bytes = 0;
          const flat = this.flattenSchema(this._schema, data);
          // to buffer
          flat.forEach((f) => {
              if (f.t === "String8") {
                  for (let j = 0; j < f.d.length; j++) {
                      this._dataView.setUint8(this._bytes, f.d[j].charCodeAt(0));
                      this._bytes++;
                  }
              }
              else if (f.t === "String16") {
                  for (let j = 0; j < f.d.length; j++) {
                      this._dataView.setUint16(this._bytes, f.d[j].charCodeAt(0));
                      this._bytes += 2;
                  }
              }
              else if (f.t === "Int8Array") {
                  this._dataView.setInt8(this._bytes, f.d);
                  this._bytes++;
              }
              else if (f.t === "Uint8Array") {
                  this._dataView.setUint8(this._bytes, f.d);
                  this._bytes++;
              }
              else if (f.t === "Int16Array") {
                  this._dataView.setInt16(this._bytes, f.d);
                  this._bytes += 2;
              }
              else if (f.t === "Uint16Array") {
                  this._dataView.setUint16(this._bytes, f.d);
                  this._bytes += 2;
              }
              else if (f.t === "Int32Array") {
                  this._dataView.setInt32(this._bytes, f.d);
                  this._bytes += 4;
              }
              else if (f.t === "Uint32Array") {
                  this._dataView.setUint32(this._bytes, f.d);
                  this._bytes += 4;
              }
              else if (f.t === "BigInt64Array") {
                  this._dataView.setBigInt64(this._bytes, BigInt(f.d));
                  this._bytes += 8;
              }
              else if (f.t === "BigUint64Array") {
                  this._dataView.setBigUint64(this._bytes, BigInt(f.d));
                  this._bytes += 8;
              }
              else if (f.t === "Float32Array") {
                  this._dataView.setFloat32(this._bytes, f.d);
                  this._bytes += 4;
              }
              else if (f.t === "Float64Array") {
                  this._dataView.setFloat64(this._bytes, f.d);
                  this._bytes += 8;
              }
          });
          // TODO: Pooling
          const newBuffer = new ArrayBuffer(this._bytes);
          const view = new DataView(newBuffer);
          // copy all data to a new (resized) ArrayBuffer
          for (let i = 0; i < this._bytes; i++) {
              view.setUint8(i, this._dataView.getUint8(i));
          }
          return newBuffer;
      }
      fromBuffer(buffer) {
          // check where, in the buffer, the schemas are
          let index = 0;
          const indexes = [];
          const view = new DataView(buffer);
          const int8 = Array.from(new Int8Array(buffer));
          //TODO: WTF is this black magic?
          while (index > -1) {
              index = int8.indexOf(35, index);
              if (index !== -1) {
                  indexes.push(index);
                  index++;
              }
          }
          // get the schema ids
          const schemaIds = [];
          indexes.forEach(index => {
              let id = 0;
              for (let i = 0; i < 5; i++) {
                  const char = int8[index + i];
                  id += char;
              }
              schemaIds.push(id);
          });
          // assemble all info about the schemas we need
          const schemas = [];
          schemaIds.forEach((id, i) => {
              // check if the schemaId exists
              // (this can be, for example, if charCode 35 is not really a #)
              const schemaId = this._schemas.get(id);
              if (schemaId)
                  schemas.push({ id, schema: this._schemas.get(id), startsAt: indexes[i] + 5 });
          });
          // schemas[] contains now all the schemas we need to fromBuffer the bufferArray
          // lets begin the serialization
          let data = {}; // holds all the data we want to give back
          let bytes = 0; // the current bytes of arrayBuffer iteration
          const dataPerSchema = {};
          const deserializeSchema = (struct) => {
              var _a, _b;
              let data = {};
              if (typeof struct === "object") {
                  for (const property in struct) {
                      const prop = struct[property];
                      // handle specialTypes e.g.:  "x: { type: int16, digits: 2 }"
                      let specialTypes;
                      if (((_a = prop === null || prop === void 0 ? void 0 : prop.type) === null || _a === void 0 ? void 0 : _a._type) && ((_b = prop === null || prop === void 0 ? void 0 : prop.type) === null || _b === void 0 ? void 0 : _b._bytes)) {
                          specialTypes = prop;
                          prop._type = prop.type._type;
                          prop._bytes = prop.type._bytes;
                      }
                      if (prop && prop["_type"] && prop["_bytes"]) {
                          const _type = prop["_type"];
                          const _bytes = prop["_bytes"];
                          let value;
                          if (_type === "String8") {
                              value = "";
                              const length = prop.length || 12;
                              for (let i = 0; i < length; i++) {
                                  const char = String.fromCharCode(view.getUint8(bytes));
                                  value += char;
                                  bytes++;
                              }
                          }
                          else if (_type === "String16") {
                              value = "";
                              const length = prop.length || 12;
                              for (let i = 0; i < length; i++) {
                                  const char = String.fromCharCode(view.getUint16(bytes));
                                  value += char;
                                  bytes += 2;
                              }
                          }
                          else if (_type === "Int8Array") {
                              value = view.getInt8(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Uint8Array") {
                              value = view.getUint8(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Int16Array") {
                              value = view.getInt16(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Uint16Array") {
                              value = view.getUint16(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Int32Array") {
                              value = view.getInt32(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Uint32Array") {
                              value = view.getUint32(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "BigInt64Array") {
                              value = parseInt(view.getBigInt64(bytes).toString());
                              bytes += _bytes;
                          }
                          else if (_type === "BigUint64Array") {
                              value = parseInt(view.getBigUint64(bytes).toString());
                              bytes += _bytes;
                          }
                          else if (_type === "Float32Array") {
                              value = view.getFloat32(bytes);
                              bytes += _bytes;
                          }
                          else if (_type === "Float64Array") {
                              value = view.getFloat64(bytes);
                              bytes += _bytes;
                          }
                          // apply special types options
                          else if (typeof value === "number" && (specialTypes === null || specialTypes === void 0 ? void 0 : specialTypes.digits)) {
                              value *= Math.pow(10, -specialTypes.digits);
                              value = parseFloat(value.toFixed(specialTypes.digits));
                          }
                          data = Object.assign(Object.assign({}, data), { [property]: value });
                      }
                  }
              }
              return data;
          };
          schemas.forEach((s, i) => {
              var _a, _b, _c;
              const struct = (_a = s.schema) === null || _a === void 0 ? void 0 : _a.struct;
              const start = s.startsAt;
              let end = buffer.byteLength;
              const id = ((_b = s.schema) === null || _b === void 0 ? void 0 : _b.id) || "XX";
              if (id === "XX")
                  console.error("ERROR: Something went horribly wrong!");
              end = schemas[i + 1].startsAt - 5;
              // TODO: bytes is not accurate since it includes child schemas
              const length = ((_c = s.schema) === null || _c === void 0 ? void 0 : _c.bytes) || 1;
              // determine how many iteration we have to make in this schema
              // the players array maybe contains 5 player, so we have to make 5 iterations
              const iterations = (end - start) / length;
              for (let i = 0; i < iterations; i++) {
                  bytes = start + i * length;
                  // gets the data from this schema
                  const schemaData = deserializeSchema(struct);
                  if (iterations <= 1)
                      dataPerSchema[id] = Object.assign({}, schemaData);
                  else {
                      if (typeof dataPerSchema[id] === "undefined")
                          dataPerSchema[id] = [];
                      dataPerSchema[id].push(schemaData);
                  }
              }
          });
          // add dataPerScheme to data
          data = {};
          const populateData = (obj, key, value, path = "", isArray = false) => {
              if (obj && obj._id && obj._id === key) {
                  const p = path.replace(/_struct\./, "").replace(/\.$/, "");
                  // if it is a schema[], but only has one set, we manually have to make sure it transforms to an array
                  if (isArray && !Array.isArray(value))
                      value = [value];
                  // '' is the top level
                  if (p === "")
                      data = Object.assign(Object.assign({}, data), value);
                  else
                      set$2(data, p, value);
              }
              else {
                  for (const props in obj) {
                      if (typeof obj[props] === "object") {
                          const p = Array.isArray(obj) ? "" : `${props}.`;
                          populateData(obj[props], key, value, path + p, Array.isArray(obj));
                      }
                      //obj
                  }
              }
          };
          for (let i = 0; i < Object.keys(dataPerSchema).length; i++) {
              const key = Object.keys(dataPerSchema)[i];
              const value = dataPerSchema[key];
              populateData(this._schema, key, value, "");
          }
          return data;
      }
      flattenSchema(schema, data) {
          const flat = [];
          const flatten = (schema, data) => {
              var _a, _b, _c, _d, _e, _f, _g;
              // add the schema id to flat[] (its a String8 with 5 characters, the first char is #)
              if (schema === null || schema === void 0 ? void 0 : schema._id)
                  flat.push({ d: schema._id, t: "String8" });
              else if ((_a = schema === null || schema === void 0 ? void 0 : schema[0]) === null || _a === void 0 ? void 0 : _a._id)
                  flat.push({ d: schema[0]._id, t: "String8" });
              // if it is a schema
              if (schema === null || schema === void 0 ? void 0 : schema._struct)
                  schema = schema._struct;
              // if it is a schema[]
              else if ((_b = schema === null || schema === void 0 ? void 0 : schema[0]) === null || _b === void 0 ? void 0 : _b._struct)
                  schema = schema[0]._struct;
              for (const property in data) {
                  if (typeof data[property] === "object") {
                      // if data is array, but schemas is flat, use index 0 on the next iteration
                      if (Array.isArray(data))
                          flatten(schema, data[parseInt(property)]);
                      else
                          flatten(schema[property], data[property]);
                  }
                  else {
                      // handle special types e.g.:  "x: { type: int16, digits: 2 }"
                      if ((_d = (_c = schema[property]) === null || _c === void 0 ? void 0 : _c.type) === null || _d === void 0 ? void 0 : _d._type) {
                          if ((_e = schema[property]) === null || _e === void 0 ? void 0 : _e.digits) {
                              data[property] *= Math.pow(10, schema[property].digits);
                              data[property] = parseInt(data[property].toFixed(0));
                          }
                          if ((_f = schema[property]) === null || _f === void 0 ? void 0 : _f.length) {
                              const length = (_g = schema[property]) === null || _g === void 0 ? void 0 : _g.length;
                              data[property] = cropString(data[property], length);
                          }
                          flat.push({ d: data[property], t: schema[property].type._type });
                      }
                      else {
                          // crop strings to default lenght of 12 characters if nothing else is specified
                          if (schema[property]._type === "String8" || schema[property]._type === "String16") {
                              data[property] = cropString(data[property], 12);
                          }
                          flat.push({ d: data[property], t: schema[property]._type });
                      }
                  }
              }
          };
          flatten(schema, data);
          return flat;
      }
  }
  NetworkSystem.queries = {
      networkObject: {
          components: [NetworkObject]
      },
      networkOwners: {
          components: [NetworkPlayer]
      }
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  // TODO: Clean me up, add schema, etc
  class MediaStreamComponent extends Component {
      constructor() {
          super();
          this.initialized = false;
          this.consumers = [];
          this.screenShareVideoPaused = false;
          this.screenShareAudioPaused = false;
          this.videoPaused = false;
          this.audioPaused = false;
          MediaStreamComponent.instance = this;
          this.videoPaused = true;
          this.audioPaused = true;
      }
      toggleVideoPaused() {
          this.videoPaused = !this.videoPaused;
          return this.videoPaused;
      }
      toggleAudioPaused() {
          this.audioPaused = !this.audioPaused;
          return this.audioPaused;
      }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  /**
   * Parses an URI
   *
   * @author Steven Levithan <stevenlevithan.com> (MIT license)
   * @api private
   */

  var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

  var parts = [
      'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
  ];

  var parseuri = function parseuri(str) {
      var src = str,
          b = str.indexOf('['),
          e = str.indexOf(']');

      if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }

      var m = re.exec(str || ''),
          uri = {},
          i = 14;

      while (i--) {
          uri[parts[i]] = m[i] || '';
      }

      if (b != -1 && e != -1) {
          uri.source = src;
          uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
          uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
          uri.ipv6uri = true;
      }

      return uri;
  };

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y$1 = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$1;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }

  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
  	createDebug.debug = createDebug;
  	createDebug.default = createDebug;
  	createDebug.coerce = coerce;
  	createDebug.disable = disable;
  	createDebug.enable = enable;
  	createDebug.enabled = enabled;
  	createDebug.humanize = ms;

  	Object.keys(env).forEach(key => {
  		createDebug[key] = env[key];
  	});

  	/**
  	* Active `debug` instances.
  	*/
  	createDebug.instances = [];

  	/**
  	* The currently active debug mode names, and names to skip.
  	*/

  	createDebug.names = [];
  	createDebug.skips = [];

  	/**
  	* Map of special "%n" handling functions, for the debug "format" argument.
  	*
  	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  	*/
  	createDebug.formatters = {};

  	/**
  	* Selects a color for a debug namespace
  	* @param {String} namespace The namespace string for the for the debug instance to be colored
  	* @return {Number|String} An ANSI color code for the given namespace
  	* @api private
  	*/
  	function selectColor(namespace) {
  		let hash = 0;

  		for (let i = 0; i < namespace.length; i++) {
  			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
  			hash |= 0; // Convert to 32bit integer
  		}

  		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  	}
  	createDebug.selectColor = selectColor;

  	/**
  	* Create a debugger with the given `namespace`.
  	*
  	* @param {String} namespace
  	* @return {Function}
  	* @api public
  	*/
  	function createDebug(namespace) {
  		let prevTime;

  		function debug(...args) {
  			// Disabled?
  			if (!debug.enabled) {
  				return;
  			}

  			const self = debug;

  			// Set `diff` timestamp
  			const curr = Number(new Date());
  			const ms = curr - (prevTime || curr);
  			self.diff = ms;
  			self.prev = prevTime;
  			self.curr = curr;
  			prevTime = curr;

  			args[0] = createDebug.coerce(args[0]);

  			if (typeof args[0] !== 'string') {
  				// Anything else let's inspect with %O
  				args.unshift('%O');
  			}

  			// Apply any `formatters` transformations
  			let index = 0;
  			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
  				// If we encounter an escaped % then don't increase the array index
  				if (match === '%%') {
  					return match;
  				}
  				index++;
  				const formatter = createDebug.formatters[format];
  				if (typeof formatter === 'function') {
  					const val = args[index];
  					match = formatter.call(self, val);

  					// Now we need to remove `args[index]` since it's inlined in the `format`
  					args.splice(index, 1);
  					index--;
  				}
  				return match;
  			});

  			// Apply env-specific formatting (colors, etc.)
  			createDebug.formatArgs.call(self, args);

  			const logFn = self.log || createDebug.log;
  			logFn.apply(self, args);
  		}

  		debug.namespace = namespace;
  		debug.enabled = createDebug.enabled(namespace);
  		debug.useColors = createDebug.useColors();
  		debug.color = selectColor(namespace);
  		debug.destroy = destroy;
  		debug.extend = extend;
  		// Debug.formatArgs = formatArgs;
  		// debug.rawLog = rawLog;

  		// env-specific initialization logic for debug instances
  		if (typeof createDebug.init === 'function') {
  			createDebug.init(debug);
  		}

  		createDebug.instances.push(debug);

  		return debug;
  	}

  	function destroy() {
  		const index = createDebug.instances.indexOf(this);
  		if (index !== -1) {
  			createDebug.instances.splice(index, 1);
  			return true;
  		}
  		return false;
  	}

  	function extend(namespace, delimiter) {
  		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  		newDebug.log = this.log;
  		return newDebug;
  	}

  	/**
  	* Enables a debug mode by namespaces. This can include modes
  	* separated by a colon and wildcards.
  	*
  	* @param {String} namespaces
  	* @api public
  	*/
  	function enable(namespaces) {
  		createDebug.save(namespaces);

  		createDebug.names = [];
  		createDebug.skips = [];

  		let i;
  		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  		const len = split.length;

  		for (i = 0; i < len; i++) {
  			if (!split[i]) {
  				// ignore empty strings
  				continue;
  			}

  			namespaces = split[i].replace(/\*/g, '.*?');

  			if (namespaces[0] === '-') {
  				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
  			} else {
  				createDebug.names.push(new RegExp('^' + namespaces + '$'));
  			}
  		}

  		for (i = 0; i < createDebug.instances.length; i++) {
  			const instance = createDebug.instances[i];
  			instance.enabled = createDebug.enabled(instance.namespace);
  		}
  	}

  	/**
  	* Disable debug output.
  	*
  	* @return {String} namespaces
  	* @api public
  	*/
  	function disable() {
  		const namespaces = [
  			...createDebug.names.map(toNamespace),
  			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
  		].join(',');
  		createDebug.enable('');
  		return namespaces;
  	}

  	/**
  	* Returns true if the given mode name is enabled, false otherwise.
  	*
  	* @param {String} name
  	* @return {Boolean}
  	* @api public
  	*/
  	function enabled(name) {
  		if (name[name.length - 1] === '*') {
  			return true;
  		}

  		let i;
  		let len;

  		for (i = 0, len = createDebug.skips.length; i < len; i++) {
  			if (createDebug.skips[i].test(name)) {
  				return false;
  			}
  		}

  		for (i = 0, len = createDebug.names.length; i < len; i++) {
  			if (createDebug.names[i].test(name)) {
  				return true;
  			}
  		}

  		return false;
  	}

  	/**
  	* Convert regexp to namespace
  	*
  	* @param {RegExp} regxep
  	* @return {String} namespace
  	* @api private
  	*/
  	function toNamespace(regexp) {
  		return regexp.toString()
  			.substring(2, regexp.toString().length - 2)
  			.replace(/\.\*\?$/, '*');
  	}

  	/**
  	* Coerce `val`.
  	*
  	* @param {Mixed} val
  	* @return {Mixed}
  	* @api private
  	*/
  	function coerce(val) {
  		if (val instanceof Error) {
  			return val.stack || val.message;
  		}
  		return val;
  	}

  	createDebug.enable(createDebug.load());

  	return createDebug;
  }

  var common = setup;

  var browser = createCommonjsModule(function (module, exports) {
  /* eslint-env browser */

  /**
   * This is the web browser implementation of `debug()`.
   */

  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();

  /**
   * Colors.
   */

  exports.colors = [
  	'#0000CC',
  	'#0000FF',
  	'#0033CC',
  	'#0033FF',
  	'#0066CC',
  	'#0066FF',
  	'#0099CC',
  	'#0099FF',
  	'#00CC00',
  	'#00CC33',
  	'#00CC66',
  	'#00CC99',
  	'#00CCCC',
  	'#00CCFF',
  	'#3300CC',
  	'#3300FF',
  	'#3333CC',
  	'#3333FF',
  	'#3366CC',
  	'#3366FF',
  	'#3399CC',
  	'#3399FF',
  	'#33CC00',
  	'#33CC33',
  	'#33CC66',
  	'#33CC99',
  	'#33CCCC',
  	'#33CCFF',
  	'#6600CC',
  	'#6600FF',
  	'#6633CC',
  	'#6633FF',
  	'#66CC00',
  	'#66CC33',
  	'#9900CC',
  	'#9900FF',
  	'#9933CC',
  	'#9933FF',
  	'#99CC00',
  	'#99CC33',
  	'#CC0000',
  	'#CC0033',
  	'#CC0066',
  	'#CC0099',
  	'#CC00CC',
  	'#CC00FF',
  	'#CC3300',
  	'#CC3333',
  	'#CC3366',
  	'#CC3399',
  	'#CC33CC',
  	'#CC33FF',
  	'#CC6600',
  	'#CC6633',
  	'#CC9900',
  	'#CC9933',
  	'#CCCC00',
  	'#CCCC33',
  	'#FF0000',
  	'#FF0033',
  	'#FF0066',
  	'#FF0099',
  	'#FF00CC',
  	'#FF00FF',
  	'#FF3300',
  	'#FF3333',
  	'#FF3366',
  	'#FF3399',
  	'#FF33CC',
  	'#FF33FF',
  	'#FF6600',
  	'#FF6633',
  	'#FF9900',
  	'#FF9933',
  	'#FFCC00',
  	'#FFCC33'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  // eslint-disable-next-line complexity
  function useColors() {
  	// NB: In an Electron preload script, document will be defined but not fully
  	// initialized. Since we know we're in Chrome, we'll just detect this case
  	// explicitly
  	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
  		return true;
  	}

  	// Internet Explorer and Edge do not support colors.
  	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
  		return false;
  	}

  	// Is webkit? http://stackoverflow.com/a/16459606/376773
  	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
  		// Is firebug? http://stackoverflow.com/a/398120/376773
  		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
  		// Is firefox >= v31?
  		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
  		// Double check webkit in userAgent just in case we are in a worker
  		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
  	args[0] = (this.useColors ? '%c' : '') +
  		this.namespace +
  		(this.useColors ? ' %c' : ' ') +
  		args[0] +
  		(this.useColors ? '%c ' : ' ') +
  		'+' + module.exports.humanize(this.diff);

  	if (!this.useColors) {
  		return;
  	}

  	const c = 'color: ' + this.color;
  	args.splice(1, 0, c, 'color: inherit');

  	// The final "%c" is somewhat tricky, because there could be other
  	// arguments passed either before or after the %c, so we need to
  	// figure out the correct index to insert the CSS into
  	let index = 0;
  	let lastC = 0;
  	args[0].replace(/%[a-zA-Z%]/g, match => {
  		if (match === '%%') {
  			return;
  		}
  		index++;
  		if (match === '%c') {
  			// We only are interested in the *last* %c
  			// (the user may have provided their own)
  			lastC = index;
  		}
  	});

  	args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */
  function log(...args) {
  	// This hackery is required for IE8/9, where
  	// the `console.log` function doesn't have 'apply'
  	return typeof console === 'object' &&
  		console.log &&
  		console.log(...args);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
  	try {
  		if (namespaces) {
  			exports.storage.setItem('debug', namespaces);
  		} else {
  			exports.storage.removeItem('debug');
  		}
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  function load() {
  	let r;
  	try {
  		r = exports.storage.getItem('debug');
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}

  	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  	if (!r && typeof process !== 'undefined' && 'env' in process) {
  		r = process.env.DEBUG;
  	}

  	return r;
  }

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
  	try {
  		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
  		// The Browser also has localStorage in the global context.
  		return localStorage;
  	} catch (error) {
  		// Swallow
  		// XXX (@Qix-) should we be logging these?
  	}
  }

  module.exports = common(exports);

  const {formatters} = module.exports;

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  formatters.j = function (v) {
  	try {
  		return JSON.stringify(v);
  	} catch (error) {
  		return '[UnexpectedJSONParseError]: ' + error.message;
  	}
  };
  });
  var browser_1 = browser.log;
  var browser_2 = browser.formatArgs;
  var browser_3 = browser.save;
  var browser_4 = browser.load;
  var browser_5 = browser.useColors;
  var browser_6 = browser.storage;
  var browser_7 = browser.colors;

  var hasFlag = (flag, argv = process.argv) => {
  	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
  	const position = argv.indexOf(prefix + flag);
  	const terminatorPosition = argv.indexOf('--');
  	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
  };

  const {env} = process;

  let forceColor;
  if (hasFlag('no-color') ||
  	hasFlag('no-colors') ||
  	hasFlag('color=false') ||
  	hasFlag('color=never')) {
  	forceColor = 0;
  } else if (hasFlag('color') ||
  	hasFlag('colors') ||
  	hasFlag('color=true') ||
  	hasFlag('color=always')) {
  	forceColor = 1;
  }

  if ('FORCE_COLOR' in env) {
  	if (env.FORCE_COLOR === 'true') {
  		forceColor = 1;
  	} else if (env.FORCE_COLOR === 'false') {
  		forceColor = 0;
  	} else {
  		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
  	}
  }

  function translateLevel(level) {
  	if (level === 0) {
  		return false;
  	}

  	return {
  		level,
  		hasBasic: true,
  		has256: level >= 2,
  		has16m: level >= 3
  	};
  }

  function supportsColor(haveStream, streamIsTTY) {
  	if (forceColor === 0) {
  		return 0;
  	}

  	if (hasFlag('color=16m') ||
  		hasFlag('color=full') ||
  		hasFlag('color=truecolor')) {
  		return 3;
  	}

  	if (hasFlag('color=256')) {
  		return 2;
  	}

  	if (haveStream && !streamIsTTY && forceColor === undefined) {
  		return 0;
  	}

  	const min = forceColor || 0;

  	if (env.TERM === 'dumb') {
  		return min;
  	}

  	if (process.platform === 'win32') {
  		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
  		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
  		const osRelease = os.release().split('.');
  		if (
  			Number(osRelease[0]) >= 10 &&
  			Number(osRelease[2]) >= 10586
  		) {
  			return Number(osRelease[2]) >= 14931 ? 3 : 2;
  		}

  		return 1;
  	}

  	if ('CI' in env) {
  		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
  			return 1;
  		}

  		return min;
  	}

  	if ('TEAMCITY_VERSION' in env) {
  		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  	}

  	if ('GITHUB_ACTIONS' in env) {
  		return 1;
  	}

  	if (env.COLORTERM === 'truecolor') {
  		return 3;
  	}

  	if ('TERM_PROGRAM' in env) {
  		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

  		switch (env.TERM_PROGRAM) {
  			case 'iTerm.app':
  				return version >= 3 ? 3 : 2;
  			case 'Apple_Terminal':
  				return 2;
  			// No default
  		}
  	}

  	if (/-256(color)?$/i.test(env.TERM)) {
  		return 2;
  	}

  	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
  		return 1;
  	}

  	if ('COLORTERM' in env) {
  		return 1;
  	}

  	return min;
  }

  function getSupportLevel(stream) {
  	const level = supportsColor(stream, stream && stream.isTTY);
  	return translateLevel(level);
  }

  var supportsColor_1 = {
  	supportsColor: getSupportLevel,
  	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
  	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
  };

  var node = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   */

  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
  	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
  	// eslint-disable-next-line import/no-extraneous-dependencies
  	const supportsColor = supportsColor_1;

  	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
  		exports.colors = [
  			20,
  			21,
  			26,
  			27,
  			32,
  			33,
  			38,
  			39,
  			40,
  			41,
  			42,
  			43,
  			44,
  			45,
  			56,
  			57,
  			62,
  			63,
  			68,
  			69,
  			74,
  			75,
  			76,
  			77,
  			78,
  			79,
  			80,
  			81,
  			92,
  			93,
  			98,
  			99,
  			112,
  			113,
  			128,
  			129,
  			134,
  			135,
  			148,
  			149,
  			160,
  			161,
  			162,
  			163,
  			164,
  			165,
  			166,
  			167,
  			168,
  			169,
  			170,
  			171,
  			172,
  			173,
  			178,
  			179,
  			184,
  			185,
  			196,
  			197,
  			198,
  			199,
  			200,
  			201,
  			202,
  			203,
  			204,
  			205,
  			206,
  			207,
  			208,
  			209,
  			214,
  			215,
  			220,
  			221
  		];
  	}
  } catch (error) {
  	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
  }

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(key => {
  	return /^debug_/i.test(key);
  }).reduce((obj, key) => {
  	// Camel-case
  	const prop = key
  		.substring(6)
  		.toLowerCase()
  		.replace(/_([a-z])/g, (_, k) => {
  			return k.toUpperCase();
  		});

  	// Coerce string value into JS value
  	let val = process.env[key];
  	if (/^(yes|on|true|enabled)$/i.test(val)) {
  		val = true;
  	} else if (/^(no|off|false|disabled)$/i.test(val)) {
  		val = false;
  	} else if (val === 'null') {
  		val = null;
  	} else {
  		val = Number(val);
  	}

  	obj[prop] = val;
  	return obj;
  }, {});

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
  	return 'colors' in exports.inspectOpts ?
  		Boolean(exports.inspectOpts.colors) :
  		tty.isatty(process.stderr.fd);
  }

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
  	const {namespace: name, useColors} = this;

  	if (useColors) {
  		const c = this.color;
  		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
  		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

  		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
  		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
  	} else {
  		args[0] = getDate() + name + ' ' + args[0];
  	}
  }

  function getDate() {
  	if (exports.inspectOpts.hideDate) {
  		return '';
  	}
  	return new Date().toISOString() + ' ';
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to stderr.
   */

  function log(...args) {
  	return process.stderr.write(util$2.format(...args) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
  	if (namespaces) {
  		process.env.DEBUG = namespaces;
  	} else {
  		// If you set a process.env field to null or undefined, it gets cast to the
  		// string 'null' or 'undefined'. Just delete instead.
  		delete process.env.DEBUG;
  	}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
  	return process.env.DEBUG;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init(debug) {
  	debug.inspectOpts = {};

  	const keys = Object.keys(exports.inspectOpts);
  	for (let i = 0; i < keys.length; i++) {
  		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  	}
  }

  module.exports = common(exports);

  const {formatters} = module.exports;

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  formatters.o = function (v) {
  	this.inspectOpts.colors = this.useColors;
  	return util$2.inspect(v, this.inspectOpts)
  		.replace(/\s*\n\s*/g, ' ');
  };

  /**
   * Map %O to `util.inspect()`, allowing multiple lines if needed.
   */

  formatters.O = function (v) {
  	this.inspectOpts.colors = this.useColors;
  	return util$2.inspect(v, this.inspectOpts);
  };
  });
  var node_1 = node.init;
  var node_2 = node.log;
  var node_3 = node.formatArgs;
  var node_4 = node.save;
  var node_5 = node.load;
  var node_6 = node.useColors;
  var node_7 = node.colors;
  var node_8 = node.inspectOpts;

  var src = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer / nwjs process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
  	module.exports = browser;
  } else {
  	module.exports = node;
  }
  });

  /**
   * Module dependencies.
   */


  var debug = src('socket.io-client:url');

  /**
   * Module exports.
   */

  var url_1 = url;

  /**
   * URL parser.
   *
   * @param {String} url
   * @param {Object} An object meant to mimic window.location.
   *                 Defaults to window.location.
   * @api public
   */

  function url (uri, loc) {
    var obj = uri;

    // default to window.location
    loc = loc || (typeof location !== 'undefined' && location);
    if (null == uri) uri = loc.protocol + '//' + loc.host;

    // relative path support
    if ('string' === typeof uri) {
      if ('/' === uri.charAt(0)) {
        if ('/' === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }

      if (!/^(https?|wss?):\/\//.test(uri)) {
        debug('protocol-less url %s', uri);
        if ('undefined' !== typeof loc) {
          uri = loc.protocol + '//' + uri;
        } else {
          uri = 'https://' + uri;
        }
      }

      // parse
      debug('parse %s', uri);
      obj = parseuri(uri);
    }

    // make sure we treat `localhost:80` and `localhost` equally
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = '80';
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = '443';
      }
    }

    obj.path = obj.path || '/';

    var ipv6 = obj.host.indexOf(':') !== -1;
    var host = ipv6 ? '[' + obj.host + ']' : obj.host;

    // define unique id
    obj.id = obj.protocol + '://' + host + ':' + obj.port;
    // define href
    obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

    return obj;
  }

  /**
   * Helpers.
   */

  var s$1 = 1000;
  var m$1 = s$1 * 60;
  var h$1 = m$1 * 60;
  var d$1 = h$1 * 24;
  var y$2 = d$1 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$1 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$1(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$1(val) : fmtShort$1(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$1(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$2;
      case 'days':
      case 'day':
      case 'd':
        return n * d$1;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$1;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$1;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$1;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$1(ms) {
    if (ms >= d$1) {
      return Math.round(ms / d$1) + 'd';
    }
    if (ms >= h$1) {
      return Math.round(ms / h$1) + 'h';
    }
    if (ms >= m$1) {
      return Math.round(ms / m$1) + 'm';
    }
    if (ms >= s$1) {
      return Math.round(ms / s$1) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$1(ms) {
    return plural$1(ms, d$1, 'day') ||
      plural$1(ms, h$1, 'hour') ||
      plural$1(ms, m$1, 'minute') ||
      plural$1(ms, s$1, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$1(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug$1 = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$1;

  /**
   * Active `debug` instances.
   */
  exports.instances = [];

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    var prevTime;

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);

    return debug;
  }

  function destroy () {
    var index = exports.instances.indexOf(this);
    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1 = debug$1.coerce;
  var debug_2 = debug$1.disable;
  var debug_3 = debug$1.enable;
  var debug_4 = debug$1.enabled;
  var debug_5 = debug$1.humanize;
  var debug_6 = debug$1.instances;
  var debug_7 = debug$1.names;
  var debug_8 = debug$1.skips;
  var debug_9 = debug$1.formatters;

  var browser$1 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$1;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
    '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
    '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
    '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
    '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
    '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
    '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
    '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
    '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
    '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
    '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1$1 = browser$1.log;
  var browser_2$1 = browser$1.formatArgs;
  var browser_3$1 = browser$1.save;
  var browser_4$1 = browser$1.load;
  var browser_5$1 = browser$1.useColors;
  var browser_6$1 = browser$1.storage;
  var browser_7$1 = browser$1.colors;

  var node$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$1;
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [ 6, 2, 3, 4, 5, 1 ];

  try {
    var supportsColor = supportsColor_1;
    if (supportsColor && supportsColor.level >= 2) {
      exports.colors = [
        20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68,
        69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134,
        135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
        172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204,
        205, 206, 207, 208, 209, 214, 215, 220, 221
      ];
    }
  } catch (err) {
    // swallow - we only care if `supports-color` is available; it doesn't have to be.
  }

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // camel-case
    var prop = key
      .substring(6)
      .toLowerCase()
      .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === 'null') val = null;
    else val = Number(val);

    obj[prop] = val;
    return obj;
  }, {});

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty.isatty(process.stderr.fd);
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts)
      .split('\n').map(function(str) {
        return str.trim()
      }).join(' ');
  };

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts);
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
      var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';

      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    } else {
      return new Date().toISOString() + ' ';
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to stderr.
   */

  function log() {
    return process.stderr.write(util$2.format.apply(util$2, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init (debug) {
    debug.inspectOpts = {};

    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());
  });
  var node_1$1 = node$1.init;
  var node_2$1 = node$1.log;
  var node_3$1 = node$1.formatArgs;
  var node_4$1 = node$1.save;
  var node_5$1 = node$1.load;
  var node_6$1 = node$1.useColors;
  var node_7$1 = node$1.colors;
  var node_8$1 = node$1.inspectOpts;

  var src$1 = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process === 'undefined' || process.type === 'renderer') {
    module.exports = browser$1;
  } else {
    module.exports = node$1;
  }
  });

  var componentEmitter = createCommonjsModule(function (module) {
  /**
   * Expose `Emitter`.
   */

  {
    module.exports = Emitter;
  }

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }
  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
  Emitter.prototype.addEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
      .push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
  Emitter.prototype.removeListener =
  Emitter.prototype.removeAllListeners =
  Emitter.prototype.removeEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1)
      , callbacks = this._callbacks['$' + event];

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };
  });

  var toString = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  var isBuffer = isBuf;

  var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
  var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

  var isView = function (obj) {
    return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
  };

  /**
   * Returns true if obj is a buffer or an arraybuffer.
   *
   * @api private
   */

  function isBuf(obj) {
    return (withNativeBuffer && Buffer.isBuffer(obj)) ||
            (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
  }

  /*global Blob,File*/

  /**
   * Module requirements
   */



  var toString$1 = Object.prototype.toString;
  var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString$1.call(Blob) === '[object BlobConstructor]');
  var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString$1.call(File) === '[object FileConstructor]');

  /**
   * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
   * Anything with blobs or files should be fed through removeBlobs before coming
   * here.
   *
   * @param {Object} packet - socket.io event packet
   * @return {Object} with deconstructed packet and list of buffers
   * @api public
   */

  var deconstructPacket = function(packet) {
    var buffers = [];
    var packetData = packet.data;
    var pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return {packet: pack, buffers: buffers};
  };

  function _deconstructPacket(data, buffers) {
    if (!data) return data;

    if (isBuffer(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isarray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i], buffers);
      }
      return newData;
    } else if (typeof data === 'object' && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key], buffers);
      }
      return newData;
    }
    return data;
  }

  /**
   * Reconstructs a binary packet from its placeholder packet and buffers
   *
   * @param {Object} packet - event packet with placeholders
   * @param {Array} buffers - binary buffers to put in placeholder positions
   * @return {Object} reconstructed packet
   * @api public
   */

  var reconstructPacket = function(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = undefined; // no longer useful
    return packet;
  };

  function _reconstructPacket(data, buffers) {
    if (!data) return data;

    if (data && data._placeholder) {
      return buffers[data.num]; // appropriate buffer (should be natural order anyway)
    } else if (isarray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i], buffers);
      }
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key], buffers);
      }
    }

    return data;
  }

  /**
   * Asynchronously removes Blobs or Files from data via
   * FileReader's readAsArrayBuffer method. Used before encoding
   * data as msgpack. Calls callback with the blobless data.
   *
   * @param {Object} data
   * @param {Function} callback
   * @api private
   */

  var removeBlobs = function(data, callback) {
    function _removeBlobs(obj, curKey, containingObject) {
      if (!obj) return obj;

      // convert any blob
      if ((withNativeBlob && obj instanceof Blob) ||
          (withNativeFile && obj instanceof File)) {
        pendingBlobs++;

        // async filereader
        var fileReader = new FileReader();
        fileReader.onload = function() { // this.result == arraybuffer
          if (containingObject) {
            containingObject[curKey] = this.result;
          }
          else {
            bloblessData = this.result;
          }

          // if nothing pending its callback time
          if(! --pendingBlobs) {
            callback(bloblessData);
          }
        };

        fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
      } else if (isarray(obj)) { // handle array
        for (var i = 0; i < obj.length; i++) {
          _removeBlobs(obj[i], i, obj);
        }
      } else if (typeof obj === 'object' && !isBuffer(obj)) { // and object
        for (var key in obj) {
          _removeBlobs(obj[key], key, obj);
        }
      }
    }

    var pendingBlobs = 0;
    var bloblessData = data;
    _removeBlobs(bloblessData);
    if (!pendingBlobs) {
      callback(bloblessData);
    }
  };

  var binary = {
  	deconstructPacket: deconstructPacket,
  	reconstructPacket: reconstructPacket,
  	removeBlobs: removeBlobs
  };

  var socket_ioParser = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */

  var debug = src$1('socket.io-parser');





  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = 4;

  /**
   * Packet types.
   *
   * @api public
   */

  exports.types = [
    'CONNECT',
    'DISCONNECT',
    'EVENT',
    'ACK',
    'ERROR',
    'BINARY_EVENT',
    'BINARY_ACK'
  ];

  /**
   * Packet type `connect`.
   *
   * @api public
   */

  exports.CONNECT = 0;

  /**
   * Packet type `disconnect`.
   *
   * @api public
   */

  exports.DISCONNECT = 1;

  /**
   * Packet type `event`.
   *
   * @api public
   */

  exports.EVENT = 2;

  /**
   * Packet type `ack`.
   *
   * @api public
   */

  exports.ACK = 3;

  /**
   * Packet type `error`.
   *
   * @api public
   */

  exports.ERROR = 4;

  /**
   * Packet type 'binary event'
   *
   * @api public
   */

  exports.BINARY_EVENT = 5;

  /**
   * Packet type `binary ack`. For acks with binary arguments.
   *
   * @api public
   */

  exports.BINARY_ACK = 6;

  /**
   * Encoder constructor.
   *
   * @api public
   */

  exports.Encoder = Encoder;

  /**
   * Decoder constructor.
   *
   * @api public
   */

  exports.Decoder = Decoder;

  /**
   * A socket.io Encoder instance
   *
   * @api public
   */

  function Encoder() {}

  var ERROR_PACKET = exports.ERROR + '"encode error"';

  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   * @param {Function} callback - function to handle encodings (likely engine.write)
   * @return Calls callback with Array of encodings
   * @api public
   */

  Encoder.prototype.encode = function(obj, callback){
    debug('encoding packet %j', obj);

    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      encodeAsBinary(obj, callback);
    } else {
      var encoding = encodeAsString(obj);
      callback([encoding]);
    }
  };

  /**
   * Encode packet as string.
   *
   * @param {Object} packet
   * @return {String} encoded
   * @api private
   */

  function encodeAsString(obj) {

    // first is type
    var str = '' + obj.type;

    // attachments if we have them
    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      str += obj.attachments + '-';
    }

    // if we have a namespace other than `/`
    // we append it followed by a comma `,`
    if (obj.nsp && '/' !== obj.nsp) {
      str += obj.nsp + ',';
    }

    // immediately followed by the id
    if (null != obj.id) {
      str += obj.id;
    }

    // json data
    if (null != obj.data) {
      var payload = tryStringify(obj.data);
      if (payload !== false) {
        str += payload;
      } else {
        return ERROR_PACKET;
      }
    }

    debug('encoded %j as %s', obj, str);
    return str;
  }

  function tryStringify(str) {
    try {
      return JSON.stringify(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   *
   * @param {Object} packet
   * @return {Buffer} encoded
   * @api private
   */

  function encodeAsBinary(obj, callback) {

    function writeEncoding(bloblessData) {
      var deconstruction = binary.deconstructPacket(bloblessData);
      var pack = encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;

      buffers.unshift(pack); // add packet info to beginning of data list
      callback(buffers); // write all the buffers
    }

    binary.removeBlobs(obj, writeEncoding);
  }

  /**
   * A socket.io Decoder instance
   *
   * @return {Object} decoder
   * @api public
   */

  function Decoder() {
    this.reconstructor = null;
  }

  /**
   * Mix in `Emitter` with Decoder.
   */

  componentEmitter(Decoder.prototype);

  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   * @return {Object} packet
   * @api public
   */

  Decoder.prototype.add = function(obj) {
    var packet;
    if (typeof obj === 'string') {
      packet = decodeString(obj);
      if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
        this.reconstructor = new BinaryReconstructor(packet);

        // no attachments, labeled binary but no binary data to follow
        if (this.reconstructor.reconPack.attachments === 0) {
          this.emit('decoded', packet);
        }
      } else { // non-binary full packet
        this.emit('decoded', packet);
      }
    } else if (isBuffer(obj) || obj.base64) { // raw binary data
      if (!this.reconstructor) {
        throw new Error('got binary data when not reconstructing a packet');
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) { // received final buffer
          this.reconstructor = null;
          this.emit('decoded', packet);
        }
      }
    } else {
      throw new Error('Unknown type: ' + obj);
    }
  };

  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   * @api private
   */

  function decodeString(str) {
    var i = 0;
    // look up type
    var p = {
      type: Number(str.charAt(0))
    };

    if (null == exports.types[p.type]) {
      return error('unknown packet type ' + p.type);
    }

    // look up attachments if type binary
    if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
      var buf = '';
      while (str.charAt(++i) !== '-') {
        buf += str.charAt(i);
        if (i == str.length) break;
      }
      if (buf != Number(buf) || str.charAt(i) !== '-') {
        throw new Error('Illegal attachments');
      }
      p.attachments = Number(buf);
    }

    // look up namespace (if any)
    if ('/' === str.charAt(i + 1)) {
      p.nsp = '';
      while (++i) {
        var c = str.charAt(i);
        if (',' === c) break;
        p.nsp += c;
        if (i === str.length) break;
      }
    } else {
      p.nsp = '/';
    }

    // look up id
    var next = str.charAt(i + 1);
    if ('' !== next && Number(next) == next) {
      p.id = '';
      while (++i) {
        var c = str.charAt(i);
        if (null == c || Number(c) != c) {
          --i;
          break;
        }
        p.id += str.charAt(i);
        if (i === str.length) break;
      }
      p.id = Number(p.id);
    }

    // look up json data
    if (str.charAt(++i)) {
      var payload = tryParse(str.substr(i));
      var isPayloadValid = payload !== false && (p.type === exports.ERROR || isarray(payload));
      if (isPayloadValid) {
        p.data = payload;
      } else {
        return error('invalid payload');
      }
    }

    debug('decoded %s as %j', str, p);
    return p;
  }

  function tryParse(str) {
    try {
      return JSON.parse(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Deallocates a parser's resources
   *
   * @api public
   */

  Decoder.prototype.destroy = function() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
    }
  };

  /**
   * A manager of a binary event's 'buffer sequence'. Should
   * be constructed whenever a packet of type BINARY_EVENT is
   * decoded.
   *
   * @param {Object} packet
   * @return {BinaryReconstructor} initialized reconstructor
   * @api private
   */

  function BinaryReconstructor(packet) {
    this.reconPack = packet;
    this.buffers = [];
  }

  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   * @api private
   */

  BinaryReconstructor.prototype.takeBinaryData = function(binData) {
    this.buffers.push(binData);
    if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
      var packet = binary.reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  };

  /**
   * Cleans up binary packet reconstruction variables.
   *
   * @api private
   */

  BinaryReconstructor.prototype.finishedReconstruction = function() {
    this.reconPack = null;
    this.buffers = [];
  };

  function error(msg) {
    return {
      type: exports.ERROR,
      data: 'parser error: ' + msg
    };
  }
  });
  var socket_ioParser_1 = socket_ioParser.protocol;
  var socket_ioParser_2 = socket_ioParser.types;
  var socket_ioParser_3 = socket_ioParser.CONNECT;
  var socket_ioParser_4 = socket_ioParser.DISCONNECT;
  var socket_ioParser_5 = socket_ioParser.EVENT;
  var socket_ioParser_6 = socket_ioParser.ACK;
  var socket_ioParser_7 = socket_ioParser.ERROR;
  var socket_ioParser_8 = socket_ioParser.BINARY_EVENT;
  var socket_ioParser_9 = socket_ioParser.BINARY_ACK;
  var socket_ioParser_10 = socket_ioParser.Encoder;
  var socket_ioParser_11 = socket_ioParser.Decoder;

  /**
   * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
   *
   * This can be used with JS designed for browsers to improve reuse of code and
   * allow the use of existing libraries.
   *
   * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
   *
   * @author Dan DeFelippi <dan@driverdan.com>
   * @contributor David Ellis <d.f.ellis@ieee.org>
   * @license MIT
   */



  var spawn = child_process.spawn;

  /**
   * Module exports.
   */

  var XMLHttpRequest_1 = XMLHttpRequest;

  // backwards-compat
  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  /**
   * `XMLHttpRequest` constructor.
   *
   * Supported options for the `opts` object are:
   *
   *  - `agent`: An http.Agent instance; http.globalAgent may be used; if 'undefined', agent usage is disabled
   *
   * @param {Object} opts optional "options" object
   */

  function XMLHttpRequest(opts) {

    opts = opts || {};

    /**
     * Private variables
     */
    var self = this;
    var http$1 = http;
    var https$1 = https;

    // Holds http.js objects
    var request;
    var response;

    // Request settings
    var settings = {};

    // Disable header blacklist.
    // Not part of XHR specs.
    var disableHeaderCheck = false;

    // Set some default headers
    var defaultHeaders = {
      "User-Agent": "node-XMLHttpRequest",
      "Accept": "*/*"
    };

    var headers = Object.assign({}, defaultHeaders);

    // These headers are not user setable.
    // The following are allowed but banned in the spec:
    // * user-agent
    var forbiddenRequestHeaders = [
      "accept-charset",
      "accept-encoding",
      "access-control-request-headers",
      "access-control-request-method",
      "connection",
      "content-length",
      "content-transfer-encoding",
      "cookie",
      "cookie2",
      "date",
      "expect",
      "host",
      "keep-alive",
      "origin",
      "referer",
      "te",
      "trailer",
      "transfer-encoding",
      "upgrade",
      "via"
    ];

    // These request methods are not allowed
    var forbiddenRequestMethods = [
      "TRACE",
      "TRACK",
      "CONNECT"
    ];

    // Send flag
    var sendFlag = false;
    // Error flag, used when errors occur or abort is called
    var errorFlag = false;

    // Event listeners
    var listeners = {};

    /**
     * Constants
     */

    this.UNSENT = 0;
    this.OPENED = 1;
    this.HEADERS_RECEIVED = 2;
    this.LOADING = 3;
    this.DONE = 4;

    /**
     * Public vars
     */

    // Current state
    this.readyState = this.UNSENT;

    // default ready state change handler in case one is not set or is set late
    this.onreadystatechange = null;

    // Result & response
    this.responseText = "";
    this.responseXML = "";
    this.status = null;
    this.statusText = null;

    /**
     * Private methods
     */

    /**
     * Check if the specified header is allowed.
     *
     * @param string header Header to validate
     * @return boolean False if not allowed, otherwise true
     */
    var isAllowedHttpHeader = function(header) {
      return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
    };

    /**
     * Check if the specified method is allowed.
     *
     * @param string method Request method to validate
     * @return boolean False if not allowed, otherwise true
     */
    var isAllowedHttpMethod = function(method) {
      return (method && forbiddenRequestMethods.indexOf(method) === -1);
    };

    /**
     * Public methods
     */

    /**
     * Open the connection. Currently supports local server requests.
     *
     * @param string method Connection method (eg GET, POST)
     * @param string url URL for the connection.
     * @param boolean async Asynchronous connection. Default is true.
     * @param string user Username for basic authentication (optional)
     * @param string password Password for basic authentication (optional)
     */
    this.open = function(method, url, async, user, password) {
      this.abort();
      errorFlag = false;

      // Check for valid request method
      if (!isAllowedHttpMethod(method)) {
        throw "SecurityError: Request method not allowed";
      }

      settings = {
        "method": method,
        "url": url.toString(),
        "async": (typeof async !== "boolean" ? true : async),
        "user": user || null,
        "password": password || null
      };

      setState(this.OPENED);
    };

    /**
     * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
     * This does not conform to the W3C spec.
     *
     * @param boolean state Enable or disable header checking.
     */
    this.setDisableHeaderCheck = function(state) {
      disableHeaderCheck = state;
    };

    /**
     * Sets a header for the request.
     *
     * @param string header Header name
     * @param string value Header value
     * @return boolean Header added
     */
    this.setRequestHeader = function(header, value) {
      if (this.readyState != this.OPENED) {
        throw "INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN";
      }
      if (!isAllowedHttpHeader(header)) {
        console.warn('Refused to set unsafe header "' + header + '"');
        return false;
      }
      if (sendFlag) {
        throw "INVALID_STATE_ERR: send flag is true";
      }
      headers[header] = value;
      return true;
    };

    /**
     * Gets a header from the server response.
     *
     * @param string header Name of header to get.
     * @return string Text of the header or null if it doesn't exist.
     */
    this.getResponseHeader = function(header) {
      if (typeof header === "string"
        && this.readyState > this.OPENED
        && response.headers[header.toLowerCase()]
        && !errorFlag
      ) {
        return response.headers[header.toLowerCase()];
      }

      return null;
    };

    /**
     * Gets all the response headers.
     *
     * @return string A string with all response headers separated by CR+LF
     */
    this.getAllResponseHeaders = function() {
      if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
        return "";
      }
      var result = "";

      for (var i in response.headers) {
        // Cookie headers are excluded
        if (i !== "set-cookie" && i !== "set-cookie2") {
          result += i + ": " + response.headers[i] + "\r\n";
        }
      }
      return result.substr(0, result.length - 2);
    };

    /**
     * Gets a request header
     *
     * @param string name Name of header to get
     * @return string Returns the request header or empty string if not set
     */
    this.getRequestHeader = function(name) {
      // @TODO Make this case insensitive
      if (typeof name === "string" && headers[name]) {
        return headers[name];
      }

      return "";
    };

    /**
     * Sends the request to the server.
     *
     * @param string data Optional data to send as request body.
     */
    this.send = function(data) {
      if (this.readyState != this.OPENED) {
        throw "INVALID_STATE_ERR: connection must be opened before send() is called";
      }

      if (sendFlag) {
        throw "INVALID_STATE_ERR: send has already been called";
      }

      var ssl = false, local = false;
      var url = url$1.parse(settings.url);
      var host;
      // Determine the server
      switch (url.protocol) {
        case 'https:':
          ssl = true;
          // SSL & non-SSL both need host, no break here.
        case 'http:':
          host = url.hostname;
          break;

        case 'file:':
          local = true;
          break;

        case undefined:
        case '':
          host = "localhost";
          break;

        default:
          throw "Protocol not supported.";
      }

      // Load files off the local filesystem (file://)
      if (local) {
        if (settings.method !== "GET") {
          throw "XMLHttpRequest: Only GET method is supported";
        }

        if (settings.async) {
          fs.readFile(url.pathname, 'utf8', function(error, data) {
            if (error) {
              self.handleError(error);
            } else {
              self.status = 200;
              self.responseText = data;
              setState(self.DONE);
            }
          });
        } else {
          try {
            this.responseText = fs.readFileSync(url.pathname, 'utf8');
            this.status = 200;
            setState(self.DONE);
          } catch(e) {
            this.handleError(e);
          }
        }

        return;
      }

      // Default to port 80. If accessing localhost on another port be sure
      // to use http://localhost:port/path
      var port = url.port || (ssl ? 443 : 80);
      // Add query string if one is used
      var uri = url.pathname + (url.search ? url.search : '');

      // Set the Host header or the server may reject the request
      headers["Host"] = host;
      if (!((ssl && port === 443) || port === 80)) {
        headers["Host"] += ':' + url.port;
      }

      // Set Basic Auth if necessary
      if (settings.user) {
        if (typeof settings.password == "undefined") {
          settings.password = "";
        }
        var authBuf = new Buffer(settings.user + ":" + settings.password);
        headers["Authorization"] = "Basic " + authBuf.toString("base64");
      }

      // Set content length header
      if (settings.method === "GET" || settings.method === "HEAD") {
        data = null;
      } else if (data) {
        headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

        if (!headers["Content-Type"]) {
          headers["Content-Type"] = "text/plain;charset=UTF-8";
        }
      } else if (settings.method === "POST") {
        // For a post with no data set Content-Length: 0.
        // This is required by buggy servers that don't meet the specs.
        headers["Content-Length"] = 0;
      }

      var agent = opts.agent || false;
      var options = {
        host: host,
        port: port,
        path: uri,
        method: settings.method,
        headers: headers,
        agent: agent
      };

      if (ssl) {
        options.pfx = opts.pfx;
        options.key = opts.key;
        options.passphrase = opts.passphrase;
        options.cert = opts.cert;
        options.ca = opts.ca;
        options.ciphers = opts.ciphers;
        options.rejectUnauthorized = opts.rejectUnauthorized;
      }

      // Reset error flag
      errorFlag = false;

      // Handle async requests
      if (settings.async) {
        // Use the proper protocol
        var doRequest = ssl ? https$1.request : http$1.request;

        // Request is being sent, set send flag
        sendFlag = true;

        // As per spec, this is called here for historical reasons.
        self.dispatchEvent("readystatechange");

        // Handler for the response
        var responseHandler = function(resp) {
          // Set response var to the response we got back
          // This is so it remains accessable outside this scope
          response = resp;
          // Check for redirect
          // @TODO Prevent looped redirects
          if (response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
            // Change URL to the redirect location
            settings.url = response.headers.location;
            var url = url$1.parse(settings.url);
            // Set host var in case it's used later
            host = url.hostname;
            // Options for the new request
            var newOptions = {
              hostname: url.hostname,
              port: url.port,
              path: url.path,
              method: response.statusCode === 303 ? 'GET' : settings.method,
              headers: headers
            };

            if (ssl) {
              newOptions.pfx = opts.pfx;
              newOptions.key = opts.key;
              newOptions.passphrase = opts.passphrase;
              newOptions.cert = opts.cert;
              newOptions.ca = opts.ca;
              newOptions.ciphers = opts.ciphers;
              newOptions.rejectUnauthorized = opts.rejectUnauthorized;
            }

            // Issue the new request
            request = doRequest(newOptions, responseHandler).on('error', errorHandler);
            request.end();
            // @TODO Check if an XHR event needs to be fired here
            return;
          }

          if (response && response.setEncoding) {
            response.setEncoding("utf8");
          }

          setState(self.HEADERS_RECEIVED);
          self.status = response.statusCode;

          response.on('data', function(chunk) {
            // Make sure there's some data
            if (chunk) {
              self.responseText += chunk;
            }
            // Don't emit state changes if the connection has been aborted.
            if (sendFlag) {
              setState(self.LOADING);
            }
          });

          response.on('end', function() {
            if (sendFlag) {
              // The sendFlag needs to be set before setState is called.  Otherwise if we are chaining callbacks
              // there can be a timing issue (the callback is called and a new call is made before the flag is reset).
              sendFlag = false;
              // Discard the 'end' event if the connection has been aborted
              setState(self.DONE);
            }
          });

          response.on('error', function(error) {
            self.handleError(error);
          });
        };

        // Error handler for the request
        var errorHandler = function(error) {
          self.handleError(error);
        };

        // Create the request
        request = doRequest(options, responseHandler).on('error', errorHandler);

        // Node 0.4 and later won't accept empty data. Make sure it's needed.
        if (data) {
          request.write(data);
        }

        request.end();

        self.dispatchEvent("loadstart");
      } else { // Synchronous
        // Create a temporary file for communication with the other Node process
        var contentFile = ".node-xmlhttprequest-content-" + process.pid;
        var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
        fs.writeFileSync(syncFile, "", "utf8");
        // The async request the other Node process executes
        var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
          + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
          + "var options = " + JSON.stringify(options) + ";"
          + "var responseText = '';"
          + "var req = doRequest(options, function(response) {"
          + "response.setEncoding('utf8');"
          + "response.on('data', function(chunk) {"
          + "  responseText += chunk;"
          + "});"
          + "response.on('end', function() {"
          + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');"
          + "fs.unlinkSync('" + syncFile + "');"
          + "});"
          + "response.on('error', function(error) {"
          + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
          + "fs.unlinkSync('" + syncFile + "');"
          + "});"
          + "}).on('error', function(error) {"
          + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
          + "fs.unlinkSync('" + syncFile + "');"
          + "});"
          + (data ? "req.write('" + data.replace(/'/g, "\\'") + "');":"")
          + "req.end();";
        // Start the other Node Process, executing this string
        var syncProc = spawn(process.argv[0], ["-e", execString]);
        while(fs.existsSync(syncFile)) {
          // Wait while the sync file is empty
        }
        self.responseText = fs.readFileSync(contentFile, 'utf8');
        // Kill the child process once the file has data
        syncProc.stdin.end();
        // Remove the temporary file
        fs.unlinkSync(contentFile);
        if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {
          // If the file returned an error, handle it
          var errorObj = self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, "");
          self.handleError(errorObj);
        } else {
          // If the file returned okay, parse its data and move to the DONE state
          self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, "$1");
          self.responseText = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, "$1");
          setState(self.DONE);
        }
      }
    };

    /**
     * Called when an error is encountered to deal with it.
     */
    this.handleError = function(error) {
      this.status = 503;
      this.statusText = error;
      this.responseText = error.stack;
      errorFlag = true;
      setState(this.DONE);
    };

    /**
     * Aborts a request.
     */
    this.abort = function() {
      if (request) {
        request.abort();
        request = null;
      }

      headers = Object.assign({}, defaultHeaders);
      this.responseText = "";
      this.responseXML = "";

      errorFlag = true;

      if (this.readyState !== this.UNSENT
          && (this.readyState !== this.OPENED || sendFlag)
          && this.readyState !== this.DONE) {
        sendFlag = false;
        setState(this.DONE);
      }
      this.readyState = this.UNSENT;
    };

    /**
     * Adds an event listener. Preferred method of binding to events.
     */
    this.addEventListener = function(event, callback) {
      if (!(event in listeners)) {
        listeners[event] = [];
      }
      // Currently allows duplicate callbacks. Should it?
      listeners[event].push(callback);
    };

    /**
     * Remove an event callback that has already been bound.
     * Only works on the matching funciton, cannot be a copy.
     */
    this.removeEventListener = function(event, callback) {
      if (event in listeners) {
        // Filter will return a new array with the callback removed
        listeners[event] = listeners[event].filter(function(ev) {
          return ev !== callback;
        });
      }
    };

    /**
     * Dispatch any events, including both "on" methods and events attached using addEventListener.
     */
    this.dispatchEvent = function(event) {
      if (typeof self["on" + event] === "function") {
        self["on" + event]();
      }
      if (event in listeners) {
        for (var i = 0, len = listeners[event].length; i < len; i++) {
          listeners[event][i].call(self);
        }
      }
    };

    /**
     * Changes readyState and calls onreadystatechange.
     *
     * @param int state New state
     */
    var setState = function(state) {
      if (self.readyState !== state) {
        self.readyState = state;

        if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
          self.dispatchEvent("readystatechange");
        }

        if (self.readyState === self.DONE && !errorFlag) {
          self.dispatchEvent("load");
          // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
          self.dispatchEvent("loadend");
        }
      }
    };
  }

  /*! https://mths.be/utf8js v2.1.2 by @mathias */

  var stringFromCharCode = String.fromCharCode;

  // Taken from https://mths.be/punycode
  function ucs2decode(string) {
  	var output = [];
  	var counter = 0;
  	var length = string.length;
  	var value;
  	var extra;
  	while (counter < length) {
  		value = string.charCodeAt(counter++);
  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  			// high surrogate, and there is a next character
  			extra = string.charCodeAt(counter++);
  			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  			} else {
  				// unmatched surrogate; only append this code unit, in case the next
  				// code unit is the high surrogate of a surrogate pair
  				output.push(value);
  				counter--;
  			}
  		} else {
  			output.push(value);
  		}
  	}
  	return output;
  }

  // Taken from https://mths.be/punycode
  function ucs2encode(array) {
  	var length = array.length;
  	var index = -1;
  	var value;
  	var output = '';
  	while (++index < length) {
  		value = array[index];
  		if (value > 0xFFFF) {
  			value -= 0x10000;
  			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  			value = 0xDC00 | value & 0x3FF;
  		}
  		output += stringFromCharCode(value);
  	}
  	return output;
  }

  function checkScalarValue(codePoint, strict) {
  	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  		if (strict) {
  			throw Error(
  				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  				' is not a scalar value'
  			);
  		}
  		return false;
  	}
  	return true;
  }
  /*--------------------------------------------------------------------------*/

  function createByte(codePoint, shift) {
  	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  }

  function encodeCodePoint(codePoint, strict) {
  	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  		return stringFromCharCode(codePoint);
  	}
  	var symbol = '';
  	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  	}
  	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  		if (!checkScalarValue(codePoint, strict)) {
  			codePoint = 0xFFFD;
  		}
  		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  		symbol += createByte(codePoint, 6);
  	}
  	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  		symbol += createByte(codePoint, 12);
  		symbol += createByte(codePoint, 6);
  	}
  	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  	return symbol;
  }

  function utf8encode(string, opts) {
  	opts = opts || {};
  	var strict = false !== opts.strict;

  	var codePoints = ucs2decode(string);
  	var length = codePoints.length;
  	var index = -1;
  	var codePoint;
  	var byteString = '';
  	while (++index < length) {
  		codePoint = codePoints[index];
  		byteString += encodeCodePoint(codePoint, strict);
  	}
  	return byteString;
  }

  /*--------------------------------------------------------------------------*/

  function readContinuationByte() {
  	if (byteIndex >= byteCount) {
  		throw Error('Invalid byte index');
  	}

  	var continuationByte = byteArray[byteIndex] & 0xFF;
  	byteIndex++;

  	if ((continuationByte & 0xC0) == 0x80) {
  		return continuationByte & 0x3F;
  	}

  	// If we end up here, it’s not a continuation byte
  	throw Error('Invalid continuation byte');
  }

  function decodeSymbol(strict) {
  	var byte1;
  	var byte2;
  	var byte3;
  	var byte4;
  	var codePoint;

  	if (byteIndex > byteCount) {
  		throw Error('Invalid byte index');
  	}

  	if (byteIndex == byteCount) {
  		return false;
  	}

  	// Read first byte
  	byte1 = byteArray[byteIndex] & 0xFF;
  	byteIndex++;

  	// 1-byte sequence (no continuation bytes)
  	if ((byte1 & 0x80) == 0) {
  		return byte1;
  	}

  	// 2-byte sequence
  	if ((byte1 & 0xE0) == 0xC0) {
  		byte2 = readContinuationByte();
  		codePoint = ((byte1 & 0x1F) << 6) | byte2;
  		if (codePoint >= 0x80) {
  			return codePoint;
  		} else {
  			throw Error('Invalid continuation byte');
  		}
  	}

  	// 3-byte sequence (may include unpaired surrogates)
  	if ((byte1 & 0xF0) == 0xE0) {
  		byte2 = readContinuationByte();
  		byte3 = readContinuationByte();
  		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  		if (codePoint >= 0x0800) {
  			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
  		} else {
  			throw Error('Invalid continuation byte');
  		}
  	}

  	// 4-byte sequence
  	if ((byte1 & 0xF8) == 0xF0) {
  		byte2 = readContinuationByte();
  		byte3 = readContinuationByte();
  		byte4 = readContinuationByte();
  		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
  			(byte3 << 0x06) | byte4;
  		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  			return codePoint;
  		}
  	}

  	throw Error('Invalid UTF-8 detected');
  }

  var byteArray;
  var byteCount;
  var byteIndex;
  function utf8decode(byteString, opts) {
  	opts = opts || {};
  	var strict = false !== opts.strict;

  	byteArray = ucs2decode(byteString);
  	byteCount = byteArray.length;
  	byteIndex = 0;
  	var codePoints = [];
  	var tmp;
  	while ((tmp = decodeSymbol(strict)) !== false) {
  		codePoints.push(tmp);
  	}
  	return ucs2encode(codePoints);
  }

  var utf8 = {
  	version: '2.1.2',
  	encode: utf8encode,
  	decode: utf8decode
  };

  var toString$2 = {}.toString;

  var isarray$1 = Array.isArray || function (arr) {
    return toString$2.call(arr) == '[object Array]';
  };

  /* global Blob File */

  /*
   * Module requirements.
   */



  var toString$3 = Object.prototype.toString;
  var withNativeBlob$1 = typeof Blob === 'function' ||
                          typeof Blob !== 'undefined' && toString$3.call(Blob) === '[object BlobConstructor]';
  var withNativeFile$1 = typeof File === 'function' ||
                          typeof File !== 'undefined' && toString$3.call(File) === '[object FileConstructor]';

  /**
   * Module exports.
   */

  var hasBinary2 = hasBinary;

  /**
   * Checks for binary data.
   *
   * Supports Buffer, ArrayBuffer, Blob and File.
   *
   * @param {Object} anything
   * @api public
   */

  function hasBinary (obj) {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (isarray$1(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (hasBinary(obj[i])) {
          return true;
        }
      }
      return false;
    }

    if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
      (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
      (withNativeBlob$1 && obj instanceof Blob) ||
      (withNativeFile$1 && obj instanceof File)
    ) {
      return true;
    }

    // see: https://github.com/Automattic/has-binary/pull/4
    if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }

    return false;
  }

  var after_1 = after;

  function after(count, callback, err_cb) {
      var bail = false;
      err_cb = err_cb || noop;
      proxy.count = count;

      return (count === 0) ? callback() : proxy

      function proxy(err, result) {
          if (proxy.count <= 0) {
              throw new Error('after called too many times')
          }
          --proxy.count;

          // after first error, rest are passed to err_cb
          if (err) {
              bail = true;
              callback(err);
              // future error callbacks will go to error handler
              callback = err_cb;
          } else if (proxy.count === 0 && !bail) {
              callback(null, result);
          }
      }
  }

  function noop() {}

  /**
   * Gets the keys for an object.
   *
   * @return {Array} keys
   * @api private
   */

  var keys$1 = Object.keys || function keys (obj){
    var arr = [];
    var has = Object.prototype.hasOwnProperty;

    for (var i in obj) {
      if (has.call(obj, i)) {
        arr.push(i);
      }
    }
    return arr;
  };

  var lib = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */






  /**
   * Current protocol version.
   */
  exports.protocol = 3;

  /**
   * Packet types.
   */

  var packets = exports.packets = {
      open:     0    // non-ws
    , close:    1    // non-ws
    , ping:     2
    , pong:     3
    , message:  4
    , upgrade:  5
    , noop:     6
  };

  var packetslist = keys$1(packets);

  /**
   * Premade error packet.
   */

  var err = { type: 'error', data: 'parser error' };

  const EMPTY_BUFFER = Buffer.concat([]);

  /**
   * Encodes a packet.
   *
   *     <packet type id> [ <data> ]
   *
   * Example:
   *
   *     5hello world
   *     3
   *     4
   *
   * Binary is encoded in an identical principle
   *
   * @api private
   */

  exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = null;
    }

    if (typeof utf8encode === 'function') {
      callback = utf8encode;
      utf8encode = null;
    }

    if (Buffer.isBuffer(packet.data)) {
      return encodeBuffer(packet, supportsBinary, callback);
    } else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {
      return encodeBuffer({ type: packet.type, data: arrayBufferToBuffer(packet.data) }, supportsBinary, callback);
    }

    // Sending data as a utf-8 string
    var encoded = packets[packet.type];

    // data fragment is optional
    if (undefined !== packet.data) {
      encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
    }

    return callback('' + encoded);
  };

  /**
   * Encode Buffer data
   */

  function encodeBuffer(packet, supportsBinary, callback) {
    if (!supportsBinary) {
      return exports.encodeBase64Packet(packet, callback);
    }

    var data = packet.data;
    var typeBuffer = Buffer.allocUnsafe(1);
    typeBuffer[0] = packets[packet.type];
    return callback(Buffer.concat([typeBuffer, data]));
  }

  /**
   * Encodes a packet with binary data in a base64 string
   *
   * @param {Object} packet, has `type` and `data`
   * @return {String} base64 encoded message
   */

  exports.encodeBase64Packet = function(packet, callback){
    var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);
    var message = 'b' + packets[packet.type];
    message += data.toString('base64');
    return callback(message);
  };

  /**
   * Decodes a packet. Data also available as an ArrayBuffer if requested.
   *
   * @return {Object} with `type` and `data` (if any)
   * @api private
   */

  exports.decodePacket = function (data, binaryType, utf8decode) {
    if (data === undefined) {
      return err;
    }

    var type;

    // String data
    if (typeof data === 'string') {

      type = data.charAt(0);

      if (type === 'b') {
        return exports.decodeBase64Packet(data.substr(1), binaryType);
      }

      if (utf8decode) {
        data = tryDecode(data);
        if (data === false) {
          return err;
        }
      }

      if (Number(type) != type || !packetslist[type]) {
        return err;
      }

      if (data.length > 1) {
        return { type: packetslist[type], data: data.substring(1) };
      } else {
        return { type: packetslist[type] };
      }
    }

    // Binary data
    if (binaryType === 'arraybuffer') {
      // wrap Buffer/ArrayBuffer data into an Uint8Array
      var intArray = new Uint8Array(data);
      type = intArray[0];
      return { type: packetslist[type], data: intArray.buffer.slice(1) };
    }

    if (data instanceof ArrayBuffer) {
      data = arrayBufferToBuffer(data);
    }
    type = data[0];
    return { type: packetslist[type], data: data.slice(1) };
  };

  function tryDecode(data) {
    try {
      data = utf8.decode(data, { strict: false });
    } catch (e) {
      return false;
    }
    return data;
  }

  /**
   * Decodes a packet encoded in a base64 string.
   *
   * @param {String} base64 encoded message
   * @return {Object} with `type` and `data` (if any)
   */

  exports.decodeBase64Packet = function(msg, binaryType) {
    var type = packetslist[msg.charAt(0)];
    var data = Buffer.from(msg.substr(1), 'base64');
    if (binaryType === 'arraybuffer') {
      var abv = new Uint8Array(data.length);
      for (var i = 0; i < abv.length; i++){
        abv[i] = data[i];
      }
      data = abv.buffer;
    }
    return { type: type, data: data };
  };

  /**
   * Encodes multiple messages (payload).
   *
   *     <length>:data
   *
   * Example:
   *
   *     11:hello world2:hi
   *
   * If any contents are binary, they will be encoded as base64 strings. Base64
   * encoded strings are marked with a b before the length specifier
   *
   * @param {Array} packets
   * @api private
   */

  exports.encodePayload = function (packets, supportsBinary, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = null;
    }

    if (supportsBinary && hasBinary2(packets)) {
      return exports.encodePayloadAsBinary(packets, callback);
    }

    if (!packets.length) {
      return callback('0:');
    }

    function encodeOne(packet, doneCallback) {
      exports.encodePacket(packet, supportsBinary, false, function(message) {
        doneCallback(null, setLengthHeader(message));
      });
    }

    map(packets, encodeOne, function(err, results) {
      return callback(results.join(''));
    });
  };

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  /**
   * Async array map using after
   */

  function map(ary, each, done) {
    var result = new Array(ary.length);
    var next = after_1(ary.length, done);

    for (var i = 0; i < ary.length; i++) {
      each(ary[i], function(error, msg) {
        result[i] = msg;
        next(error, result);
      });
    }
  }

  /*
   * Decodes data when a payload is maybe expected. Possible binary contents are
   * decoded from their base64 representation
   *
   * @param {String} data, callback method
   * @api public
   */

  exports.decodePayload = function (data, binaryType, callback) {
    if (typeof data !== 'string') {
      return exports.decodePayloadAsBinary(data, binaryType, callback);
    }

    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    if (data === '') {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    var length = '', n, msg, packet;

    for (var i = 0, l = data.length; i < l; i++) {
      var chr = data.charAt(i);

      if (chr !== ':') {
        length += chr;
        continue;
      }

      if (length === '' || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, false);

        if (err.type === packet.type && err.data === packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var more = callback(packet, i + n, l);
        if (false === more) return;
      }

      // advance cursor
      i += n;
      length = '';
    }

    if (length !== '') {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

  };

  /**
   *
   * Converts a buffer to a utf8.js encoded string
   *
   * @api private
   */

  function bufferToString(buffer) {
    var str = '';
    for (var i = 0, l = buffer.length; i < l; i++) {
      str += String.fromCharCode(buffer[i]);
    }
    return str;
  }

  /**
   *
   * Converts a utf8.js encoded string to a buffer
   *
   * @api private
   */

  function stringToBuffer(string) {
    var buf = Buffer.allocUnsafe(string.length);
    for (var i = 0, l = string.length; i < l; i++) {
      buf.writeUInt8(string.charCodeAt(i), i);
    }
    return buf;
  }

  /**
   *
   * Converts an ArrayBuffer to a Buffer
   *
   * @api private
   */

  function arrayBufferToBuffer(data) {
    // data is either an ArrayBuffer or ArrayBufferView.
    var length = data.byteLength || data.length;
    var offset = data.byteOffset || 0;

    return Buffer.from(data.buffer || data, offset, length);
  }

  /**
   * Encodes multiple messages (payload) as binary.
   *
   * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
   * 255><data>
   *
   * Example:
   * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
   *
   * @param {Array} packets
   * @return {Buffer} encoded payload
   * @api private
   */

  exports.encodePayloadAsBinary = function (packets, callback) {
    if (!packets.length) {
      return callback(EMPTY_BUFFER);
    }

    map(packets, encodeOneBinaryPacket, function(err, results) {
      return callback(Buffer.concat(results));
    });
  };

  function encodeOneBinaryPacket(p, doneCallback) {

    function onBinaryPacketEncode(packet) {

      var encodingLength = '' + packet.length;
      var sizeBuffer;

      if (typeof packet === 'string') {
        sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);
        sizeBuffer[0] = 0; // is a string (not true binary = 0)
        for (var i = 0; i < encodingLength.length; i++) {
          sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);
        }
        sizeBuffer[sizeBuffer.length - 1] = 255;
        return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));
      }

      sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);
      sizeBuffer[0] = 1; // is binary (true binary = 1)
      for (var i = 0; i < encodingLength.length; i++) {
        sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);
      }
      sizeBuffer[sizeBuffer.length - 1] = 255;

      doneCallback(null, Buffer.concat([sizeBuffer, packet]));
    }

    exports.encodePacket(p, true, true, onBinaryPacketEncode);

  }


  /*
   * Decodes data when a payload is maybe expected. Strings are decoded by
   * interpreting each byte as a key code for entries marked to start with 0. See
   * description of encodePayloadAsBinary

   * @param {Buffer} data, callback method
   * @api public
   */

  exports.decodePayloadAsBinary = function (data, binaryType, callback) {
    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    var bufferTail = data;
    var buffers = [];
    var i;

    while (bufferTail.length > 0) {
      var strLen = '';
      var isString = bufferTail[0] === 0;
      for (i = 1; ; i++) {
        if (bufferTail[i] === 255)  break;
        // 310 = char length of Number.MAX_VALUE
        if (strLen.length > 310) {
          return callback(err, 0, 1);
        }
        strLen += '' + bufferTail[i];
      }
      bufferTail = bufferTail.slice(strLen.length + 1);

      var msgLength = parseInt(strLen, 10);

      var msg = bufferTail.slice(1, msgLength + 1);
      if (isString) msg = bufferToString(msg);
      buffers.push(msg);
      bufferTail = bufferTail.slice(msgLength + 1);
    }

    var total = buffers.length;
    for (i = 0; i < total; i++) {
      var buffer = buffers[i];
      callback(exports.decodePacket(buffer, binaryType, true), i, total);
    }
  };
  });
  var lib_1 = lib.protocol;
  var lib_2 = lib.packets;
  var lib_3 = lib.encodePacket;
  var lib_4 = lib.encodeBase64Packet;
  var lib_5 = lib.decodePacket;
  var lib_6 = lib.decodeBase64Packet;
  var lib_7 = lib.encodePayload;
  var lib_8 = lib.decodePayload;
  var lib_9 = lib.encodePayloadAsBinary;
  var lib_10 = lib.decodePayloadAsBinary;

  var componentEmitter$1 = createCommonjsModule(function (module) {
  /**
   * Expose `Emitter`.
   */

  {
    module.exports = Emitter;
  }

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }
  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
  Emitter.prototype.addEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
      .push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
  Emitter.prototype.removeListener =
  Emitter.prototype.removeAllListeners =
  Emitter.prototype.removeEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    // Remove event specific arrays for event types that no
    // one is subscribed for to avoid memory leak.
    if (callbacks.length === 0) {
      delete this._callbacks['$' + event];
    }

    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};

    var args = new Array(arguments.length - 1)
      , callbacks = this._callbacks['$' + event];

    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };
  });

  /**
   * Module dependencies.
   */




  /**
   * Module exports.
   */

  var transport = Transport;

  /**
   * Transport abstract constructor.
   *
   * @param {Object} options.
   * @api private
   */

  function Transport (opts) {
    this.path = opts.path;
    this.hostname = opts.hostname;
    this.port = opts.port;
    this.secure = opts.secure;
    this.query = opts.query;
    this.timestampParam = opts.timestampParam;
    this.timestampRequests = opts.timestampRequests;
    this.readyState = '';
    this.agent = opts.agent || false;
    this.socket = opts.socket;
    this.enablesXDR = opts.enablesXDR;
    this.withCredentials = opts.withCredentials;

    // SSL options for Node.js client
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;
    this.forceNode = opts.forceNode;

    // results of ReactNative environment detection
    this.isReactNative = opts.isReactNative;

    // other options for Node.js client
    this.extraHeaders = opts.extraHeaders;
    this.localAddress = opts.localAddress;
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter$1(Transport.prototype);

  /**
   * Emits an error.
   *
   * @param {String} str
   * @return {Transport} for chaining
   * @api public
   */

  Transport.prototype.onError = function (msg, desc) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
    return this;
  };

  /**
   * Opens the transport.
   *
   * @api public
   */

  Transport.prototype.open = function () {
    if ('closed' === this.readyState || '' === this.readyState) {
      this.readyState = 'opening';
      this.doOpen();
    }

    return this;
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  Transport.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.doClose();
      this.onClose();
    }

    return this;
  };

  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   * @api private
   */

  Transport.prototype.send = function (packets) {
    if ('open' === this.readyState) {
      this.write(packets);
    } else {
      throw new Error('Transport not open');
    }
  };

  /**
   * Called upon open
   *
   * @api private
   */

  Transport.prototype.onOpen = function () {
    this.readyState = 'open';
    this.writable = true;
    this.emit('open');
  };

  /**
   * Called with data.
   *
   * @param {String} data
   * @api private
   */

  Transport.prototype.onData = function (data) {
    var packet = lib.decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  };

  /**
   * Called with a decoded packet.
   */

  Transport.prototype.onPacket = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon close.
   *
   * @api private
   */

  Transport.prototype.onClose = function () {
    this.readyState = 'closed';
    this.emit('close');
  };

  /**
   * Compiles a querystring
   * Returns string representation of the object
   *
   * @param {Object}
   * @api private
   */

  var encode = function (obj) {
    var str = '';

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        if (str.length) str += '&';
        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
    }

    return str;
  };

  /**
   * Parses a simple querystring into an object
   *
   * @param {String} qs
   * @api private
   */

  var decode = function(qs){
    var qry = {};
    var pairs = qs.split('&');
    for (var i = 0, l = pairs.length; i < l; i++) {
      var pair = pairs[i].split('=');
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  };

  var parseqs = {
  	encode: encode,
  	decode: decode
  };

  var componentInherit = function(a, b){
    var fn = function(){};
    fn.prototype = b.prototype;
    a.prototype = new fn;
    a.prototype.constructor = a;
  };

  var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
    , length$1 = 64
    , map = {}
    , seed = 0
    , i = 0
    , prev;

  /**
   * Return a string representing the specified number.
   *
   * @param {Number} num The number to convert.
   * @returns {String} The string representation of the number.
   * @api public
   */
  function encode$1(num) {
    var encoded = '';

    do {
      encoded = alphabet[num % length$1] + encoded;
      num = Math.floor(num / length$1);
    } while (num > 0);

    return encoded;
  }

  /**
   * Return the integer value specified by the given string.
   *
   * @param {String} str The string to convert.
   * @returns {Number} The integer value represented by the string.
   * @api public
   */
  function decode$1(str) {
    var decoded = 0;

    for (i = 0; i < str.length; i++) {
      decoded = decoded * length$1 + map[str.charAt(i)];
    }

    return decoded;
  }

  /**
   * Yeast: A tiny growing id generator.
   *
   * @returns {String} A unique id.
   * @api public
   */
  function yeast() {
    var now = encode$1(+new Date());

    if (now !== prev) return seed = 0, prev = now;
    return now +'.'+ encode$1(seed++);
  }

  //
  // Map each character to its index.
  //
  for (; i < length$1; i++) map[alphabet[i]] = i;

  //
  // Expose the `yeast`, `encode` and `decode` functions.
  //
  yeast.encode = encode$1;
  yeast.decode = decode$1;
  var yeast_1 = yeast;

  /**
   * Module dependencies.
   */






  var debug$2 = src('engine.io-client:polling');

  /**
   * Module exports.
   */

  var polling = Polling;

  /**
   * Is XHR2 supported?
   */

  var hasXHR2 = (function () {
    var XMLHttpRequest = XMLHttpRequest_1;
    var xhr = new XMLHttpRequest({ xdomain: false });
    return null != xhr.responseType;
  })();

  /**
   * Polling interface.
   *
   * @param {Object} opts
   * @api private
   */

  function Polling (opts) {
    var forceBase64 = (opts && opts.forceBase64);
    if (!hasXHR2 || forceBase64) {
      this.supportsBinary = false;
    }
    transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  componentInherit(Polling, transport);

  /**
   * Transport name.
   */

  Polling.prototype.name = 'polling';

  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @api private
   */

  Polling.prototype.doOpen = function () {
    this.poll();
  };

  /**
   * Pauses polling.
   *
   * @param {Function} callback upon buffers are flushed and transport is paused
   * @api private
   */

  Polling.prototype.pause = function (onPause) {
    var self = this;

    this.readyState = 'pausing';

    function pause () {
      debug$2('paused');
      self.readyState = 'paused';
      onPause();
    }

    if (this.polling || !this.writable) {
      var total = 0;

      if (this.polling) {
        debug$2('we are currently polling - waiting to pause');
        total++;
        this.once('pollComplete', function () {
          debug$2('pre-pause polling complete');
          --total || pause();
        });
      }

      if (!this.writable) {
        debug$2('we are currently writing - waiting to pause');
        total++;
        this.once('drain', function () {
          debug$2('pre-pause writing complete');
          --total || pause();
        });
      }
    } else {
      pause();
    }
  };

  /**
   * Starts polling cycle.
   *
   * @api public
   */

  Polling.prototype.poll = function () {
    debug$2('polling');
    this.polling = true;
    this.doPoll();
    this.emit('poll');
  };

  /**
   * Overloads onData to detect payloads.
   *
   * @api private
   */

  Polling.prototype.onData = function (data) {
    var self = this;
    debug$2('polling got data %s', data);
    var callback = function (packet, index, total) {
      // if its the first message we consider the transport open
      if ('opening' === self.readyState) {
        self.onOpen();
      }

      // if its a close packet, we close the ongoing requests
      if ('close' === packet.type) {
        self.onClose();
        return false;
      }

      // otherwise bypass onData and handle the message
      self.onPacket(packet);
    };

    // decode payload
    lib.decodePayload(data, this.socket.binaryType, callback);

    // if an event did not trigger closing
    if ('closed' !== this.readyState) {
      // if we got data we're not polling
      this.polling = false;
      this.emit('pollComplete');

      if ('open' === this.readyState) {
        this.poll();
      } else {
        debug$2('ignoring poll - transport state "%s"', this.readyState);
      }
    }
  };

  /**
   * For polling, send a close packet.
   *
   * @api private
   */

  Polling.prototype.doClose = function () {
    var self = this;

    function close () {
      debug$2('writing close packet');
      self.write([{ type: 'close' }]);
    }

    if ('open' === this.readyState) {
      debug$2('transport open - closing');
      close();
    } else {
      // in case we're trying to close while
      // handshaking is in progress (GH-164)
      debug$2('transport not open - deferring close');
      this.once('open', close);
    }
  };

  /**
   * Writes a packets payload.
   *
   * @param {Array} data packets
   * @param {Function} drain callback
   * @api private
   */

  Polling.prototype.write = function (packets) {
    var self = this;
    this.writable = false;
    var callbackfn = function () {
      self.writable = true;
      self.emit('drain');
    };

    lib.encodePayload(packets, this.supportsBinary, function (data) {
      self.doWrite(data, callbackfn);
    });
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  Polling.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'https' : 'http';
    var port = '';

    // cache busting is forced
    if (false !== this.timestampRequests) {
      query[this.timestampParam] = yeast_1();
    }

    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // avoid port if default for schema
    if (this.port && (('https' === schema && Number(this.port) !== 443) ||
       ('http' === schema && Number(this.port) !== 80))) {
      port = ':' + this.port;
    }

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };

  var globalThis$1 = commonjsGlobal;

  /* global attachEvent */

  /**
   * Module requirements.
   */





  var debug$3 = src('engine.io-client:polling-xhr');


  /**
   * Module exports.
   */

  var pollingXhr = XHR;
  var Request_1 = Request;

  /**
   * Empty function
   */

  function empty () {}

  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @api public
   */

  function XHR (opts) {
    polling.call(this, opts);
    this.requestTimeout = opts.requestTimeout;
    this.extraHeaders = opts.extraHeaders;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      // some user agents have empty `location.port`
      if (!port) {
        port = isSSL ? 443 : 80;
      }

      this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
        port !== opts.port;
      this.xs = opts.secure !== isSSL;
    }
  }

  /**
   * Inherits from Polling.
   */

  componentInherit(XHR, polling);

  /**
   * XHR supports binary
   */

  XHR.prototype.supportsBinary = true;

  /**
   * Creates a request.
   *
   * @param {String} method
   * @api private
   */

  XHR.prototype.request = function (opts) {
    opts = opts || {};
    opts.uri = this.uri();
    opts.xd = this.xd;
    opts.xs = this.xs;
    opts.agent = this.agent || false;
    opts.supportsBinary = this.supportsBinary;
    opts.enablesXDR = this.enablesXDR;
    opts.withCredentials = this.withCredentials;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
    opts.requestTimeout = this.requestTimeout;

    // other options for Node.js client
    opts.extraHeaders = this.extraHeaders;

    return new Request(opts);
  };

  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @api private
   */

  XHR.prototype.doWrite = function (data, fn) {
    var isBinary = typeof data !== 'string' && data !== undefined;
    var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
    var self = this;
    req.on('success', fn);
    req.on('error', function (err) {
      self.onError('xhr post error', err);
    });
    this.sendXhr = req;
  };

  /**
   * Starts a poll cycle.
   *
   * @api private
   */

  XHR.prototype.doPoll = function () {
    debug$3('xhr poll');
    var req = this.request();
    var self = this;
    req.on('data', function (data) {
      self.onData(data);
    });
    req.on('error', function (err) {
      self.onError('xhr poll error', err);
    });
    this.pollXhr = req;
  };

  /**
   * Request constructor
   *
   * @param {Object} options
   * @api public
   */

  function Request (opts) {
    this.method = opts.method || 'GET';
    this.uri = opts.uri;
    this.xd = !!opts.xd;
    this.xs = !!opts.xs;
    this.async = false !== opts.async;
    this.data = undefined !== opts.data ? opts.data : null;
    this.agent = opts.agent;
    this.isBinary = opts.isBinary;
    this.supportsBinary = opts.supportsBinary;
    this.enablesXDR = opts.enablesXDR;
    this.withCredentials = opts.withCredentials;
    this.requestTimeout = opts.requestTimeout;

    // SSL options for Node.js client
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;

    // other options for Node.js client
    this.extraHeaders = opts.extraHeaders;

    this.create();
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter$1(Request.prototype);

  /**
   * Creates the XHR object and sends the request.
   *
   * @api private
   */

  Request.prototype.create = function () {
    var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;

    var xhr = this.xhr = new XMLHttpRequest_1(opts);
    var self = this;

    try {
      debug$3('xhr open %s: %s', this.method, this.uri);
      xhr.open(this.method, this.uri, this.async);
      try {
        if (this.extraHeaders) {
          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
          for (var i in this.extraHeaders) {
            if (this.extraHeaders.hasOwnProperty(i)) {
              xhr.setRequestHeader(i, this.extraHeaders[i]);
            }
          }
        }
      } catch (e) {}

      if ('POST' === this.method) {
        try {
          if (this.isBinary) {
            xhr.setRequestHeader('Content-type', 'application/octet-stream');
          } else {
            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
          }
        } catch (e) {}
      }

      try {
        xhr.setRequestHeader('Accept', '*/*');
      } catch (e) {}

      // ie6 check
      if ('withCredentials' in xhr) {
        xhr.withCredentials = this.withCredentials;
      }

      if (this.requestTimeout) {
        xhr.timeout = this.requestTimeout;
      }

      if (this.hasXDR()) {
        xhr.onload = function () {
          self.onLoad();
        };
        xhr.onerror = function () {
          self.onError(xhr.responseText);
        };
      } else {
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 2) {
            try {
              var contentType = xhr.getResponseHeader('Content-Type');
              if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
                xhr.responseType = 'arraybuffer';
              }
            } catch (e) {}
          }
          if (4 !== xhr.readyState) return;
          if (200 === xhr.status || 1223 === xhr.status) {
            self.onLoad();
          } else {
            // make sure the `error` event handler that's user-set
            // does not throw in the same tick and gets caught here
            setTimeout(function () {
              self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
            }, 0);
          }
        };
      }

      debug$3('xhr data %s', this.data);
      xhr.send(this.data);
    } catch (e) {
      // Need to defer since .create() is called directly fhrom the constructor
      // and thus the 'error' event can only be only bound *after* this exception
      // occurs.  Therefore, also, we cannot throw here at all.
      setTimeout(function () {
        self.onError(e);
      }, 0);
      return;
    }

    if (typeof document !== 'undefined') {
      this.index = Request.requestsCount++;
      Request.requests[this.index] = this;
    }
  };

  /**
   * Called upon successful response.
   *
   * @api private
   */

  Request.prototype.onSuccess = function () {
    this.emit('success');
    this.cleanup();
  };

  /**
   * Called if we have data.
   *
   * @api private
   */

  Request.prototype.onData = function (data) {
    this.emit('data', data);
    this.onSuccess();
  };

  /**
   * Called upon error.
   *
   * @api private
   */

  Request.prototype.onError = function (err) {
    this.emit('error', err);
    this.cleanup(true);
  };

  /**
   * Cleans up house.
   *
   * @api private
   */

  Request.prototype.cleanup = function (fromError) {
    if ('undefined' === typeof this.xhr || null === this.xhr) {
      return;
    }
    // xmlhttprequest
    if (this.hasXDR()) {
      this.xhr.onload = this.xhr.onerror = empty;
    } else {
      this.xhr.onreadystatechange = empty;
    }

    if (fromError) {
      try {
        this.xhr.abort();
      } catch (e) {}
    }

    if (typeof document !== 'undefined') {
      delete Request.requests[this.index];
    }

    this.xhr = null;
  };

  /**
   * Called upon load.
   *
   * @api private
   */

  Request.prototype.onLoad = function () {
    var data;
    try {
      var contentType;
      try {
        contentType = this.xhr.getResponseHeader('Content-Type');
      } catch (e) {}
      if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
        data = this.xhr.response || this.xhr.responseText;
      } else {
        data = this.xhr.responseText;
      }
    } catch (e) {
      this.onError(e);
    }
    if (null != data) {
      this.onData(data);
    }
  };

  /**
   * Check if it has XDomainRequest.
   *
   * @api private
   */

  Request.prototype.hasXDR = function () {
    return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
  };

  /**
   * Aborts the request.
   *
   * @api public
   */

  Request.prototype.abort = function () {
    this.cleanup();
  };

  /**
   * Aborts pending requests when unloading the window. This is needed to prevent
   * memory leaks (e.g. when using IE) and to ensure that no spurious error is
   * emitted.
   */

  Request.requestsCount = 0;
  Request.requests = {};

  if (typeof document !== 'undefined') {
    if (typeof attachEvent === 'function') {
      attachEvent('onunload', unloadHandler);
    } else if (typeof addEventListener === 'function') {
      var terminationEvent = 'onpagehide' in globalThis$1 ? 'pagehide' : 'unload';
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }

  function unloadHandler () {
    for (var i in Request.requests) {
      if (Request.requests.hasOwnProperty(i)) {
        Request.requests[i].abort();
      }
    }
  }
  pollingXhr.Request = Request_1;

  /**
   * Module requirements.
   */





  /**
   * Module exports.
   */

  var pollingJsonp = JSONPPolling;

  /**
   * Cached regular expressions.
   */

  var rNewline = /\n/g;
  var rEscapedNewline = /\\n/g;

  /**
   * Global JSONP callbacks.
   */

  var callbacks;

  /**
   * Noop.
   */

  function empty$1 () { }

  /**
   * JSONP Polling constructor.
   *
   * @param {Object} opts.
   * @api public
   */

  function JSONPPolling (opts) {
    polling.call(this, opts);

    this.query = this.query || {};

    // define global callbacks array if not present
    // we do this here (lazily) to avoid unneeded global pollution
    if (!callbacks) {
      // we need to consider multiple engines in the same page
      callbacks = globalThis$1.___eio = (globalThis$1.___eio || []);
    }

    // callback identifier
    this.index = callbacks.length;

    // add callback to jsonp global
    var self = this;
    callbacks.push(function (msg) {
      self.onData(msg);
    });

    // append to query string
    this.query.j = this.index;

    // prevent spurious errors from being emitted when the window is unloaded
    if (typeof addEventListener === 'function') {
      addEventListener('beforeunload', function () {
        if (self.script) self.script.onerror = empty$1;
      }, false);
    }
  }

  /**
   * Inherits from Polling.
   */

  componentInherit(JSONPPolling, polling);

  /*
   * JSONP only supports binary as base64 encoded strings
   */

  JSONPPolling.prototype.supportsBinary = false;

  /**
   * Closes the socket.
   *
   * @api private
   */

  JSONPPolling.prototype.doClose = function () {
    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    if (this.form) {
      this.form.parentNode.removeChild(this.form);
      this.form = null;
      this.iframe = null;
    }

    polling.prototype.doClose.call(this);
  };

  /**
   * Starts a poll cycle.
   *
   * @api private
   */

  JSONPPolling.prototype.doPoll = function () {
    var self = this;
    var script = document.createElement('script');

    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    script.async = true;
    script.src = this.uri();
    script.onerror = function (e) {
      self.onError('jsonp poll error', e);
    };

    var insertAt = document.getElementsByTagName('script')[0];
    if (insertAt) {
      insertAt.parentNode.insertBefore(script, insertAt);
    } else {
      (document.head || document.body).appendChild(script);
    }
    this.script = script;

    var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

    if (isUAgecko) {
      setTimeout(function () {
        var iframe = document.createElement('iframe');
        document.body.appendChild(iframe);
        document.body.removeChild(iframe);
      }, 100);
    }
  };

  /**
   * Writes with a hidden iframe.
   *
   * @param {String} data to send
   * @param {Function} called upon flush.
   * @api private
   */

  JSONPPolling.prototype.doWrite = function (data, fn) {
    var self = this;

    if (!this.form) {
      var form = document.createElement('form');
      var area = document.createElement('textarea');
      var id = this.iframeId = 'eio_iframe_' + this.index;
      var iframe;

      form.className = 'socketio';
      form.style.position = 'absolute';
      form.style.top = '-1000px';
      form.style.left = '-1000px';
      form.target = id;
      form.method = 'POST';
      form.setAttribute('accept-charset', 'utf-8');
      area.name = 'd';
      form.appendChild(area);
      document.body.appendChild(form);

      this.form = form;
      this.area = area;
    }

    this.form.action = this.uri();

    function complete () {
      initIframe();
      fn();
    }

    function initIframe () {
      if (self.iframe) {
        try {
          self.form.removeChild(self.iframe);
        } catch (e) {
          self.onError('jsonp polling iframe removal error', e);
        }
      }

      try {
        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
        var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
        iframe = document.createElement(html);
      } catch (e) {
        iframe = document.createElement('iframe');
        iframe.name = self.iframeId;
        iframe.src = 'javascript:0';
      }

      iframe.id = self.iframeId;

      self.form.appendChild(iframe);
      self.iframe = iframe;
    }

    initIframe();

    // escape \n to prevent it from being converted into \r\n by some UAs
    // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
    data = data.replace(rEscapedNewline, '\\\n');
    this.area.value = data.replace(rNewline, '\\n');

    try {
      this.form.submit();
    } catch (e) {}

    if (this.iframe.attachEvent) {
      this.iframe.onreadystatechange = function () {
        if (self.iframe.readyState === 'complete') {
          complete();
        }
      };
    } else {
      this.iframe.onload = complete;
    }
  };

  function Queue(options) {
    if (!(this instanceof Queue)) {
      return new Queue(options);
    }

    options = options || {};
    this.concurrency = options.concurrency || Infinity;
    this.pending = 0;
    this.jobs = [];
    this.cbs = [];
    this._done = done.bind(this);
  }

  var arrayAddMethods = [
    'push',
    'unshift',
    'splice'
  ];

  arrayAddMethods.forEach(function(method) {
    Queue.prototype[method] = function() {
      var methodResult = Array.prototype[method].apply(this.jobs, arguments);
      this._run();
      return methodResult;
    };
  });

  Object.defineProperty(Queue.prototype, 'length', {
    get: function() {
      return this.pending + this.jobs.length;
    }
  });

  Queue.prototype._run = function() {
    if (this.pending === this.concurrency) {
      return;
    }
    if (this.jobs.length) {
      var job = this.jobs.shift();
      this.pending++;
      job(this._done);
      this._run();
    }

    if (this.pending === 0) {
      while (this.cbs.length !== 0) {
        var cb = this.cbs.pop();
        process.nextTick(cb);
      }
    }
  };

  Queue.prototype.onDone = function(cb) {
    if (typeof cb === 'function') {
      this.cbs.push(cb);
      this._run();
    }
  };

  function done() {
    this.pending--;
    this._run();
  }

  var asyncLimiter = Queue;

  // Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'
  var runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require; // eslint-disable-line

  var abi = process.versions.modules; // TODO: support old node where this is undef
  var runtime = isElectron() ? 'electron' : 'node';
  var arch = os.arch();
  var platform = os.platform();

  var nodeGypBuild = load;

  function load (dir) {
    return runtimeRequire(load.path(dir))
  }

  load.path = function (dir) {
    dir = path$3.resolve(dir || '.');

    try {
      var name = runtimeRequire(path$3.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');
      if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];
    } catch (err) {}

    var release = getFirst(path$3.join(dir, 'build/Release'), matchBuild);
    if (release) return release

    var debug = getFirst(path$3.join(dir, 'build/Debug'), matchBuild);
    if (debug) return debug

    var prebuild = getFirst(path$3.join(dir, 'prebuilds/' + platform + '-' + arch), matchPrebuild);
    if (prebuild) return prebuild

    var napiRuntime = getFirst(path$3.join(dir, 'prebuilds/' + platform + '-' + arch), matchNapiRuntime);
    if (napiRuntime) return napiRuntime

    var napi = getFirst(path$3.join(dir, 'prebuilds/' + platform + '-' + arch), matchNapi);
    if (napi) return napi

    throw new Error('No native build was found for runtime=' + runtime + ' abi=' + abi + ' platform=' + platform + ' arch=' + arch)
  };

  function getFirst (dir, filter) {
    try {
      var files = fs.readdirSync(dir).filter(filter);
      return files[0] && path$3.join(dir, files[0])
    } catch (err) {
      return null
    }
  }

  function matchNapiRuntime (name) {
    return name === runtime + '-napi.node'
  }

  function matchNapi (name) {
    return name === 'node-napi.node'
  }

  function matchPrebuild (name) {
    var parts = name.split('-');
    return parts[0] === runtime && parts[1] === abi + '.node'
  }

  function matchBuild (name) {
    return /\.node$/.test(name)
  }

  function isElectron () {
    if (process.versions && process.versions.electron) return true
    if (process.env.ELECTRON_RUN_AS_NODE) return true
    return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'
  }

  /**
   * Masks a buffer using the given mask.
   *
   * @param {Buffer} source The buffer to mask
   * @param {Buffer} mask The mask to use
   * @param {Buffer} output The buffer where to store the result
   * @param {Number} offset The offset at which to start writing
   * @param {Number} length The number of bytes to mask.
   * @public
   */
  const mask = (source, mask, output, offset, length) => {
    for (var i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  };

  /**
   * Unmasks a buffer using the given mask.
   *
   * @param {Buffer} buffer The buffer to unmask
   * @param {Buffer} mask The mask to use
   * @public
   */
  const unmask = (buffer, mask) => {
    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
    const length = buffer.length;
    for (var i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  };

  var fallback = { mask, unmask };

  var bufferutil = createCommonjsModule(function (module) {

  try {
    module.exports = nodeGypBuild(__dirname);
  } catch (e) {
    module.exports = fallback;
  }
  });

  var bufferUtil = createCommonjsModule(function (module) {

  /**
   * Merges an array of buffers into a new buffer.
   *
   * @param {Buffer[]} list The array of buffers to concat
   * @param {Number} totalLength The total length of buffers in the list
   * @return {Buffer} The resulting buffer
   * @public
   */
  function concat(list, totalLength) {
    const target = Buffer.allocUnsafe(totalLength);
    var offset = 0;

    for (var i = 0; i < list.length; i++) {
      const buf = list[i];
      buf.copy(target, offset);
      offset += buf.length;
    }

    return target;
  }

  /**
   * Masks a buffer using the given mask.
   *
   * @param {Buffer} source The buffer to mask
   * @param {Buffer} mask The mask to use
   * @param {Buffer} output The buffer where to store the result
   * @param {Number} offset The offset at which to start writing
   * @param {Number} length The number of bytes to mask.
   * @public
   */
  function _mask(source, mask, output, offset, length) {
    for (var i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }

  /**
   * Unmasks a buffer using the given mask.
   *
   * @param {Buffer} buffer The buffer to unmask
   * @param {Buffer} mask The mask to use
   * @public
   */
  function _unmask(buffer, mask) {
    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
    const length = buffer.length;
    for (var i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }

  try {
    const bufferUtil = bufferutil;
    const bu = bufferUtil.BufferUtil || bufferUtil;

    module.exports = {
      mask(source, mask, output, offset, length) {
        if (length < 48) _mask(source, mask, output, offset, length);
        else bu.mask(source, mask, output, offset, length);
      },
      unmask(buffer, mask) {
        if (buffer.length < 32) _unmask(buffer, mask);
        else bu.unmask(buffer, mask);
      },
      concat
    };
  } catch (e) /* istanbul ignore next */ {
    module.exports = { concat, mask: _mask, unmask: _unmask };
  }
  });
  var bufferUtil_1 = bufferUtil.mask;
  var bufferUtil_2 = bufferUtil.unmask;
  var bufferUtil_3 = bufferUtil.concat;

  var constants = {
    BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
    GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
    kStatusCode: Symbol('status-code'),
    kWebSocket: Symbol('websocket'),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {}
  };

  const { kStatusCode, NOOP } = constants;

  const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
  const EMPTY_BLOCK = Buffer.from([0x00]);

  const kPerMessageDeflate = Symbol('permessage-deflate');
  const kTotalLength = Symbol('total-length');
  const kCallback = Symbol('callback');
  const kBuffers = Symbol('buffers');
  const kError = Symbol('error');

  //
  // We limit zlib concurrency, which prevents severe memory fragmentation
  // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
  // and https://github.com/websockets/ws/issues/1202
  //
  // Intentionally global; it's the global thread pool that's an issue.
  //
  let zlibLimiter;

  /**
   * permessage-deflate implementation.
   */
  class PerMessageDeflate {
    /**
     * Creates a PerMessageDeflate instance.
     *
     * @param {Object} options Configuration options
     * @param {Boolean} options.serverNoContextTakeover Request/accept disabling
     *     of server context takeover
     * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge
     *     disabling of client context takeover
     * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the
     *     use of a custom server window size
     * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support
     *     for, or request, a custom client window size
     * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate
     * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate
     * @param {Number} options.threshold Size (in bytes) below which messages
     *     should not be compressed
     * @param {Number} options.concurrencyLimit The number of concurrent calls to
     *     zlib
     * @param {Boolean} isServer Create the instance in either server or client
     *     mode
     * @param {Number} maxPayload The maximum allowed message length
     */
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold =
        this._options.threshold !== undefined ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._deflate = null;
      this._inflate = null;

      this.params = null;

      if (!zlibLimiter) {
        const concurrency =
          this._options.concurrencyLimit !== undefined
            ? this._options.concurrencyLimit
            : 10;
        zlibLimiter = new asyncLimiter({ concurrency });
      }
    }

    /**
     * @type {String}
     */
    static get extensionName() {
      return 'permessage-deflate';
    }

    /**
     * Create an extension negotiation offer.
     *
     * @return {Object} Extension parameters
     * @public
     */
    offer() {
      const params = {};

      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }
      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }
      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }

      return params;
    }

    /**
     * Accept an extension negotiation offer/response.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Object} Accepted configuration
     * @public
     */
    accept(configurations) {
      configurations = this.normalizeParams(configurations);

      this.params = this._isServer
        ? this.acceptAsServer(configurations)
        : this.acceptAsClient(configurations);

      return this.params;
    }

    /**
     * Releases all resources used by the extension.
     *
     * @public
     */
    cleanup() {
      if (this._inflate) {
        this._inflate.close();
        this._inflate = null;
      }

      if (this._deflate) {
        this._deflate.close();
        this._deflate = null;
      }
    }

    /**
     *  Accept an extension negotiation offer.
     *
     * @param {Array} offers The extension negotiation offers
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find((params) => {
        if (
          (opts.serverNoContextTakeover === false &&
            params.server_no_context_takeover) ||
          (params.server_max_window_bits &&
            (opts.serverMaxWindowBits === false ||
              (typeof opts.serverMaxWindowBits === 'number' &&
                opts.serverMaxWindowBits > params.server_max_window_bits))) ||
          (typeof opts.clientMaxWindowBits === 'number' &&
            !params.client_max_window_bits)
        ) {
          return false;
        }

        return true;
      });

      if (!accepted) {
        throw new Error('None of the extension offers can be accepted');
      }

      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }
      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof opts.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }
      if (typeof opts.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (
        accepted.client_max_window_bits === true ||
        opts.clientMaxWindowBits === false
      ) {
        delete accepted.client_max_window_bits;
      }

      return accepted;
    }

    /**
     * Accept the extension negotiation response.
     *
     * @param {Array} response The extension negotiation response
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsClient(response) {
      const params = response[0];

      if (
        this._options.clientNoContextTakeover === false &&
        params.client_no_context_takeover
      ) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }

      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === 'number') {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (
        this._options.clientMaxWindowBits === false ||
        (typeof this._options.clientMaxWindowBits === 'number' &&
          params.client_max_window_bits > this._options.clientMaxWindowBits)
      ) {
        throw new Error(
          'Unexpected or invalid parameter "client_max_window_bits"'
        );
      }

      return params;
    }

    /**
     * Normalize parameters.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Array} The offers/response with normalized parameters
     * @private
     */
    normalizeParams(configurations) {
      configurations.forEach((params) => {
        Object.keys(params).forEach((key) => {
          var value = params[key];

          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }

          value = value[0];

          if (key === 'client_max_window_bits') {
            if (value !== true) {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (!this._isServer) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else if (key === 'server_max_window_bits') {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
            value = num;
          } else if (
            key === 'client_no_context_takeover' ||
            key === 'server_no_context_takeover'
          ) {
            if (value !== true) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }

          params[key] = value;
        });
      });

      return configurations;
    }

    /**
     * Decompress data. Concurrency limited by async-limiter.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    decompress(data, fin, callback) {
      zlibLimiter.push((done) => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Compress data. Concurrency limited by async-limiter.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    compress(data, fin, callback) {
      zlibLimiter.push((done) => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Decompress data.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? 'client' : 'server';

      if (!this._inflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._inflate = zlib.createInflateRaw(
          Object.assign({}, this._options.zlibInflateOptions, { windowBits })
        );
        this._inflate[kPerMessageDeflate] = this;
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        this._inflate.on('error', inflateOnError);
        this._inflate.on('data', inflateOnData);
      }

      this._inflate[kCallback] = callback;

      this._inflate.write(data);
      if (fin) this._inflate.write(TRAILER);

      this._inflate.flush(() => {
        const err = this._inflate[kError];

        if (err) {
          this._inflate.close();
          this._inflate = null;
          callback(err);
          return;
        }

        const data = bufferUtil.concat(
          this._inflate[kBuffers],
          this._inflate[kTotalLength]
        );

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.close();
          this._inflate = null;
        } else {
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
        }

        callback(null, data);
      });
    }

    /**
     * Compress data.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _compress(data, fin, callback) {
      if (!data || data.length === 0) {
        process.nextTick(callback, null, EMPTY_BLOCK);
        return;
      }

      const endpoint = this._isServer ? 'server' : 'client';

      if (!this._deflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._deflate = zlib.createDeflateRaw(
          Object.assign({}, this._options.zlibDeflateOptions, { windowBits })
        );

        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];

        //
        // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
        // `zlib.DeflateRaw` instance is closed while data is being processed.
        // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
        // time due to an abnormal WebSocket closure.
        //
        this._deflate.on('error', NOOP);
        this._deflate.on('data', deflateOnData);
      }

      this._deflate.write(data);
      this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._deflate) {
          //
          // This `if` statement is only needed for Node.js < 10.0.0 because as of
          // commit https://github.com/nodejs/node/commit/5e3f5164, the flush
          // callback is no longer called if the deflate stream is closed while
          // data is being processed.
          //
          return;
        }

        var data = bufferUtil.concat(
          this._deflate[kBuffers],
          this._deflate[kTotalLength]
        );

        if (fin) data = data.slice(0, data.length - 4);

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._deflate.close();
          this._deflate = null;
        } else {
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
        }

        callback(null, data);
      });
    }
  }

  var permessageDeflate = PerMessageDeflate;

  /**
   * The listener of the `zlib.DeflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function deflateOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function inflateOnData(chunk) {
    this[kTotalLength] += chunk.length;

    if (
      this[kPerMessageDeflate]._maxPayload < 1 ||
      this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
    ) {
      this[kBuffers].push(chunk);
      return;
    }

    this[kError] = new RangeError('Max payload size exceeded');
    this[kError][kStatusCode] = 1009;
    this.removeListener('data', inflateOnData);
    this.reset();
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'error'` event.
   *
   * @param {Error} err The emitted error
   * @private
   */
  function inflateOnError(err) {
    //
    // There is no need to call `Zlib#close()` as the handle is automatically
    // closed when an error is emitted.
    //
    this[kPerMessageDeflate]._inflate = null;
    err[kStatusCode] = 1007;
    this[kCallback](err);
  }

  /**
   * Class representing an event.
   *
   * @private
   */
  class Event {
    /**
     * Create a new `Event`.
     *
     * @param {String} type The name of the event
     * @param {Object} target A reference to the target to which the event was dispatched
     */
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }
  }

  /**
   * Class representing a message event.
   *
   * @extends Event
   * @private
   */
  class MessageEvent extends Event {
    /**
     * Create a new `MessageEvent`.
     *
     * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(data, target) {
      super('message', target);

      this.data = data;
    }
  }

  /**
   * Class representing a close event.
   *
   * @extends Event
   * @private
   */
  class CloseEvent extends Event {
    /**
     * Create a new `CloseEvent`.
     *
     * @param {Number} code The status code explaining why the connection is being closed
     * @param {String} reason A human-readable string explaining why the connection is closing
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(code, reason, target) {
      super('close', target);

      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }
  }

  /**
   * Class representing an open event.
   *
   * @extends Event
   * @private
   */
  class OpenEvent extends Event {
    /**
     * Create a new `OpenEvent`.
     *
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(target) {
      super('open', target);
    }
  }

  /**
   * Class representing an error event.
   *
   * @extends Event
   * @private
   */
  class ErrorEvent extends Event {
    /**
     * Create a new `ErrorEvent`.
     *
     * @param {Object} error The error that generated this event
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(error, target) {
      super('error', target);

      this.message = error.message;
      this.error = error;
    }
  }

  /**
   * This provides methods for emulating the `EventTarget` interface. It's not
   * meant to be used directly.
   *
   * @mixin
   */
  const EventTarget = {
    /**
     * Register an event listener.
     *
     * @param {String} method A string representing the event type to listen for
     * @param {Function} listener The listener to add
     * @public
     */
    addEventListener(method, listener) {
      if (typeof listener !== 'function') return;

      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }

      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }

      function onError(error) {
        listener.call(this, new ErrorEvent(error, this));
      }

      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }

      if (method === 'message') {
        onMessage._listener = listener;
        this.on(method, onMessage);
      } else if (method === 'close') {
        onClose._listener = listener;
        this.on(method, onClose);
      } else if (method === 'error') {
        onError._listener = listener;
        this.on(method, onError);
      } else if (method === 'open') {
        onOpen._listener = listener;
        this.on(method, onOpen);
      } else {
        this.on(method, listener);
      }
    },

    /**
     * Remove an event listener.
     *
     * @param {String} method A string representing the event type to remove
     * @param {Function} listener The listener to remove
     * @public
     */
    removeEventListener(method, listener) {
      const listeners = this.listeners(method);

      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(method, listeners[i]);
        }
      }
    }
  };

  var eventTarget = EventTarget;

  //
  // Allowed token characters:
  //
  // '!', '#', '$', '%', '&', ''', '*', '+', '-',
  // '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
  //
  // tokenChars[32] === 0 // ' '
  // tokenChars[33] === 1 // '!'
  // tokenChars[34] === 0 // '"'
  // ...
  //
  // prettier-ignore
  const tokenChars = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
    0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
  ];

  /**
   * Adds an offer to the map of extension offers or a parameter to the map of
   * parameters.
   *
   * @param {Object} dest The map of extension offers or parameters
   * @param {String} name The extension or parameter name
   * @param {(Object|Boolean|String)} elem The extension parameters or the
   *     parameter value
   * @private
   */
  function push(dest, name, elem) {
    if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);
    else dest[name] = [elem];
  }

  /**
   * Parses the `Sec-WebSocket-Extensions` header into an object.
   *
   * @param {String} header The field value of the header
   * @return {Object} The parsed object
   * @public
   */
  function parse$2(header) {
    const offers = {};

    if (header === undefined || header === '') return offers;

    var params = {};
    var mustUnescape = false;
    var isEscaping = false;
    var inQuotes = false;
    var extensionName;
    var paramName;
    var start = -1;
    var end = -1;

    for (var i = 0; i < header.length; i++) {
      const code = header.charCodeAt(i);

      if (extensionName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          const name = header.slice(start, end);
          if (code === 0x2c) {
            push(offers, name, params);
            params = {};
          } else {
            extensionName = name;
          }

          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          push(params, header.slice(start, end), true);
          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = {};
            extensionName = undefined;
          }

          start = end = -1;
        } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        //
        // The value of a quoted-string after unescaping must conform to the
        // token ABNF, so only token characters are valid.
        // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
        //
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (start === -1) start = i;
          else if (!mustUnescape) mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x22 /* '"' */ && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 0x5c /* '\' */) {
            isEscaping = true;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
          if (end === -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          var value = header.slice(start, end);
          if (mustUnescape) {
            value = value.replace(/\\/g, '');
            mustUnescape = false;
          }
          push(params, paramName, value);
          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = {};
            extensionName = undefined;
          }

          paramName = undefined;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }

    if (start === -1 || inQuotes) {
      throw new SyntaxError('Unexpected end of input');
    }

    if (end === -1) end = i;
    const token = header.slice(start, end);
    if (extensionName === undefined) {
      push(offers, token, {});
    } else {
      if (paramName === undefined) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ''));
      } else {
        push(params, paramName, token);
      }
      push(offers, extensionName, params);
    }

    return offers;
  }

  /**
   * Builds the `Sec-WebSocket-Extensions` header field value.
   *
   * @param {Object} extensions The map of extensions and parameters to format
   * @return {String} A string representing the given object
   * @public
   */
  function format(extensions) {
    return Object.keys(extensions)
      .map((extension) => {
        var configurations = extensions[extension];
        if (!Array.isArray(configurations)) configurations = [configurations];
        return configurations
          .map((params) => {
            return [extension]
              .concat(
                Object.keys(params).map((k) => {
                  var values = params[k];
                  if (!Array.isArray(values)) values = [values];
                  return values
                    .map((v) => (v === true ? k : `${k}=${v}`))
                    .join('; ');
                })
              )
              .join('; ');
          })
          .join(', ');
      })
      .join(', ');
  }

  var extension = { format, parse: parse$2 };

  /**
   * Checks if a given buffer contains only correct UTF-8.
   * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
   * Markus Kuhn.
   *
   * @param {Buffer} buf The buffer to check
   * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
   * @public
   */
  const isValidUTF8 = (buf) => {
    var len = buf.length;
    var i = 0;

    while (i < len) {
      if (buf[i] < 0x80) {  // 0xxxxxxx
        i++;
      } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx
        if (
          i + 1 === len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i] & 0xfe) === 0xc0  // overlong
        ) {
          return false;
        } else {
          i += 2;
        }
      } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx
        if (
          i + 2 >= len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i + 2] & 0xc0) !== 0x80 ||
          buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong
          buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0     // surrogate (U+D800 - U+DFFF)
        ) {
          return false;
        } else {
          i += 3;
        }
      } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        if (
          i + 3 >= len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i + 2] & 0xc0) !== 0x80 ||
          (buf[i + 3] & 0xc0) !== 0x80 ||
          buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong
          buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF
        ) {
          return false;
        } else {
          i += 4;
        }
      } else {
        return false;
      }
    }

    return true;
  };

  var fallback$1 = isValidUTF8;

  var utf8Validate = createCommonjsModule(function (module) {

  try {
    module.exports = nodeGypBuild(__dirname);
  } catch (e) {
    module.exports = fallback$1;
  }
  });

  var validation = createCommonjsModule(function (module, exports) {

  try {
    const isValidUTF8 = utf8Validate;

    exports.isValidUTF8 =
      typeof isValidUTF8 === 'object'
        ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
        : isValidUTF8;
  } catch (e) /* istanbul ignore next */ {
    exports.isValidUTF8 = () => true;
  }

  /**
   * Checks if a status code is allowed in a close frame.
   *
   * @param {Number} code The status code
   * @return {Boolean} `true` if the status code is valid, else `false`
   * @public
   */
  exports.isValidStatusCode = (code) => {
    return (
      (code >= 1000 &&
        code <= 1013 &&
        code !== 1004 &&
        code !== 1005 &&
        code !== 1006) ||
      (code >= 3000 && code <= 4999)
    );
  };
  });
  var validation_1 = validation.isValidUTF8;
  var validation_2 = validation.isValidStatusCode;

  const GET_INFO = 0;
  const GET_PAYLOAD_LENGTH_16 = 1;
  const GET_PAYLOAD_LENGTH_64 = 2;
  const GET_MASK = 3;
  const GET_DATA = 4;
  const INFLATING = 5;

  /**
   * HyBi Receiver implementation.
   *
   * @extends stream.Writable
   */
  class Receiver extends stream$1.Writable {
    /**
     * Creates a Receiver instance.
     *
     * @param {String} binaryType The type for binary data
     * @param {Object} extensions An object containing the negotiated extensions
     * @param {Number} maxPayload The maximum allowed message length
     */
    constructor(binaryType, extensions, maxPayload) {
      super();

      this._binaryType = binaryType || constants.BINARY_TYPES[0];
      this[constants.kWebSocket] = undefined;
      this._extensions = extensions || {};
      this._maxPayload = maxPayload | 0;

      this._bufferedBytes = 0;
      this._buffers = [];

      this._compressed = false;
      this._payloadLength = 0;
      this._mask = undefined;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];

      this._state = GET_INFO;
      this._loop = false;
    }

    /**
     * Implements `Writable.prototype._write()`.
     *
     * @param {Buffer} chunk The chunk of data to write
     * @param {String} encoding The character encoding of `chunk`
     * @param {Function} cb Callback
     */
    _write(chunk, encoding, cb) {
      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

      this._bufferedBytes += chunk.length;
      this._buffers.push(chunk);
      this.startLoop(cb);
    }

    /**
     * Consumes `n` bytes from the buffered data.
     *
     * @param {Number} n The number of bytes to consume
     * @return {Buffer} The consumed bytes
     * @private
     */
    consume(n) {
      this._bufferedBytes -= n;

      if (n === this._buffers[0].length) return this._buffers.shift();

      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }

      const dst = Buffer.allocUnsafe(n);

      do {
        const buf = this._buffers[0];

        if (n >= buf.length) {
          this._buffers.shift().copy(dst, dst.length - n);
        } else {
          buf.copy(dst, dst.length - n, 0, n);
          this._buffers[0] = buf.slice(n);
        }

        n -= buf.length;
      } while (n > 0);

      return dst;
    }

    /**
     * Starts the parsing loop.
     *
     * @param {Function} cb Callback
     * @private
     */
    startLoop(cb) {
      var err;
      this._loop = true;

      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;
          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;
          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;
          case GET_MASK:
            this.getMask();
            break;
          case GET_DATA:
            err = this.getData(cb);
            break;
          default:
            // `INFLATING`
            this._loop = false;
            return;
        }
      } while (this._loop);

      cb(err);
    }

    /**
     * Reads the first two bytes of a frame.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      const buf = this.consume(2);

      if ((buf[0] & 0x30) !== 0x00) {
        this._loop = false;
        return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
      }

      const compressed = (buf[0] & 0x40) === 0x40;

      if (compressed && !this._extensions[permessageDeflate.extensionName]) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      this._fin = (buf[0] & 0x80) === 0x80;
      this._opcode = buf[0] & 0x0f;
      this._payloadLength = buf[1] & 0x7f;

      if (this._opcode === 0x00) {
        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (!this._fragmented) {
          this._loop = false;
          return error(RangeError, 'invalid opcode 0', true, 1002);
        }

        this._opcode = this._fragmented;
      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
        if (this._fragmented) {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }

        this._compressed = compressed;
      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
        if (!this._fin) {
          this._loop = false;
          return error(RangeError, 'FIN must be set', true, 1002);
        }

        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (this._payloadLength > 0x7d) {
          this._loop = false;
          return error(
            RangeError,
            `invalid payload length ${this._payloadLength}`,
            true,
            1002
          );
        }
      } else {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
      this._masked = (buf[1] & 0x80) === 0x80;

      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
      else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
      else return this.haveLength();
    }

    /**
     * Gets extended payload length (7+16).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }

    /**
     * Gets extended payload length (7+64).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }

      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);

      //
      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
      // if payload length is greater than this number.
      //
      if (num > Math.pow(2, 53 - 32) - 1) {
        this._loop = false;
        return error(
          RangeError,
          'Unsupported WebSocket frame: payload length > 2^53 - 1',
          false,
          1009
        );
      }

      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }

    /**
     * Payload length has been read.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    haveLength() {
      if (this._payloadLength && this._opcode < 0x08) {
        this._totalPayloadLength += this._payloadLength;
        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error(RangeError, 'Max payload size exceeded', false, 1009);
        }
      }

      if (this._masked) this._state = GET_MASK;
      else this._state = GET_DATA;
    }

    /**
     * Reads mask bytes.
     *
     * @private
     */
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }

      this._mask = this.consume(4);
      this._state = GET_DATA;
    }

    /**
     * Reads data bytes.
     *
     * @param {Function} cb Callback
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    getData(cb) {
      var data = constants.EMPTY_BUFFER;

      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }

        data = this.consume(this._payloadLength);
        if (this._masked) bufferUtil.unmask(data, this._mask);
      }

      if (this._opcode > 0x07) return this.controlMessage(data);

      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }

      if (data.length) {
        //
        // This message is not compressed so its lenght is the sum of the payload
        // length of all fragments.
        //
        this._messageLength = this._totalPayloadLength;
        this._fragments.push(data);
      }

      return this.dataMessage();
    }

    /**
     * Decompresses data.
     *
     * @param {Buffer} data Compressed data
     * @param {Function} cb Callback
     * @private
     */
    decompress(data, cb) {
      const perMessageDeflate = this._extensions[permessageDeflate.extensionName];

      perMessageDeflate.decompress(data, this._fin, (err, buf) => {
        if (err) return cb(err);

        if (buf.length) {
          this._messageLength += buf.length;
          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(
              error(RangeError, 'Max payload size exceeded', false, 1009)
            );
          }

          this._fragments.push(buf);
        }

        const er = this.dataMessage();
        if (er) return cb(er);

        this.startLoop(cb);
      });
    }

    /**
     * Handles a data message.
     *
     * @return {(Error|undefined)} A possible error
     * @private
     */
    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;

        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];

        if (this._opcode === 2) {
          var data;

          if (this._binaryType === 'nodebuffer') {
            data = toBuffer(fragments, messageLength);
          } else if (this._binaryType === 'arraybuffer') {
            data = toArrayBuffer(toBuffer(fragments, messageLength));
          } else {
            data = fragments;
          }

          this.emit('message', data);
        } else {
          const buf = toBuffer(fragments, messageLength);

          if (!validation.isValidUTF8(buf)) {
            this._loop = false;
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('message', buf.toString());
        }
      }

      this._state = GET_INFO;
    }

    /**
     * Handles a control message.
     *
     * @param {Buffer} data Data to handle
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    controlMessage(data) {
      if (this._opcode === 0x08) {
        this._loop = false;

        if (data.length === 0) {
          this.emit('conclude', 1005, '');
          this.end();
        } else if (data.length === 1) {
          return error(RangeError, 'invalid payload length 1', true, 1002);
        } else {
          const code = data.readUInt16BE(0);

          if (!validation.isValidStatusCode(code)) {
            return error(RangeError, `invalid status code ${code}`, true, 1002);
          }

          const buf = data.slice(2);

          if (!validation.isValidUTF8(buf)) {
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('conclude', code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 0x09) {
        this.emit('ping', data);
      } else {
        this.emit('pong', data);
      }

      this._state = GET_INFO;
    }
  }

  var receiver = Receiver;

  /**
   * Builds an error object.
   *
   * @param {(Error|RangeError)} ErrorCtor The error constructor
   * @param {String} message The error message
   * @param {Boolean} prefix Specifies whether or not to add a default prefix to
   *     `message`
   * @param {Number} statusCode The status code
   * @return {(Error|RangeError)} The error
   * @private
   */
  function error(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(
      prefix ? `Invalid WebSocket frame: ${message}` : message
    );

    Error.captureStackTrace(err, error);
    err[constants.kStatusCode] = statusCode;
    return err;
  }

  /**
   * Makes a buffer from a list of fragments.
   *
   * @param {Buffer[]} fragments The list of fragments composing the message
   * @param {Number} messageLength The length of the message
   * @return {Buffer}
   * @private
   */
  function toBuffer(fragments, messageLength) {
    if (fragments.length === 1) return fragments[0];
    if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);
    return constants.EMPTY_BUFFER;
  }

  /**
   * Converts a buffer to an `ArrayBuffer`.
   *
   * @param {Buffer} buf The buffer to convert
   * @return {ArrayBuffer} Converted buffer
   */
  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }

    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  /**
   * HyBi Sender implementation.
   */
  class Sender {
    /**
     * Creates a Sender instance.
     *
     * @param {net.Socket} socket The connection socket
     * @param {Object} extensions An object containing the negotiated extensions
     */
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;

      this._firstFragment = true;
      this._compress = false;

      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }

    /**
     * Frames a piece of data according to the HyBi WebSocket protocol.
     *
     * @param {Buffer} data The data to frame
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} options.readOnly Specifies whether `data` can be modified
     * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
     * @return {Buffer[]} The framed data as a list of `Buffer` instances
     * @public
     */
    static frame(data, options) {
      const merge = data.length < 1024 || (options.mask && options.readOnly);
      var offset = options.mask ? 6 : 2;
      var payloadLength = data.length;

      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }

      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
      if (options.rsv1) target[0] |= 0x40;

      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }

      if (!options.mask) {
        target[1] = payloadLength;
        if (merge) {
          data.copy(target, offset);
          return [target];
        }

        return [target, data];
      }

      const mask = crypto.randomBytes(4);

      target[1] = payloadLength | 0x80;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];

      if (merge) {
        bufferUtil.mask(data, mask, target, offset, data.length);
        return [target];
      }

      bufferUtil.mask(data, mask, data, 0, data.length);
      return [target, data];
    }

    /**
     * Sends a close message to the other peer.
     *
     * @param {(Number|undefined)} code The status code component of the body
     * @param {String} data The message component of the body
     * @param {Boolean} mask Specifies whether or not to mask the message
     * @param {Function} cb Callback
     * @public
     */
    close(code, data, mask, cb) {
      var buf;

      if (code === undefined) {
        buf = constants.EMPTY_BUFFER;
      } else if (
        typeof code !== 'number' ||
        !validation.isValidStatusCode(code)
      ) {
        throw new TypeError('First argument must be a valid error code number');
      } else if (data === undefined || data === '') {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }

      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask, cb]);
      } else {
        this.doClose(buf, mask, cb);
      }
    }

    /**
     * Frames and sends a close message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @private
     */
    doClose(data, mask, cb) {
      this.sendFrame(
        Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x08,
          mask,
          readOnly: false
        }),
        cb
      );
    }

    /**
     * Sends a ping message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    ping(data, mask, cb) {
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      if (this._deflating) {
        this.enqueue([this.doPing, data, mask, readOnly, cb]);
      } else {
        this.doPing(data, mask, readOnly, cb);
      }
    }

    /**
     * Frames and sends a ping message.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Boolean} readOnly Specifies whether `data` can be modified
     * @param {Function} cb Callback
     * @private
     */
    doPing(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x09,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a pong message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    pong(data, mask, cb) {
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      if (this._deflating) {
        this.enqueue([this.doPong, data, mask, readOnly, cb]);
      } else {
        this.doPong(data, mask, readOnly, cb);
      }
    }

    /**
     * Frames and sends a pong message.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Boolean} readOnly Specifies whether `data` can be modified
     * @param {Function} cb Callback
     * @private
     */
    doPong(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x0a,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a data message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Object} options Options object
     * @param {Boolean} options.compress Specifies whether or not to compress `data`
     * @param {Boolean} options.binary Specifies whether `data` is binary or text
     * @param {Boolean} options.fin Specifies whether the fragment is the last one
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    send(data, options, cb) {
      var opcode = options.binary ? 2 : 1;
      var rsv1 = options.compress;
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      const perMessageDeflate = this._extensions[permessageDeflate.extensionName];

      if (this._firstFragment) {
        this._firstFragment = false;
        if (rsv1 && perMessageDeflate) {
          rsv1 = data.length >= perMessageDeflate._threshold;
        }
        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }

      if (options.fin) this._firstFragment = true;

      if (perMessageDeflate) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, data, this._compress, opts, cb]);
        } else {
          this.dispatch(data, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(
          Sender.frame(data, {
            fin: options.fin,
            rsv1: false,
            opcode,
            mask: options.mask,
            readOnly
          }),
          cb
        );
      }
    }

    /**
     * Dispatches a data message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} compress Specifies whether or not to compress `data`
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} options.readOnly Specifies whether `data` can be modified
     * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
     * @param {Function} cb Callback
     * @private
     */
    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender.frame(data, options), cb);
        return;
      }

      const perMessageDeflate = this._extensions[permessageDeflate.extensionName];

      this._deflating = true;
      perMessageDeflate.compress(data, options.fin, (_, buf) => {
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender.frame(buf, options), cb);
        this.dequeue();
      });
    }

    /**
     * Executes queued send operations.
     *
     * @private
     */
    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();

        this._bufferedBytes -= params[1].length;
        params[0].apply(this, params.slice(1));
      }
    }

    /**
     * Enqueues a send operation.
     *
     * @param {Array} params Send operation parameters.
     * @private
     */
    enqueue(params) {
      this._bufferedBytes += params[1].length;
      this._queue.push(params);
    }

    /**
     * Sends a frame.
     *
     * @param {Buffer[]} list The frame to send
     * @param {Function} cb Callback
     * @private
     */
    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.write(list[0]);
        this._socket.write(list[1], cb);
      } else {
        this._socket.write(list[0], cb);
      }
    }
  }

  var sender = Sender;

  /**
   * Converts an `ArrayBuffer` view into a buffer.
   *
   * @param {(DataView|TypedArray)} view The view to convert
   * @return {Buffer} Converted view
   * @private
   */
  function viewToBuffer(view) {
    const buf = Buffer.from(view.buffer);

    if (view.byteLength !== view.buffer.byteLength) {
      return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
    }

    return buf;
  }

  const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
  const kWebSocket = constants.kWebSocket;
  const protocolVersions = [8, 13];
  const closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.

  /**
   * Class representing a WebSocket.
   *
   * @extends EventEmitter
   */
  class WebSocket$1 extends events {
    /**
     * Create a new `WebSocket`.
     *
     * @param {(String|url.Url|url.URL)} address The URL to which to connect
     * @param {(String|String[])} protocols The subprotocols
     * @param {Object} options Connection options
     */
    constructor(address, protocols, options) {
      super();

      this.readyState = WebSocket$1.CONNECTING;
      this.protocol = '';

      this._binaryType = constants.BINARY_TYPES[0];
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = '';
      this._closeTimer = null;
      this._closeCode = 1006;
      this._extensions = {};
      this._isServer = true;
      this._receiver = null;
      this._sender = null;
      this._socket = null;

      if (address !== null) {
        if (Array.isArray(protocols)) {
          protocols = protocols.join(', ');
        } else if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = undefined;
        }

        initAsClient.call(this, address, protocols, options);
      }
    }

    get CONNECTING() {
      return WebSocket$1.CONNECTING;
    }
    get CLOSING() {
      return WebSocket$1.CLOSING;
    }
    get CLOSED() {
      return WebSocket$1.CLOSED;
    }
    get OPEN() {
      return WebSocket$1.OPEN;
    }

    /**
     * This deviates from the WHATWG interface since ws doesn't support the required
     * default "blob" type (instead we define a custom "nodebuffer" type).
     *
     * @type {String}
     */
    get binaryType() {
      return this._binaryType;
    }

    set binaryType(type) {
      if (!constants.BINARY_TYPES.includes(type)) return;

      this._binaryType = type;

      //
      // Allow to change `binaryType` on the fly.
      //
      if (this._receiver) this._receiver._binaryType = type;
    }

    /**
     * @type {Number}
     */
    get bufferedAmount() {
      if (!this._socket) return 0;

      //
      // `socket.bufferSize` is `undefined` if the socket is closed.
      //
      return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;
    }

    /**
     * @type {String}
     */
    get extensions() {
      return Object.keys(this._extensions).join();
    }

    /**
     * Set up the socket and the internal resources.
     *
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Number} maxPayload The maximum allowed message size
     * @private
     */
    setSocket(socket, head, maxPayload) {
      const receiver$1 = new receiver(
        this._binaryType,
        this._extensions,
        maxPayload
      );

      this._sender = new sender(socket, this._extensions);
      this._receiver = receiver$1;
      this._socket = socket;

      receiver$1[kWebSocket] = this;
      socket[kWebSocket] = this;

      receiver$1.on('conclude', receiverOnConclude);
      receiver$1.on('drain', receiverOnDrain);
      receiver$1.on('error', receiverOnError);
      receiver$1.on('message', receiverOnMessage);
      receiver$1.on('ping', receiverOnPing);
      receiver$1.on('pong', receiverOnPong);

      socket.setTimeout(0);
      socket.setNoDelay();

      if (head.length > 0) socket.unshift(head);

      socket.on('close', socketOnClose);
      socket.on('data', socketOnData);
      socket.on('end', socketOnEnd);
      socket.on('error', socketOnError);

      this.readyState = WebSocket$1.OPEN;
      this.emit('open');
    }

    /**
     * Emit the `'close'` event.
     *
     * @private
     */
    emitClose() {
      this.readyState = WebSocket$1.CLOSED;

      if (!this._socket) {
        this.emit('close', this._closeCode, this._closeMessage);
        return;
      }

      if (this._extensions[permessageDeflate.extensionName]) {
        this._extensions[permessageDeflate.extensionName].cleanup();
      }

      this._receiver.removeAllListeners();
      this.emit('close', this._closeCode, this._closeMessage);
    }

    /**
     * Start a closing handshake.
     *
     *          +----------+   +-----------+   +----------+
     *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
     *    |     +----------+   +-----------+   +----------+     |
     *          +----------+   +-----------+         |
     * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
     *          +----------+   +-----------+   |
     *    |           |                        |   +---+        |
     *                +------------------------+-->|fin| - - - -
     *    |         +---+                      |   +---+
     *     - - - - -|fin|<---------------------+
     *              +---+
     *
     * @param {Number} code Status code explaining why the connection is closing
     * @param {String} data A string explaining why the connection is closing
     * @public
     */
    close(code, data) {
      if (this.readyState === WebSocket$1.CLOSED) return;
      if (this.readyState === WebSocket$1.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this.readyState === WebSocket$1.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
        return;
      }

      this.readyState = WebSocket$1.CLOSING;
      this._sender.close(code, data, !this._isServer, (err) => {
        //
        // This error is handled by the `'error'` listener on the socket. We only
        // want to know if the close frame has been sent here.
        //
        if (err) return;

        this._closeFrameSent = true;

        if (this._socket.writable) {
          if (this._closeFrameReceived) this._socket.end();

          //
          // Ensure that the connection is closed even if the closing handshake
          // fails.
          //
          this._closeTimer = setTimeout(
            this._socket.destroy.bind(this._socket),
            closeTimeout
          );
        }
      });
    }

    /**
     * Send a ping.
     *
     * @param {*} data The data to send
     * @param {Boolean} mask Indicates whether or not to mask `data`
     * @param {Function} cb Callback which is executed when the ping is sent
     * @public
     */
    ping(data, mask, cb) {
      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (this.readyState !== WebSocket$1.OPEN) {
        const err = new Error(
          `WebSocket is not open: readyState ${this.readyState} ` +
            `(${readyStates[this.readyState]})`
        );

        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();
      if (mask === undefined) mask = !this._isServer;
      this._sender.ping(data || constants.EMPTY_BUFFER, mask, cb);
    }

    /**
     * Send a pong.
     *
     * @param {*} data The data to send
     * @param {Boolean} mask Indicates whether or not to mask `data`
     * @param {Function} cb Callback which is executed when the pong is sent
     * @public
     */
    pong(data, mask, cb) {
      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (this.readyState !== WebSocket$1.OPEN) {
        const err = new Error(
          `WebSocket is not open: readyState ${this.readyState} ` +
            `(${readyStates[this.readyState]})`
        );

        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();
      if (mask === undefined) mask = !this._isServer;
      this._sender.pong(data || constants.EMPTY_BUFFER, mask, cb);
    }

    /**
     * Send a data message.
     *
     * @param {*} data The message to send
     * @param {Object} options Options object
     * @param {Boolean} options.compress Specifies whether or not to compress `data`
     * @param {Boolean} options.binary Specifies whether `data` is binary or text
     * @param {Boolean} options.fin Specifies whether the fragment is the last one
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback which is executed when data is written out
     * @public
     */
    send(data, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      if (this.readyState !== WebSocket$1.OPEN) {
        const err = new Error(
          `WebSocket is not open: readyState ${this.readyState} ` +
            `(${readyStates[this.readyState]})`
        );

        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();

      const opts = Object.assign(
        {
          binary: typeof data !== 'string',
          mask: !this._isServer,
          compress: true,
          fin: true
        },
        options
      );

      if (!this._extensions[permessageDeflate.extensionName]) {
        opts.compress = false;
      }

      this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);
    }

    /**
     * Forcibly close the connection.
     *
     * @public
     */
    terminate() {
      if (this.readyState === WebSocket$1.CLOSED) return;
      if (this.readyState === WebSocket$1.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this._socket) {
        this.readyState = WebSocket$1.CLOSING;
        this._socket.destroy();
      }
    }
  }

  readyStates.forEach((readyState, i) => {
    WebSocket$1[readyState] = i;
  });

  //
  // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
  // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
  //
  ['open', 'error', 'close', 'message'].forEach((method) => {
    Object.defineProperty(WebSocket$1.prototype, `on${method}`, {
      /**
       * Return the listener of the event.
       *
       * @return {(Function|undefined)} The event listener or `undefined`
       * @public
       */
      get() {
        const listeners = this.listeners(method);
        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) return listeners[i]._listener;
        }

        return undefined;
      },
      /**
       * Add a listener for the event.
       *
       * @param {Function} listener The listener to add
       * @public
       */
      set(listener) {
        const listeners = this.listeners(method);
        for (var i = 0; i < listeners.length; i++) {
          //
          // Remove only the listeners added via `addEventListener`.
          //
          if (listeners[i]._listener) this.removeListener(method, listeners[i]);
        }
        this.addEventListener(method, listener);
      }
    });
  });

  WebSocket$1.prototype.addEventListener = eventTarget.addEventListener;
  WebSocket$1.prototype.removeEventListener = eventTarget.removeEventListener;

  var websocket = WebSocket$1;

  /**
   * Initialize a WebSocket client.
   *
   * @param {(String|url.Url|url.URL)} address The URL to which to connect
   * @param {String} protocols The subprotocols
   * @param {Object} options Connection options
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
   * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request
   * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header
   * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header
   * @param {Number} options.maxPayload The maximum allowed message size
   * @private
   */
  function initAsClient(address, protocols, options) {
    options = Object.assign(
      {
        protocolVersion: protocolVersions[1],
        perMessageDeflate: true,
        maxPayload: 100 * 1024 * 1024
      },
      options,
      {
        createConnection: undefined,
        socketPath: undefined,
        hostname: undefined,
        protocol: undefined,
        timeout: undefined,
        method: undefined,
        auth: undefined,
        host: undefined,
        path: undefined,
        port: undefined
      }
    );

    if (!protocolVersions.includes(options.protocolVersion)) {
      throw new RangeError(
        `Unsupported protocol version: ${options.protocolVersion} ` +
          `(supported versions: ${protocolVersions.join(', ')})`
      );
    }

    this._isServer = false;

    var parsedUrl;

    if (typeof address === 'object' && address.href !== undefined) {
      parsedUrl = address;
      this.url = address.href;
    } else {
      //
      // The WHATWG URL constructor is not available on Node.js < 6.13.0
      //
      parsedUrl = url$1.URL ? new url$1.URL(address) : url$1.parse(address);
      this.url = address;
    }

    const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${this.url}`);
    }

    const isSecure =
      parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
    const defaultPort = isSecure ? 443 : 80;
    const key = crypto.randomBytes(16).toString('base64');
    const httpObj = isSecure ? https : http;
    const path = parsedUrl.search
      ? `${parsedUrl.pathname || '/'}${parsedUrl.search}`
      : parsedUrl.pathname || '/';
    var perMessageDeflate;

    options.createConnection = isSecure ? tlsConnect : netConnect;
    options.defaultPort = options.defaultPort || defaultPort;
    options.port = parsedUrl.port || defaultPort;
    options.host = parsedUrl.hostname.startsWith('[')
      ? parsedUrl.hostname.slice(1, -1)
      : parsedUrl.hostname;
    options.headers = Object.assign(
      {
        'Sec-WebSocket-Version': options.protocolVersion,
        'Sec-WebSocket-Key': key,
        Connection: 'Upgrade',
        Upgrade: 'websocket'
      },
      options.headers
    );
    options.path = path;
    options.timeout = options.handshakeTimeout;

    if (options.perMessageDeflate) {
      perMessageDeflate = new permessageDeflate(
        options.perMessageDeflate !== true ? options.perMessageDeflate : {},
        false,
        options.maxPayload
      );
      options.headers['Sec-WebSocket-Extensions'] = extension.format({
        [permessageDeflate.extensionName]: perMessageDeflate.offer()
      });
    }
    if (protocols) {
      options.headers['Sec-WebSocket-Protocol'] = protocols;
    }
    if (options.origin) {
      if (options.protocolVersion < 13) {
        options.headers['Sec-WebSocket-Origin'] = options.origin;
      } else {
        options.headers.Origin = options.origin;
      }
    }
    if (parsedUrl.auth) {
      options.auth = parsedUrl.auth;
    } else if (parsedUrl.username || parsedUrl.password) {
      options.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }

    if (isUnixSocket) {
      const parts = path.split(':');

      options.socketPath = parts[0];
      options.path = parts[1];
    }

    var req = (this._req = httpObj.get(options));

    if (options.handshakeTimeout) {
      req.on('timeout', () => {
        abortHandshake(this, req, 'Opening handshake has timed out');
      });
    }

    req.on('error', (err) => {
      if (this._req.aborted) return;

      req = this._req = null;
      this.readyState = WebSocket$1.CLOSING;
      this.emit('error', err);
      this.emitClose();
    });

    req.on('response', (res) => {
      if (this.emit('unexpected-response', req, res)) return;

      abortHandshake(this, req, `Unexpected server response: ${res.statusCode}`);
    });

    req.on('upgrade', (res, socket, head) => {
      this.emit('upgrade', res);

      //
      // The user may have closed the connection from a listener of the `upgrade`
      // event.
      //
      if (this.readyState !== WebSocket$1.CONNECTING) return;

      req = this._req = null;

      const digest = crypto
        .createHash('sha1')
        .update(key + constants.GUID, 'binary')
        .digest('base64');

      if (res.headers['sec-websocket-accept'] !== digest) {
        abortHandshake(this, socket, 'Invalid Sec-WebSocket-Accept header');
        return;
      }

      const serverProt = res.headers['sec-websocket-protocol'];
      const protList = (protocols || '').split(/, */);
      var protError;

      if (!protocols && serverProt) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (protocols && !serverProt) {
        protError = 'Server sent no subprotocol';
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }

      if (protError) {
        abortHandshake(this, socket, protError);
        return;
      }

      if (serverProt) this.protocol = serverProt;

      if (perMessageDeflate) {
        try {
          const extensions = extension.parse(
            res.headers['sec-websocket-extensions']
          );

          if (extensions[permessageDeflate.extensionName]) {
            perMessageDeflate.accept(extensions[permessageDeflate.extensionName]);
            this._extensions[permessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          abortHandshake(this, socket, 'Invalid Sec-WebSocket-Extensions header');
          return;
        }
      }

      this.setSocket(socket, head, options.maxPayload);
    });
  }

  /**
   * Create a `net.Socket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {net.Socket} The newly created socket used to start the connection
   * @private
   */
  function netConnect(options) {
    //
    // Override `options.path` only if `options` is a copy of the original options
    // object. This is always true on Node.js >= 8 but not on Node.js 6 where
    // `options.socketPath` might be `undefined` even if the `socketPath` option
    // was originally set.
    //
    if (options.protocolVersion) options.path = options.socketPath;
    return net.connect(options);
  }

  /**
   * Create a `tls.TLSSocket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {tls.TLSSocket} The newly created socket used to start the connection
   * @private
   */
  function tlsConnect(options) {
    options.path = undefined;
    options.servername = options.servername || options.host;
    return tls$1.connect(options);
  }

  /**
   * Abort the handshake and emit an error.
   *
   * @param {WebSocket} websocket The WebSocket instance
   * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the
   *     socket to destroy
   * @param {String} message The error message
   * @private
   */
  function abortHandshake(websocket, stream, message) {
    websocket.readyState = WebSocket$1.CLOSING;

    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake);

    if (stream.setHeader) {
      stream.abort();
      stream.once('abort', websocket.emitClose.bind(websocket));
      websocket.emit('error', err);
    } else {
      stream.destroy(err);
      stream.once('error', websocket.emit.bind(websocket, 'error'));
      stream.once('close', websocket.emitClose.bind(websocket));
    }
  }

  /**
   * The listener of the `Receiver` `'conclude'` event.
   *
   * @param {Number} code The status code
   * @param {String} reason The reason for closing
   * @private
   */
  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);
    websocket._socket.resume();

    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;

    if (code === 1005) websocket.close();
    else websocket.close(code, reason);
  }

  /**
   * The listener of the `Receiver` `'drain'` event.
   *
   * @private
   */
  function receiverOnDrain() {
    this[kWebSocket]._socket.resume();
  }

  /**
   * The listener of the `Receiver` `'error'` event.
   *
   * @param {(RangeError|Error)} err The emitted error
   * @private
   */
  function receiverOnError(err) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);

    websocket.readyState = WebSocket$1.CLOSING;
    websocket._closeCode = err[constants.kStatusCode];
    websocket.emit('error', err);
    websocket._socket.destroy();
  }

  /**
   * The listener of the `Receiver` `'finish'` event.
   *
   * @private
   */
  function receiverOnFinish() {
    this[kWebSocket].emitClose();
  }

  /**
   * The listener of the `Receiver` `'message'` event.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
   * @private
   */
  function receiverOnMessage(data) {
    this[kWebSocket].emit('message', data);
  }

  /**
   * The listener of the `Receiver` `'ping'` event.
   *
   * @param {Buffer} data The data included in the ping frame
   * @private
   */
  function receiverOnPing(data) {
    const websocket = this[kWebSocket];

    websocket.pong(data, !websocket._isServer, constants.NOOP);
    websocket.emit('ping', data);
  }

  /**
   * The listener of the `Receiver` `'pong'` event.
   *
   * @param {Buffer} data The data included in the pong frame
   * @private
   */
  function receiverOnPong(data) {
    this[kWebSocket].emit('pong', data);
  }

  /**
   * The listener of the `net.Socket` `'close'` event.
   *
   * @private
   */
  function socketOnClose() {
    const websocket = this[kWebSocket];

    this.removeListener('close', socketOnClose);
    this.removeListener('end', socketOnEnd);

    websocket.readyState = WebSocket$1.CLOSING;

    //
    // The close frame might not have been received or the `'end'` event emitted,
    // for example, if the socket was destroyed due to an error. Ensure that the
    // `receiver` stream is closed after writing any remaining buffered data to
    // it. If the readable side of the socket is in flowing mode then there is no
    // buffered data as everything has been already written and `readable.read()`
    // will return `null`. If instead, the socket is paused, any possible buffered
    // data will be read as a single chunk and emitted synchronously in a single
    // `'data'` event.
    //
    websocket._socket.read();
    websocket._receiver.end();

    this.removeListener('data', socketOnData);
    this[kWebSocket] = undefined;

    clearTimeout(websocket._closeTimer);

    if (
      websocket._receiver._writableState.finished ||
      websocket._receiver._writableState.errorEmitted
    ) {
      websocket.emitClose();
    } else {
      websocket._receiver.on('error', receiverOnFinish);
      websocket._receiver.on('finish', receiverOnFinish);
    }
  }

  /**
   * The listener of the `net.Socket` `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function socketOnData(chunk) {
    if (!this[kWebSocket]._receiver.write(chunk)) {
      this.pause();
    }
  }

  /**
   * The listener of the `net.Socket` `'end'` event.
   *
   * @private
   */
  function socketOnEnd() {
    const websocket = this[kWebSocket];

    websocket.readyState = WebSocket$1.CLOSING;
    websocket._receiver.end();
    this.end();
  }

  /**
   * The listener of the `net.Socket` `'error'` event.
   *
   * @private
   */
  function socketOnError() {
    const websocket = this[kWebSocket];

    this.removeListener('error', socketOnError);
    this.on('error', constants.NOOP);

    if (websocket) {
      websocket.readyState = WebSocket$1.CLOSING;
      this.destroy();
    }
  }

  /**
   * Class representing a WebSocket server.
   *
   * @extends EventEmitter
   */
  class WebSocketServer extends events {
    /**
     * Create a `WebSocketServer` instance.
     *
     * @param {Object} options Configuration options
     * @param {String} options.host The hostname where to bind the server
     * @param {Number} options.port The port where to bind the server
     * @param {http.Server} options.server A pre-created HTTP/S server to use
     * @param {Function} options.verifyClient An hook to reject connections
     * @param {Function} options.handleProtocols An hook to handle protocols
     * @param {String} options.path Accept only connections matching this path
     * @param {Boolean} options.noServer Enable no server mode
     * @param {Boolean} options.clientTracking Specifies whether or not to track clients
     * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
     * @param {Number} options.maxPayload The maximum allowed message size
     * @param {Function} callback A listener for the `listening` event
     */
    constructor(options, callback) {
      super();

      options = Object.assign(
        {
          maxPayload: 100 * 1024 * 1024,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null, // use default (511 as implemented in net.js)
          server: null,
          host: null,
          path: null,
          port: null
        },
        options
      );

      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError(
          'One of the "port", "server", or "noServer" options must be specified'
        );
      }

      if (options.port != null) {
        this._server = http.createServer((req, res) => {
          const body = http.STATUS_CODES[426];

          res.writeHead(426, {
            'Content-Length': body.length,
            'Content-Type': 'text/plain'
          });
          res.end(body);
        });
        this._server.listen(
          options.port,
          options.host,
          options.backlog,
          callback
        );
      } else if (options.server) {
        this._server = options.server;
      }

      if (this._server) {
        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, 'listening'),
          error: this.emit.bind(this, 'error'),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, (ws) => {
              this.emit('connection', ws, req);
            });
          }
        });
      }

      if (options.perMessageDeflate === true) options.perMessageDeflate = {};
      if (options.clientTracking) this.clients = new Set();
      this.options = options;
    }

    /**
     * Returns the bound address, the address family name, and port of the server
     * as reported by the operating system if listening on an IP socket.
     * If the server is listening on a pipe or UNIX domain socket, the name is
     * returned as a string.
     *
     * @return {(Object|String|null)} The address of the server
     * @public
     */
    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }

      if (!this._server) return null;
      return this._server.address();
    }

    /**
     * Close the server.
     *
     * @param {Function} cb Callback
     * @public
     */
    close(cb) {
      if (cb) this.once('close', cb);

      //
      // Terminate all associated clients.
      //
      if (this.clients) {
        for (const client of this.clients) client.terminate();
      }

      const server = this._server;

      if (server) {
        this._removeListeners();
        this._removeListeners = this._server = null;

        //
        // Close the http server if it was internally created.
        //
        if (this.options.port != null) {
          server.close(() => this.emit('close'));
          return;
        }
      }

      process.nextTick(emitClose, this);
    }

    /**
     * See if a given request should be handled by this server instance.
     *
     * @param {http.IncomingMessage} req Request object to inspect
     * @return {Boolean} `true` if the request is valid, else `false`
     * @public
     */
    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf('?');
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

        if (pathname !== this.options.path) return false;
      }

      return true;
    }

    /**
     * Handle a HTTP Upgrade request.
     *
     * @param {http.IncomingMessage} req The request object
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @public
     */
    handleUpgrade(req, socket, head, cb) {
      socket.on('error', socketOnError$1);

      const version = +req.headers['sec-websocket-version'];
      const extensions = {};

      if (
        req.method !== 'GET' ||
        req.headers.upgrade.toLowerCase() !== 'websocket' ||
        !req.headers['sec-websocket-key'] ||
        (version !== 8 && version !== 13) ||
        !this.shouldHandle(req)
      ) {
        return abortHandshake$1(socket, 400);
      }

      if (this.options.perMessageDeflate) {
        const perMessageDeflate = new permessageDeflate(
          this.options.perMessageDeflate,
          true,
          this.options.maxPayload
        );

        try {
          const offers = extension.parse(req.headers['sec-websocket-extensions']);

          if (offers[permessageDeflate.extensionName]) {
            perMessageDeflate.accept(offers[permessageDeflate.extensionName]);
            extensions[permessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          return abortHandshake$1(socket, 400);
        }
      }

      //
      // Optionally call external client verification handler.
      //
      if (this.options.verifyClient) {
        const info = {
          origin:
            req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
          secure: !!(req.connection.authorized || req.connection.encrypted),
          req
        };

        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake$1(socket, code || 401, message, headers);
            }

            this.completeUpgrade(extensions, req, socket, head, cb);
          });
          return;
        }

        if (!this.options.verifyClient(info)) return abortHandshake$1(socket, 401);
      }

      this.completeUpgrade(extensions, req, socket, head, cb);
    }

    /**
     * Upgrade the connection to WebSocket.
     *
     * @param {Object} extensions The accepted extensions
     * @param {http.IncomingMessage} req The request object
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @private
     */
    completeUpgrade(extensions, req, socket, head, cb) {
      //
      // Destroy the socket if the client has already sent a FIN packet.
      //
      if (!socket.readable || !socket.writable) return socket.destroy();

      const key = crypto
        .createHash('sha1')
        .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')
        .digest('base64');

      const headers = [
        'HTTP/1.1 101 Switching Protocols',
        'Upgrade: websocket',
        'Connection: Upgrade',
        `Sec-WebSocket-Accept: ${key}`
      ];

      const ws = new websocket(null);
      var protocol = req.headers['sec-websocket-protocol'];

      if (protocol) {
        protocol = protocol.trim().split(/ *, */);

        //
        // Optionally call external protocol selection handler.
        //
        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }

        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws.protocol = protocol;
        }
      }

      if (extensions[permessageDeflate.extensionName]) {
        const params = extensions[permessageDeflate.extensionName].params;
        const value = extension.format({
          [permessageDeflate.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }

      //
      // Allow external modification/inspection of handshake headers.
      //
      this.emit('headers', headers, req);

      socket.write(headers.concat('\r\n').join('\r\n'));
      socket.removeListener('error', socketOnError$1);

      ws.setSocket(socket, head, this.options.maxPayload);

      if (this.clients) {
        this.clients.add(ws);
        ws.on('close', () => this.clients.delete(ws));
      }

      cb(ws);
    }
  }

  var websocketServer = WebSocketServer;

  /**
   * Add event listeners on an `EventEmitter` using a map of <event, listener>
   * pairs.
   *
   * @param {EventEmitter} server The event emitter
   * @param {Object.<String, Function>} map The listeners to add
   * @return {Function} A function that will remove the added listeners when called
   * @private
   */
  function addListeners(server, map) {
    for (const event of Object.keys(map)) server.on(event, map[event]);

    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }

  /**
   * Emit a `'close'` event on an `EventEmitter`.
   *
   * @param {EventEmitter} server The event emitter
   * @private
   */
  function emitClose(server) {
    server.emit('close');
  }

  /**
   * Handle premature socket errors.
   *
   * @private
   */
  function socketOnError$1() {
    this.destroy();
  }

  /**
   * Close the connection when preconditions are not fulfilled.
   *
   * @param {net.Socket} socket The socket of the upgrade request
   * @param {Number} code The HTTP response status code
   * @param {String} [message] The HTTP response body
   * @param {Object} [headers] Additional HTTP response headers
   * @private
   */
  function abortHandshake$1(socket, code, message, headers) {
    if (socket.writable) {
      message = message || http.STATUS_CODES[code];
      headers = Object.assign(
        {
          Connection: 'close',
          'Content-type': 'text/html',
          'Content-Length': Buffer.byteLength(message)
        },
        headers
      );

      socket.write(
        `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
          Object.keys(headers)
            .map((h) => `${h}: ${headers[h]}`)
            .join('\r\n') +
          '\r\n\r\n' +
          message
      );
    }

    socket.removeListener('error', socketOnError$1);
    socket.destroy();
  }

  websocket.Server = websocketServer;
  websocket.Receiver = receiver;
  websocket.Sender = sender;

  var ws = websocket;

  /**
   * Module dependencies.
   */






  var debug$4 = src('engine.io-client:websocket');

  var BrowserWebSocket, NodeWebSocket;

  if (typeof WebSocket !== 'undefined') {
    BrowserWebSocket = WebSocket;
  } else if (typeof self !== 'undefined') {
    BrowserWebSocket = self.WebSocket || self.MozWebSocket;
  }

  if (typeof window === 'undefined') {
    try {
      NodeWebSocket = ws;
    } catch (e) { }
  }

  /**
   * Get either the `WebSocket` or `MozWebSocket` globals
   * in the browser or try to resolve WebSocket-compatible
   * interface exposed by `ws` for Node-like environment.
   */

  var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

  /**
   * Module exports.
   */

  var websocket$1 = WS;

  /**
   * WebSocket transport constructor.
   *
   * @api {Object} connection options
   * @api public
   */

  function WS (opts) {
    var forceBase64 = (opts && opts.forceBase64);
    if (forceBase64) {
      this.supportsBinary = false;
    }
    this.perMessageDeflate = opts.perMessageDeflate;
    this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
    this.protocols = opts.protocols;
    if (!this.usingBrowserWebSocket) {
      WebSocketImpl = NodeWebSocket;
    }
    transport.call(this, opts);
  }

  /**
   * Inherits from Transport.
   */

  componentInherit(WS, transport);

  /**
   * Transport name.
   *
   * @api public
   */

  WS.prototype.name = 'websocket';

  /*
   * WebSockets support binary
   */

  WS.prototype.supportsBinary = true;

  /**
   * Opens socket.
   *
   * @api private
   */

  WS.prototype.doOpen = function () {
    if (!this.check()) {
      // let probe timeout
      return;
    }

    var uri = this.uri();
    var protocols = this.protocols;

    var opts = {};

    if (!this.isReactNative) {
      opts.agent = this.agent;
      opts.perMessageDeflate = this.perMessageDeflate;

      // SSL options for Node.js client
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
    }

    if (this.extraHeaders) {
      opts.headers = this.extraHeaders;
    }
    if (this.localAddress) {
      opts.localAddress = this.localAddress;
    }

    try {
      this.ws =
        this.usingBrowserWebSocket && !this.isReactNative
          ? protocols
            ? new WebSocketImpl(uri, protocols)
            : new WebSocketImpl(uri)
          : new WebSocketImpl(uri, protocols, opts);
    } catch (err) {
      return this.emit('error', err);
    }

    if (this.ws.binaryType === undefined) {
      this.supportsBinary = false;
    }

    if (this.ws.supports && this.ws.supports.binary) {
      this.supportsBinary = true;
      this.ws.binaryType = 'nodebuffer';
    } else {
      this.ws.binaryType = 'arraybuffer';
    }

    this.addEventListeners();
  };

  /**
   * Adds event listeners to the socket
   *
   * @api private
   */

  WS.prototype.addEventListeners = function () {
    var self = this;

    this.ws.onopen = function () {
      self.onOpen();
    };
    this.ws.onclose = function () {
      self.onClose();
    };
    this.ws.onmessage = function (ev) {
      self.onData(ev.data);
    };
    this.ws.onerror = function (e) {
      self.onError('websocket error', e);
    };
  };

  /**
   * Writes data to socket.
   *
   * @param {Array} array of packets.
   * @api private
   */

  WS.prototype.write = function (packets) {
    var self = this;
    this.writable = false;

    // encodePacket efficient as it uses WS framing
    // no need for encodePayload
    var total = packets.length;
    for (var i = 0, l = total; i < l; i++) {
      (function (packet) {
        lib.encodePacket(packet, self.supportsBinary, function (data) {
          if (!self.usingBrowserWebSocket) {
            // always create a new object (GH-437)
            var opts = {};
            if (packet.options) {
              opts.compress = packet.options.compress;
            }

            if (self.perMessageDeflate) {
              var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
              if (len < self.perMessageDeflate.threshold) {
                opts.compress = false;
              }
            }
          }

          // Sometimes the websocket has already been closed but the browser didn't
          // have a chance of informing us about it yet, in that case send will
          // throw an error
          try {
            if (self.usingBrowserWebSocket) {
              // TypeError is thrown when passing the second argument on Safari
              self.ws.send(data);
            } else {
              self.ws.send(data, opts);
            }
          } catch (e) {
            debug$4('websocket closed before onclose event');
          }

          --total || done();
        });
      })(packets[i]);
    }

    function done () {
      self.emit('flush');

      // fake drain
      // defer to next tick to allow Socket to clear writeBuffer
      setTimeout(function () {
        self.writable = true;
        self.emit('drain');
      }, 0);
    }
  };

  /**
   * Called upon close
   *
   * @api private
   */

  WS.prototype.onClose = function () {
    transport.prototype.onClose.call(this);
  };

  /**
   * Closes socket.
   *
   * @api private
   */

  WS.prototype.doClose = function () {
    if (typeof this.ws !== 'undefined') {
      this.ws.close();
    }
  };

  /**
   * Generates uri for connection.
   *
   * @api private
   */

  WS.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'wss' : 'ws';
    var port = '';

    // avoid port if default for schema
    if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
      ('ws' === schema && Number(this.port) !== 80))) {
      port = ':' + this.port;
    }

    // append timestamp to URI
    if (this.timestampRequests) {
      query[this.timestampParam] = yeast_1();
    }

    // communicate binary support capabilities
    if (!this.supportsBinary) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    // prepend ? to query
    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };

  /**
   * Feature detection for WebSocket.
   *
   * @return {Boolean} whether this transport is available.
   * @api public
   */

  WS.prototype.check = function () {
    return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
  };

  /**
   * Module dependencies
   */






  /**
   * Export transports.
   */

  var polling_1 = polling$1;
  var websocket_1 = websocket$1;

  /**
   * Polling transport polymorphic constructor.
   * Decides on xhr vs jsonp based on feature detection.
   *
   * @api private
   */

  function polling$1 (opts) {
    var xhr;
    var xd = false;
    var xs = false;
    var jsonp = false !== opts.jsonp;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      // some user agents have empty `location.port`
      if (!port) {
        port = isSSL ? 443 : 80;
      }

      xd = opts.hostname !== location.hostname || port !== opts.port;
      xs = opts.secure !== isSSL;
    }

    opts.xdomain = xd;
    opts.xscheme = xs;
    xhr = new XMLHttpRequest_1(opts);

    if ('open' in xhr && !opts.forceJSONP) {
      return new pollingXhr(opts);
    } else {
      if (!jsonp) throw new Error('JSONP disabled');
      return new pollingJsonp(opts);
    }
  }

  var transports = {
  	polling: polling_1,
  	websocket: websocket_1
  };

  var indexOf = [].indexOf;

  var indexof = function(arr, obj){
    if (indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };

  /**
   * Module dependencies.
   */



  var debug$5 = src('engine.io-client:socket');





  /**
   * Module exports.
   */

  var socket = Socket;

  /**
   * Socket constructor.
   *
   * @param {String|Object} uri or options
   * @param {Object} options
   * @api public
   */

  function Socket (uri, opts) {
    if (!(this instanceof Socket)) return new Socket(uri, opts);

    opts = opts || {};

    if (uri && 'object' === typeof uri) {
      opts = uri;
      uri = null;
    }

    if (uri) {
      uri = parseuri(uri);
      opts.hostname = uri.host;
      opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
      opts.port = uri.port;
      if (uri.query) opts.query = uri.query;
    } else if (opts.host) {
      opts.hostname = parseuri(opts.host).host;
    }

    this.secure = null != opts.secure ? opts.secure
      : (typeof location !== 'undefined' && 'https:' === location.protocol);

    if (opts.hostname && !opts.port) {
      // if no port is specified manually, use the protocol default
      opts.port = this.secure ? '443' : '80';
    }

    this.agent = opts.agent || false;
    this.hostname = opts.hostname ||
      (typeof location !== 'undefined' ? location.hostname : 'localhost');
    this.port = opts.port || (typeof location !== 'undefined' && location.port
        ? location.port
        : (this.secure ? 443 : 80));
    this.query = opts.query || {};
    if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
    this.upgrade = false !== opts.upgrade;
    this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
    this.forceJSONP = !!opts.forceJSONP;
    this.jsonp = false !== opts.jsonp;
    this.forceBase64 = !!opts.forceBase64;
    this.enablesXDR = !!opts.enablesXDR;
    this.withCredentials = false !== opts.withCredentials;
    this.timestampParam = opts.timestampParam || 't';
    this.timestampRequests = opts.timestampRequests;
    this.transports = opts.transports || ['polling', 'websocket'];
    this.transportOptions = opts.transportOptions || {};
    this.readyState = '';
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.policyPort = opts.policyPort || 843;
    this.rememberUpgrade = opts.rememberUpgrade || false;
    this.binaryType = null;
    this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
    this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

    if (true === this.perMessageDeflate) this.perMessageDeflate = {};
    if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
      this.perMessageDeflate.threshold = 1024;
    }

    // SSL options for Node.js client
    this.pfx = opts.pfx || null;
    this.key = opts.key || null;
    this.passphrase = opts.passphrase || null;
    this.cert = opts.cert || null;
    this.ca = opts.ca || null;
    this.ciphers = opts.ciphers || null;
    this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
    this.forceNode = !!opts.forceNode;

    // detect ReactNative environment
    this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

    // other options for Node.js or ReactNative client
    if (typeof self === 'undefined' || this.isReactNative) {
      if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
        this.extraHeaders = opts.extraHeaders;
      }

      if (opts.localAddress) {
        this.localAddress = opts.localAddress;
      }
    }

    // set on handshake
    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;

    // set on heartbeat
    this.pingIntervalTimer = null;
    this.pingTimeoutTimer = null;

    this.open();
  }

  Socket.priorWebsocketSuccess = false;

  /**
   * Mix in `Emitter`.
   */

  componentEmitter$1(Socket.prototype);

  /**
   * Protocol version.
   *
   * @api public
   */

  Socket.protocol = lib.protocol; // this is an int

  /**
   * Expose deps for legacy compatibility
   * and standalone browser access.
   */

  Socket.Socket = Socket;
  Socket.Transport = transport;
  Socket.transports = transports;
  Socket.parser = lib;

  /**
   * Creates transport of the given type.
   *
   * @param {String} transport name
   * @return {Transport}
   * @api private
   */

  Socket.prototype.createTransport = function (name) {
    debug$5('creating transport "%s"', name);
    var query = clone(this.query);

    // append engine.io protocol identifier
    query.EIO = lib.protocol;

    // transport name
    query.transport = name;

    // per-transport options
    var options = this.transportOptions[name] || {};

    // session id if we already have one
    if (this.id) query.sid = this.id;

    var transport = new transports[name]({
      query: query,
      socket: this,
      agent: options.agent || this.agent,
      hostname: options.hostname || this.hostname,
      port: options.port || this.port,
      secure: options.secure || this.secure,
      path: options.path || this.path,
      forceJSONP: options.forceJSONP || this.forceJSONP,
      jsonp: options.jsonp || this.jsonp,
      forceBase64: options.forceBase64 || this.forceBase64,
      enablesXDR: options.enablesXDR || this.enablesXDR,
      withCredentials: options.withCredentials || this.withCredentials,
      timestampRequests: options.timestampRequests || this.timestampRequests,
      timestampParam: options.timestampParam || this.timestampParam,
      policyPort: options.policyPort || this.policyPort,
      pfx: options.pfx || this.pfx,
      key: options.key || this.key,
      passphrase: options.passphrase || this.passphrase,
      cert: options.cert || this.cert,
      ca: options.ca || this.ca,
      ciphers: options.ciphers || this.ciphers,
      rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
      perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
      extraHeaders: options.extraHeaders || this.extraHeaders,
      forceNode: options.forceNode || this.forceNode,
      localAddress: options.localAddress || this.localAddress,
      requestTimeout: options.requestTimeout || this.requestTimeout,
      protocols: options.protocols || void (0),
      isReactNative: this.isReactNative
    });

    return transport;
  };

  function clone (obj) {
    var o = {};
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        o[i] = obj[i];
      }
    }
    return o;
  }

  /**
   * Initializes transport to use and starts probe.
   *
   * @api private
   */
  Socket.prototype.open = function () {
    var transport;
    if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
      transport = 'websocket';
    } else if (0 === this.transports.length) {
      // Emit error on next tick so it can be listened to
      var self = this;
      setTimeout(function () {
        self.emit('error', 'No transports available');
      }, 0);
      return;
    } else {
      transport = this.transports[0];
    }
    this.readyState = 'opening';

    // Retry with the next transport if the transport is disabled (jsonp: false)
    try {
      transport = this.createTransport(transport);
    } catch (e) {
      this.transports.shift();
      this.open();
      return;
    }

    transport.open();
    this.setTransport(transport);
  };

  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @api private
   */

  Socket.prototype.setTransport = function (transport) {
    debug$5('setting transport %s', transport.name);
    var self = this;

    if (this.transport) {
      debug$5('clearing existing transport %s', this.transport.name);
      this.transport.removeAllListeners();
    }

    // set up transport
    this.transport = transport;

    // set up transport listeners
    transport
    .on('drain', function () {
      self.onDrain();
    })
    .on('packet', function (packet) {
      self.onPacket(packet);
    })
    .on('error', function (e) {
      self.onError(e);
    })
    .on('close', function () {
      self.onClose('transport close');
    });
  };

  /**
   * Probes a transport.
   *
   * @param {String} transport name
   * @api private
   */

  Socket.prototype.probe = function (name) {
    debug$5('probing transport "%s"', name);
    var transport = this.createTransport(name, { probe: 1 });
    var failed = false;
    var self = this;

    Socket.priorWebsocketSuccess = false;

    function onTransportOpen () {
      if (self.onlyBinaryUpgrades) {
        var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
        failed = failed || upgradeLosesBinary;
      }
      if (failed) return;

      debug$5('probe transport "%s" opened', name);
      transport.send([{ type: 'ping', data: 'probe' }]);
      transport.once('packet', function (msg) {
        if (failed) return;
        if ('pong' === msg.type && 'probe' === msg.data) {
          debug$5('probe transport "%s" pong', name);
          self.upgrading = true;
          self.emit('upgrading', transport);
          if (!transport) return;
          Socket.priorWebsocketSuccess = 'websocket' === transport.name;

          debug$5('pausing current transport "%s"', self.transport.name);
          self.transport.pause(function () {
            if (failed) return;
            if ('closed' === self.readyState) return;
            debug$5('changing transport and sending upgrade packet');

            cleanup();

            self.setTransport(transport);
            transport.send([{ type: 'upgrade' }]);
            self.emit('upgrade', transport);
            transport = null;
            self.upgrading = false;
            self.flush();
          });
        } else {
          debug$5('probe transport "%s" failed', name);
          var err = new Error('probe error');
          err.transport = transport.name;
          self.emit('upgradeError', err);
        }
      });
    }

    function freezeTransport () {
      if (failed) return;

      // Any callback called by transport should be ignored since now
      failed = true;

      cleanup();

      transport.close();
      transport = null;
    }

    // Handle any error that happens while probing
    function onerror (err) {
      var error = new Error('probe error: ' + err);
      error.transport = transport.name;

      freezeTransport();

      debug$5('probe transport "%s" failed because of error: %s', name, err);

      self.emit('upgradeError', error);
    }

    function onTransportClose () {
      onerror('transport closed');
    }

    // When the socket is closed while we're probing
    function onclose () {
      onerror('socket closed');
    }

    // When the socket is upgraded while we're probing
    function onupgrade (to) {
      if (transport && to.name !== transport.name) {
        debug$5('"%s" works - aborting "%s"', to.name, transport.name);
        freezeTransport();
      }
    }

    // Remove all listeners on the transport and on self
    function cleanup () {
      transport.removeListener('open', onTransportOpen);
      transport.removeListener('error', onerror);
      transport.removeListener('close', onTransportClose);
      self.removeListener('close', onclose);
      self.removeListener('upgrading', onupgrade);
    }

    transport.once('open', onTransportOpen);
    transport.once('error', onerror);
    transport.once('close', onTransportClose);

    this.once('close', onclose);
    this.once('upgrading', onupgrade);

    transport.open();
  };

  /**
   * Called when connection is deemed open.
   *
   * @api public
   */

  Socket.prototype.onOpen = function () {
    debug$5('socket open');
    this.readyState = 'open';
    Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
    this.emit('open');
    this.flush();

    // we check for `readyState` in case an `open`
    // listener already closed the socket
    if ('open' === this.readyState && this.upgrade && this.transport.pause) {
      debug$5('starting upgrade probes');
      for (var i = 0, l = this.upgrades.length; i < l; i++) {
        this.probe(this.upgrades[i]);
      }
    }
  };

  /**
   * Handles a packet.
   *
   * @api private
   */

  Socket.prototype.onPacket = function (packet) {
    if ('opening' === this.readyState || 'open' === this.readyState ||
        'closing' === this.readyState) {
      debug$5('socket receive: type "%s", data "%s"', packet.type, packet.data);

      this.emit('packet', packet);

      // Socket is live - any packet counts
      this.emit('heartbeat');

      switch (packet.type) {
        case 'open':
          this.onHandshake(JSON.parse(packet.data));
          break;

        case 'pong':
          this.setPing();
          this.emit('pong');
          break;

        case 'error':
          var err = new Error('server error');
          err.code = packet.data;
          this.onError(err);
          break;

        case 'message':
          this.emit('data', packet.data);
          this.emit('message', packet.data);
          break;
      }
    } else {
      debug$5('packet received with socket readyState "%s"', this.readyState);
    }
  };

  /**
   * Called upon handshake completion.
   *
   * @param {Object} handshake obj
   * @api private
   */

  Socket.prototype.onHandshake = function (data) {
    this.emit('handshake', data);
    this.id = data.sid;
    this.transport.query.sid = data.sid;
    this.upgrades = this.filterUpgrades(data.upgrades);
    this.pingInterval = data.pingInterval;
    this.pingTimeout = data.pingTimeout;
    this.onOpen();
    // In case open handler closes socket
    if ('closed' === this.readyState) return;
    this.setPing();

    // Prolong liveness of socket on heartbeat
    this.removeListener('heartbeat', this.onHeartbeat);
    this.on('heartbeat', this.onHeartbeat);
  };

  /**
   * Resets ping timeout.
   *
   * @api private
   */

  Socket.prototype.onHeartbeat = function (timeout) {
    clearTimeout(this.pingTimeoutTimer);
    var self = this;
    self.pingTimeoutTimer = setTimeout(function () {
      if ('closed' === self.readyState) return;
      self.onClose('ping timeout');
    }, timeout || (self.pingInterval + self.pingTimeout));
  };

  /**
   * Pings server every `this.pingInterval` and expects response
   * within `this.pingTimeout` or closes connection.
   *
   * @api private
   */

  Socket.prototype.setPing = function () {
    var self = this;
    clearTimeout(self.pingIntervalTimer);
    self.pingIntervalTimer = setTimeout(function () {
      debug$5('writing ping packet - expecting pong within %sms', self.pingTimeout);
      self.ping();
      self.onHeartbeat(self.pingTimeout);
    }, self.pingInterval);
  };

  /**
  * Sends a ping packet.
  *
  * @api private
  */

  Socket.prototype.ping = function () {
    var self = this;
    this.sendPacket('ping', function () {
      self.emit('ping');
    });
  };

  /**
   * Called on `drain` event
   *
   * @api private
   */

  Socket.prototype.onDrain = function () {
    this.writeBuffer.splice(0, this.prevBufferLen);

    // setting prevBufferLen = 0 is very important
    // for example, when upgrading, upgrade packet is sent over,
    // and a nonzero prevBufferLen could cause problems on `drain`
    this.prevBufferLen = 0;

    if (0 === this.writeBuffer.length) {
      this.emit('drain');
    } else {
      this.flush();
    }
  };

  /**
   * Flush write buffers.
   *
   * @api private
   */

  Socket.prototype.flush = function () {
    if ('closed' !== this.readyState && this.transport.writable &&
      !this.upgrading && this.writeBuffer.length) {
      debug$5('flushing %d packets in socket', this.writeBuffer.length);
      this.transport.send(this.writeBuffer);
      // keep track of current length of writeBuffer
      // splice writeBuffer and callbackBuffer on `drain`
      this.prevBufferLen = this.writeBuffer.length;
      this.emit('flush');
    }
  };

  /**
   * Sends a message.
   *
   * @param {String} message.
   * @param {Function} callback function.
   * @param {Object} options.
   * @return {Socket} for chaining.
   * @api public
   */

  Socket.prototype.write =
  Socket.prototype.send = function (msg, options, fn) {
    this.sendPacket('message', msg, options, fn);
    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {String} packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} callback function.
   * @api private
   */

  Socket.prototype.sendPacket = function (type, data, options, fn) {
    if ('function' === typeof data) {
      fn = data;
      data = undefined;
    }

    if ('function' === typeof options) {
      fn = options;
      options = null;
    }

    if ('closing' === this.readyState || 'closed' === this.readyState) {
      return;
    }

    options = options || {};
    options.compress = false !== options.compress;

    var packet = {
      type: type,
      data: data,
      options: options
    };
    this.emit('packetCreate', packet);
    this.writeBuffer.push(packet);
    if (fn) this.once('flush', fn);
    this.flush();
  };

  /**
   * Closes the connection.
   *
   * @api private
   */

  Socket.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.readyState = 'closing';

      var self = this;

      if (this.writeBuffer.length) {
        this.once('drain', function () {
          if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        });
      } else if (this.upgrading) {
        waitForUpgrade();
      } else {
        close();
      }
    }

    function close () {
      self.onClose('forced close');
      debug$5('socket closing - telling transport to close');
      self.transport.close();
    }

    function cleanupAndClose () {
      self.removeListener('upgrade', cleanupAndClose);
      self.removeListener('upgradeError', cleanupAndClose);
      close();
    }

    function waitForUpgrade () {
      // wait for upgrade to finish since we can't send packets while pausing a transport
      self.once('upgrade', cleanupAndClose);
      self.once('upgradeError', cleanupAndClose);
    }

    return this;
  };

  /**
   * Called upon transport error
   *
   * @api private
   */

  Socket.prototype.onError = function (err) {
    debug$5('socket error %j', err);
    Socket.priorWebsocketSuccess = false;
    this.emit('error', err);
    this.onClose('transport error', err);
  };

  /**
   * Called upon transport close.
   *
   * @api private
   */

  Socket.prototype.onClose = function (reason, desc) {
    if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
      debug$5('socket close with reason: "%s"', reason);
      var self = this;

      // clear timers
      clearTimeout(this.pingIntervalTimer);
      clearTimeout(this.pingTimeoutTimer);

      // stop event from firing again for transport
      this.transport.removeAllListeners('close');

      // ensure transport won't stay open
      this.transport.close();

      // ignore further transport communication
      this.transport.removeAllListeners();

      // set ready state
      this.readyState = 'closed';

      // clear session id
      this.id = null;

      // emit close event
      this.emit('close', reason, desc);

      // clean buffers after, so users can still
      // grab the buffers on `close` event
      self.writeBuffer = [];
      self.prevBufferLen = 0;
    }
  };

  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} server upgrades
   * @api private
   *
   */

  Socket.prototype.filterUpgrades = function (upgrades) {
    var filteredUpgrades = [];
    for (var i = 0, j = upgrades.length; i < j; i++) {
      if (~indexof(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
    }
    return filteredUpgrades;
  };

  var lib$1 = socket;

  /**
   * Exports parser
   *
   * @api public
   *
   */
  var parser = lib;
  lib$1.parser = parser;

  var toArray_1 = toArray;

  function toArray(list, index) {
      var array = [];

      index = index || 0;

      for (var i = index || 0; i < list.length; i++) {
          array[i - index] = list[i];
      }

      return array
  }

  /**
   * Module exports.
   */

  var on_1 = on;

  /**
   * Helper for subscriptions.
   *
   * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
   * @param {String} event name
   * @param {Function} callback
   * @api public
   */

  function on (obj, ev, fn) {
    obj.on(ev, fn);
    return {
      destroy: function () {
        obj.removeListener(ev, fn);
      }
    };
  }

  /**
   * Slice reference.
   */

  var slice = [].slice;

  /**
   * Bind `obj` to `fn`.
   *
   * @param {Object} obj
   * @param {Function|String} fn or string
   * @return {Function}
   * @api public
   */

  var componentBind = function(obj, fn){
    if ('string' == typeof fn) fn = obj[fn];
    if ('function' != typeof fn) throw new Error('bind() requires a function');
    var args = slice.call(arguments, 2);
    return function(){
      return fn.apply(obj, args.concat(slice.call(arguments)));
    }
  };

  var socket$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */






  var debug = src('socket.io-client:socket');



  /**
   * Module exports.
   */

  module.exports = exports = Socket;

  /**
   * Internal events (blacklisted).
   * These events can't be emitted by the user.
   *
   * @api private
   */

  var events = {
    connect: 1,
    connect_error: 1,
    connect_timeout: 1,
    connecting: 1,
    disconnect: 1,
    error: 1,
    reconnect: 1,
    reconnect_attempt: 1,
    reconnect_failed: 1,
    reconnect_error: 1,
    reconnecting: 1,
    ping: 1,
    pong: 1
  };

  /**
   * Shortcut to `Emitter#emit`.
   */

  var emit = componentEmitter.prototype.emit;

  /**
   * `Socket` constructor.
   *
   * @api public
   */

  function Socket (io, nsp, opts) {
    this.io = io;
    this.nsp = nsp;
    this.json = this; // compat
    this.ids = 0;
    this.acks = {};
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.connected = false;
    this.disconnected = true;
    this.flags = {};
    if (opts && opts.query) {
      this.query = opts.query;
    }
    if (this.io.autoConnect) this.open();
  }

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Socket.prototype);

  /**
   * Subscribe to open, close and packet events
   *
   * @api private
   */

  Socket.prototype.subEvents = function () {
    if (this.subs) return;

    var io = this.io;
    this.subs = [
      on_1(io, 'open', componentBind(this, 'onopen')),
      on_1(io, 'packet', componentBind(this, 'onpacket')),
      on_1(io, 'close', componentBind(this, 'onclose'))
    ];
  };

  /**
   * "Opens" the socket.
   *
   * @api public
   */

  Socket.prototype.open =
  Socket.prototype.connect = function () {
    if (this.connected) return this;

    this.subEvents();
    this.io.open(); // ensure open
    if ('open' === this.io.readyState) this.onopen();
    this.emit('connecting');
    return this;
  };

  /**
   * Sends a `message` event.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.send = function () {
    var args = toArray_1(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @param {String} event name
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.emit = function (ev) {
    if (events.hasOwnProperty(ev)) {
      emit.apply(this, arguments);
      return this;
    }

    var args = toArray_1(arguments);
    var packet = {
      type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary2(args)) ? socket_ioParser.BINARY_EVENT : socket_ioParser.EVENT,
      data: args
    };

    packet.options = {};
    packet.options.compress = !this.flags || false !== this.flags.compress;

    // event ack callback
    if ('function' === typeof args[args.length - 1]) {
      debug('emitting packet with ack id %d', this.ids);
      this.acks[this.ids] = args.pop();
      packet.id = this.ids++;
    }

    if (this.connected) {
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }

    this.flags = {};

    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.packet = function (packet) {
    packet.nsp = this.nsp;
    this.io.packet(packet);
  };

  /**
   * Called upon engine `open`.
   *
   * @api private
   */

  Socket.prototype.onopen = function () {
    debug('transport is open - connecting');

    // write connect packet if necessary
    if ('/' !== this.nsp) {
      if (this.query) {
        var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
        debug('sending connect packet with query %s', query);
        this.packet({type: socket_ioParser.CONNECT, query: query});
      } else {
        this.packet({type: socket_ioParser.CONNECT});
      }
    }
  };

  /**
   * Called upon engine `close`.
   *
   * @param {String} reason
   * @api private
   */

  Socket.prototype.onclose = function (reason) {
    debug('close (%s)', reason);
    this.connected = false;
    this.disconnected = true;
    delete this.id;
    this.emit('disconnect', reason);
  };

  /**
   * Called with socket packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onpacket = function (packet) {
    var sameNamespace = packet.nsp === this.nsp;
    var rootNamespaceError = packet.type === socket_ioParser.ERROR && packet.nsp === '/';

    if (!sameNamespace && !rootNamespaceError) return;

    switch (packet.type) {
      case socket_ioParser.CONNECT:
        this.onconnect();
        break;

      case socket_ioParser.EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser.BINARY_EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser.ACK:
        this.onack(packet);
        break;

      case socket_ioParser.BINARY_ACK:
        this.onack(packet);
        break;

      case socket_ioParser.DISCONNECT:
        this.ondisconnect();
        break;

      case socket_ioParser.ERROR:
        this.emit('error', packet.data);
        break;
    }
  };

  /**
   * Called upon a server event.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onevent = function (packet) {
    var args = packet.data || [];
    debug('emitting event %j', args);

    if (null != packet.id) {
      debug('attaching ack callback to event');
      args.push(this.ack(packet.id));
    }

    if (this.connected) {
      emit.apply(this, args);
    } else {
      this.receiveBuffer.push(args);
    }
  };

  /**
   * Produces an ack callback to emit with an event.
   *
   * @api private
   */

  Socket.prototype.ack = function (id) {
    var self = this;
    var sent = false;
    return function () {
      // prevent double callbacks
      if (sent) return;
      sent = true;
      var args = toArray_1(arguments);
      debug('sending ack %j', args);

      self.packet({
        type: hasBinary2(args) ? socket_ioParser.BINARY_ACK : socket_ioParser.ACK,
        id: id,
        data: args
      });
    };
  };

  /**
   * Called upon a server acknowlegement.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onack = function (packet) {
    var ack = this.acks[packet.id];
    if ('function' === typeof ack) {
      debug('calling ack %s with %j', packet.id, packet.data);
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    } else {
      debug('bad ack %s', packet.id);
    }
  };

  /**
   * Called upon server connect.
   *
   * @api private
   */

  Socket.prototype.onconnect = function () {
    this.connected = true;
    this.disconnected = false;
    this.emit('connect');
    this.emitBuffered();
  };

  /**
   * Emit buffered events (received and emitted).
   *
   * @api private
   */

  Socket.prototype.emitBuffered = function () {
    var i;
    for (i = 0; i < this.receiveBuffer.length; i++) {
      emit.apply(this, this.receiveBuffer[i]);
    }
    this.receiveBuffer = [];

    for (i = 0; i < this.sendBuffer.length; i++) {
      this.packet(this.sendBuffer[i]);
    }
    this.sendBuffer = [];
  };

  /**
   * Called upon server disconnect.
   *
   * @api private
   */

  Socket.prototype.ondisconnect = function () {
    debug('server disconnect (%s)', this.nsp);
    this.destroy();
    this.onclose('io server disconnect');
  };

  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @api private.
   */

  Socket.prototype.destroy = function () {
    if (this.subs) {
      // clean subscriptions to avoid reconnections
      for (var i = 0; i < this.subs.length; i++) {
        this.subs[i].destroy();
      }
      this.subs = null;
    }

    this.io.destroy(this);
  };

  /**
   * Disconnects the socket manually.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.close =
  Socket.prototype.disconnect = function () {
    if (this.connected) {
      debug('performing disconnect (%s)', this.nsp);
      this.packet({ type: socket_ioParser.DISCONNECT });
    }

    // remove socket from pool
    this.destroy();

    if (this.connected) {
      // fire events
      this.onclose('io client disconnect');
    }
    return this;
  };

  /**
   * Sets the compress flag.
   *
   * @param {Boolean} if `true`, compresses the sending data
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.compress = function (compress) {
    this.flags.compress = compress;
    return this;
  };

  /**
   * Sets the binary flag
   *
   * @param {Boolean} whether the emitted data contains binary
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.binary = function (binary) {
    this.flags.binary = binary;
    return this;
  };
  });

  /**
   * Expose `Backoff`.
   */

  var backo2 = Backoff;

  /**
   * Initialize backoff timer with `opts`.
   *
   * - `min` initial timeout in milliseconds [100]
   * - `max` max timeout [10000]
   * - `jitter` [0]
   * - `factor` [2]
   *
   * @param {Object} opts
   * @api public
   */

  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }

  /**
   * Return the backoff duration.
   *
   * @return {Number}
   * @api public
   */

  Backoff.prototype.duration = function(){
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand =  Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };

  /**
   * Reset the number of attempts.
   *
   * @api public
   */

  Backoff.prototype.reset = function(){
    this.attempts = 0;
  };

  /**
   * Set the minimum duration
   *
   * @api public
   */

  Backoff.prototype.setMin = function(min){
    this.ms = min;
  };

  /**
   * Set the maximum duration
   *
   * @api public
   */

  Backoff.prototype.setMax = function(max){
    this.max = max;
  };

  /**
   * Set the jitter
   *
   * @api public
   */

  Backoff.prototype.setJitter = function(jitter){
    this.jitter = jitter;
  };

  /**
   * Module dependencies.
   */







  var debug$6 = src('socket.io-client:manager');



  /**
   * IE6+ hasOwnProperty
   */

  var has = Object.prototype.hasOwnProperty;

  /**
   * Module exports
   */

  var manager = Manager;

  /**
   * `Manager` constructor.
   *
   * @param {String} engine instance or engine uri/opts
   * @param {Object} options
   * @api public
   */

  function Manager (uri, opts) {
    if (!(this instanceof Manager)) return new Manager(uri, opts);
    if (uri && ('object' === typeof uri)) {
      opts = uri;
      uri = undefined;
    }
    opts = opts || {};

    opts.path = opts.path || '/socket.io';
    this.nsps = {};
    this.subs = [];
    this.opts = opts;
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1000);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
    this.randomizationFactor(opts.randomizationFactor || 0.5);
    this.backoff = new backo2({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 20000 : opts.timeout);
    this.readyState = 'closed';
    this.uri = uri;
    this.connecting = [];
    this.lastPing = null;
    this.encoding = false;
    this.packetBuffer = [];
    var _parser = opts.parser || socket_ioParser;
    this.encoder = new _parser.Encoder();
    this.decoder = new _parser.Decoder();
    this.autoConnect = opts.autoConnect !== false;
    if (this.autoConnect) this.open();
  }

  /**
   * Propagate given event to sockets and emit on `this`
   *
   * @api private
   */

  Manager.prototype.emitAll = function () {
    this.emit.apply(this, arguments);
    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
      }
    }
  };

  /**
   * Update `socket.id` of all sockets
   *
   * @api private
   */

  Manager.prototype.updateSocketIds = function () {
    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].id = this.generateId(nsp);
      }
    }
  };

  /**
   * generate `socket.id` for the given `nsp`
   *
   * @param {String} nsp
   * @return {String}
   * @api private
   */

  Manager.prototype.generateId = function (nsp) {
    return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
  };

  /**
   * Mix in `Emitter`.
   */

  componentEmitter(Manager.prototype);

  /**
   * Sets the `reconnection` config.
   *
   * @param {Boolean} true/false if it should automatically reconnect
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnection = function (v) {
    if (!arguments.length) return this._reconnection;
    this._reconnection = !!v;
    return this;
  };

  /**
   * Sets the reconnection attempts config.
   *
   * @param {Number} max reconnection attempts before giving up
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionAttempts = function (v) {
    if (!arguments.length) return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  };

  /**
   * Sets the delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelay = function (v) {
    if (!arguments.length) return this._reconnectionDelay;
    this._reconnectionDelay = v;
    this.backoff && this.backoff.setMin(v);
    return this;
  };

  Manager.prototype.randomizationFactor = function (v) {
    if (!arguments.length) return this._randomizationFactor;
    this._randomizationFactor = v;
    this.backoff && this.backoff.setJitter(v);
    return this;
  };

  /**
   * Sets the maximum delay between reconnections.
   *
   * @param {Number} delay
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.reconnectionDelayMax = function (v) {
    if (!arguments.length) return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    this.backoff && this.backoff.setMax(v);
    return this;
  };

  /**
   * Sets the connection timeout. `false` to disable
   *
   * @return {Manager} self or value
   * @api public
   */

  Manager.prototype.timeout = function (v) {
    if (!arguments.length) return this._timeout;
    this._timeout = v;
    return this;
  };

  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @api private
   */

  Manager.prototype.maybeReconnectOnOpen = function () {
    // Only try to reconnect if it's the first time we're connecting
    if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
      // keeps reconnection from firing twice for the same reconnection loop
      this.reconnect();
    }
  };

  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} optional, callback
   * @return {Manager} self
   * @api public
   */

  Manager.prototype.open =
  Manager.prototype.connect = function (fn, opts) {
    debug$6('readyState %s', this.readyState);
    if (~this.readyState.indexOf('open')) return this;

    debug$6('opening %s', this.uri);
    this.engine = lib$1(this.uri, this.opts);
    var socket = this.engine;
    var self = this;
    this.readyState = 'opening';
    this.skipReconnect = false;

    // emit `open`
    var openSub = on_1(socket, 'open', function () {
      self.onopen();
      fn && fn();
    });

    // emit `connect_error`
    var errorSub = on_1(socket, 'error', function (data) {
      debug$6('connect_error');
      self.cleanup();
      self.readyState = 'closed';
      self.emitAll('connect_error', data);
      if (fn) {
        var err = new Error('Connection error');
        err.data = data;
        fn(err);
      } else {
        // Only do this if there is no fn to handle the error
        self.maybeReconnectOnOpen();
      }
    });

    // emit `connect_timeout`
    if (false !== this._timeout) {
      var timeout = this._timeout;
      debug$6('connect attempt will timeout after %d', timeout);

      // set timer
      var timer = setTimeout(function () {
        debug$6('connect attempt timed out after %d', timeout);
        openSub.destroy();
        socket.close();
        socket.emit('error', 'timeout');
        self.emitAll('connect_timeout', timeout);
      }, timeout);

      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }

    this.subs.push(openSub);
    this.subs.push(errorSub);

    return this;
  };

  /**
   * Called upon transport open.
   *
   * @api private
   */

  Manager.prototype.onopen = function () {
    debug$6('open');

    // clear old subs
    this.cleanup();

    // mark as open
    this.readyState = 'open';
    this.emit('open');

    // add new subs
    var socket = this.engine;
    this.subs.push(on_1(socket, 'data', componentBind(this, 'ondata')));
    this.subs.push(on_1(socket, 'ping', componentBind(this, 'onping')));
    this.subs.push(on_1(socket, 'pong', componentBind(this, 'onpong')));
    this.subs.push(on_1(socket, 'error', componentBind(this, 'onerror')));
    this.subs.push(on_1(socket, 'close', componentBind(this, 'onclose')));
    this.subs.push(on_1(this.decoder, 'decoded', componentBind(this, 'ondecoded')));
  };

  /**
   * Called upon a ping.
   *
   * @api private
   */

  Manager.prototype.onping = function () {
    this.lastPing = new Date();
    this.emitAll('ping');
  };

  /**
   * Called upon a packet.
   *
   * @api private
   */

  Manager.prototype.onpong = function () {
    this.emitAll('pong', new Date() - this.lastPing);
  };

  /**
   * Called with data.
   *
   * @api private
   */

  Manager.prototype.ondata = function (data) {
    this.decoder.add(data);
  };

  /**
   * Called when parser fully decodes a packet.
   *
   * @api private
   */

  Manager.prototype.ondecoded = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called upon socket error.
   *
   * @api private
   */

  Manager.prototype.onerror = function (err) {
    debug$6('error', err);
    this.emitAll('error', err);
  };

  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @api public
   */

  Manager.prototype.socket = function (nsp, opts) {
    var socket = this.nsps[nsp];
    if (!socket) {
      socket = new socket$1(this, nsp, opts);
      this.nsps[nsp] = socket;
      var self = this;
      socket.on('connecting', onConnecting);
      socket.on('connect', function () {
        socket.id = self.generateId(nsp);
      });

      if (this.autoConnect) {
        // manually call here since connecting event is fired before listening
        onConnecting();
      }
    }

    function onConnecting () {
      if (!~indexof(self.connecting, socket)) {
        self.connecting.push(socket);
      }
    }

    return socket;
  };

  /**
   * Called upon a socket close.
   *
   * @param {Socket} socket
   */

  Manager.prototype.destroy = function (socket) {
    var index = indexof(this.connecting, socket);
    if (~index) this.connecting.splice(index, 1);
    if (this.connecting.length) return;

    this.close();
  };

  /**
   * Writes a packet.
   *
   * @param {Object} packet
   * @api private
   */

  Manager.prototype.packet = function (packet) {
    debug$6('writing packet %j', packet);
    var self = this;
    if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

    if (!self.encoding) {
      // encode, then write to engine with result
      self.encoding = true;
      this.encoder.encode(packet, function (encodedPackets) {
        for (var i = 0; i < encodedPackets.length; i++) {
          self.engine.write(encodedPackets[i], packet.options);
        }
        self.encoding = false;
        self.processPacketQueue();
      });
    } else { // add packet to the queue
      self.packetBuffer.push(packet);
    }
  };

  /**
   * If packet buffer is non-empty, begins encoding the
   * next packet in line.
   *
   * @api private
   */

  Manager.prototype.processPacketQueue = function () {
    if (this.packetBuffer.length > 0 && !this.encoding) {
      var pack = this.packetBuffer.shift();
      this.packet(pack);
    }
  };

  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @api private
   */

  Manager.prototype.cleanup = function () {
    debug$6('cleanup');

    var subsLength = this.subs.length;
    for (var i = 0; i < subsLength; i++) {
      var sub = this.subs.shift();
      sub.destroy();
    }

    this.packetBuffer = [];
    this.encoding = false;
    this.lastPing = null;

    this.decoder.destroy();
  };

  /**
   * Close the current socket.
   *
   * @api private
   */

  Manager.prototype.close =
  Manager.prototype.disconnect = function () {
    debug$6('disconnect');
    this.skipReconnect = true;
    this.reconnecting = false;
    if ('opening' === this.readyState) {
      // `onclose` will not fire because
      // an open event never happened
      this.cleanup();
    }
    this.backoff.reset();
    this.readyState = 'closed';
    if (this.engine) this.engine.close();
  };

  /**
   * Called upon engine close.
   *
   * @api private
   */

  Manager.prototype.onclose = function (reason) {
    debug$6('onclose');

    this.cleanup();
    this.backoff.reset();
    this.readyState = 'closed';
    this.emit('close', reason);

    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  };

  /**
   * Attempt a reconnection.
   *
   * @api private
   */

  Manager.prototype.reconnect = function () {
    if (this.reconnecting || this.skipReconnect) return this;

    var self = this;

    if (this.backoff.attempts >= this._reconnectionAttempts) {
      debug$6('reconnect failed');
      this.backoff.reset();
      this.emitAll('reconnect_failed');
      this.reconnecting = false;
    } else {
      var delay = this.backoff.duration();
      debug$6('will wait %dms before reconnect attempt', delay);

      this.reconnecting = true;
      var timer = setTimeout(function () {
        if (self.skipReconnect) return;

        debug$6('attempting reconnect');
        self.emitAll('reconnect_attempt', self.backoff.attempts);
        self.emitAll('reconnecting', self.backoff.attempts);

        // check again for the case socket closed in above events
        if (self.skipReconnect) return;

        self.open(function (err) {
          if (err) {
            debug$6('reconnect attempt error');
            self.reconnecting = false;
            self.reconnect();
            self.emitAll('reconnect_error', err.data);
          } else {
            debug$6('reconnect success');
            self.onreconnect();
          }
        });
      }, delay);

      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }
  };

  /**
   * Called upon successful reconnect.
   *
   * @api private
   */

  Manager.prototype.onreconnect = function () {
    var attempt = this.backoff.attempts;
    this.reconnecting = false;
    this.backoff.reset();
    this.updateSocketIds();
    this.emitAll('reconnect', attempt);
  };

  var lib$2 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  var debug = src('socket.io-client');

  /**
   * Module exports.
   */

  module.exports = exports = lookup;

  /**
   * Managers cache.
   */

  var cache = exports.managers = {};

  /**
   * Looks up an existing `Manager` for multiplexing.
   * If the user summons:
   *
   *   `io('http://localhost/a');`
   *   `io('http://localhost/b');`
   *
   * We reuse the existing instance based on same scheme/port/host,
   * and we initialize sockets for each namespace.
   *
   * @api public
   */

  function lookup (uri, opts) {
    if (typeof uri === 'object') {
      opts = uri;
      uri = undefined;
    }

    opts = opts || {};

    var parsed = url_1(uri);
    var source = parsed.source;
    var id = parsed.id;
    var path = parsed.path;
    var sameNamespace = cache[id] && path in cache[id].nsps;
    var newConnection = opts.forceNew || opts['force new connection'] ||
                        false === opts.multiplex || sameNamespace;

    var io;

    if (newConnection) {
      debug('ignoring socket cache for %s', source);
      io = manager(source, opts);
    } else {
      if (!cache[id]) {
        debug('new io instance for %s', source);
        cache[id] = manager(source, opts);
      }
      io = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.query;
    }
    return io.socket(parsed.path, opts);
  }

  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = socket_ioParser.protocol;

  /**
   * `connect`.
   *
   * @param {String} uri
   * @api public
   */

  exports.connect = lookup;

  /**
   * Expose constructors for standalone build.
   *
   * @api public
   */

  exports.Manager = manager;
  exports.Socket = socket$1;
  });
  var lib_1$1 = lib$2.managers;
  var lib_2$1 = lib$2.protocol;
  var lib_3$1 = lib$2.connect;
  var lib_4$1 = lib$2.Manager;
  var lib_5$1 = lib$2.Socket;

  // NOTE: this list must be up-to-date with browsers listed in
  // test/acceptance/useragentstrings.yml
  const BROWSER_ALIASES_MAP = {
    'Amazon Silk': 'amazon_silk',
    'Android Browser': 'android',
    Bada: 'bada',
    BlackBerry: 'blackberry',
    Chrome: 'chrome',
    Chromium: 'chromium',
    Electron: 'electron',
    Epiphany: 'epiphany',
    Firefox: 'firefox',
    Focus: 'focus',
    Generic: 'generic',
    'Google Search': 'google_search',
    Googlebot: 'googlebot',
    'Internet Explorer': 'ie',
    'K-Meleon': 'k_meleon',
    Maxthon: 'maxthon',
    'Microsoft Edge': 'edge',
    'MZ Browser': 'mz',
    'NAVER Whale Browser': 'naver',
    Opera: 'opera',
    'Opera Coast': 'opera_coast',
    PhantomJS: 'phantomjs',
    Puffin: 'puffin',
    QupZilla: 'qupzilla',
    QQ: 'qq',
    QQLite: 'qqlite',
    Safari: 'safari',
    Sailfish: 'sailfish',
    'Samsung Internet for Android': 'samsung_internet',
    SeaMonkey: 'seamonkey',
    Sleipnir: 'sleipnir',
    Swing: 'swing',
    Tizen: 'tizen',
    'UC Browser': 'uc',
    Vivaldi: 'vivaldi',
    'WebOS Browser': 'webos',
    WeChat: 'wechat',
    'Yandex Browser': 'yandex',
    Roku: 'roku',
  };

  const BROWSER_MAP = {
    amazon_silk: 'Amazon Silk',
    android: 'Android Browser',
    bada: 'Bada',
    blackberry: 'BlackBerry',
    chrome: 'Chrome',
    chromium: 'Chromium',
    electron: 'Electron',
    epiphany: 'Epiphany',
    firefox: 'Firefox',
    focus: 'Focus',
    generic: 'Generic',
    googlebot: 'Googlebot',
    google_search: 'Google Search',
    ie: 'Internet Explorer',
    k_meleon: 'K-Meleon',
    maxthon: 'Maxthon',
    edge: 'Microsoft Edge',
    mz: 'MZ Browser',
    naver: 'NAVER Whale Browser',
    opera: 'Opera',
    opera_coast: 'Opera Coast',
    phantomjs: 'PhantomJS',
    puffin: 'Puffin',
    qupzilla: 'QupZilla',
    qq: 'QQ Browser',
    qqlite: 'QQ Browser Lite',
    safari: 'Safari',
    sailfish: 'Sailfish',
    samsung_internet: 'Samsung Internet for Android',
    seamonkey: 'SeaMonkey',
    sleipnir: 'Sleipnir',
    swing: 'Swing',
    tizen: 'Tizen',
    uc: 'UC Browser',
    vivaldi: 'Vivaldi',
    webos: 'WebOS Browser',
    wechat: 'WeChat',
    yandex: 'Yandex Browser',
  };

  const PLATFORMS_MAP = {
    tablet: 'tablet',
    mobile: 'mobile',
    desktop: 'desktop',
    tv: 'tv',
  };

  const OS_MAP = {
    WindowsPhone: 'Windows Phone',
    Windows: 'Windows',
    MacOS: 'macOS',
    iOS: 'iOS',
    Android: 'Android',
    WebOS: 'WebOS',
    BlackBerry: 'BlackBerry',
    Bada: 'Bada',
    Tizen: 'Tizen',
    Linux: 'Linux',
    ChromeOS: 'Chrome OS',
    PlayStation4: 'PlayStation 4',
    Roku: 'Roku',
  };

  const ENGINE_MAP = {
    EdgeHTML: 'EdgeHTML',
    Blink: 'Blink',
    Trident: 'Trident',
    Presto: 'Presto',
    Gecko: 'Gecko',
    WebKit: 'WebKit',
  };

  class Utils {
    /**
     * Get first matched item for a string
     * @param {RegExp} regexp
     * @param {String} ua
     * @return {Array|{index: number, input: string}|*|boolean|string}
     */
    static getFirstMatch(regexp, ua) {
      const match = ua.match(regexp);
      return (match && match.length > 0 && match[1]) || '';
    }

    /**
     * Get second matched item for a string
     * @param regexp
     * @param {String} ua
     * @return {Array|{index: number, input: string}|*|boolean|string}
     */
    static getSecondMatch(regexp, ua) {
      const match = ua.match(regexp);
      return (match && match.length > 1 && match[2]) || '';
    }

    /**
     * Match a regexp and return a constant or undefined
     * @param {RegExp} regexp
     * @param {String} ua
     * @param {*} _const Any const that will be returned if regexp matches the string
     * @return {*}
     */
    static matchAndReturnConst(regexp, ua, _const) {
      if (regexp.test(ua)) {
        return _const;
      }
      return void (0);
    }

    static getWindowsVersionName(version) {
      switch (version) {
        case 'NT': return 'NT';
        case 'XP': return 'XP';
        case 'NT 5.0': return '2000';
        case 'NT 5.1': return 'XP';
        case 'NT 5.2': return '2003';
        case 'NT 6.0': return 'Vista';
        case 'NT 6.1': return '7';
        case 'NT 6.2': return '8';
        case 'NT 6.3': return '8.1';
        case 'NT 10.0': return '10';
        default: return undefined;
      }
    }

    /**
     * Get macOS version name
     *    10.5 - Leopard
     *    10.6 - Snow Leopard
     *    10.7 - Lion
     *    10.8 - Mountain Lion
     *    10.9 - Mavericks
     *    10.10 - Yosemite
     *    10.11 - El Capitan
     *    10.12 - Sierra
     *    10.13 - High Sierra
     *    10.14 - Mojave
     *    10.15 - Catalina
     *
     * @example
     *   getMacOSVersionName("10.14") // 'Mojave'
     *
     * @param  {string} version
     * @return {string} versionName
     */
    static getMacOSVersionName(version) {
      const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);
      v.push(0);
      if (v[0] !== 10) return undefined;
      switch (v[1]) {
        case 5: return 'Leopard';
        case 6: return 'Snow Leopard';
        case 7: return 'Lion';
        case 8: return 'Mountain Lion';
        case 9: return 'Mavericks';
        case 10: return 'Yosemite';
        case 11: return 'El Capitan';
        case 12: return 'Sierra';
        case 13: return 'High Sierra';
        case 14: return 'Mojave';
        case 15: return 'Catalina';
        default: return undefined;
      }
    }

    /**
     * Get Android version name
     *    1.5 - Cupcake
     *    1.6 - Donut
     *    2.0 - Eclair
     *    2.1 - Eclair
     *    2.2 - Froyo
     *    2.x - Gingerbread
     *    3.x - Honeycomb
     *    4.0 - Ice Cream Sandwich
     *    4.1 - Jelly Bean
     *    4.4 - KitKat
     *    5.x - Lollipop
     *    6.x - Marshmallow
     *    7.x - Nougat
     *    8.x - Oreo
     *    9.x - Pie
     *
     * @example
     *   getAndroidVersionName("7.0") // 'Nougat'
     *
     * @param  {string} version
     * @return {string} versionName
     */
    static getAndroidVersionName(version) {
      const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);
      v.push(0);
      if (v[0] === 1 && v[1] < 5) return undefined;
      if (v[0] === 1 && v[1] < 6) return 'Cupcake';
      if (v[0] === 1 && v[1] >= 6) return 'Donut';
      if (v[0] === 2 && v[1] < 2) return 'Eclair';
      if (v[0] === 2 && v[1] === 2) return 'Froyo';
      if (v[0] === 2 && v[1] > 2) return 'Gingerbread';
      if (v[0] === 3) return 'Honeycomb';
      if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';
      if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';
      if (v[0] === 4 && v[1] >= 4) return 'KitKat';
      if (v[0] === 5) return 'Lollipop';
      if (v[0] === 6) return 'Marshmallow';
      if (v[0] === 7) return 'Nougat';
      if (v[0] === 8) return 'Oreo';
      if (v[0] === 9) return 'Pie';
      return undefined;
    }

    /**
     * Get version precisions count
     *
     * @example
     *   getVersionPrecision("1.10.3") // 3
     *
     * @param  {string} version
     * @return {number}
     */
    static getVersionPrecision(version) {
      return version.split('.').length;
    }

    /**
     * Calculate browser version weight
     *
     * @example
     *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1
     *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1
     *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0
     *   compareVersions('1.10.2.1',  '1.0800.2');     // -1
     *   compareVersions('1.10.2.1',  '1.10',  true);  // 0
     *
     * @param {String} versionA versions versions to compare
     * @param {String} versionB versions versions to compare
     * @param {boolean} [isLoose] enable loose comparison
     * @return {Number} comparison result: -1 when versionA is lower,
     * 1 when versionA is bigger, 0 when both equal
     */
    /* eslint consistent-return: 1 */
    static compareVersions(versionA, versionB, isLoose = false) {
      // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
      const versionAPrecision = Utils.getVersionPrecision(versionA);
      const versionBPrecision = Utils.getVersionPrecision(versionB);

      let precision = Math.max(versionAPrecision, versionBPrecision);
      let lastPrecision = 0;

      const chunks = Utils.map([versionA, versionB], (version) => {
        const delta = precision - Utils.getVersionPrecision(version);

        // 2) "9" -> "9.0" (for precision = 2)
        const _version = version + new Array(delta + 1).join('.0');

        // 3) "9.0" -> ["000000000"", "000000009"]
        return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();
      });

      // adjust precision for loose comparison
      if (isLoose) {
        lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
      }

      // iterate in reverse order by reversed chunks array
      precision -= 1;
      while (precision >= lastPrecision) {
        // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
        if (chunks[0][precision] > chunks[1][precision]) {
          return 1;
        }

        if (chunks[0][precision] === chunks[1][precision]) {
          if (precision === lastPrecision) {
            // all version chunks are same
            return 0;
          }

          precision -= 1;
        } else if (chunks[0][precision] < chunks[1][precision]) {
          return -1;
        }
      }

      return undefined;
    }

    /**
     * Array::map polyfill
     *
     * @param  {Array} arr
     * @param  {Function} iterator
     * @return {Array}
     */
    static map(arr, iterator) {
      const result = [];
      let i;
      if (Array.prototype.map) {
        return Array.prototype.map.call(arr, iterator);
      }
      for (i = 0; i < arr.length; i += 1) {
        result.push(iterator(arr[i]));
      }
      return result;
    }

    /**
     * Array::find polyfill
     *
     * @param  {Array} arr
     * @param  {Function} predicate
     * @return {Array}
     */
    static find(arr, predicate) {
      let i;
      let l;
      if (Array.prototype.find) {
        return Array.prototype.find.call(arr, predicate);
      }
      for (i = 0, l = arr.length; i < l; i += 1) {
        const value = arr[i];
        if (predicate(value, i)) {
          return value;
        }
      }
      return undefined;
    }

    /**
     * Object::assign polyfill
     *
     * @param  {Object} obj
     * @param  {Object} ...objs
     * @return {Object}
     */
    static assign(obj, ...assigners) {
      const result = obj;
      let i;
      let l;
      if (Object.assign) {
        return Object.assign(obj, ...assigners);
      }
      for (i = 0, l = assigners.length; i < l; i += 1) {
        const assigner = assigners[i];
        if (typeof assigner === 'object' && assigner !== null) {
          const keys = Object.keys(assigner);
          keys.forEach((key) => {
            result[key] = assigner[key];
          });
        }
      }
      return obj;
    }

    /**
     * Get short version/alias for a browser name
     *
     * @example
     *   getBrowserAlias('Microsoft Edge') // edge
     *
     * @param  {string} browserName
     * @return {string}
     */
    static getBrowserAlias(browserName) {
      return BROWSER_ALIASES_MAP[browserName];
    }

    /**
     * Get short version/alias for a browser name
     *
     * @example
     *   getBrowserAlias('edge') // Microsoft Edge
     *
     * @param  {string} browserAlias
     * @return {string}
     */
    static getBrowserTypeByAlias(browserAlias) {
      return BROWSER_MAP[browserAlias] || '';
    }
  }

  /**
   * Browsers' descriptors
   *
   * The idea of descriptors is simple. You should know about them two simple things:
   * 1. Every descriptor has a method or property called `test` and a `describe` method.
   * 2. Order of descriptors is important.
   *
   * More details:
   * 1. Method or property `test` serves as a way to detect whether the UA string
   * matches some certain browser or not. The `describe` method helps to make a result
   * object with params that show some browser-specific things: name, version, etc.
   * 2. Order of descriptors is important because a Parser goes through them one by one
   * in course. For example, if you insert Chrome's descriptor as the first one,
   * more then a half of browsers will be described as Chrome, because they will pass
   * the Chrome descriptor's test.
   *
   * Descriptor's `test` could be a property with an array of RegExps, where every RegExp
   * will be applied to a UA string to test it whether it matches or not.
   * If a descriptor has two or more regexps in the `test` array it tests them one by one
   * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.
   *
   * Or `test` could be a method. In that case it gets a Parser instance and should
   * return true/false to get the Parser know if this browser descriptor matches the UA or not.
   */

  const commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;

  const browsersList = [
    /* Googlebot */
    {
      test: [/googlebot/i],
      describe(ua) {
        const browser = {
          name: 'Googlebot',
        };
        const version = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* Opera < 13.0 */
    {
      test: [/opera/i],
      describe(ua) {
        const browser = {
          name: 'Opera',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* Opera > 13.0 */
    {
      test: [/opr\/|opios/i],
      describe(ua) {
        const browser = {
          name: 'Opera',
        };
        const version = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/SamsungBrowser/i],
      describe(ua) {
        const browser = {
          name: 'Samsung Internet for Android',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/Whale/i],
      describe(ua) {
        const browser = {
          name: 'NAVER Whale Browser',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/MZBrowser/i],
      describe(ua) {
        const browser = {
          name: 'MZ Browser',
        };
        const version = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/focus/i],
      describe(ua) {
        const browser = {
          name: 'Focus',
        };
        const version = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/swing/i],
      describe(ua) {
        const browser = {
          name: 'Swing',
        };
        const version = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/coast/i],
      describe(ua) {
        const browser = {
          name: 'Opera Coast',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/opt\/\d+(?:.?_?\d+)+/i],
      describe(ua) {
        const browser = {
          name: 'Opera Touch',
        };
        const version = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/yabrowser/i],
      describe(ua) {
        const browser = {
          name: 'Yandex Browser',
        };
        const version = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/ucbrowser/i],
      describe(ua) {
        const browser = {
          name: 'UC Browser',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/Maxthon|mxios/i],
      describe(ua) {
        const browser = {
          name: 'Maxthon',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/epiphany/i],
      describe(ua) {
        const browser = {
          name: 'Epiphany',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/puffin/i],
      describe(ua) {
        const browser = {
          name: 'Puffin',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/sleipnir/i],
      describe(ua) {
        const browser = {
          name: 'Sleipnir',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/k-meleon/i],
      describe(ua) {
        const browser = {
          name: 'K-Meleon',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/micromessenger/i],
      describe(ua) {
        const browser = {
          name: 'WeChat',
        };
        const version = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/qqbrowser/i],
      describe(ua) {
        const browser = {
          name: (/qqbrowserlite/i).test(ua) ? 'QQ Browser Lite' : 'QQ Browser',
        };
        const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/msie|trident/i],
      describe(ua) {
        const browser = {
          name: 'Internet Explorer',
        };
        const version = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/\sedg\//i],
      describe(ua) {
        const browser = {
          name: 'Microsoft Edge',
        };

        const version = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/edg([ea]|ios)/i],
      describe(ua) {
        const browser = {
          name: 'Microsoft Edge',
        };

        const version = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/vivaldi/i],
      describe(ua) {
        const browser = {
          name: 'Vivaldi',
        };
        const version = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/seamonkey/i],
      describe(ua) {
        const browser = {
          name: 'SeaMonkey',
        };
        const version = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/sailfish/i],
      describe(ua) {
        const browser = {
          name: 'Sailfish',
        };

        const version = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/silk/i],
      describe(ua) {
        const browser = {
          name: 'Amazon Silk',
        };
        const version = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/phantom/i],
      describe(ua) {
        const browser = {
          name: 'PhantomJS',
        };
        const version = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/slimerjs/i],
      describe(ua) {
        const browser = {
          name: 'SlimerJS',
        };
        const version = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
      describe(ua) {
        const browser = {
          name: 'BlackBerry',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/(web|hpw)[o0]s/i],
      describe(ua) {
        const browser = {
          name: 'WebOS Browser',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/bada/i],
      describe(ua) {
        const browser = {
          name: 'Bada',
        };
        const version = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/tizen/i],
      describe(ua) {
        const browser = {
          name: 'Tizen',
        };
        const version = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/qupzilla/i],
      describe(ua) {
        const browser = {
          name: 'QupZilla',
        };
        const version = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/firefox|iceweasel|fxios/i],
      describe(ua) {
        const browser = {
          name: 'Firefox',
        };
        const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/electron/i],
      describe(ua) {
        const browser = {
          name: 'Electron',
        };
        const version = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/chromium/i],
      describe(ua) {
        const browser = {
          name: 'Chromium',
        };
        const version = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/chrome|crios|crmo/i],
      describe(ua) {
        const browser = {
          name: 'Chrome',
        };
        const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },
    {
      test: [/GSA/i],
      describe(ua) {
        const browser = {
          name: 'Google Search',
        };
        const version = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* Android Browser */
    {
      test(parser) {
        const notLikeAndroid = !parser.test(/like android/i);
        const butAndroid = parser.test(/android/i);
        return notLikeAndroid && butAndroid;
      },
      describe(ua) {
        const browser = {
          name: 'Android Browser',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* PlayStation 4 */
    {
      test: [/playstation 4/i],
      describe(ua) {
        const browser = {
          name: 'PlayStation 4',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* Safari */
    {
      test: [/safari|applewebkit/i],
      describe(ua) {
        const browser = {
          name: 'Safari',
        };
        const version = Utils.getFirstMatch(commonVersionIdentifier, ua);

        if (version) {
          browser.version = version;
        }

        return browser;
      },
    },

    /* Something else */
    {
      test: [/.*/i],
      describe(ua) {
        /* Here we try to make sure that there are explicit details about the device
         * in order to decide what regexp exactly we want to apply
         * (as there is a specific decision based on that conclusion)
         */
        const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
        const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
        const hasDeviceSpec = ua.search('\\(') !== -1;
        const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
        return {
          name: Utils.getFirstMatch(regexp, ua),
          version: Utils.getSecondMatch(regexp, ua),
        };
      },
    },
  ];

  var osParsersList = [
    /* Roku */
    {
      test: [/Roku\/DVP/],
      describe(ua) {
        const version = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
        return {
          name: OS_MAP.Roku,
          version,
        };
      },
    },

    /* Windows Phone */
    {
      test: [/windows phone/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
        return {
          name: OS_MAP.WindowsPhone,
          version,
        };
      },
    },

    /* Windows */
    {
      test: [/windows /i],
      describe(ua) {
        const version = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
        const versionName = Utils.getWindowsVersionName(version);

        return {
          name: OS_MAP.Windows,
          version,
          versionName,
        };
      },
    },

    /* Firefox on iPad */
    {
      test: [/Macintosh(.*?) FxiOS(.*?)\//],
      describe(ua) {
        const result = {
          name: OS_MAP.iOS,
        };
        const version = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
        if (version) {
          result.version = version;
        }
        return result;
      },
    },

    /* macOS */
    {
      test: [/macintosh/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, '.');
        const versionName = Utils.getMacOSVersionName(version);

        const os = {
          name: OS_MAP.MacOS,
          version,
        };
        if (versionName) {
          os.versionName = versionName;
        }
        return os;
      },
    },

    /* iOS */
    {
      test: [/(ipod|iphone|ipad)/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, '.');

        return {
          name: OS_MAP.iOS,
          version,
        };
      },
    },

    /* Android */
    {
      test(parser) {
        const notLikeAndroid = !parser.test(/like android/i);
        const butAndroid = parser.test(/android/i);
        return notLikeAndroid && butAndroid;
      },
      describe(ua) {
        const version = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
        const versionName = Utils.getAndroidVersionName(version);
        const os = {
          name: OS_MAP.Android,
          version,
        };
        if (versionName) {
          os.versionName = versionName;
        }
        return os;
      },
    },

    /* WebOS */
    {
      test: [/(web|hpw)[o0]s/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
        const os = {
          name: OS_MAP.WebOS,
        };

        if (version && version.length) {
          os.version = version;
        }
        return os;
      },
    },

    /* BlackBerry */
    {
      test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua)
          || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua)
          || Utils.getFirstMatch(/\bbb(\d+)/i, ua);

        return {
          name: OS_MAP.BlackBerry,
          version,
        };
      },
    },

    /* Bada */
    {
      test: [/bada/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);

        return {
          name: OS_MAP.Bada,
          version,
        };
      },
    },

    /* Tizen */
    {
      test: [/tizen/i],
      describe(ua) {
        const version = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);

        return {
          name: OS_MAP.Tizen,
          version,
        };
      },
    },

    /* Linux */
    {
      test: [/linux/i],
      describe() {
        return {
          name: OS_MAP.Linux,
        };
      },
    },

    /* Chrome OS */
    {
      test: [/CrOS/],
      describe() {
        return {
          name: OS_MAP.ChromeOS,
        };
      },
    },

    /* Playstation 4 */
    {
      test: [/PlayStation 4/],
      describe(ua) {
        const version = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
        return {
          name: OS_MAP.PlayStation4,
          version,
        };
      },
    },
  ];

  /*
   * Tablets go first since usually they have more specific
   * signs to detect.
   */

  var platformParsersList = [
    /* Googlebot */
    {
      test: [/googlebot/i],
      describe() {
        return {
          type: 'bot',
          vendor: 'Google',
        };
      },
    },

    /* Huawei */
    {
      test: [/huawei/i],
      describe(ua) {
        const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';
        const platform = {
          type: PLATFORMS_MAP.mobile,
          vendor: 'Huawei',
        };
        if (model) {
          platform.model = model;
        }
        return platform;
      },
    },

    /* Nexus Tablet */
    {
      test: [/nexus\s*(?:7|8|9|10).*/i],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
          vendor: 'Nexus',
        };
      },
    },

    /* iPad */
    {
      test: [/ipad/i],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
          vendor: 'Apple',
          model: 'iPad',
        };
      },
    },

    /* Firefox on iPad */
    {
      test: [/Macintosh(.*?) FxiOS(.*?)\//],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
          vendor: 'Apple',
          model: 'iPad',
        };
      },
    },

    /* Amazon Kindle Fire */
    {
      test: [/kftt build/i],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
          vendor: 'Amazon',
          model: 'Kindle Fire HD 7',
        };
      },
    },

    /* Another Amazon Tablet with Silk */
    {
      test: [/silk/i],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
          vendor: 'Amazon',
        };
      },
    },

    /* Tablet */
    {
      test: [/tablet(?! pc)/i],
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
        };
      },
    },

    /* iPod/iPhone */
    {
      test(parser) {
        const iDevice = parser.test(/ipod|iphone/i);
        const likeIDevice = parser.test(/like (ipod|iphone)/i);
        return iDevice && !likeIDevice;
      },
      describe(ua) {
        const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
        return {
          type: PLATFORMS_MAP.mobile,
          vendor: 'Apple',
          model,
        };
      },
    },

    /* Nexus Mobile */
    {
      test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
          vendor: 'Nexus',
        };
      },
    },

    /* Mobile */
    {
      test: [/[^-]mobi/i],
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
        };
      },
    },

    /* BlackBerry */
    {
      test(parser) {
        return parser.getBrowserName(true) === 'blackberry';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
          vendor: 'BlackBerry',
        };
      },
    },

    /* Bada */
    {
      test(parser) {
        return parser.getBrowserName(true) === 'bada';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
        };
      },
    },

    /* Windows Phone */
    {
      test(parser) {
        return parser.getBrowserName() === 'windows phone';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
          vendor: 'Microsoft',
        };
      },
    },

    /* Android Tablet */
    {
      test(parser) {
        const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);
        return parser.getOSName(true) === 'android' && (osMajorVersion >= 3);
      },
      describe() {
        return {
          type: PLATFORMS_MAP.tablet,
        };
      },
    },

    /* Android Mobile */
    {
      test(parser) {
        return parser.getOSName(true) === 'android';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.mobile,
        };
      },
    },

    /* desktop */
    {
      test(parser) {
        return parser.getOSName(true) === 'macos';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.desktop,
          vendor: 'Apple',
        };
      },
    },

    /* Windows */
    {
      test(parser) {
        return parser.getOSName(true) === 'windows';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.desktop,
        };
      },
    },

    /* Linux */
    {
      test(parser) {
        return parser.getOSName(true) === 'linux';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.desktop,
        };
      },
    },

    /* PlayStation 4 */
    {
      test(parser) {
        return parser.getOSName(true) === 'playstation 4';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.tv,
        };
      },
    },

    /* Roku */
    {
      test(parser) {
        return parser.getOSName(true) === 'roku';
      },
      describe() {
        return {
          type: PLATFORMS_MAP.tv,
        };
      },
    },
  ];

  /*
   * More specific goes first
   */
  var enginesParsersList = [
    /* EdgeHTML */
    {
      test(parser) {
        return parser.getBrowserName(true) === 'microsoft edge';
      },
      describe(ua) {
        const isBlinkBased = /\sedg\//i.test(ua);

        // return blink if it's blink-based one
        if (isBlinkBased) {
          return {
            name: ENGINE_MAP.Blink,
          };
        }

        // otherwise match the version and return EdgeHTML
        const version = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);

        return {
          name: ENGINE_MAP.EdgeHTML,
          version,
        };
      },
    },

    /* Trident */
    {
      test: [/trident/i],
      describe(ua) {
        const engine = {
          name: ENGINE_MAP.Trident,
        };

        const version = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          engine.version = version;
        }

        return engine;
      },
    },

    /* Presto */
    {
      test(parser) {
        return parser.test(/presto/i);
      },
      describe(ua) {
        const engine = {
          name: ENGINE_MAP.Presto,
        };

        const version = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          engine.version = version;
        }

        return engine;
      },
    },

    /* Gecko */
    {
      test(parser) {
        const isGecko = parser.test(/gecko/i);
        const likeGecko = parser.test(/like gecko/i);
        return isGecko && !likeGecko;
      },
      describe(ua) {
        const engine = {
          name: ENGINE_MAP.Gecko,
        };

        const version = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          engine.version = version;
        }

        return engine;
      },
    },

    /* Blink */
    {
      test: [/(apple)?webkit\/537\.36/i],
      describe() {
        return {
          name: ENGINE_MAP.Blink,
        };
      },
    },

    /* WebKit */
    {
      test: [/(apple)?webkit/i],
      describe(ua) {
        const engine = {
          name: ENGINE_MAP.WebKit,
        };

        const version = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);

        if (version) {
          engine.version = version;
        }

        return engine;
      },
    },
  ];

  /**
   * The main class that arranges the whole parsing process.
   */
  class Parser {
    /**
     * Create instance of Parser
     *
     * @param {String} UA User-Agent string
     * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance
     * improvements if you need to make a more particular parsing
     * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}
     *
     * @throw {Error} in case of empty UA String
     *
     * @constructor
     */
    constructor(UA, skipParsing = false) {
      if (UA === void (0) || UA === null || UA === '') {
        throw new Error("UserAgent parameter can't be empty");
      }

      this._ua = UA;

      /**
       * @typedef ParsedResult
       * @property {Object} browser
       * @property {String|undefined} [browser.name]
       * Browser name, like `"Chrome"` or `"Internet Explorer"`
       * @property {String|undefined} [browser.version] Browser version as a String `"12.01.45334.10"`
       * @property {Object} os
       * @property {String|undefined} [os.name] OS name, like `"Windows"` or `"macOS"`
       * @property {String|undefined} [os.version] OS version, like `"NT 5.1"` or `"10.11.1"`
       * @property {String|undefined} [os.versionName] OS name, like `"XP"` or `"High Sierra"`
       * @property {Object} platform
       * @property {String|undefined} [platform.type]
       * platform type, can be either `"desktop"`, `"tablet"` or `"mobile"`
       * @property {String|undefined} [platform.vendor] Vendor of the device,
       * like `"Apple"` or `"Samsung"`
       * @property {String|undefined} [platform.model] Device model,
       * like `"iPhone"` or `"Kindle Fire HD 7"`
       * @property {Object} engine
       * @property {String|undefined} [engine.name]
       * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`
       * @property {String|undefined} [engine.version] String version of the engine
       */
      this.parsedResult = {};

      if (skipParsing !== true) {
        this.parse();
      }
    }

    /**
     * Get UserAgent string of current Parser instance
     * @return {String} User-Agent String of the current <Parser> object
     *
     * @public
     */
    getUA() {
      return this._ua;
    }

    /**
     * Test a UA string for a regexp
     * @param {RegExp} regex
     * @return {Boolean}
     */
    test(regex) {
      return regex.test(this._ua);
    }

    /**
     * Get parsed browser object
     * @return {Object}
     */
    parseBrowser() {
      this.parsedResult.browser = {};

      const browserDescriptor = Utils.find(browsersList, (_browser) => {
        if (typeof _browser.test === 'function') {
          return _browser.test(this);
        }

        if (_browser.test instanceof Array) {
          return _browser.test.some(condition => this.test(condition));
        }

        throw new Error("Browser's test function is not valid");
      });

      if (browserDescriptor) {
        this.parsedResult.browser = browserDescriptor.describe(this.getUA());
      }

      return this.parsedResult.browser;
    }

    /**
     * Get parsed browser object
     * @return {Object}
     *
     * @public
     */
    getBrowser() {
      if (this.parsedResult.browser) {
        return this.parsedResult.browser;
      }

      return this.parseBrowser();
    }

    /**
     * Get browser's name
     * @return {String} Browser's name or an empty string
     *
     * @public
     */
    getBrowserName(toLowerCase) {
      if (toLowerCase) {
        return String(this.getBrowser().name).toLowerCase() || '';
      }
      return this.getBrowser().name || '';
    }


    /**
     * Get browser's version
     * @return {String} version of browser
     *
     * @public
     */
    getBrowserVersion() {
      return this.getBrowser().version;
    }

    /**
     * Get OS
     * @return {Object}
     *
     * @example
     * this.getOS();
     * {
     *   name: 'macOS',
     *   version: '10.11.12'
     * }
     */
    getOS() {
      if (this.parsedResult.os) {
        return this.parsedResult.os;
      }

      return this.parseOS();
    }

    /**
     * Parse OS and save it to this.parsedResult.os
     * @return {*|{}}
     */
    parseOS() {
      this.parsedResult.os = {};

      const os = Utils.find(osParsersList, (_os) => {
        if (typeof _os.test === 'function') {
          return _os.test(this);
        }

        if (_os.test instanceof Array) {
          return _os.test.some(condition => this.test(condition));
        }

        throw new Error("Browser's test function is not valid");
      });

      if (os) {
        this.parsedResult.os = os.describe(this.getUA());
      }

      return this.parsedResult.os;
    }

    /**
     * Get OS name
     * @param {Boolean} [toLowerCase] return lower-cased value
     * @return {String} name of the OS — macOS, Windows, Linux, etc.
     */
    getOSName(toLowerCase) {
      const { name } = this.getOS();

      if (toLowerCase) {
        return String(name).toLowerCase() || '';
      }

      return name || '';
    }

    /**
     * Get OS version
     * @return {String} full version with dots ('10.11.12', '5.6', etc)
     */
    getOSVersion() {
      return this.getOS().version;
    }

    /**
     * Get parsed platform
     * @return {{}}
     */
    getPlatform() {
      if (this.parsedResult.platform) {
        return this.parsedResult.platform;
      }

      return this.parsePlatform();
    }

    /**
     * Get platform name
     * @param {Boolean} [toLowerCase=false]
     * @return {*}
     */
    getPlatformType(toLowerCase = false) {
      const { type } = this.getPlatform();

      if (toLowerCase) {
        return String(type).toLowerCase() || '';
      }

      return type || '';
    }

    /**
     * Get parsed platform
     * @return {{}}
     */
    parsePlatform() {
      this.parsedResult.platform = {};

      const platform = Utils.find(platformParsersList, (_platform) => {
        if (typeof _platform.test === 'function') {
          return _platform.test(this);
        }

        if (_platform.test instanceof Array) {
          return _platform.test.some(condition => this.test(condition));
        }

        throw new Error("Browser's test function is not valid");
      });

      if (platform) {
        this.parsedResult.platform = platform.describe(this.getUA());
      }

      return this.parsedResult.platform;
    }

    /**
     * Get parsed engine
     * @return {{}}
     */
    getEngine() {
      if (this.parsedResult.engine) {
        return this.parsedResult.engine;
      }

      return this.parseEngine();
    }

    /**
     * Get engines's name
     * @return {String} Engines's name or an empty string
     *
     * @public
     */
    getEngineName(toLowerCase) {
      if (toLowerCase) {
        return String(this.getEngine().name).toLowerCase() || '';
      }
      return this.getEngine().name || '';
    }

    /**
     * Get parsed platform
     * @return {{}}
     */
    parseEngine() {
      this.parsedResult.engine = {};

      const engine = Utils.find(enginesParsersList, (_engine) => {
        if (typeof _engine.test === 'function') {
          return _engine.test(this);
        }

        if (_engine.test instanceof Array) {
          return _engine.test.some(condition => this.test(condition));
        }

        throw new Error("Browser's test function is not valid");
      });

      if (engine) {
        this.parsedResult.engine = engine.describe(this.getUA());
      }

      return this.parsedResult.engine;
    }

    /**
     * Parse full information about the browser
     */
    parse() {
      this.parseBrowser();
      this.parseOS();
      this.parsePlatform();
      this.parseEngine();

      return this;
    }

    /**
     * Get parsed result
     * @return {ParsedResult}
     */
    getResult() {
      return Utils.assign({}, this.parsedResult);
    }

    /**
     * Check if parsed browser matches certain conditions
     *
     * @param {Object} checkTree It's one or two layered object,
     * which can include a platform or an OS on the first layer
     * and should have browsers specs on the bottom-laying layer
     *
     * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.
     * Returns `undefined` when the browser is no described in the checkTree object.
     *
     * @example
     * const browser = Bowser.getParser(window.navigator.userAgent);
     * if (browser.satisfies({chrome: '>118.01.1322' }))
     * // or with os
     * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))
     * // or with platforms
     * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))
     */
    satisfies(checkTree) {
      const platformsAndOSes = {};
      let platformsAndOSCounter = 0;
      const browsers = {};
      let browsersCounter = 0;

      const allDefinitions = Object.keys(checkTree);

      allDefinitions.forEach((key) => {
        const currentDefinition = checkTree[key];
        if (typeof currentDefinition === 'string') {
          browsers[key] = currentDefinition;
          browsersCounter += 1;
        } else if (typeof currentDefinition === 'object') {
          platformsAndOSes[key] = currentDefinition;
          platformsAndOSCounter += 1;
        }
      });

      if (platformsAndOSCounter > 0) {
        const platformsAndOSNames = Object.keys(platformsAndOSes);
        const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => (this.isOS(name)));

        if (OSMatchingDefinition) {
          const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);

          if (osResult !== void 0) {
            return osResult;
          }
        }

        const platformMatchingDefinition = Utils.find(
          platformsAndOSNames,
          name => (this.isPlatform(name)),
        );
        if (platformMatchingDefinition) {
          const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);

          if (platformResult !== void 0) {
            return platformResult;
          }
        }
      }

      if (browsersCounter > 0) {
        const browserNames = Object.keys(browsers);
        const matchingDefinition = Utils.find(browserNames, name => (this.isBrowser(name, true)));

        if (matchingDefinition !== void 0) {
          return this.compareVersion(browsers[matchingDefinition]);
        }
      }

      return undefined;
    }

    /**
     * Check if the browser name equals the passed string
     * @param browserName The string to compare with the browser name
     * @param [includingAlias=false] The flag showing whether alias will be included into comparison
     * @returns {boolean}
     */
    isBrowser(browserName, includingAlias = false) {
      const defaultBrowserName = this.getBrowserName().toLowerCase();
      let browserNameLower = browserName.toLowerCase();
      const alias = Utils.getBrowserTypeByAlias(browserNameLower);

      if (includingAlias && alias) {
        browserNameLower = alias.toLowerCase();
      }
      return browserNameLower === defaultBrowserName;
    }

    compareVersion(version) {
      let expectedResults = [0];
      let comparableVersion = version;
      let isLoose = false;

      const currentBrowserVersion = this.getBrowserVersion();

      if (typeof currentBrowserVersion !== 'string') {
        return void 0;
      }

      if (version[0] === '>' || version[0] === '<') {
        comparableVersion = version.substr(1);
        if (version[1] === '=') {
          isLoose = true;
          comparableVersion = version.substr(2);
        } else {
          expectedResults = [];
        }
        if (version[0] === '>') {
          expectedResults.push(1);
        } else {
          expectedResults.push(-1);
        }
      } else if (version[0] === '=') {
        comparableVersion = version.substr(1);
      } else if (version[0] === '~') {
        isLoose = true;
        comparableVersion = version.substr(1);
      }

      return expectedResults.indexOf(
        Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose),
      ) > -1;
    }

    isOS(osName) {
      return this.getOSName(true) === String(osName).toLowerCase();
    }

    isPlatform(platformType) {
      return this.getPlatformType(true) === String(platformType).toLowerCase();
    }

    isEngine(engineName) {
      return this.getEngineName(true) === String(engineName).toLowerCase();
    }

    /**
     * Is anything? Check if the browser is called "anything",
     * the OS called "anything" or the platform called "anything"
     * @param {String} anything
     * @returns {Boolean}
     */
    is(anything) {
      return this.isBrowser(anything) || this.isOS(anything) || this.isPlatform(anything);
    }

    /**
     * Check if any of the given values satisfies this.is(anything)
     * @param {String[]} anythings
     * @returns {Boolean}
     */
    some(anythings = []) {
      return anythings.some(anything => this.is(anything));
    }
  }

  /*!
   * Bowser - a browser detector
   * https://github.com/lancedikson/bowser
   * MIT License | (c) Dustin Diaz 2012-2015
   * MIT License | (c) Denis Demchenko 2015-2019
   */

  /**
   * Bowser class.
   * Keep it simple as much as it can be.
   * It's supposed to work with collections of {@link Parser} instances
   * rather then solve one-instance problems.
   * All the one-instance stuff is located in Parser class.
   *
   * @class
   * @classdesc Bowser is a static object, that provides an API to the Parsers
   * @hideconstructor
   */
  class Bowser {
    /**
     * Creates a {@link Parser} instance
     *
     * @param {String} UA UserAgent string
     * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it
     * explicitly. Same as `skipParsing` for {@link Parser}.
     * @returns {Parser}
     * @throws {Error} when UA is not a String
     *
     * @example
     * const parser = Bowser.getParser(window.navigator.userAgent);
     * const result = parser.getResult();
     */
    static getParser(UA, skipParsing = false) {
      if (typeof UA !== 'string') {
        throw new Error('UserAgent should be a string');
      }
      return new Parser(UA, skipParsing);
    }

    /**
     * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately
     *
     * @param UA
     * @return {ParsedResult}
     *
     * @example
     * const result = Bowser.parse(window.navigator.userAgent);
     */
    static parse(UA) {
      return (new Parser(UA)).getResult();
    }

    static get BROWSER_MAP() {
      return BROWSER_MAP;
    }

    static get ENGINE_MAP() {
      return ENGINE_MAP;
    }

    static get OS_MAP() {
      return OS_MAP;
    }

    static get PLATFORMS_MAP() {
      return PLATFORMS_MAP;
    }
  }

  var Logger_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  const APP_NAME = 'mediasoup-client';
  class Logger {
      constructor(prefix) {
          if (prefix) {
              this._debug = src.default(`${APP_NAME}:${prefix}`);
              this._warn = src.default(`${APP_NAME}:WARN:${prefix}`);
              this._error = src.default(`${APP_NAME}:ERROR:${prefix}`);
          }
          else {
              this._debug = src.default(APP_NAME);
              this._warn = src.default(`${APP_NAME}:WARN`);
              this._error = src.default(`${APP_NAME}:ERROR`);
          }
          /* eslint-disable no-console */
          this._debug.log = console.info.bind(console);
          this._warn.log = console.warn.bind(console);
          this._error.log = console.error.bind(console);
          /* eslint-enable no-console */
      }
      get debug() {
          return this._debug;
      }
      get warn() {
          return this._warn;
      }
      get error() {
          return this._error;
      }
  }
  exports.Logger = Logger;
  });

  unwrapExports(Logger_1);
  var Logger_2 = Logger_1.Logger;

  var errors = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Error indicating not support for something.
   */
  class UnsupportedError extends Error {
      constructor(message) {
          super(message);
          this.name = 'UnsupportedError';
          if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
           {
              // @ts-ignore
              Error.captureStackTrace(this, UnsupportedError);
          }
          else {
              this.stack = (new Error(message)).stack;
          }
      }
  }
  exports.UnsupportedError = UnsupportedError;
  /**
   * Error produced when calling a method in an invalid state.
   */
  class InvalidStateError extends Error {
      constructor(message) {
          super(message);
          this.name = 'InvalidStateError';
          if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
           {
              // @ts-ignore
              Error.captureStackTrace(this, InvalidStateError);
          }
          else {
              this.stack = (new Error(message)).stack;
          }
      }
  }
  exports.InvalidStateError = InvalidStateError;
  });

  unwrapExports(errors);
  var errors_1 = errors.UnsupportedError;
  var errors_2 = errors.InvalidStateError;

  var h264ProfileLevelId = createCommonjsModule(function (module, exports) {
  const debug = src('h264-profile-level-id');

  /* eslint-disable no-console */
  debug.log = console.info.bind(console);
  /* eslint-enable no-console */

  const ProfileConstrainedBaseline = 1;
  const ProfileBaseline = 2;
  const ProfileMain = 3;
  const ProfileConstrainedHigh = 4;
  const ProfileHigh = 5;

  exports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;
  exports.ProfileBaseline = ProfileBaseline;
  exports.ProfileMain = ProfileMain;
  exports.ProfileConstrainedHigh = ProfileConstrainedHigh;
  exports.ProfileHigh = ProfileHigh;

  // All values are equal to ten times the level number, except level 1b which is
  // special.
  const Level1_b = 0;
  const Level1 = 10;
  const Level1_1 = 11;
  const Level1_2 = 12;
  const Level1_3 = 13;
  const Level2 = 20;
  const Level2_1 = 21;
  const Level2_2 = 22;
  const Level3 = 30;
  const Level3_1 = 31;
  const Level3_2 = 32;
  const Level4 = 40;
  const Level4_1 = 41;
  const Level4_2 = 42;
  const Level5 = 50;
  const Level5_1 = 51;
  const Level5_2 = 52;

  exports.Level1_b = Level1_b;
  exports.Level1 = Level1;
  exports.Level1_1 = Level1_1;
  exports.Level1_2 = Level1_2;
  exports.Level1_3 = Level1_3;
  exports.Level2 = Level2;
  exports.Level2_1 = Level2_1;
  exports.Level2_2 = Level2_2;
  exports.Level3 = Level3;
  exports.Level3_1 = Level3_1;
  exports.Level3_2 = Level3_2;
  exports.Level4 = Level4;
  exports.Level4_1 = Level4_1;
  exports.Level4_2 = Level4_2;
  exports.Level5 = Level5;
  exports.Level5_1 = Level5_1;
  exports.Level5_2 = Level5_2;

  class ProfileLevelId
  {
  	constructor(profile, level)
  	{
  		this.profile = profile;
  		this.level = level;
  	}
  }

  exports.ProfileLevelId = ProfileLevelId;

  // Default ProfileLevelId.
  //
  // TODO: The default should really be profile Baseline and level 1 according to
  // the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not
  // break backwards compatibility with older versions of WebRTC where external
  // codecs don't have any parameters, use profile ConstrainedBaseline level 3_1
  // instead. This workaround will only be done in an interim period to allow
  // external clients to update their code.
  //
  // http://crbug/webrtc/6337.
  const DefaultProfileLevelId =
  	new ProfileLevelId(ProfileConstrainedBaseline, Level3_1);

  // For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3
  // flag specifies if level 1b or level 1.1 is used.
  const ConstraintSet3Flag = 0x10;

  // Class for matching bit patterns such as "x1xx0000" where 'x' is allowed to be
  // either 0 or 1.
  class BitPattern
  {
  	constructor(str)
  	{
  		this._mask = ~byteMaskString('x', str);
  		this._maskedValue = byteMaskString('1', str);
  	}

  	isMatch(value)
  	{
  		return this._maskedValue === (value & this._mask);
  	}
  }

  // Class for converting between profile_idc/profile_iop to Profile.
  class ProfilePattern
  {
  	constructor(profile_idc, profile_iop, profile)
  	{
  		this.profile_idc = profile_idc;
  		this.profile_iop = profile_iop;
  		this.profile = profile;
  	}
  }

  // This is from https://tools.ietf.org/html/rfc6184#section-8.1.
  const ProfilePatterns =
  [
  	new ProfilePattern(0x42, new BitPattern('x1xx0000'), ProfileConstrainedBaseline),
  	new ProfilePattern(0x4D, new BitPattern('1xxx0000'), ProfileConstrainedBaseline),
  	new ProfilePattern(0x58, new BitPattern('11xx0000'), ProfileConstrainedBaseline),
  	new ProfilePattern(0x42, new BitPattern('x0xx0000'), ProfileBaseline),
  	new ProfilePattern(0x58, new BitPattern('10xx0000'), ProfileBaseline),
  	new ProfilePattern(0x4D, new BitPattern('0x0x0000'), ProfileMain),
  	new ProfilePattern(0x64, new BitPattern('00000000'), ProfileHigh),
  	new ProfilePattern(0x64, new BitPattern('00001100'), ProfileConstrainedHigh)
  ];

  /**
   * Parse profile level id that is represented as a string of 3 hex bytes.
   * Nothing will be returned if the string is not a recognized H264 profile
   * level id.
   *
   * @param {String} str - profile-level-id value as a string of 3 hex bytes.
   *
   * @returns {ProfileLevelId}
   */
  exports.parseProfileLevelId = function(str)
  {
  	// The string should consist of 3 bytes in hexadecimal format.
  	if (typeof str !== 'string' || str.length !== 6)
  		return null;

  	const profile_level_id_numeric = parseInt(str, 16);

  	if (profile_level_id_numeric === 0)
  		return null;

  	// Separate into three bytes.
  	const level_idc = profile_level_id_numeric & 0xFF;
  	const profile_iop = (profile_level_id_numeric >> 8) & 0xFF;
  	const profile_idc = (profile_level_id_numeric >> 16) & 0xFF;

  	// Parse level based on level_idc and constraint set 3 flag.
  	let level;

  	switch (level_idc)
  	{
  		case Level1_1:
  		{
  			level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;
  			break;
  		}
  		case Level1:
  		case Level1_2:
  		case Level1_3:
  		case Level2:
  		case Level2_1:
  		case Level2_2:
  		case Level3:
  		case Level3_1:
  		case Level3_2:
  		case Level4:
  		case Level4_1:
  		case Level4_2:
  		case Level5:
  		case Level5_1:
  		case Level5_2:
  		{
  			level = level_idc;
  			break;
  		}
  		// Unrecognized level_idc.
  		default:
  		{
  			debug('parseProfileLevelId() | unrecognized level_idc:%s', level_idc);

  			return null;
  		}
  	}

  	// Parse profile_idc/profile_iop into a Profile enum.
  	for (const pattern of ProfilePatterns)
  	{
  		if (
  			profile_idc === pattern.profile_idc &&
  			pattern.profile_iop.isMatch(profile_iop)
  		)
  		{
  			return new ProfileLevelId(pattern.profile, level);
  		}
  	}

  	debug('parseProfileLevelId() | unrecognized profile_idc/profile_iop combination');

  	return null;
  };

  /**
   * Returns canonical string representation as three hex bytes of the profile
   * level id, or returns nothing for invalid profile level ids.
   *
   * @param {ProfileLevelId} profile_level_id
   *
   * @returns {String}
   */
  exports.profileLevelIdToString = function(profile_level_id)
  {
  	// Handle special case level == 1b.
  	if (profile_level_id.level == Level1_b)
  	{
  		switch (profile_level_id.profile)
  		{
  			case ProfileConstrainedBaseline:
  			{
  				return '42f00b';
  			}
  			case ProfileBaseline:
  			{
  				return '42100b';
  			}
  			case ProfileMain:
  			{
  				return '4d100b';
  			}
  			// Level 1_b is not allowed for other profiles.
  			default:
  			{
  				debug(
  					'profileLevelIdToString() | Level 1_b not is allowed for profile:%s',
  					profile_level_id.profile);

  				return null;
  			}
  		}
  	}

  	let profile_idc_iop_string;

  	switch (profile_level_id.profile)
  	{
  		case ProfileConstrainedBaseline:
  		{
  			profile_idc_iop_string = '42e0';
  			break;
  		}
  		case ProfileBaseline:
  		{
  			profile_idc_iop_string = '4200';
  			break;
  		}
  		case ProfileMain:
  		{
  			profile_idc_iop_string = '4d00';
  			break;
  		}
  		case ProfileConstrainedHigh:
  		{
  			profile_idc_iop_string = '640c';
  			break;
  		}
  		case ProfileHigh:
  		{
  			profile_idc_iop_string = '6400';
  			break;
  		}
  		default:
  		{
  			debug(
  				'profileLevelIdToString() | unrecognized profile:%s',
  				profile_level_id.profile);

  			return null;
  		}
  	}

  	let levelStr = (profile_level_id.level).toString(16);

  	if (levelStr.length === 1)
  		levelStr = `0${levelStr}`;

  	return `${profile_idc_iop_string}${levelStr}`;
  };

  /**
   * Parse profile level id that is represented as a string of 3 hex bytes
   * contained in an SDP key-value map. A default profile level id will be
   * returned if the profile-level-id key is missing. Nothing will be returned if
   * the key is present but the string is invalid.
   *
   * @param {Object} [params={}] - Codec parameters object.
   *
   * @returns {ProfileLevelId}
   */
  exports.parseSdpProfileLevelId = function(params = {})
  {
  	const profile_level_id = params['profile-level-id'];

  	return !profile_level_id
  		? DefaultProfileLevelId
  		: exports.parseProfileLevelId(profile_level_id);
  };

  /**
   * Returns true if the parameters have the same H264 profile, i.e. the same
   * H264 profile (Baseline, High, etc).
   *
   * @param {Object} [params1={}] - Codec parameters object.
   * @param {Object} [params2={}] - Codec parameters object.
   *
   * @returns {Boolean}
   */
  exports.isSameProfile = function(params1 = {}, params2 = {})
  {
  	const profile_level_id_1 = exports.parseSdpProfileLevelId(params1);
  	const profile_level_id_2 = exports.parseSdpProfileLevelId(params2);

  	// Compare H264 profiles, but not levels.
  	return Boolean(
  		profile_level_id_1 &&
  		profile_level_id_2 &&
  		profile_level_id_1.profile === profile_level_id_2.profile
  	);
  };

  /**
   * Generate codec parameters that will be used as answer in an SDP negotiation
   * based on local supported parameters and remote offered parameters. Both
   * local_supported_params and remote_offered_params represent sendrecv media
   * descriptions, i.e they are a mix of both encode and decode capabilities. In
   * theory, when the profile in local_supported_params represent a strict superset
   * of the profile in remote_offered_params, we could limit the profile in the
   * answer to the profile in remote_offered_params.
   *
   * However, to simplify the code, each supported H264 profile should be listed
   * explicitly in the list of local supported codecs, even if they are redundant.
   * Then each local codec in the list should be tested one at a time against the
   * remote codec, and only when the profiles are equal should this function be
   * called. Therefore, this function does not need to handle profile intersection,
   * and the profile of local_supported_params and remote_offered_params must be
   * equal before calling this function. The parameters that are used when
   * negotiating are the level part of profile-level-id and level-asymmetry-allowed.
   *
   * @param {Object} [local_supported_params={}]
   * @param {Object} [remote_offered_params={}]
   *
   * @returns {String} Canonical string representation as three hex bytes of the
   *   profile level id, or null if no one of the params have profile-level-id.
   *
   * @throws {TypeError} If Profile mismatch or invalid params.
   */
  exports.generateProfileLevelIdForAnswer = function(
  	local_supported_params = {},
  	remote_offered_params = {}
  )
  {
  	// If both local and remote params do not contain profile-level-id, they are
  	// both using the default profile. In this case, don't return anything.
  	if (
  		!local_supported_params['profile-level-id'] &&
  		!remote_offered_params['profile-level-id']
  	)
  	{
  		debug(
  			'generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params');

  		return null;
  	}

  	// Parse profile-level-ids.
  	const local_profile_level_id =
  		exports.parseSdpProfileLevelId(local_supported_params);
  	const remote_profile_level_id =
  		exports.parseSdpProfileLevelId(remote_offered_params);

  	// The local and remote codec must have valid and equal H264 Profiles.
  	if (!local_profile_level_id)
  		throw new TypeError('invalid local_profile_level_id');

  	if (!remote_profile_level_id)
  		throw new TypeError('invalid remote_profile_level_id');

  	if (local_profile_level_id.profile !== remote_profile_level_id.profile)
  		throw new TypeError('H264 Profile mismatch');

  	// Parse level information.
  	const level_asymmetry_allowed = (
  		isLevelAsymmetryAllowed(local_supported_params) &&
  		isLevelAsymmetryAllowed(remote_offered_params)
  	);

  	const local_level = local_profile_level_id.level;
  	const remote_level = remote_profile_level_id.level;
  	const min_level = minLevel(local_level, remote_level);

  	// Determine answer level. When level asymmetry is not allowed, level upgrade
  	// is not allowed, i.e., the level in the answer must be equal to or lower
  	// than the level in the offer.
  	const answer_level = level_asymmetry_allowed ? local_level : min_level;

  	debug(
  		'generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]',
  		local_profile_level_id.profile, answer_level);

  	// Return the resulting profile-level-id for the answer parameters.
  	return exports.profileLevelIdToString(
  		new ProfileLevelId(local_profile_level_id.profile, answer_level));
  };

  // Convert a string of 8 characters into a byte where the positions containing
  // character c will have their bit set. For example, c = 'x', str = "x1xx0000"
  // will return 0b10110000.
  function byteMaskString(c, str)
  {
  	return (
  		((str[0] === c) << 7) | ((str[1] === c) << 6) | ((str[2] === c) << 5) |
  		((str[3] === c) << 4)	| ((str[4] === c) << 3)	| ((str[5] === c) << 2)	|
  		((str[6] === c) << 1)	| ((str[7] === c) << 0)
  	);
  }

  // Compare H264 levels and handle the level 1b case.
  function isLessLevel(a, b)
  {
  	if (a === Level1_b)
  		return b !== Level1 && b !== Level1_b;

  	if (b === Level1_b)
  		return a !== Level1;

  	return a < b;
  }

  function minLevel(a, b)
  {
  	return isLessLevel(a, b) ? a : b;
  }

  function isLevelAsymmetryAllowed(params = {})
  {
  	const level_asymmetry_allowed = params['level-asymmetry-allowed'];

  	return (
  		level_asymmetry_allowed === 1 ||
  		level_asymmetry_allowed === '1'
  	);
  }
  });
  var h264ProfileLevelId_1 = h264ProfileLevelId.ProfileConstrainedBaseline;
  var h264ProfileLevelId_2 = h264ProfileLevelId.ProfileBaseline;
  var h264ProfileLevelId_3 = h264ProfileLevelId.ProfileMain;
  var h264ProfileLevelId_4 = h264ProfileLevelId.ProfileConstrainedHigh;
  var h264ProfileLevelId_5 = h264ProfileLevelId.ProfileHigh;
  var h264ProfileLevelId_6 = h264ProfileLevelId.Level1_b;
  var h264ProfileLevelId_7 = h264ProfileLevelId.Level1;
  var h264ProfileLevelId_8 = h264ProfileLevelId.Level1_1;
  var h264ProfileLevelId_9 = h264ProfileLevelId.Level1_2;
  var h264ProfileLevelId_10 = h264ProfileLevelId.Level1_3;
  var h264ProfileLevelId_11 = h264ProfileLevelId.Level2;
  var h264ProfileLevelId_12 = h264ProfileLevelId.Level2_1;
  var h264ProfileLevelId_13 = h264ProfileLevelId.Level2_2;
  var h264ProfileLevelId_14 = h264ProfileLevelId.Level3;
  var h264ProfileLevelId_15 = h264ProfileLevelId.Level3_1;
  var h264ProfileLevelId_16 = h264ProfileLevelId.Level3_2;
  var h264ProfileLevelId_17 = h264ProfileLevelId.Level4;
  var h264ProfileLevelId_18 = h264ProfileLevelId.Level4_1;
  var h264ProfileLevelId_19 = h264ProfileLevelId.Level4_2;
  var h264ProfileLevelId_20 = h264ProfileLevelId.Level5;
  var h264ProfileLevelId_21 = h264ProfileLevelId.Level5_1;
  var h264ProfileLevelId_22 = h264ProfileLevelId.Level5_2;
  var h264ProfileLevelId_23 = h264ProfileLevelId.ProfileLevelId;
  var h264ProfileLevelId_24 = h264ProfileLevelId.parseProfileLevelId;
  var h264ProfileLevelId_25 = h264ProfileLevelId.profileLevelIdToString;
  var h264ProfileLevelId_26 = h264ProfileLevelId.parseSdpProfileLevelId;
  var h264ProfileLevelId_27 = h264ProfileLevelId.isSameProfile;
  var h264ProfileLevelId_28 = h264ProfileLevelId.generateProfileLevelIdForAnswer;

  var utils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Clones the given object/array.
   *
   * @param {Object|Array} obj
   *
   * @returns {Object|Array}
   */
  function clone(data) {
      if (typeof data !== 'object')
          return {};
      return JSON.parse(JSON.stringify(data));
  }
  exports.clone = clone;
  /**
   * Generates a random positive integer.
   */
  function generateRandomNumber() {
      return Math.round(Math.random() * 10000000);
  }
  exports.generateRandomNumber = generateRandomNumber;
  });

  unwrapExports(utils);
  var utils_1 = utils.clone;
  var utils_2 = utils.generateRandomNumber;

  var ortc = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const RTP_PROBATOR_MID = 'probator';
  const RTP_PROBATOR_SSRC = 1234;
  const RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;
  /**
   * Validates RtpCapabilities. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCapabilities(caps) {
      if (typeof caps !== 'object')
          throw new TypeError('caps is not an object');
      // codecs is optional. If unset, fill with an empty array.
      if (caps.codecs && !Array.isArray(caps.codecs))
          throw new TypeError('caps.codecs is not an array');
      else if (!caps.codecs)
          caps.codecs = [];
      for (const codec of caps.codecs) {
          validateRtpCodecCapability(codec);
      }
      // headerExtensions is optional. If unset, fill with an empty array.
      if (caps.headerExtensions && !Array.isArray(caps.headerExtensions))
          throw new TypeError('caps.headerExtensions is not an array');
      else if (!caps.headerExtensions)
          caps.headerExtensions = [];
      for (const ext of caps.headerExtensions) {
          validateRtpHeaderExtension(ext);
      }
  }
  exports.validateRtpCapabilities = validateRtpCapabilities;
  /**
   * Validates RtpCodecCapability. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCodecCapability(codec) {
      const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
      if (typeof codec !== 'object')
          throw new TypeError('codec is not an object');
      // mimeType is mandatory.
      if (!codec.mimeType || typeof codec.mimeType !== 'string')
          throw new TypeError('missing codec.mimeType');
      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
      if (!mimeTypeMatch)
          throw new TypeError('invalid codec.mimeType');
      // Just override kind with media component of mimeType.
      codec.kind = mimeTypeMatch[1].toLowerCase();
      // preferredPayloadType is optional.
      if (codec.preferredPayloadType && typeof codec.preferredPayloadType !== 'number')
          throw new TypeError('invalid codec.preferredPayloadType');
      // clockRate is mandatory.
      if (typeof codec.clockRate !== 'number')
          throw new TypeError('missing codec.clockRate');
      // channels is optional. If unset, set it to 1 (just if audio).
      if (codec.kind === 'audio') {
          if (typeof codec.channels !== 'number')
              codec.channels = 1;
      }
      else {
          delete codec.channels;
      }
      // parameters is optional. If unset, set it to an empty object.
      if (!codec.parameters || typeof codec.parameters !== 'object')
          codec.parameters = {};
      for (const key of Object.keys(codec.parameters)) {
          let value = codec.parameters[key];
          if (value === undefined) {
              codec.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number') {
              throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
          }
          // Specific parameters validation.
          if (key === 'apt') {
              if (typeof value !== 'number')
                  throw new TypeError('invalid codec apt parameter');
          }
      }
      // rtcpFeedback is optional. If unset, set it to an empty array.
      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
          codec.rtcpFeedback = [];
      for (const fb of codec.rtcpFeedback) {
          validateRtcpFeedback(fb);
      }
  }
  exports.validateRtpCodecCapability = validateRtpCodecCapability;
  /**
   * Validates RtcpFeedback. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtcpFeedback(fb) {
      if (typeof fb !== 'object')
          throw new TypeError('fb is not an object');
      // type is mandatory.
      if (!fb.type || typeof fb.type !== 'string')
          throw new TypeError('missing fb.type');
      // parameter is optional. If unset set it to an empty string.
      if (!fb.parameter || typeof fb.parameter !== 'string')
          fb.parameter = '';
  }
  exports.validateRtcpFeedback = validateRtcpFeedback;
  /**
   * Validates RtpHeaderExtension. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpHeaderExtension(ext) {
      if (typeof ext !== 'object')
          throw new TypeError('ext is not an object');
      // kind is optional. If unset set it to an empty string.
      if (!ext.kind || typeof ext.kind !== 'string')
          ext.kind = '';
      if (ext.kind !== '' && ext.kind !== 'audio' && ext.kind !== 'video')
          throw new TypeError('invalid ext.kind');
      // uri is mandatory.
      if (!ext.uri || typeof ext.uri !== 'string')
          throw new TypeError('missing ext.uri');
      // preferredId is mandatory.
      if (typeof ext.preferredId !== 'number')
          throw new TypeError('missing ext.preferredId');
      // preferredEncrypt is optional. If unset set it to false.
      if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean')
          throw new TypeError('invalid ext.preferredEncrypt');
      else if (!ext.preferredEncrypt)
          ext.preferredEncrypt = false;
      // direction is optional. If unset set it to sendrecv.
      if (ext.direction && typeof ext.direction !== 'string')
          throw new TypeError('invalid ext.direction');
      else if (!ext.direction)
          ext.direction = 'sendrecv';
  }
  exports.validateRtpHeaderExtension = validateRtpHeaderExtension;
  /**
   * Validates RtpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // mid is optional.
      if (params.mid && typeof params.mid !== 'string')
          throw new TypeError('params.mid is not a string');
      // codecs is mandatory.
      if (!Array.isArray(params.codecs))
          throw new TypeError('missing params.codecs');
      for (const codec of params.codecs) {
          validateRtpCodecParameters(codec);
      }
      // headerExtensions is optional. If unset, fill with an empty array.
      if (params.headerExtensions && !Array.isArray(params.headerExtensions))
          throw new TypeError('params.headerExtensions is not an array');
      else if (!params.headerExtensions)
          params.headerExtensions = [];
      for (const ext of params.headerExtensions) {
          validateRtpHeaderExtensionParameters(ext);
      }
      // encodings is optional. If unset, fill with an empty array.
      if (params.encodings && !Array.isArray(params.encodings))
          throw new TypeError('params.encodings is not an array');
      else if (!params.encodings)
          params.encodings = [];
      for (const encoding of params.encodings) {
          validateRtpEncodingParameters(encoding);
      }
      // rtcp is optional. If unset, fill with an empty object.
      if (params.rtcp && typeof params.rtcp !== 'object')
          throw new TypeError('params.rtcp is not an object');
      else if (!params.rtcp)
          params.rtcp = {};
      validateRtcpParameters(params.rtcp);
  }
  exports.validateRtpParameters = validateRtpParameters;
  /**
   * Validates RtpCodecParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCodecParameters(codec) {
      const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
      if (typeof codec !== 'object')
          throw new TypeError('codec is not an object');
      // mimeType is mandatory.
      if (!codec.mimeType || typeof codec.mimeType !== 'string')
          throw new TypeError('missing codec.mimeType');
      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
      if (!mimeTypeMatch)
          throw new TypeError('invalid codec.mimeType');
      // payloadType is mandatory.
      if (typeof codec.payloadType !== 'number')
          throw new TypeError('missing codec.payloadType');
      // clockRate is mandatory.
      if (typeof codec.clockRate !== 'number')
          throw new TypeError('missing codec.clockRate');
      const kind = mimeTypeMatch[1].toLowerCase();
      // channels is optional. If unset, set it to 1 (just if audio).
      if (kind === 'audio') {
          if (typeof codec.channels !== 'number')
              codec.channels = 1;
      }
      else {
          delete codec.channels;
      }
      // parameters is optional. If unset, set it to an empty object.
      if (!codec.parameters || typeof codec.parameters !== 'object')
          codec.parameters = {};
      for (const key of Object.keys(codec.parameters)) {
          let value = codec.parameters[key];
          if (value === undefined) {
              codec.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number') {
              throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
          }
          // Specific parameters validation.
          if (key === 'apt') {
              if (typeof value !== 'number')
                  throw new TypeError('invalid codec apt parameter');
          }
      }
      // rtcpFeedback is optional. If unset, set it to an empty array.
      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
          codec.rtcpFeedback = [];
      for (const fb of codec.rtcpFeedback) {
          validateRtcpFeedback(fb);
      }
  }
  exports.validateRtpCodecParameters = validateRtpCodecParameters;
  /**
   * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpHeaderExtensionParameters(ext) {
      if (typeof ext !== 'object')
          throw new TypeError('ext is not an object');
      // uri is mandatory.
      if (!ext.uri || typeof ext.uri !== 'string')
          throw new TypeError('missing ext.uri');
      // id is mandatory.
      if (typeof ext.id !== 'number')
          throw new TypeError('missing ext.id');
      // encrypt is optional. If unset set it to false.
      if (ext.encrypt && typeof ext.encrypt !== 'boolean')
          throw new TypeError('invalid ext.encrypt');
      else if (!ext.encrypt)
          ext.encrypt = false;
      // parameters is optional. If unset, set it to an empty object.
      if (!ext.parameters || typeof ext.parameters !== 'object')
          ext.parameters = {};
      for (const key of Object.keys(ext.parameters)) {
          let value = ext.parameters[key];
          if (value === undefined) {
              ext.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number')
              throw new TypeError('invalid header extension parameter');
      }
  }
  exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;
  /**
   * Validates RtpEncodingParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpEncodingParameters(encoding) {
      if (typeof encoding !== 'object')
          throw new TypeError('encoding is not an object');
      // ssrc is optional.
      if (encoding.ssrc && typeof encoding.ssrc !== 'number')
          throw new TypeError('invalid encoding.ssrc');
      // rid is optional.
      if (encoding.rid && typeof encoding.rid !== 'string')
          throw new TypeError('invalid encoding.rid');
      // rtx is optional.
      if (encoding.rtx && typeof encoding.rtx !== 'object') {
          throw new TypeError('invalid encoding.rtx');
      }
      else if (encoding.rtx) {
          // RTX ssrc is mandatory if rtx is present.
          if (typeof encoding.rtx.ssrc !== 'number')
              throw new TypeError('missing encoding.rtx.ssrc');
      }
      // dtx is optional. If unset set it to false.
      if (!encoding.dtx || typeof encoding.dtx !== 'boolean')
          encoding.dtx = false;
      // scalabilityMode is optional.
      if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string')
          throw new TypeError('invalid encoding.scalabilityMode');
  }
  exports.validateRtpEncodingParameters = validateRtpEncodingParameters;
  /**
   * Validates RtcpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtcpParameters(rtcp) {
      if (typeof rtcp !== 'object')
          throw new TypeError('rtcp is not an object');
      // cname is optional.
      if (rtcp.cname && typeof rtcp.cname !== 'string')
          throw new TypeError('invalid rtcp.cname');
      // reducedSize is optional. If unset set it to true.
      if (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean')
          rtcp.reducedSize = true;
  }
  exports.validateRtcpParameters = validateRtcpParameters;
  /**
   * Validates SctpCapabilities. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpCapabilities(caps) {
      if (typeof caps !== 'object')
          throw new TypeError('caps is not an object');
      // numStreams is mandatory.
      if (!caps.numStreams || typeof caps.numStreams !== 'object')
          throw new TypeError('missing caps.numStreams');
      validateNumSctpStreams(caps.numStreams);
  }
  exports.validateSctpCapabilities = validateSctpCapabilities;
  /**
   * Validates NumSctpStreams. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateNumSctpStreams(numStreams) {
      if (typeof numStreams !== 'object')
          throw new TypeError('numStreams is not an object');
      // OS is mandatory.
      if (typeof numStreams.OS !== 'number')
          throw new TypeError('missing numStreams.OS');
      // MIS is mandatory.
      if (typeof numStreams.MIS !== 'number')
          throw new TypeError('missing numStreams.MIS');
  }
  exports.validateNumSctpStreams = validateNumSctpStreams;
  /**
   * Validates SctpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // port is mandatory.
      if (typeof params.port !== 'number')
          throw new TypeError('missing params.port');
      // OS is mandatory.
      if (typeof params.OS !== 'number')
          throw new TypeError('missing params.OS');
      // MIS is mandatory.
      if (typeof params.MIS !== 'number')
          throw new TypeError('missing params.MIS');
      // maxMessageSize is mandatory.
      if (typeof params.maxMessageSize !== 'number')
          throw new TypeError('missing params.maxMessageSize');
  }
  exports.validateSctpParameters = validateSctpParameters;
  /**
   * Validates SctpStreamParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpStreamParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // streamId is mandatory.
      if (typeof params.streamId !== 'number')
          throw new TypeError('missing params.streamId');
      // ordered is optional.
      let orderedGiven = false;
      if (typeof params.ordered === 'boolean')
          orderedGiven = true;
      else
          params.ordered = true;
      // maxPacketLifeTime is optional.
      if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number')
          throw new TypeError('invalid params.maxPacketLifeTime');
      // maxRetransmits is optional.
      if (params.maxRetransmits && typeof params.maxRetransmits !== 'number')
          throw new TypeError('invalid params.maxRetransmits');
      if (params.maxPacketLifeTime && params.maxRetransmits)
          throw new TypeError('cannot provide both maxPacketLifeTime and maxRetransmits');
      if (orderedGiven &&
          params.ordered &&
          (params.maxPacketLifeTime || params.maxRetransmits)) {
          throw new TypeError('cannot be ordered with maxPacketLifeTime or maxRetransmits');
      }
      else if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits)) {
          params.ordered = false;
      }
      // priority is optional.
      if (params.priority && typeof params.priority !== 'string')
          throw new TypeError('invalid params.priority');
      // label is optional.
      if (params.label && typeof params.label !== 'string')
          throw new TypeError('invalid params.label');
      // protocol is optional.
      if (params.protocol && typeof params.protocol !== 'string')
          throw new TypeError('invalid params.protocol');
  }
  exports.validateSctpStreamParameters = validateSctpStreamParameters;
  /**
   * Generate extended RTP capabilities for sending and receiving.
   */
  function getExtendedRtpCapabilities(localCaps, remoteCaps) {
      const extendedRtpCapabilities = {
          codecs: [],
          headerExtensions: []
      };
      // Match media codecs and keep the order preferred by remoteCaps.
      for (const remoteCodec of remoteCaps.codecs || []) {
          if (isRtxCodec(remoteCodec))
              continue;
          const matchingLocalCodec = (localCaps.codecs || [])
              .find((localCodec) => (matchCodecs(localCodec, remoteCodec, { strict: true, modify: true })));
          if (!matchingLocalCodec)
              continue;
          const extendedCodec = {
              mimeType: matchingLocalCodec.mimeType,
              kind: matchingLocalCodec.kind,
              clockRate: matchingLocalCodec.clockRate,
              channels: matchingLocalCodec.channels,
              localPayloadType: matchingLocalCodec.preferredPayloadType,
              localRtxPayloadType: undefined,
              remotePayloadType: remoteCodec.preferredPayloadType,
              remoteRtxPayloadType: undefined,
              localParameters: matchingLocalCodec.parameters,
              remoteParameters: remoteCodec.parameters,
              rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec)
          };
          extendedRtpCapabilities.codecs.push(extendedCodec);
      }
      // Match RTX codecs.
      for (const extendedCodec of extendedRtpCapabilities.codecs) {
          const matchingLocalRtxCodec = localCaps.codecs
              .find((localCodec) => (isRtxCodec(localCodec) &&
              localCodec.parameters.apt === extendedCodec.localPayloadType));
          const matchingRemoteRtxCodec = remoteCaps.codecs
              .find((remoteCodec) => (isRtxCodec(remoteCodec) &&
              remoteCodec.parameters.apt === extendedCodec.remotePayloadType));
          if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {
              extendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;
              extendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;
          }
      }
      // Match header extensions.
      for (const remoteExt of remoteCaps.headerExtensions) {
          const matchingLocalExt = localCaps.headerExtensions
              .find((localExt) => (matchHeaderExtensions(localExt, remoteExt)));
          if (!matchingLocalExt)
              continue;
          const extendedExt = {
              kind: remoteExt.kind,
              uri: remoteExt.uri,
              sendId: matchingLocalExt.preferredId,
              recvId: remoteExt.preferredId,
              encrypt: matchingLocalExt.preferredEncrypt,
              direction: 'sendrecv'
          };
          switch (remoteExt.direction) {
              case 'sendrecv':
                  extendedExt.direction = 'sendrecv';
                  break;
              case 'recvonly':
                  extendedExt.direction = 'sendonly';
                  break;
              case 'sendonly':
                  extendedExt.direction = 'recvonly';
                  break;
              case 'inactive':
                  extendedExt.direction = 'inactive';
                  break;
          }
          extendedRtpCapabilities.headerExtensions.push(extendedExt);
      }
      return extendedRtpCapabilities;
  }
  exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;
  /**
   * Generate RTP capabilities for receiving media based on the given extended
   * RTP capabilities.
   */
  function getRecvRtpCapabilities(extendedRtpCapabilities) {
      const rtpCapabilities = {
          codecs: [],
          headerExtensions: []
      };
      for (const extendedCodec of extendedRtpCapabilities.codecs) {
          const codec = {
              mimeType: extendedCodec.mimeType,
              kind: extendedCodec.kind,
              preferredPayloadType: extendedCodec.remotePayloadType,
              clockRate: extendedCodec.clockRate,
              channels: extendedCodec.channels,
              parameters: extendedCodec.localParameters,
              rtcpFeedback: extendedCodec.rtcpFeedback
          };
          rtpCapabilities.codecs.push(codec);
          // Add RTX codec.
          if (!extendedCodec.remoteRtxPayloadType)
              continue;
          const rtxCodec = {
              mimeType: `${extendedCodec.kind}/rtx`,
              kind: extendedCodec.kind,
              preferredPayloadType: extendedCodec.remoteRtxPayloadType,
              clockRate: extendedCodec.clockRate,
              parameters: {
                  apt: extendedCodec.remotePayloadType
              },
              rtcpFeedback: []
          };
          rtpCapabilities.codecs.push(rtxCodec);
          // TODO: In the future, we need to add FEC, CN, etc, codecs.
      }
      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
          // Ignore RTP extensions not valid for receiving.
          if (extendedExtension.direction !== 'sendrecv' &&
              extendedExtension.direction !== 'recvonly') {
              continue;
          }
          const ext = {
              kind: extendedExtension.kind,
              uri: extendedExtension.uri,
              preferredId: extendedExtension.recvId,
              preferredEncrypt: extendedExtension.encrypt,
              direction: extendedExtension.direction
          };
          rtpCapabilities.headerExtensions.push(ext);
      }
      return rtpCapabilities;
  }
  exports.getRecvRtpCapabilities = getRecvRtpCapabilities;
  /**
   * Generate RTP parameters of the given kind for sending media.
   * NOTE: mid, encodings and rtcp fields are left empty.
   */
  function getSendingRtpParameters(kind, extendedRtpCapabilities) {
      const rtpParameters = {
          mid: undefined,
          codecs: [],
          headerExtensions: [],
          encodings: [],
          rtcp: {}
      };
      for (const extendedCodec of extendedRtpCapabilities.codecs) {
          if (extendedCodec.kind !== kind)
              continue;
          const codec = {
              mimeType: extendedCodec.mimeType,
              payloadType: extendedCodec.localPayloadType,
              clockRate: extendedCodec.clockRate,
              channels: extendedCodec.channels,
              parameters: extendedCodec.localParameters,
              rtcpFeedback: extendedCodec.rtcpFeedback
          };
          rtpParameters.codecs.push(codec);
          // Add RTX codec.
          if (extendedCodec.localRtxPayloadType) {
              const rtxCodec = {
                  mimeType: `${extendedCodec.kind}/rtx`,
                  payloadType: extendedCodec.localRtxPayloadType,
                  clockRate: extendedCodec.clockRate,
                  parameters: {
                      apt: extendedCodec.localPayloadType
                  },
                  rtcpFeedback: []
              };
              rtpParameters.codecs.push(rtxCodec);
          }
      }
      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
          // Ignore RTP extensions of a different kind and those not valid for sending.
          if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
              (extendedExtension.direction !== 'sendrecv' &&
                  extendedExtension.direction !== 'sendonly')) {
              continue;
          }
          const ext = {
              uri: extendedExtension.uri,
              id: extendedExtension.sendId,
              encrypt: extendedExtension.encrypt,
              parameters: {}
          };
          rtpParameters.headerExtensions.push(ext);
      }
      return rtpParameters;
  }
  exports.getSendingRtpParameters = getSendingRtpParameters;
  /**
   * Generate RTP parameters of the given kind suitable for the remote SDP answer.
   */
  function getSendingRemoteRtpParameters(kind, extendedRtpCapabilities) {
      const rtpParameters = {
          mid: undefined,
          codecs: [],
          headerExtensions: [],
          encodings: [],
          rtcp: {}
      };
      for (const extendedCodec of extendedRtpCapabilities.codecs) {
          if (extendedCodec.kind !== kind)
              continue;
          const codec = {
              mimeType: extendedCodec.mimeType,
              payloadType: extendedCodec.localPayloadType,
              clockRate: extendedCodec.clockRate,
              channels: extendedCodec.channels,
              parameters: extendedCodec.remoteParameters,
              rtcpFeedback: extendedCodec.rtcpFeedback
          };
          rtpParameters.codecs.push(codec);
          // Add RTX codec.
          if (extendedCodec.localRtxPayloadType) {
              const rtxCodec = {
                  mimeType: `${extendedCodec.kind}/rtx`,
                  payloadType: extendedCodec.localRtxPayloadType,
                  clockRate: extendedCodec.clockRate,
                  parameters: {
                      apt: extendedCodec.localPayloadType
                  },
                  rtcpFeedback: []
              };
              rtpParameters.codecs.push(rtxCodec);
          }
      }
      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
          // Ignore RTP extensions of a different kind and those not valid for sending.
          if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
              (extendedExtension.direction !== 'sendrecv' &&
                  extendedExtension.direction !== 'sendonly')) {
              continue;
          }
          const ext = {
              uri: extendedExtension.uri,
              id: extendedExtension.sendId,
              encrypt: extendedExtension.encrypt,
              parameters: {}
          };
          rtpParameters.headerExtensions.push(ext);
      }
      // Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.
      if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'))) {
          for (const codec of rtpParameters.codecs) {
              codec.rtcpFeedback = (codec.rtcpFeedback || [])
                  .filter((fb) => fb.type !== 'goog-remb');
          }
      }
      else if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'))) {
          for (const codec of rtpParameters.codecs) {
              codec.rtcpFeedback = (codec.rtcpFeedback || [])
                  .filter((fb) => fb.type !== 'transport-cc');
          }
      }
      else {
          for (const codec of rtpParameters.codecs) {
              codec.rtcpFeedback = (codec.rtcpFeedback || [])
                  .filter((fb) => (fb.type !== 'transport-cc' &&
                  fb.type !== 'goog-remb'));
          }
      }
      return rtpParameters;
  }
  exports.getSendingRemoteRtpParameters = getSendingRemoteRtpParameters;
  /**
   * Reduce given codecs by returning an array of codecs "compatible" with the
   * given capability codec. If no capability codec is given, take the first
   * one(s).
   *
   * Given codecs must be generated by ortc.getSendingRtpParameters() or
   * ortc.getSendingRemoteRtpParameters().
   *
   * The returned array of codecs also include a RTX codec if available.
   */
  function reduceCodecs(codecs, capCodec) {
      const filteredCodecs = [];
      // If no capability codec is given, take the first one (and RTX).
      if (!capCodec) {
          filteredCodecs.push(codecs[0]);
          if (isRtxCodec(codecs[1]))
              filteredCodecs.push(codecs[1]);
      }
      // Otherwise look for a compatible set of codecs.
      else {
          for (let idx = 0; idx < codecs.length; ++idx) {
              if (matchCodecs(codecs[idx], capCodec)) {
                  filteredCodecs.push(codecs[idx]);
                  if (isRtxCodec(codecs[idx + 1]))
                      filteredCodecs.push(codecs[idx + 1]);
                  break;
              }
          }
          if (filteredCodecs.length === 0)
              throw new TypeError('no matching codec found');
      }
      return filteredCodecs;
  }
  exports.reduceCodecs = reduceCodecs;
  /**
   * Create RTP parameters for a Consumer for the RTP probator.
   */
  function generateProbatorRtpParameters(videoRtpParameters) {
      // Clone given reference video RTP parameters.
      videoRtpParameters = utils.clone(videoRtpParameters);
      // This may throw.
      validateRtpParameters(videoRtpParameters);
      const rtpParameters = {
          mid: RTP_PROBATOR_MID,
          codecs: [],
          headerExtensions: [],
          encodings: [{ ssrc: RTP_PROBATOR_SSRC }],
          rtcp: { cname: 'probator' }
      };
      rtpParameters.codecs.push(videoRtpParameters.codecs[0]);
      rtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;
      rtpParameters.headerExtensions = videoRtpParameters.headerExtensions;
      return rtpParameters;
  }
  exports.generateProbatorRtpParameters = generateProbatorRtpParameters;
  /**
   * Whether media can be sent based on the given RTP capabilities.
   */
  function canSend(kind, extendedRtpCapabilities) {
      return extendedRtpCapabilities.codecs.
          some((codec) => codec.kind === kind);
  }
  exports.canSend = canSend;
  /**
   * Whether the given RTP parameters can be received with the given RTP
   * capabilities.
   */
  function canReceive(rtpParameters, extendedRtpCapabilities) {
      // This may throw.
      validateRtpParameters(rtpParameters);
      if (rtpParameters.codecs.length === 0)
          return false;
      const firstMediaCodec = rtpParameters.codecs[0];
      return extendedRtpCapabilities.codecs
          .some((codec) => codec.remotePayloadType === firstMediaCodec.payloadType);
  }
  exports.canReceive = canReceive;
  function isRtxCodec(codec) {
      if (!codec)
          return false;
      return /.+\/rtx$/i.test(codec.mimeType);
  }
  function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {
      const aMimeType = aCodec.mimeType.toLowerCase();
      const bMimeType = bCodec.mimeType.toLowerCase();
      if (aMimeType !== bMimeType)
          return false;
      if (aCodec.clockRate !== bCodec.clockRate)
          return false;
      if (aCodec.channels !== bCodec.channels)
          return false;
      // Per codec special checks.
      switch (aMimeType) {
          case 'video/h264':
              {
                  const aPacketizationMode = aCodec.parameters['packetization-mode'] || 0;
                  const bPacketizationMode = bCodec.parameters['packetization-mode'] || 0;
                  if (aPacketizationMode !== bPacketizationMode)
                      return false;
                  // If strict matching check profile-level-id.
                  if (strict) {
                      if (!h264ProfileLevelId.isSameProfile(aCodec.parameters, bCodec.parameters))
                          return false;
                      let selectedProfileLevelId;
                      try {
                          selectedProfileLevelId =
                              h264ProfileLevelId.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);
                      }
                      catch (error) {
                          return false;
                      }
                      if (modify) {
                          if (selectedProfileLevelId)
                              aCodec.parameters['profile-level-id'] = selectedProfileLevelId;
                          else
                              delete aCodec.parameters['profile-level-id'];
                      }
                  }
                  break;
              }
          case 'video/vp9':
              {
                  // If strict matching check profile-id.
                  if (strict) {
                      const aProfileId = aCodec.parameters['profile-id'] || 0;
                      const bProfileId = bCodec.parameters['profile-id'] || 0;
                      if (aProfileId !== bProfileId)
                          return false;
                  }
                  break;
              }
      }
      return true;
  }
  function matchHeaderExtensions(aExt, bExt) {
      if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind)
          return false;
      if (aExt.uri !== bExt.uri)
          return false;
      return true;
  }
  function reduceRtcpFeedback(codecA, codecB) {
      const reducedRtcpFeedback = [];
      for (const aFb of codecA.rtcpFeedback || []) {
          const matchingBFb = (codecB.rtcpFeedback || [])
              .find((bFb) => (bFb.type === aFb.type &&
              (bFb.parameter === aFb.parameter || (!bFb.parameter && !aFb.parameter))));
          if (matchingBFb)
              reducedRtcpFeedback.push(matchingBFb);
      }
      return reducedRtcpFeedback;
  }
  });

  unwrapExports(ortc);
  var ortc_1 = ortc.validateRtpCapabilities;
  var ortc_2 = ortc.validateRtpCodecCapability;
  var ortc_3 = ortc.validateRtcpFeedback;
  var ortc_4 = ortc.validateRtpHeaderExtension;
  var ortc_5 = ortc.validateRtpParameters;
  var ortc_6 = ortc.validateRtpCodecParameters;
  var ortc_7 = ortc.validateRtpHeaderExtensionParameters;
  var ortc_8 = ortc.validateRtpEncodingParameters;
  var ortc_9 = ortc.validateRtcpParameters;
  var ortc_10 = ortc.validateSctpCapabilities;
  var ortc_11 = ortc.validateNumSctpStreams;
  var ortc_12 = ortc.validateSctpParameters;
  var ortc_13 = ortc.validateSctpStreamParameters;
  var ortc_14 = ortc.getExtendedRtpCapabilities;
  var ortc_15 = ortc.getRecvRtpCapabilities;
  var ortc_16 = ortc.getSendingRtpParameters;
  var ortc_17 = ortc.getSendingRemoteRtpParameters;
  var ortc_18 = ortc.reduceCodecs;
  var ortc_19 = ortc.generateProbatorRtpParameters;
  var ortc_20 = ortc.canSend;
  var ortc_21 = ortc.canReceive;

  var lib$3 = createCommonjsModule(function (module, exports) {
  var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  class AwaitQueue {
      constructor({ ClosedErrorClass, StoppedErrorClass } = {
          ClosedErrorClass: Error,
          StoppedErrorClass: Error
      }) {
          // Closed flag.
          this.closed = false;
          // Queue of pending tasks.
          this.pendingTasks = [];
          // Error class used when rejecting a task due to AwaitQueue being closed.
          this.ClosedErrorClass = Error;
          // Error class used when rejecting a task due to AwaitQueue being stopped.
          this.StoppedErrorClass = Error;
          this.ClosedErrorClass = ClosedErrorClass;
          this.StoppedErrorClass = StoppedErrorClass;
      }
      /**
       * The number of ongoing enqueued tasks.
       */
      get size() {
          return this.pendingTasks.length;
      }
      /**
       * Closes the AwaitQueue. Pending tasks will be rejected with ClosedErrorClass
       * error.
       */
      close() {
          if (this.closed)
              return;
          this.closed = true;
          for (const pendingTask of this.pendingTasks) {
              pendingTask.stopped = true;
              pendingTask.reject(new this.ClosedErrorClass('AwaitQueue closed'));
          }
          // Enpty the pending tasks array.
          this.pendingTasks.length = 0;
      }
      /**
       * Accepts a task as argument (and an optional task name) and enqueues it after
       * pending tasks. Once processed, the push() method resolves (or rejects) with
       * the result returned by the given task.
       *
       * The given task must return a Promise or directly a value.
       */
      push(task, name) {
          return __awaiter(this, void 0, void 0, function* () {
              if (this.closed)
                  throw new this.ClosedErrorClass('AwaitQueue closed');
              if (typeof task !== 'function')
                  throw new TypeError('given task is not a function');
              if (!task.name && name) {
                  try {
                      Object.defineProperty(task, 'name', { value: name });
                  }
                  catch (error) { }
              }
              return new Promise((resolve, reject) => {
                  const pendingTask = {
                      task,
                      name,
                      resolve,
                      reject,
                      stopped: false
                  };
                  // Append task to the queue.
                  this.pendingTasks.push(pendingTask);
                  // And run it if this is the only task in the queue.
                  if (this.pendingTasks.length === 1)
                      this.next();
              });
          });
      }
      /**
       * Make ongoing pending tasks reject with the given StoppedErrorClass error.
       * The AwaitQueue instance is still usable for future tasks added via push()
       * method.
       */
      stop() {
          if (this.closed)
              return;
          for (const pendingTask of this.pendingTasks) {
              pendingTask.stopped = true;
              pendingTask.reject(new this.StoppedErrorClass('AwaitQueue stopped'));
          }
          // Enpty the pending tasks array.
          this.pendingTasks.length = 0;
      }
      dump() {
          return this.pendingTasks.map((pendingTask) => {
              return {
                  task: pendingTask.task,
                  name: pendingTask.name,
                  stopped: pendingTask.stopped
              };
          });
      }
      next() {
          return __awaiter(this, void 0, void 0, function* () {
              // Take the first pending task.
              const pendingTask = this.pendingTasks[0];
              if (!pendingTask)
                  return;
              // Execute it.
              yield this.executeTask(pendingTask);
              // Remove the first pending task (the completed one) from the queue.
              this.pendingTasks.shift();
              // And continue.
              this.next();
          });
      }
      executeTask(pendingTask) {
          return __awaiter(this, void 0, void 0, function* () {
              // If the task is stopped, ignore it.
              if (pendingTask.stopped)
                  return;
              try {
                  const result = yield pendingTask.task();
                  // If the task is stopped, ignore it.
                  if (pendingTask.stopped)
                      return;
                  // Resolve the task with the returned result (if any).
                  pendingTask.resolve(result);
              }
              catch (error) {
                  // If the task is stopped, ignore it.
                  if (pendingTask.stopped)
                      return;
                  // Reject the task with its own error.
                  pendingTask.reject(error);
              }
          });
      }
  }
  exports.AwaitQueue = AwaitQueue;
  });

  unwrapExports(lib$3);
  var lib_1$2 = lib$3.AwaitQueue;

  var EnhancedEventEmitter_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1.Logger('EnhancedEventEmitter');
  class EnhancedEventEmitter extends events.EventEmitter {
      constructor() {
          super();
          this.setMaxListeners(Infinity);
      }
      safeEmit(event, ...args) {
          const numListeners = this.listenerCount(event);
          try {
              return this.emit(event, ...args);
          }
          catch (error) {
              logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);
              return Boolean(numListeners);
          }
      }
      async safeEmitAsPromise(event, ...args) {
          return new Promise((resolve, reject) => (this.safeEmit(event, ...args, resolve, reject)));
      }
  }
  exports.EnhancedEventEmitter = EnhancedEventEmitter;
  });

  unwrapExports(EnhancedEventEmitter_1);
  var EnhancedEventEmitter_2 = EnhancedEventEmitter_1.EnhancedEventEmitter;

  var Producer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  const logger = new Logger_1.Logger('Producer');
  class Producer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits transportclose
       * @emits trackended
       * @emits @replacetrack - (track: MediaStreamTrack | null)
       * @emits @setmaxspatiallayer - (spatialLayer: string)
       * @emits @setrtpencodingparameters - (params: any)
       * @emits @getstats
       * @emits @close
       */
      constructor({ id, localId, rtpSender, track, rtpParameters, stopTracks, disableTrackOnPause, zeroRtpOnPause, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          logger.debug('constructor()');
          this._id = id;
          this._localId = localId;
          this._rtpSender = rtpSender;
          this._track = track;
          this._kind = track.kind;
          this._rtpParameters = rtpParameters;
          this._paused = disableTrackOnPause ? !track.enabled : false;
          this._maxSpatialLayer = undefined;
          this._stopTracks = stopTracks;
          this._disableTrackOnPause = disableTrackOnPause;
          this._zeroRtpOnPause = zeroRtpOnPause;
          this._appData = appData;
          this._onTrackEnded = this._onTrackEnded.bind(this);
          // NOTE: Minor issue. If zeroRtpOnPause is true, we cannot emit the
          // '@replacetrack' event here, so RTCRtpSender.track won't be null.
          this._handleTrack();
      }
      /**
       * Producer id.
       */
      get id() {
          return this._id;
      }
      /**
       * Local id.
       */
      get localId() {
          return this._localId;
      }
      /**
       * Whether the Producer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Media kind.
       */
      get kind() {
          return this._kind;
      }
      /**
       * Associated RTCRtpSender.
       */
      get rtpSender() {
          return this._rtpSender;
      }
      /**
       * The associated track.
       */
      get track() {
          return this._track;
      }
      /**
       * RTP parameters.
       */
      get rtpParameters() {
          return this._rtpParameters;
      }
      /**
       * Whether the Producer is paused.
       */
      get paused() {
          return this._paused;
      }
      /**
       * Max spatial layer.
       *
       * @type {Number | undefined}
       */
      get maxSpatialLayer() {
          return this._maxSpatialLayer;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Closes the Producer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          this._destroyTrack();
          this.emit('@close');
      }
      /**
       * Transport was closed.
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          this._destroyTrack();
          this.safeEmit('transportclose');
      }
      /**
       * Get associated RTCRtpSender stats.
       */
      async getStats() {
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          return this.safeEmitAsPromise('@getstats');
      }
      /**
       * Pauses sending media.
       */
      pause() {
          logger.debug('pause()');
          if (this._closed) {
              logger.error('pause() | Producer closed');
              return;
          }
          this._paused = true;
          if (this._track && this._disableTrackOnPause) {
              this._track.enabled = false;
          }
          if (this._zeroRtpOnPause) {
              this.safeEmitAsPromise('@replacetrack', null)
                  .catch(() => { });
          }
      }
      /**
       * Resumes sending media.
       */
      resume() {
          logger.debug('resume()');
          if (this._closed) {
              logger.error('resume() | Producer closed');
              return;
          }
          this._paused = false;
          if (this._track && this._disableTrackOnPause) {
              this._track.enabled = true;
          }
          if (this._zeroRtpOnPause) {
              this.safeEmitAsPromise('@replacetrack', this._track)
                  .catch(() => { });
          }
      }
      /**
       * Replaces the current track with a new one or null.
       */
      async replaceTrack({ track }) {
          logger.debug('replaceTrack() [track:%o]', track);
          if (this._closed) {
              // This must be done here. Otherwise there is no chance to stop the given
              // track.
              if (track && this._stopTracks) {
                  try {
                      track.stop();
                  }
                  catch (error) { }
              }
              throw new errors.InvalidStateError('closed');
          }
          else if (track && track.readyState === 'ended') {
              throw new errors.InvalidStateError('track ended');
          }
          // Do nothing if this is the same track as the current handled one.
          if (track === this._track) {
              logger.debug('replaceTrack() | same track, ignored');
              return;
          }
          if (!this._zeroRtpOnPause || !this._paused) {
              await this.safeEmitAsPromise('@replacetrack', track);
          }
          // Destroy the previous track.
          this._destroyTrack();
          // Set the new track.
          this._track = track;
          // If this Producer was paused/resumed and the state of the new
          // track does not match, fix it.
          if (this._track && this._disableTrackOnPause) {
              if (!this._paused)
                  this._track.enabled = true;
              else if (this._paused)
                  this._track.enabled = false;
          }
          // Handle the effective track.
          this._handleTrack();
      }
      /**
       * Sets the video max spatial layer to be sent.
       */
      async setMaxSpatialLayer(spatialLayer) {
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (this._kind !== 'video')
              throw new errors.UnsupportedError('not a video Producer');
          else if (typeof spatialLayer !== 'number')
              throw new TypeError('invalid spatialLayer');
          if (spatialLayer === this._maxSpatialLayer)
              return;
          await this.safeEmitAsPromise('@setmaxspatiallayer', spatialLayer);
          this._maxSpatialLayer = spatialLayer;
      }
      /**
       * Sets the DSCP value.
       */
      async setRtpEncodingParameters(params) {
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (typeof params !== 'object')
              throw new TypeError('invalid params');
          await this.safeEmitAsPromise('@setrtpencodingparameters', params);
      }
      _onTrackEnded() {
          logger.debug('track "ended" event');
          this.safeEmit('trackended');
      }
      _handleTrack() {
          if (!this._track)
              return;
          this._track.addEventListener('ended', this._onTrackEnded);
      }
      _destroyTrack() {
          if (!this._track)
              return;
          try {
              this._track.removeEventListener('ended', this._onTrackEnded);
              // Just stop the track unless the app set stopTracks: false.
              if (this._stopTracks)
                  this._track.stop();
          }
          catch (error) { }
      }
  }
  exports.Producer = Producer;
  });

  unwrapExports(Producer_1);
  var Producer_2 = Producer_1.Producer;

  var Consumer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  const logger = new Logger_1.Logger('Consumer');
  class Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits transportclose
       * @emits trackended
       * @emits @getstats
       * @emits @close
       */
      constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          logger.debug('constructor()');
          this._id = id;
          this._localId = localId;
          this._producerId = producerId;
          this._rtpReceiver = rtpReceiver;
          this._track = track;
          this._rtpParameters = rtpParameters;
          this._paused = !track.enabled;
          this._appData = appData;
          this._onTrackEnded = this._onTrackEnded.bind(this);
          this._handleTrack();
      }
      /**
       * Consumer id.
       */
      get id() {
          return this._id;
      }
      /**
       * Local id.
       */
      get localId() {
          return this._localId;
      }
      /**
       * Associated Producer id.
       */
      get producerId() {
          return this._producerId;
      }
      /**
       * Whether the Consumer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Media kind.
       */
      get kind() {
          return this._track.kind;
      }
      /**
       * Associated RTCRtpReceiver.
       */
      get rtpReceiver() {
          return this._rtpReceiver;
      }
      /**
       * The associated track.
       */
      get track() {
          return this._track;
      }
      /**
       * RTP parameters.
       */
      get rtpParameters() {
          return this._rtpParameters;
      }
      /**
       * Whether the Consumer is paused.
       */
      get paused() {
          return this._paused;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Closes the Consumer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          this._destroyTrack();
          this.emit('@close');
      }
      /**
       * Transport was closed.
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          this._destroyTrack();
          this.safeEmit('transportclose');
      }
      /**
       * Get associated RTCRtpReceiver stats.
       */
      async getStats() {
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          return this.safeEmitAsPromise('@getstats');
      }
      /**
       * Pauses receiving media.
       */
      pause() {
          logger.debug('pause()');
          if (this._closed) {
              logger.error('pause() | Consumer closed');
              return;
          }
          this._paused = true;
          this._track.enabled = false;
      }
      /**
       * Resumes receiving media.
       */
      resume() {
          logger.debug('resume()');
          if (this._closed) {
              logger.error('resume() | Consumer closed');
              return;
          }
          this._paused = false;
          this._track.enabled = true;
      }
      _onTrackEnded() {
          logger.debug('track "ended" event');
          this.safeEmit('trackended');
      }
      _handleTrack() {
          this._track.addEventListener('ended', this._onTrackEnded);
      }
      _destroyTrack() {
          try {
              this._track.removeEventListener('ended', this._onTrackEnded);
              this._track.stop();
          }
          catch (error) { }
      }
  }
  exports.Consumer = Consumer;
  });

  unwrapExports(Consumer_1);
  var Consumer_2 = Consumer_1.Consumer;

  var DataProducer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  const logger = new Logger_1.Logger('DataProducer');
  class DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits transportclose
       * @emits open
       * @emits error - (error: Error)
       * @emits close
       * @emits bufferedamountlow
       * @emits @close
       */
      constructor({ id, dataChannel, sctpStreamParameters, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          logger.debug('constructor()');
          this._id = id;
          this._dataChannel = dataChannel;
          this._sctpStreamParameters = sctpStreamParameters;
          this._appData = appData;
          this._handleDataChannel();
      }
      /**
       * DataProducer id.
       */
      get id() {
          return this._id;
      }
      /**
       * Whether the DataProducer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * SCTP stream parameters.
       */
      get sctpStreamParameters() {
          return this._sctpStreamParameters;
      }
      /**
       * DataChannel readyState.
       */
      get readyState() {
          return this._dataChannel.readyState;
      }
      /**
       * DataChannel label.
       */
      get label() {
          return this._dataChannel.label;
      }
      /**
       * DataChannel protocol.
       */
      get protocol() {
          return this._dataChannel.protocol;
      }
      /**
       * DataChannel bufferedAmount.
       */
      get bufferedAmount() {
          return this._dataChannel.bufferedAmount;
      }
      /**
       * DataChannel bufferedAmountLowThreshold.
       */
      get bufferedAmountLowThreshold() {
          return this._dataChannel.bufferedAmountLowThreshold;
      }
      /**
       * Set DataChannel bufferedAmountLowThreshold.
       */
      set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {
          this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Closes the DataProducer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          this._dataChannel.close();
          this.emit('@close');
      }
      /**
       * Transport was closed.
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          this._dataChannel.close();
          this.safeEmit('transportclose');
      }
      /**
       * Send a message.
       *
       * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.
       */
      send(data) {
          logger.debug('send()');
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          this._dataChannel.send(data);
      }
      _handleDataChannel() {
          this._dataChannel.addEventListener('open', () => {
              if (this._closed)
                  return;
              logger.debug('DataChannel "open" event');
              this.safeEmit('open');
          });
          this._dataChannel.addEventListener('error', (event) => {
              if (this._closed)
                  return;
              let { error } = event;
              if (!error)
                  error = new Error('unknown DataChannel error');
              if (error.errorDetail === 'sctp-failure') {
                  logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
              }
              else {
                  logger.error('DataChannel "error" event: %o', error);
              }
              this.safeEmit('error', error);
          });
          this._dataChannel.addEventListener('close', () => {
              if (this._closed)
                  return;
              logger.warn('DataChannel "close" event');
              this._closed = true;
              this.emit('@close');
              this.safeEmit('close');
          });
          this._dataChannel.addEventListener('message', () => {
              if (this._closed)
                  return;
              logger.warn('DataChannel "message" event in a DataProducer, message discarded');
          });
          this._dataChannel.addEventListener('bufferedamountlow', () => {
              if (this._closed)
                  return;
              this.safeEmit('bufferedamountlow');
          });
      }
  }
  exports.DataProducer = DataProducer;
  });

  unwrapExports(DataProducer_1);
  var DataProducer_2 = DataProducer_1.DataProducer;

  var DataConsumer_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1.Logger('DataConsumer');
  class DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits transportclose
       * @emits open
       * @emits error - (error: Error)
       * @emits close
       * @emits message - (message: any)
       * @emits @close
       */
      constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          logger.debug('constructor()');
          this._id = id;
          this._dataProducerId = dataProducerId;
          this._dataChannel = dataChannel;
          this._sctpStreamParameters = sctpStreamParameters;
          this._appData = appData;
          this._handleDataChannel();
      }
      /**
       * DataConsumer id.
       */
      get id() {
          return this._id;
      }
      /**
       * Associated DataProducer id.
       */
      get dataProducerId() {
          return this._dataProducerId;
      }
      /**
       * Whether the DataConsumer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * SCTP stream parameters.
       */
      get sctpStreamParameters() {
          return this._sctpStreamParameters;
      }
      /**
       * DataChannel readyState.
       */
      get readyState() {
          return this._dataChannel.readyState;
      }
      /**
       * DataChannel label.
       */
      get label() {
          return this._dataChannel.label;
      }
      /**
       * DataChannel protocol.
       */
      get protocol() {
          return this._dataChannel.protocol;
      }
      /**
       * DataChannel binaryType.
       */
      get binaryType() {
          return this._dataChannel.binaryType;
      }
      /**
       * Set DataChannel binaryType.
       */
      set binaryType(binaryType) {
          this._dataChannel.binaryType = binaryType;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Closes the DataConsumer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          this._dataChannel.close();
          this.emit('@close');
      }
      /**
       * Transport was closed.
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          this._dataChannel.close();
          this.safeEmit('transportclose');
      }
      _handleDataChannel() {
          this._dataChannel.addEventListener('open', () => {
              if (this._closed)
                  return;
              logger.debug('DataChannel "open" event');
              this.safeEmit('open');
          });
          this._dataChannel.addEventListener('error', (event) => {
              if (this._closed)
                  return;
              let { error } = event;
              if (!error)
                  error = new Error('unknown DataChannel error');
              if (error.errorDetail === 'sctp-failure') {
                  logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
              }
              else {
                  logger.error('DataChannel "error" event: %o', error);
              }
              this.safeEmit('error', error);
          });
          this._dataChannel.addEventListener('close', () => {
              if (this._closed)
                  return;
              logger.warn('DataChannel "close" event');
              this._closed = true;
              this.emit('@close');
              this.safeEmit('close');
          });
          this._dataChannel.addEventListener('message', (event) => {
              if (this._closed)
                  return;
              this.safeEmit('message', event.data);
          });
      }
  }
  exports.DataConsumer = DataConsumer;
  });

  unwrapExports(DataConsumer_1);
  var DataConsumer_2 = DataConsumer_1.DataConsumer;

  var Transport_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });










  const logger = new Logger_1.Logger('Transport');
  class Transport extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits connect - (transportLocalParameters: any, callback: Function, errback: Function)
       * @emits connectionstatechange - (connectionState: ConnectionState)
       * @emits produce - (producerLocalParameters: any, callback: Function, errback: Function)
       * @emits producedata - (dataProducerLocalParameters: any, callback: Function, errback: Function)
       */
      constructor({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, handlerFactory, extendedRtpCapabilities, canProduceByKind }) {
          super();
          // Closed flag.
          this._closed = false;
          // Transport connection state.
          this._connectionState = 'new';
          // Map of Producers indexed by id.
          this._producers = new Map();
          // Map of Consumers indexed by id.
          this._consumers = new Map();
          // Map of DataProducers indexed by id.
          this._dataProducers = new Map();
          // Map of DataConsumers indexed by id.
          this._dataConsumers = new Map();
          // Whether the Consumer for RTP probation has been created.
          this._probatorConsumerCreated = false;
          // AwaitQueue instance to make async tasks happen sequentially.
          this._awaitQueue = new lib$3.AwaitQueue({ ClosedErrorClass: errors.InvalidStateError });
          logger.debug('constructor() [id:%s, direction:%s]', id, direction);
          this._id = id;
          this._direction = direction;
          this._extendedRtpCapabilities = extendedRtpCapabilities;
          this._canProduceByKind = canProduceByKind;
          this._maxSctpMessageSize =
              sctpParameters ? sctpParameters.maxMessageSize : null;
          // Clone and sanitize additionalSettings.
          additionalSettings = utils.clone(additionalSettings);
          delete additionalSettings.iceServers;
          delete additionalSettings.iceTransportPolicy;
          delete additionalSettings.bundlePolicy;
          delete additionalSettings.rtcpMuxPolicy;
          delete additionalSettings.sdpSemantics;
          this._handler = handlerFactory();
          this._handler.run({
              direction,
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              iceServers,
              iceTransportPolicy,
              additionalSettings,
              proprietaryConstraints,
              extendedRtpCapabilities
          });
          this._appData = appData;
          this._handleHandler();
      }
      /**
       * Transport id.
       */
      get id() {
          return this._id;
      }
      /**
       * Whether the Transport is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Transport direction.
       */
      get direction() {
          return this._direction;
      }
      /**
       * RTC handler instance.
       */
      get handler() {
          return this._handler;
      }
      /**
       * Connection state.
       */
      get connectionState() {
          return this._connectionState;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Close the Transport.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Close the AwaitQueue.
          this._awaitQueue.close();
          // Close the handler.
          this._handler.close();
          // Close all Producers.
          for (const producer of this._producers.values()) {
              producer.transportClosed();
          }
          this._producers.clear();
          // Close all Consumers.
          for (const consumer of this._consumers.values()) {
              consumer.transportClosed();
          }
          this._consumers.clear();
          // Close all DataProducers.
          for (const dataProducer of this._dataProducers.values()) {
              dataProducer.transportClosed();
          }
          this._dataProducers.clear();
          // Close all DataConsumers.
          for (const dataConsumer of this._dataConsumers.values()) {
              dataConsumer.transportClosed();
          }
          this._dataConsumers.clear();
      }
      /**
       * Get associated Transport (RTCPeerConnection) stats.
       *
       * @returns {RTCStatsReport}
       */
      async getStats() {
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          return this._handler.getTransportStats();
      }
      /**
       * Restart ICE connection.
       */
      async restartIce({ iceParameters }) {
          logger.debug('restartIce()');
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (!iceParameters)
              throw new TypeError('missing iceParameters');
          // Enqueue command.
          return this._awaitQueue.push(async () => this._handler.restartIce(iceParameters));
      }
      /**
       * Update ICE servers.
       */
      async updateIceServers({ iceServers } = {}) {
          logger.debug('updateIceServers()');
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (!Array.isArray(iceServers))
              throw new TypeError('missing iceServers');
          // Enqueue command.
          return this._awaitQueue.push(async () => this._handler.updateIceServers(iceServers));
      }
      /**
       * Create a Producer.
       */
      async produce({ track, encodings, codecOptions, codec, stopTracks = true, disableTrackOnPause = true, zeroRtpOnPause = false, appData = {} } = {}) {
          logger.debug('produce() [track:%o]', track);
          if (!track)
              throw new TypeError('missing track');
          else if (this._direction !== 'send')
              throw new errors.UnsupportedError('not a sending Transport');
          else if (!this._canProduceByKind[track.kind])
              throw new errors.UnsupportedError(`cannot produce ${track.kind}`);
          else if (track.readyState === 'ended')
              throw new errors.InvalidStateError('track ended');
          else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
              throw new TypeError('no "connect" listener set into this transport');
          else if (this.listenerCount('produce') === 0)
              throw new TypeError('no "produce" listener set into this transport');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // Enqueue command.
          return this._awaitQueue.push(async () => {
              let normalizedEncodings;
              if (encodings && !Array.isArray(encodings)) {
                  throw TypeError('encodings must be an array');
              }
              else if (encodings && encodings.length === 0) {
                  normalizedEncodings = undefined;
              }
              else if (encodings) {
                  normalizedEncodings = encodings
                      .map((encoding) => {
                      const normalizedEncoding = { active: true };
                      if (encoding.active === false)
                          normalizedEncoding.active = false;
                      if (typeof encoding.dtx === 'boolean')
                          normalizedEncoding.dtx = encoding.dtx;
                      if (typeof encoding.scalabilityMode === 'string')
                          normalizedEncoding.scalabilityMode = encoding.scalabilityMode;
                      if (typeof encoding.scaleResolutionDownBy === 'number')
                          normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;
                      if (typeof encoding.maxBitrate === 'number')
                          normalizedEncoding.maxBitrate = encoding.maxBitrate;
                      if (typeof encoding.maxFramerate === 'number')
                          normalizedEncoding.maxFramerate = encoding.maxFramerate;
                      if (typeof encoding.adaptivePtime === 'boolean')
                          normalizedEncoding.adaptivePtime = encoding.adaptivePtime;
                      if (typeof encoding.priority === 'string')
                          normalizedEncoding.priority = encoding.priority;
                      if (typeof encoding.networkPriority === 'string')
                          normalizedEncoding.networkPriority = encoding.networkPriority;
                      return normalizedEncoding;
                  });
              }
              const { localId, rtpParameters, rtpSender } = await this._handler.send({
                  track,
                  encodings: normalizedEncodings,
                  codecOptions,
                  codec
              });
              try {
                  // This will fill rtpParameters's missing fields with default values.
                  ortc.validateRtpParameters(rtpParameters);
                  const { id } = await this.safeEmitAsPromise('produce', {
                      kind: track.kind,
                      rtpParameters,
                      appData
                  });
                  const producer = new Producer_1.Producer({
                      id,
                      localId,
                      rtpSender,
                      track,
                      rtpParameters,
                      stopTracks,
                      disableTrackOnPause,
                      zeroRtpOnPause,
                      appData
                  });
                  this._producers.set(producer.id, producer);
                  this._handleProducer(producer);
                  return producer;
              }
              catch (error) {
                  this._handler.stopSending(localId)
                      .catch(() => { });
                  throw error;
              }
          })
              // This catch is needed to stop the given track if the command above
              // failed due to closed Transport.
              .catch((error) => {
              if (stopTracks) {
                  try {
                      track.stop();
                  }
                  catch (error2) { }
              }
              throw error;
          });
      }
      /**
       * Create a Consumer to consume a remote Producer.
       */
      async consume({ id, producerId, kind, rtpParameters, appData = {} }) {
          logger.debug('consume()');
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (this._direction !== 'recv')
              throw new errors.UnsupportedError('not a receiving Transport');
          else if (typeof id !== 'string')
              throw new TypeError('missing id');
          else if (typeof producerId !== 'string')
              throw new TypeError('missing producerId');
          else if (kind !== 'audio' && kind !== 'video')
              throw new TypeError(`invalid kind '${kind}'`);
          else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
              throw new TypeError('no "connect" listener set into this transport');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // Enqueue command.
          return this._awaitQueue.push(async () => {
              // Ensure the device can consume it.
              const canConsume = ortc.canReceive(rtpParameters, this._extendedRtpCapabilities);
              if (!canConsume)
                  throw new errors.UnsupportedError('cannot consume this Producer');
              const { localId, rtpReceiver, track } = await this._handler.receive({ trackId: id, kind, rtpParameters });
              const consumer = new Consumer_1.Consumer({
                  id,
                  localId,
                  producerId,
                  rtpReceiver,
                  track,
                  rtpParameters,
                  appData
              });
              this._consumers.set(consumer.id, consumer);
              this._handleConsumer(consumer);
              // If this is the first video Consumer and the Consumer for RTP probation
              // has not yet been created, create it now.
              if (!this._probatorConsumerCreated && kind === 'video') {
                  try {
                      const probatorRtpParameters = ortc.generateProbatorRtpParameters(consumer.rtpParameters);
                      await this._handler.receive({
                          trackId: 'probator',
                          kind: 'video',
                          rtpParameters: probatorRtpParameters
                      });
                      logger.debug('consume() | Consumer for RTP probation created');
                      this._probatorConsumerCreated = true;
                  }
                  catch (error) {
                      logger.error('consume() | failed to create Consumer for RTP probation:%o', error);
                  }
              }
              return consumer;
          });
      }
      /**
       * Create a DataProducer
       */
      async produceData({ ordered = true, maxPacketLifeTime, maxRetransmits, priority = 'low', label = '', protocol = '', appData = {} } = {}) {
          logger.debug('produceData()');
          if (this._direction !== 'send')
              throw new errors.UnsupportedError('not a sending Transport');
          else if (!this._maxSctpMessageSize)
              throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
          else if (!['very-low', 'low', 'medium', 'high'].includes(priority))
              throw new TypeError('wrong priority');
          else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
              throw new TypeError('no "connect" listener set into this transport');
          else if (this.listenerCount('producedata') === 0)
              throw new TypeError('no "producedata" listener set into this transport');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          if (maxPacketLifeTime || maxRetransmits)
              ordered = false;
          // Enqueue command.
          return this._awaitQueue.push(async () => {
              const { dataChannel, sctpStreamParameters } = await this._handler.sendDataChannel({
                  ordered,
                  maxPacketLifeTime,
                  maxRetransmits,
                  priority,
                  label,
                  protocol
              });
              // This will fill sctpStreamParameters's missing fields with default values.
              ortc.validateSctpStreamParameters(sctpStreamParameters);
              const { id } = await this.safeEmitAsPromise('producedata', {
                  sctpStreamParameters,
                  label,
                  protocol,
                  appData
              });
              const dataProducer = new DataProducer_1.DataProducer({ id, dataChannel, sctpStreamParameters, appData });
              this._dataProducers.set(dataProducer.id, dataProducer);
              this._handleDataProducer(dataProducer);
              return dataProducer;
          });
      }
      /**
       * Create a DataConsumer
       */
      async consumeData({ id, dataProducerId, sctpStreamParameters, label = '', protocol = '', appData = {} }) {
          logger.debug('consumeData()');
          if (this._closed)
              throw new errors.InvalidStateError('closed');
          else if (this._direction !== 'recv')
              throw new errors.UnsupportedError('not a receiving Transport');
          else if (!this._maxSctpMessageSize)
              throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
          else if (typeof id !== 'string')
              throw new TypeError('missing id');
          else if (typeof dataProducerId !== 'string')
              throw new TypeError('missing dataProducerId');
          else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
              throw new TypeError('no "connect" listener set into this transport');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // This may throw.
          ortc.validateSctpStreamParameters(sctpStreamParameters);
          // Enqueue command.
          return this._awaitQueue.push(async () => {
              const { dataChannel } = await this._handler.receiveDataChannel({
                  sctpStreamParameters,
                  label,
                  protocol
              });
              const dataConsumer = new DataConsumer_1.DataConsumer({
                  id,
                  dataProducerId,
                  dataChannel,
                  sctpStreamParameters,
                  appData
              });
              this._dataConsumers.set(dataConsumer.id, dataConsumer);
              this._handleDataConsumer(dataConsumer);
              return dataConsumer;
          });
      }
      _handleHandler() {
          const handler = this._handler;
          handler.on('@connect', ({ dtlsParameters }, callback, errback) => {
              if (this._closed) {
                  errback(new errors.InvalidStateError('closed'));
                  return;
              }
              this.safeEmit('connect', { dtlsParameters }, callback, errback);
          });
          handler.on('@connectionstatechange', (connectionState) => {
              if (connectionState === this._connectionState)
                  return;
              logger.debug('connection state changed to %s', connectionState);
              this._connectionState = connectionState;
              if (!this._closed)
                  this.safeEmit('connectionstatechange', connectionState);
          });
      }
      _handleProducer(producer) {
          producer.on('@close', () => {
              this._producers.delete(producer.id);
              if (this._closed)
                  return;
              this._awaitQueue.push(async () => this._handler.stopSending(producer.localId))
                  .catch((error) => logger.warn('producer.close() failed:%o', error));
          });
          producer.on('@replacetrack', (track, callback, errback) => {
              this._awaitQueue.push(async () => this._handler.replaceTrack(producer.localId, track))
                  .then(callback)
                  .catch(errback);
          });
          producer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) => {
              this._awaitQueue.push(async () => (this._handler.setMaxSpatialLayer(producer.localId, spatialLayer)))
                  .then(callback)
                  .catch(errback);
          });
          producer.on('@setrtpencodingparameters', (params, callback, errback) => {
              this._awaitQueue.push(async () => (this._handler.setRtpEncodingParameters(producer.localId, params)))
                  .then(callback)
                  .catch(errback);
          });
          producer.on('@getstats', (callback, errback) => {
              if (this._closed)
                  return errback(new errors.InvalidStateError('closed'));
              this._handler.getSenderStats(producer.localId)
                  .then(callback)
                  .catch(errback);
          });
      }
      _handleConsumer(consumer) {
          consumer.on('@close', () => {
              this._consumers.delete(consumer.id);
              if (this._closed)
                  return;
              this._awaitQueue.push(async () => this._handler.stopReceiving(consumer.localId))
                  .catch(() => { });
          });
          consumer.on('@getstats', (callback, errback) => {
              if (this._closed)
                  return errback(new errors.InvalidStateError('closed'));
              this._handler.getReceiverStats(consumer.localId)
                  .then(callback)
                  .catch(errback);
          });
      }
      _handleDataProducer(dataProducer) {
          dataProducer.on('@close', () => {
              this._dataProducers.delete(dataProducer.id);
          });
      }
      _handleDataConsumer(dataConsumer) {
          dataConsumer.on('@close', () => {
              this._dataConsumers.delete(dataConsumer.id);
          });
      }
  }
  exports.Transport = Transport;
  });

  unwrapExports(Transport_1);
  var Transport_2 = Transport_1.Transport;

  var grammar_1 = createCommonjsModule(function (module) {
  var grammar = module.exports = {
    v: [{
      name: 'version',
      reg: /^(\d*)$/
    }],
    o: [{
      // o=- 20518 0 IN IP4 203.0.113.1
      // NB: sessionId will be a String in most cases because it is huge
      name: 'origin',
      reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
      names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
      format: '%s %s %d %s IP%d %s'
    }],
    // default parsing of these only (though some of these feel outdated)
    s: [{ name: 'name' }],
    i: [{ name: 'description' }],
    u: [{ name: 'uri' }],
    e: [{ name: 'email' }],
    p: [{ name: 'phone' }],
    z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
    r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
    // k: [{}], // outdated thing ignored
    t: [{
      // t=0 0
      name: 'timing',
      reg: /^(\d*) (\d*)/,
      names: ['start', 'stop'],
      format: '%d %d'
    }],
    c: [{
      // c=IN IP4 10.47.197.26
      name: 'connection',
      reg: /^IN IP(\d) (\S*)/,
      names: ['version', 'ip'],
      format: 'IN IP%d %s'
    }],
    b: [{
      // b=AS:4000
      push: 'bandwidth',
      reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
      names: ['type', 'limit'],
      format: '%s:%s'
    }],
    m: [{
      // m=video 51744 RTP/AVP 126 97 98 34 31
      // NB: special - pushes to session
      // TODO: rtp/fmtp should be filtered by the payloads found here?
      reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
      names: ['type', 'port', 'protocol', 'payloads'],
      format: '%s %d %s %s'
    }],
    a: [
      {
        // a=rtpmap:110 opus/48000/2
        push: 'rtp',
        reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
        names: ['payload', 'codec', 'rate', 'encoding'],
        format: function (o) {
          return (o.encoding)
            ? 'rtpmap:%d %s/%s/%s'
            : o.rate
              ? 'rtpmap:%d %s/%s'
              : 'rtpmap:%d %s';
        }
      },
      {
        // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
        // a=fmtp:111 minptime=10; useinbandfec=1
        push: 'fmtp',
        reg: /^fmtp:(\d*) ([\S| ]*)/,
        names: ['payload', 'config'],
        format: 'fmtp:%d %s'
      },
      {
        // a=control:streamid=0
        name: 'control',
        reg: /^control:(.*)/,
        format: 'control:%s'
      },
      {
        // a=rtcp:65179 IN IP4 193.84.77.194
        name: 'rtcp',
        reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
        names: ['port', 'netType', 'ipVer', 'address'],
        format: function (o) {
          return (o.address != null)
            ? 'rtcp:%d %s IP%d %s'
            : 'rtcp:%d';
        }
      },
      {
        // a=rtcp-fb:98 trr-int 100
        push: 'rtcpFbTrrInt',
        reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
        names: ['payload', 'value'],
        format: 'rtcp-fb:%d trr-int %d'
      },
      {
        // a=rtcp-fb:98 nack rpsi
        push: 'rtcpFb',
        reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
        names: ['payload', 'type', 'subtype'],
        format: function (o) {
          return (o.subtype != null)
            ? 'rtcp-fb:%s %s %s'
            : 'rtcp-fb:%s %s';
        }
      },
      {
        // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
        // a=extmap:1/recvonly URI-gps-string
        // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
        push: 'ext',
        reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
        names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
        format: function (o) {
          return (
            'extmap:%d' +
            (o.direction ? '/%s' : '%v') +
            (o['encrypt-uri'] ? ' %s' : '%v') +
            ' %s' +
            (o.config ? ' %s' : '')
          );
        }
      },
      {
        // a=extmap-allow-mixed
        name: 'extmapAllowMixed',
        reg: /^(extmap-allow-mixed)/
      },
      {
        // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
        push: 'crypto',
        reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
        names: ['id', 'suite', 'config', 'sessionConfig'],
        format: function (o) {
          return (o.sessionConfig != null)
            ? 'crypto:%d %s %s %s'
            : 'crypto:%d %s %s';
        }
      },
      {
        // a=setup:actpass
        name: 'setup',
        reg: /^setup:(\w*)/,
        format: 'setup:%s'
      },
      {
        // a=connection:new
        name: 'connectionType',
        reg: /^connection:(new|existing)/,
        format: 'connection:%s'
      },
      {
        // a=mid:1
        name: 'mid',
        reg: /^mid:([^\s]*)/,
        format: 'mid:%s'
      },
      {
        // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
        name: 'msid',
        reg: /^msid:(.*)/,
        format: 'msid:%s'
      },
      {
        // a=ptime:20
        name: 'ptime',
        reg: /^ptime:(\d*(?:\.\d*)*)/,
        format: 'ptime:%d'
      },
      {
        // a=maxptime:60
        name: 'maxptime',
        reg: /^maxptime:(\d*(?:\.\d*)*)/,
        format: 'maxptime:%d'
      },
      {
        // a=sendrecv
        name: 'direction',
        reg: /^(sendrecv|recvonly|sendonly|inactive)/
      },
      {
        // a=ice-lite
        name: 'icelite',
        reg: /^(ice-lite)/
      },
      {
        // a=ice-ufrag:F7gI
        name: 'iceUfrag',
        reg: /^ice-ufrag:(\S*)/,
        format: 'ice-ufrag:%s'
      },
      {
        // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
        name: 'icePwd',
        reg: /^ice-pwd:(\S*)/,
        format: 'ice-pwd:%s'
      },
      {
        // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
        name: 'fingerprint',
        reg: /^fingerprint:(\S*) (\S*)/,
        names: ['type', 'hash'],
        format: 'fingerprint:%s %s'
      },
      {
        // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
        // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
        // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
        // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
        // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
        push:'candidates',
        reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
        names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
        format: function (o) {
          var str = 'candidate:%s %d %s %d %s %d typ %s';

          str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

          // NB: candidate has three optional chunks, so %void middles one if it's missing
          str += (o.tcptype != null) ? ' tcptype %s' : '%v';

          if (o.generation != null) {
            str += ' generation %d';
          }

          str += (o['network-id'] != null) ? ' network-id %d' : '%v';
          str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
          return str;
        }
      },
      {
        // a=end-of-candidates (keep after the candidates line for readability)
        name: 'endOfCandidates',
        reg: /^(end-of-candidates)/
      },
      {
        // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
        name: 'remoteCandidates',
        reg: /^remote-candidates:(.*)/,
        format: 'remote-candidates:%s'
      },
      {
        // a=ice-options:google-ice
        name: 'iceOptions',
        reg: /^ice-options:(\S*)/,
        format: 'ice-options:%s'
      },
      {
        // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
        push: 'ssrcs',
        reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
        names: ['id', 'attribute', 'value'],
        format: function (o) {
          var str = 'ssrc:%d';
          if (o.attribute != null) {
            str += ' %s';
            if (o.value != null) {
              str += ':%s';
            }
          }
          return str;
        }
      },
      {
        // a=ssrc-group:FEC 1 2
        // a=ssrc-group:FEC-FR 3004364195 1080772241
        push: 'ssrcGroups',
        // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
        reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
        names: ['semantics', 'ssrcs'],
        format: 'ssrc-group:%s %s'
      },
      {
        // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
        name: 'msidSemantic',
        reg: /^msid-semantic:\s?(\w*) (\S*)/,
        names: ['semantic', 'token'],
        format: 'msid-semantic: %s %s' // space after ':' is not accidental
      },
      {
        // a=group:BUNDLE audio video
        push: 'groups',
        reg: /^group:(\w*) (.*)/,
        names: ['type', 'mids'],
        format: 'group:%s %s'
      },
      {
        // a=rtcp-mux
        name: 'rtcpMux',
        reg: /^(rtcp-mux)/
      },
      {
        // a=rtcp-rsize
        name: 'rtcpRsize',
        reg: /^(rtcp-rsize)/
      },
      {
        // a=sctpmap:5000 webrtc-datachannel 1024
        name: 'sctpmap',
        reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
        names: ['sctpmapNumber', 'app', 'maxMessageSize'],
        format: function (o) {
          return (o.maxMessageSize != null)
            ? 'sctpmap:%s %s %s'
            : 'sctpmap:%s %s';
        }
      },
      {
        // a=x-google-flag:conference
        name: 'xGoogleFlag',
        reg: /^x-google-flag:([^\s]*)/,
        format: 'x-google-flag:%s'
      },
      {
        // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
        push: 'rids',
        reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
        names: ['id', 'direction', 'params'],
        format: function (o) {
          return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
        }
      },
      {
        // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
        // a=imageattr:* send [x=800,y=640] recv *
        // a=imageattr:100 recv [x=320,y=240]
        push: 'imageattrs',
        reg: new RegExp(
          // a=imageattr:97
          '^imageattr:(\\d+|\\*)' +
          // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
          '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
          // recv [x=330,y=250]
          '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
        ),
        names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
        format: function (o) {
          return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
        }
      },
      {
        // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
        // a=simulcast:recv 1;4,5 send 6;7
        name: 'simulcast',
        reg: new RegExp(
          // a=simulcast:
          '^simulcast:' +
          // send 1,2,3;~4,~5
          '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
          // space + recv 6;~7,~8
          '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
          // end
          '$'
        ),
        names: ['dir1', 'list1', 'dir2', 'list2'],
        format: function (o) {
          return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
        }
      },
      {
        // old simulcast draft 03 (implemented by Firefox)
        //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
        // a=simulcast: recv pt=97;98 send pt=97
        // a=simulcast: send rid=5;6;7 paused=6,7
        name: 'simulcast_03',
        reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
        names: ['value'],
        format: 'simulcast: %s'
      },
      {
        // a=framerate:25
        // a=framerate:29.97
        name: 'framerate',
        reg: /^framerate:(\d+(?:$|\.\d+))/,
        format: 'framerate:%s'
      },
      {
        // RFC4570
        // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
        name: 'sourceFilter',
        reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
        names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
        format: 'source-filter: %s %s %s %s %s'
      },
      {
        // a=bundle-only
        name: 'bundleOnly',
        reg: /^(bundle-only)/
      },
      {
        // a=label:1
        name: 'label',
        reg: /^label:(.+)/,
        format: 'label:%s'
      },
      {
        // RFC version 26 for SCTP over DTLS
        // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
        name: 'sctpPort',
        reg: /^sctp-port:(\d+)$/,
        format: 'sctp-port:%s'
      },
      {
        // RFC version 26 for SCTP over DTLS
        // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
        name: 'maxMessageSize',
        reg: /^max-message-size:(\d+)$/,
        format: 'max-message-size:%s'
      },
      {
        // RFC7273
        // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
        push:'tsRefClocks',
        reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
        names: ['clksrc', 'clksrcExt'],
        format: function (o) {
          return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
        }
      },
      {
        // RFC7273
        // a=mediaclk:direct=963214424
        name:'mediaClk',
        reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
        names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],
        format: function (o) {
          var str = 'mediaclk:';
          str += (o.id != null ? 'id=%s %s' : '%v%s');
          str += (o.mediaClockValue != null ? '=%s' : '');
          str += (o.rateNumerator != null ? ' rate=%s' : '');
          str += (o.rateDenominator != null ? '/%s' : '');
          return str;
        }
      },
      {
        // a=keywds:keywords
        name: 'keywords',
        reg: /^keywds:(.+)$/,
        format: 'keywds:%s'
      },
      {
        // a=content:main
        name: 'content',
        reg: /^content:(.+)/,
        format: 'content:%s'
      },
      // BFCP https://tools.ietf.org/html/rfc4583
      {
        // a=floorctrl:c-s
        name: 'bfcpFloorCtrl',
        reg: /^floorctrl:(c-only|s-only|c-s)/,
        format: 'floorctrl:%s'
      },
      {
        // a=confid:1
        name: 'bfcpConfId',
        reg: /^confid:(\d+)/,
        format: 'confid:%s'
      },
      {
        // a=userid:1
        name: 'bfcpUserId',
        reg: /^userid:(\d+)/,
        format: 'userid:%s'
      },
      {
        // a=floorid:1
        name: 'bfcpFloorId',
        reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
        names: ['id', 'mStream'],
        format: 'floorid:%s mstrm:%s'
      },
      {
        // any a= that we don't understand is kept verbatim on media.invalid
        push: 'invalid',
        names: ['value']
      }
    ]
  };

  // set sensible defaults to avoid polluting the grammar with boring details
  Object.keys(grammar).forEach(function (key) {
    var objs = grammar[key];
    objs.forEach(function (obj) {
      if (!obj.reg) {
        obj.reg = /(.*)/;
      }
      if (!obj.format) {
        obj.format = '%s';
      }
    });
  });
  });
  var grammar_2 = grammar_1.v;
  var grammar_3 = grammar_1.o;
  var grammar_4 = grammar_1.s;
  var grammar_5 = grammar_1.i;
  var grammar_6 = grammar_1.u;
  var grammar_7 = grammar_1.e;
  var grammar_8 = grammar_1.p;
  var grammar_9 = grammar_1.z;
  var grammar_10 = grammar_1.r;
  var grammar_11 = grammar_1.t;
  var grammar_12 = grammar_1.c;
  var grammar_13 = grammar_1.b;
  var grammar_14 = grammar_1.m;
  var grammar_15 = grammar_1.a;

  var parser$1 = createCommonjsModule(function (module, exports) {
  var toIntIfInt = function (v) {
    return String(Number(v)) === v ? Number(v) : v;
  };

  var attachProperties = function (match, location, names, rawName) {
    if (rawName && !names) {
      location[rawName] = toIntIfInt(match[1]);
    }
    else {
      for (var i = 0; i < names.length; i += 1) {
        if (match[i+1] != null) {
          location[names[i]] = toIntIfInt(match[i+1]);
        }
      }
    }
  };

  var parseReg = function (obj, location, content) {
    var needsBlank = obj.name && obj.names;
    if (obj.push && !location[obj.push]) {
      location[obj.push] = [];
    }
    else if (needsBlank && !location[obj.name]) {
      location[obj.name] = {};
    }
    var keyLocation = obj.push ?
      {} :  // blank object that will be pushed
      needsBlank ? location[obj.name] : location; // otherwise, named location or root

    attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

    if (obj.push) {
      location[obj.push].push(keyLocation);
    }
  };


  var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

  exports.parse = function (sdp) {
    var session = {}
      , media = []
      , location = session; // points at where properties go under (one of the above)

    // parse lines we understand
    sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
      var type = l[0];
      var content = l.slice(2);
      if (type === 'm') {
        media.push({rtp: [], fmtp: []});
        location = media[media.length-1]; // point at latest media line
      }

      for (var j = 0; j < (grammar_1[type] || []).length; j += 1) {
        var obj = grammar_1[type][j];
        if (obj.reg.test(content)) {
          return parseReg(obj, location, content);
        }
      }
    });

    session.media = media; // link it up
    return session;
  };

  var paramReducer = function (acc, expr) {
    var s = expr.split(/=(.+)/, 2);
    if (s.length === 2) {
      acc[s[0]] = toIntIfInt(s[1]);
    } else if (s.length === 1 && expr.length > 1) {
      acc[s[0]] = undefined;
    }
    return acc;
  };

  exports.parseParams = function (str) {
    return str.split(/;\s?/).reduce(paramReducer, {});
  };

  // For backward compatibility - alias will be removed in 3.0.0
  exports.parseFmtpConfig = exports.parseParams;

  exports.parsePayloads = function (str) {
    return str.toString().split(' ').map(Number);
  };

  exports.parseRemoteCandidates = function (str) {
    var candidates = [];
    var parts = str.split(' ').map(toIntIfInt);
    for (var i = 0; i < parts.length; i += 3) {
      candidates.push({
        component: parts[i],
        ip: parts[i + 1],
        port: parts[i + 2]
      });
    }
    return candidates;
  };

  exports.parseImageAttributes = function (str) {
    return str.split(' ').map(function (item) {
      return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
    });
  };

  exports.parseSimulcastStreamList = function (str) {
    return str.split(';').map(function (stream) {
      return stream.split(',').map(function (format) {
        var scid, paused = false;

        if (format[0] !== '~') {
          scid = toIntIfInt(format);
        } else {
          scid = toIntIfInt(format.substring(1, format.length));
          paused = true;
        }

        return {
          scid: scid,
          paused: paused
        };
      });
    });
  };
  });
  var parser_1 = parser$1.parse;
  var parser_2 = parser$1.parseParams;
  var parser_3 = parser$1.parseFmtpConfig;
  var parser_4 = parser$1.parsePayloads;
  var parser_5 = parser$1.parseRemoteCandidates;
  var parser_6 = parser$1.parseImageAttributes;
  var parser_7 = parser$1.parseSimulcastStreamList;

  // customized util.format - discards excess arguments and can void middle ones
  var formatRegExp = /%[sdv%]/g;
  var format$1 = function (formatStr) {
    var i = 1;
    var args = arguments;
    var len = args.length;
    return formatStr.replace(formatRegExp, function (x) {
      if (i >= len) {
        return x; // missing argument
      }
      var arg = args[i];
      i += 1;
      switch (x) {
      case '%%':
        return '%';
      case '%s':
        return String(arg);
      case '%d':
        return Number(arg);
      case '%v':
        return '';
      }
    });
    // NB: we discard excess arguments - they are typically undefined from makeLine
  };

  var makeLine = function (type, obj, location) {
    var str = obj.format instanceof Function ?
      (obj.format(obj.push ? location : location[obj.name])) :
      obj.format;

    var args = [type + '=' + str];
    if (obj.names) {
      for (var i = 0; i < obj.names.length; i += 1) {
        var n = obj.names[i];
        if (obj.name) {
          args.push(location[obj.name][n]);
        }
        else { // for mLine and push attributes
          args.push(location[obj.names[i]]);
        }
      }
    }
    else {
      args.push(location[obj.name]);
    }
    return format$1.apply(null, args);
  };

  // RFC specified order
  // TODO: extend this with all the rest
  var defaultOuterOrder = [
    'v', 'o', 's', 'i',
    'u', 'e', 'p', 'c',
    'b', 't', 'r', 'z', 'a'
  ];
  var defaultInnerOrder = ['i', 'c', 'b', 'a'];


  var writer = function (session, opts) {
    opts = opts || {};
    // ensure certain properties exist
    if (session.version == null) {
      session.version = 0; // 'v=0' must be there (only defined version atm)
    }
    if (session.name == null) {
      session.name = ' '; // 's= ' must be there if no meaningful name set
    }
    session.media.forEach(function (mLine) {
      if (mLine.payloads == null) {
        mLine.payloads = '';
      }
    });

    var outerOrder = opts.outerOrder || defaultOuterOrder;
    var innerOrder = opts.innerOrder || defaultInnerOrder;
    var sdp = [];

    // loop through outerOrder for matching properties on session
    outerOrder.forEach(function (type) {
      grammar_1[type].forEach(function (obj) {
        if (obj.name in session && session[obj.name] != null) {
          sdp.push(makeLine(type, obj, session));
        }
        else if (obj.push in session && session[obj.push] != null) {
          session[obj.push].forEach(function (el) {
            sdp.push(makeLine(type, obj, el));
          });
        }
      });
    });

    // then for each media line, follow the innerOrder
    session.media.forEach(function (mLine) {
      sdp.push(makeLine('m', grammar_1.m[0], mLine));

      innerOrder.forEach(function (type) {
        grammar_1[type].forEach(function (obj) {
          if (obj.name in mLine && mLine[obj.name] != null) {
            sdp.push(makeLine(type, obj, mLine));
          }
          else if (obj.push in mLine && mLine[obj.push] != null) {
            mLine[obj.push].forEach(function (el) {
              sdp.push(makeLine(type, obj, el));
            });
          }
        });
      });
    });

    return sdp.join('\r\n') + '\r\n';
  };

  var write = writer;
  var parse$3 = parser$1.parse;
  var parseParams = parser$1.parseParams;
  var parseFmtpConfig = parser$1.parseFmtpConfig; // Alias of parseParams().
  var parsePayloads = parser$1.parsePayloads;
  var parseRemoteCandidates = parser$1.parseRemoteCandidates;
  var parseImageAttributes = parser$1.parseImageAttributes;
  var parseSimulcastStreamList = parser$1.parseSimulcastStreamList;

  var lib$4 = {
  	write: write,
  	parse: parse$3,
  	parseParams: parseParams,
  	parseFmtpConfig: parseFmtpConfig,
  	parsePayloads: parsePayloads,
  	parseRemoteCandidates: parseRemoteCandidates,
  	parseImageAttributes: parseImageAttributes,
  	parseSimulcastStreamList: parseSimulcastStreamList
  };

  var commonUtils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  function extractRtpCapabilities({ sdpObject }) {
      // Map of RtpCodecParameters indexed by payload type.
      const codecsMap = new Map();
      // Array of RtpHeaderExtensions.
      const headerExtensions = [];
      // Whether a m=audio/video section has been already found.
      let gotAudio = false;
      let gotVideo = false;
      for (const m of sdpObject.media) {
          const kind = m.type;
          switch (kind) {
              case 'audio':
                  {
                      if (gotAudio)
                          continue;
                      gotAudio = true;
                      break;
                  }
              case 'video':
                  {
                      if (gotVideo)
                          continue;
                      gotVideo = true;
                      break;
                  }
              default:
                  {
                      continue;
                  }
          }
          // Get codecs.
          for (const rtp of m.rtp) {
              const codec = {
                  kind: kind,
                  mimeType: `${kind}/${rtp.codec}`,
                  preferredPayloadType: rtp.payload,
                  clockRate: rtp.rate,
                  channels: rtp.encoding,
                  parameters: {},
                  rtcpFeedback: []
              };
              codecsMap.set(codec.preferredPayloadType, codec);
          }
          // Get codec parameters.
          for (const fmtp of m.fmtp || []) {
              const parameters = lib$4.parseParams(fmtp.config);
              const codec = codecsMap.get(fmtp.payload);
              if (!codec)
                  continue;
              // Specials case to convert parameter value to string.
              if (parameters && parameters['profile-level-id'])
                  parameters['profile-level-id'] = String(parameters['profile-level-id']);
              codec.parameters = parameters;
          }
          // Get RTCP feedback for each codec.
          for (const fb of m.rtcpFb || []) {
              const codec = codecsMap.get(fb.payload);
              if (!codec)
                  continue;
              const feedback = {
                  type: fb.type,
                  parameter: fb.subtype
              };
              if (!feedback.parameter)
                  delete feedback.parameter;
              codec.rtcpFeedback.push(feedback);
          }
          // Get RTP header extensions.
          for (const ext of m.ext || []) {
              // Ignore encrypted extensions (not yet supported in mediasoup).
              if (ext['encrypt-uri'])
                  continue;
              const headerExtension = {
                  kind: kind,
                  uri: ext.uri,
                  preferredId: ext.value
              };
              headerExtensions.push(headerExtension);
          }
      }
      const rtpCapabilities = {
          codecs: Array.from(codecsMap.values()),
          headerExtensions: headerExtensions
      };
      return rtpCapabilities;
  }
  exports.extractRtpCapabilities = extractRtpCapabilities;
  function extractDtlsParameters({ sdpObject }) {
      const mediaObject = (sdpObject.media || [])
          .find((m) => (m.iceUfrag && m.port !== 0));
      if (!mediaObject)
          throw new Error('no active media section found');
      const fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;
      let role;
      switch (mediaObject.setup) {
          case 'active':
              role = 'client';
              break;
          case 'passive':
              role = 'server';
              break;
          case 'actpass':
              role = 'auto';
              break;
      }
      const dtlsParameters = {
          role,
          fingerprints: [
              {
                  algorithm: fingerprint.type,
                  value: fingerprint.hash
              }
          ]
      };
      return dtlsParameters;
  }
  exports.extractDtlsParameters = extractDtlsParameters;
  function getCname({ offerMediaObject }) {
      const ssrcCnameLine = (offerMediaObject.ssrcs || [])
          .find((line) => line.attribute === 'cname');
      if (!ssrcCnameLine)
          return '';
      return ssrcCnameLine.value;
  }
  exports.getCname = getCname;
  /**
   * Apply codec parameters in the given SDP m= section answer based on the
   * given RTP parameters of an offer.
   */
  function applyCodecParameters({ offerRtpParameters, answerMediaObject }) {
      for (const codec of offerRtpParameters.codecs) {
          const mimeType = codec.mimeType.toLowerCase();
          // Avoid parsing codec parameters for unhandled codecs.
          if (mimeType !== 'audio/opus')
              continue;
          const rtp = (answerMediaObject.rtp || [])
              .find((r) => r.payload === codec.payloadType);
          if (!rtp)
              continue;
          // Just in case.
          answerMediaObject.fmtp = answerMediaObject.fmtp || [];
          let fmtp = answerMediaObject.fmtp
              .find((f) => f.payload === codec.payloadType);
          if (!fmtp) {
              fmtp = { payload: codec.payloadType, config: '' };
              answerMediaObject.fmtp.push(fmtp);
          }
          const parameters = lib$4.parseParams(fmtp.config);
          switch (mimeType) {
              case 'audio/opus':
                  {
                      const spropStereo = codec.parameters['sprop-stereo'];
                      if (spropStereo !== undefined)
                          parameters.stereo = spropStereo ? 1 : 0;
                      break;
                  }
          }
          // Write the codec fmtp.config back.
          fmtp.config = '';
          for (const key of Object.keys(parameters)) {
              if (fmtp.config)
                  fmtp.config += ';';
              fmtp.config += `${key}=${parameters[key]}`;
          }
      }
  }
  exports.applyCodecParameters = applyCodecParameters;
  });

  unwrapExports(commonUtils);
  var commonUtils_1 = commonUtils.extractRtpCapabilities;
  var commonUtils_2 = commonUtils.extractDtlsParameters;
  var commonUtils_3 = commonUtils.getCname;
  var commonUtils_4 = commonUtils.applyCodecParameters;

  var unifiedPlanUtils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function getRtpEncodings({ offerMediaObject }) {
      const ssrcs = new Set();
      for (const line of offerMediaObject.ssrcs || []) {
          const ssrc = line.id;
          ssrcs.add(ssrc);
      }
      if (ssrcs.size === 0)
          throw new Error('no a=ssrc lines found');
      const ssrcToRtxSsrc = new Map();
      // First assume RTX is used.
      for (const line of offerMediaObject.ssrcGroups || []) {
          if (line.semantics !== 'FID')
              continue;
          let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
          ssrc = Number(ssrc);
          rtxSsrc = Number(rtxSsrc);
          if (ssrcs.has(ssrc)) {
              // Remove both the SSRC and RTX SSRC from the set so later we know that they
              // are already handled.
              ssrcs.delete(ssrc);
              ssrcs.delete(rtxSsrc);
              // Add to the map.
              ssrcToRtxSsrc.set(ssrc, rtxSsrc);
          }
      }
      // If the set of SSRCs is not empty it means that RTX is not being used, so take
      // media SSRCs from there.
      for (const ssrc of ssrcs) {
          // Add to the map.
          ssrcToRtxSsrc.set(ssrc, null);
      }
      const encodings = [];
      for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
          const encoding = { ssrc };
          if (rtxSsrc)
              encoding.rtx = { ssrc: rtxSsrc };
          encodings.push(encoding);
      }
      return encodings;
  }
  exports.getRtpEncodings = getRtpEncodings;
  /**
   * Adds multi-ssrc based simulcast into the given SDP media section offer.
   */
  function addLegacySimulcast({ offerMediaObject, numStreams }) {
      if (numStreams <= 1)
          throw new TypeError('numStreams must be greater than 1');
      // Get the SSRC.
      const ssrcMsidLine = (offerMediaObject.ssrcs || [])
          .find((line) => line.attribute === 'msid');
      if (!ssrcMsidLine)
          throw new Error('a=ssrc line with msid information not found');
      const [streamId, trackId] = ssrcMsidLine.value.split(' ')[0];
      const firstSsrc = ssrcMsidLine.id;
      let firstRtxSsrc;
      // Get the SSRC for RTX.
      (offerMediaObject.ssrcGroups || [])
          .some((line) => {
          if (line.semantics !== 'FID')
              return false;
          const ssrcs = line.ssrcs.split(/\s+/);
          if (Number(ssrcs[0]) === firstSsrc) {
              firstRtxSsrc = Number(ssrcs[1]);
              return true;
          }
          else {
              return false;
          }
      });
      const ssrcCnameLine = offerMediaObject.ssrcs
          .find((line) => line.attribute === 'cname');
      if (!ssrcCnameLine)
          throw new Error('a=ssrc line with cname information not found');
      const cname = ssrcCnameLine.value;
      const ssrcs = [];
      const rtxSsrcs = [];
      for (let i = 0; i < numStreams; ++i) {
          ssrcs.push(firstSsrc + i);
          if (firstRtxSsrc)
              rtxSsrcs.push(firstRtxSsrc + i);
      }
      offerMediaObject.ssrcGroups = [];
      offerMediaObject.ssrcs = [];
      offerMediaObject.ssrcGroups.push({
          semantics: 'SIM',
          ssrcs: ssrcs.join(' ')
      });
      for (let i = 0; i < ssrcs.length; ++i) {
          const ssrc = ssrcs[i];
          offerMediaObject.ssrcs.push({
              id: ssrc,
              attribute: 'cname',
              value: cname
          });
          offerMediaObject.ssrcs.push({
              id: ssrc,
              attribute: 'msid',
              value: `${streamId} ${trackId}`
          });
      }
      for (let i = 0; i < rtxSsrcs.length; ++i) {
          const ssrc = ssrcs[i];
          const rtxSsrc = rtxSsrcs[i];
          offerMediaObject.ssrcs.push({
              id: rtxSsrc,
              attribute: 'cname',
              value: cname
          });
          offerMediaObject.ssrcs.push({
              id: rtxSsrc,
              attribute: 'msid',
              value: `${streamId} ${trackId}`
          });
          offerMediaObject.ssrcGroups.push({
              semantics: 'FID',
              ssrcs: `${ssrc} ${rtxSsrc}`
          });
      }
  }
  exports.addLegacySimulcast = addLegacySimulcast;
  });

  unwrapExports(unifiedPlanUtils);
  var unifiedPlanUtils_1 = unifiedPlanUtils.getRtpEncodings;
  var unifiedPlanUtils_2 = unifiedPlanUtils.addLegacySimulcast;

  var HandlerInterface_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  class HandlerInterface extends EnhancedEventEmitter_1.EnhancedEventEmitter {
      /**
       * @emits @connect - (
       *     { dtlsParameters: DtlsParameters },
       *     callback: Function,
       *     errback: Function
       *   )
       * @emits @connectionstatechange - (connectionState: ConnectionState)
       */
      constructor() {
          super();
      }
  }
  exports.HandlerInterface = HandlerInterface;
  });

  unwrapExports(HandlerInterface_1);
  var HandlerInterface_2 = HandlerInterface_1.HandlerInterface;

  var MediaSection_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  class MediaSection {
      constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {
          this._mediaObject = {};
          this._planB = planB;
          if (iceParameters) {
              this.setIceParameters(iceParameters);
          }
          if (iceCandidates) {
              this._mediaObject.candidates = [];
              for (const candidate of iceCandidates) {
                  const candidateObject = {};
                  // mediasoup does mandates rtcp-mux so candidates component is always
                  // RTP (1).
                  candidateObject.component = 1;
                  candidateObject.foundation = candidate.foundation;
                  candidateObject.ip = candidate.ip;
                  candidateObject.port = candidate.port;
                  candidateObject.priority = candidate.priority;
                  candidateObject.transport = candidate.protocol;
                  candidateObject.type = candidate.type;
                  if (candidate.tcpType)
                      candidateObject.tcptype = candidate.tcpType;
                  this._mediaObject.candidates.push(candidateObject);
              }
              this._mediaObject.endOfCandidates = 'end-of-candidates';
              this._mediaObject.iceOptions = 'renomination';
          }
          if (dtlsParameters) {
              this.setDtlsRole(dtlsParameters.role);
          }
      }
      get mid() {
          return String(this._mediaObject.mid);
      }
      get closed() {
          return this._mediaObject.port === 0;
      }
      getObject() {
          return this._mediaObject;
      }
      setIceParameters(iceParameters) {
          this._mediaObject.iceUfrag = iceParameters.usernameFragment;
          this._mediaObject.icePwd = iceParameters.password;
      }
      disable() {
          this._mediaObject.direction = 'inactive';
          delete this._mediaObject.ext;
          delete this._mediaObject.ssrcs;
          delete this._mediaObject.ssrcGroups;
          delete this._mediaObject.simulcast;
          delete this._mediaObject.simulcast_03;
          delete this._mediaObject.rids;
      }
      close() {
          this._mediaObject.direction = 'inactive';
          this._mediaObject.port = 0;
          delete this._mediaObject.ext;
          delete this._mediaObject.ssrcs;
          delete this._mediaObject.ssrcGroups;
          delete this._mediaObject.simulcast;
          delete this._mediaObject.simulcast_03;
          delete this._mediaObject.rids;
          delete this._mediaObject.extmapAllowMixed;
      }
  }
  exports.MediaSection = MediaSection;
  class AnswerMediaSection extends MediaSection {
      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
          super({ iceParameters, iceCandidates, dtlsParameters, planB });
          this._mediaObject.mid = String(offerMediaObject.mid);
          this._mediaObject.type = offerMediaObject.type;
          this._mediaObject.protocol = offerMediaObject.protocol;
          if (!plainRtpParameters) {
              this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
              this._mediaObject.port = 7;
          }
          else {
              this._mediaObject.connection =
                  {
                      ip: plainRtpParameters.ip,
                      version: plainRtpParameters.ipVersion
                  };
              this._mediaObject.port = plainRtpParameters.port;
          }
          switch (offerMediaObject.type) {
              case 'audio':
              case 'video':
                  {
                      this._mediaObject.direction = 'recvonly';
                      this._mediaObject.rtp = [];
                      this._mediaObject.rtcpFb = [];
                      this._mediaObject.fmtp = [];
                      for (const codec of answerRtpParameters.codecs) {
                          const rtp = {
                              payload: codec.payloadType,
                              codec: getCodecName(codec),
                              rate: codec.clockRate
                          };
                          if (codec.channels > 1)
                              rtp.encoding = codec.channels;
                          this._mediaObject.rtp.push(rtp);
                          const codecParameters = utils.clone(codec.parameters || {});
                          if (codecOptions) {
                              const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusPtime, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;
                              const offerCodec = offerRtpParameters.codecs
                                  .find((c) => (c.payloadType === codec.payloadType));
                              switch (codec.mimeType.toLowerCase()) {
                                  case 'audio/opus':
                                      {
                                          if (opusStereo !== undefined) {
                                              offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;
                                              codecParameters.stereo = opusStereo ? 1 : 0;
                                          }
                                          if (opusFec !== undefined) {
                                              offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;
                                              codecParameters.useinbandfec = opusFec ? 1 : 0;
                                          }
                                          if (opusDtx !== undefined) {
                                              offerCodec.parameters.usedtx = opusDtx ? 1 : 0;
                                              codecParameters.usedtx = opusDtx ? 1 : 0;
                                          }
                                          if (opusMaxPlaybackRate !== undefined) {
                                              codecParameters.maxplaybackrate = opusMaxPlaybackRate;
                                          }
                                          if (opusPtime !== undefined) {
                                              offerCodec.parameters.ptime = opusPtime;
                                              codecParameters.ptime = opusPtime;
                                          }
                                          break;
                                      }
                                  case 'video/vp8':
                                  case 'video/vp9':
                                  case 'video/h264':
                                  case 'video/h265':
                                      {
                                          if (videoGoogleStartBitrate !== undefined)
                                              codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;
                                          if (videoGoogleMaxBitrate !== undefined)
                                              codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;
                                          if (videoGoogleMinBitrate !== undefined)
                                              codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;
                                          break;
                                      }
                              }
                          }
                          const fmtp = {
                              payload: codec.payloadType,
                              config: ''
                          };
                          for (const key of Object.keys(codecParameters)) {
                              if (fmtp.config)
                                  fmtp.config += ';';
                              fmtp.config += `${key}=${codecParameters[key]}`;
                          }
                          if (fmtp.config)
                              this._mediaObject.fmtp.push(fmtp);
                          for (const fb of codec.rtcpFeedback) {
                              this._mediaObject.rtcpFb.push({
                                  payload: codec.payloadType,
                                  type: fb.type,
                                  subtype: fb.parameter
                              });
                          }
                      }
                      this._mediaObject.payloads = answerRtpParameters.codecs
                          .map((codec) => codec.payloadType)
                          .join(' ');
                      this._mediaObject.ext = [];
                      for (const ext of answerRtpParameters.headerExtensions) {
                          // Don't add a header extension if not present in the offer.
                          const found = (offerMediaObject.ext || [])
                              .some((localExt) => localExt.uri === ext.uri);
                          if (!found)
                              continue;
                          this._mediaObject.ext.push({
                              uri: ext.uri,
                              value: ext.id
                          });
                      }
                      // Allow both 1 byte and 2 bytes length header extensions.
                      if (extmapAllowMixed &&
                          offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {
                          this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';
                      }
                      // Simulcast.
                      if (offerMediaObject.simulcast) {
                          this._mediaObject.simulcast =
                              {
                                  dir1: 'recv',
                                  list1: offerMediaObject.simulcast.list1
                              };
                          this._mediaObject.rids = [];
                          for (const rid of offerMediaObject.rids || []) {
                              if (rid.direction !== 'send')
                                  continue;
                              this._mediaObject.rids.push({
                                  id: rid.id,
                                  direction: 'recv'
                              });
                          }
                      }
                      // Simulcast (draft version 03).
                      else if (offerMediaObject.simulcast_03) {
                          // eslint-disable-next-line camelcase
                          this._mediaObject.simulcast_03 =
                              {
                                  value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')
                              };
                          this._mediaObject.rids = [];
                          for (const rid of offerMediaObject.rids || []) {
                              if (rid.direction !== 'send')
                                  continue;
                              this._mediaObject.rids.push({
                                  id: rid.id,
                                  direction: 'recv'
                              });
                          }
                      }
                      this._mediaObject.rtcpMux = 'rtcp-mux';
                      this._mediaObject.rtcpRsize = 'rtcp-rsize';
                      if (this._planB && this._mediaObject.type === 'video')
                          this._mediaObject.xGoogleFlag = 'conference';
                      break;
                  }
              case 'application':
                  {
                      // New spec.
                      if (typeof offerMediaObject.sctpPort === 'number') {
                          this._mediaObject.payloads = 'webrtc-datachannel';
                          this._mediaObject.sctpPort = sctpParameters.port;
                          this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
                      }
                      // Old spec.
                      else if (offerMediaObject.sctpmap) {
                          this._mediaObject.payloads = sctpParameters.port;
                          this._mediaObject.sctpmap =
                              {
                                  app: 'webrtc-datachannel',
                                  sctpmapNumber: sctpParameters.port,
                                  maxMessageSize: sctpParameters.maxMessageSize
                              };
                      }
                      break;
                  }
          }
      }
      setDtlsRole(role) {
          switch (role) {
              case 'client':
                  this._mediaObject.setup = 'active';
                  break;
              case 'server':
                  this._mediaObject.setup = 'passive';
                  break;
              case 'auto':
                  this._mediaObject.setup = 'actpass';
                  break;
          }
      }
  }
  exports.AnswerMediaSection = AnswerMediaSection;
  class OfferMediaSection extends MediaSection {
      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {
          super({ iceParameters, iceCandidates, dtlsParameters, planB });
          this._mediaObject.mid = String(mid);
          this._mediaObject.type = kind;
          if (!plainRtpParameters) {
              this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
              if (!sctpParameters)
                  this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';
              else
                  this._mediaObject.protocol = 'UDP/DTLS/SCTP';
              this._mediaObject.port = 7;
          }
          else {
              this._mediaObject.connection =
                  {
                      ip: plainRtpParameters.ip,
                      version: plainRtpParameters.ipVersion
                  };
              this._mediaObject.protocol = 'RTP/AVP';
              this._mediaObject.port = plainRtpParameters.port;
          }
          switch (kind) {
              case 'audio':
              case 'video':
                  {
                      this._mediaObject.direction = 'sendonly';
                      this._mediaObject.rtp = [];
                      this._mediaObject.rtcpFb = [];
                      this._mediaObject.fmtp = [];
                      if (!this._planB)
                          this._mediaObject.msid = `${streamId || '-'} ${trackId}`;
                      for (const codec of offerRtpParameters.codecs) {
                          const rtp = {
                              payload: codec.payloadType,
                              codec: getCodecName(codec),
                              rate: codec.clockRate
                          };
                          if (codec.channels > 1)
                              rtp.encoding = codec.channels;
                          this._mediaObject.rtp.push(rtp);
                          const fmtp = {
                              payload: codec.payloadType,
                              config: ''
                          };
                          for (const key of Object.keys(codec.parameters)) {
                              if (fmtp.config)
                                  fmtp.config += ';';
                              fmtp.config += `${key}=${codec.parameters[key]}`;
                          }
                          if (fmtp.config)
                              this._mediaObject.fmtp.push(fmtp);
                          for (const fb of codec.rtcpFeedback) {
                              this._mediaObject.rtcpFb.push({
                                  payload: codec.payloadType,
                                  type: fb.type,
                                  subtype: fb.parameter
                              });
                          }
                      }
                      this._mediaObject.payloads = offerRtpParameters.codecs
                          .map((codec) => codec.payloadType)
                          .join(' ');
                      this._mediaObject.ext = [];
                      for (const ext of offerRtpParameters.headerExtensions) {
                          this._mediaObject.ext.push({
                              uri: ext.uri,
                              value: ext.id
                          });
                      }
                      this._mediaObject.rtcpMux = 'rtcp-mux';
                      this._mediaObject.rtcpRsize = 'rtcp-rsize';
                      const encoding = offerRtpParameters.encodings[0];
                      const ssrc = encoding.ssrc;
                      const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
                          ? encoding.rtx.ssrc
                          : undefined;
                      this._mediaObject.ssrcs = [];
                      this._mediaObject.ssrcGroups = [];
                      if (offerRtpParameters.rtcp.cname) {
                          this._mediaObject.ssrcs.push({
                              id: ssrc,
                              attribute: 'cname',
                              value: offerRtpParameters.rtcp.cname
                          });
                      }
                      if (this._planB) {
                          this._mediaObject.ssrcs.push({
                              id: ssrc,
                              attribute: 'msid',
                              value: `${streamId || '-'} ${trackId}`
                          });
                      }
                      if (rtxSsrc) {
                          if (offerRtpParameters.rtcp.cname) {
                              this._mediaObject.ssrcs.push({
                                  id: rtxSsrc,
                                  attribute: 'cname',
                                  value: offerRtpParameters.rtcp.cname
                              });
                          }
                          if (this._planB) {
                              this._mediaObject.ssrcs.push({
                                  id: rtxSsrc,
                                  attribute: 'msid',
                                  value: `${streamId || '-'} ${trackId}`
                              });
                          }
                          // Associate original and retransmission SSRCs.
                          this._mediaObject.ssrcGroups.push({
                              semantics: 'FID',
                              ssrcs: `${ssrc} ${rtxSsrc}`
                          });
                      }
                      break;
                  }
              case 'application':
                  {
                      // New spec.
                      if (!oldDataChannelSpec) {
                          this._mediaObject.payloads = 'webrtc-datachannel';
                          this._mediaObject.sctpPort = sctpParameters.port;
                          this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
                      }
                      // Old spec.
                      else {
                          this._mediaObject.payloads = sctpParameters.port;
                          this._mediaObject.sctpmap =
                              {
                                  app: 'webrtc-datachannel',
                                  sctpmapNumber: sctpParameters.port,
                                  maxMessageSize: sctpParameters.maxMessageSize
                              };
                      }
                      break;
                  }
          }
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      setDtlsRole(role) {
          // Always 'actpass'.
          this._mediaObject.setup = 'actpass';
      }
      planBReceive({ offerRtpParameters, streamId, trackId }) {
          const encoding = offerRtpParameters.encodings[0];
          const ssrc = encoding.ssrc;
          const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
              ? encoding.rtx.ssrc
              : undefined;
          if (offerRtpParameters.rtcp.cname) {
              this._mediaObject.ssrcs.push({
                  id: ssrc,
                  attribute: 'cname',
                  value: offerRtpParameters.rtcp.cname
              });
          }
          this._mediaObject.ssrcs.push({
              id: ssrc,
              attribute: 'msid',
              value: `${streamId || '-'} ${trackId}`
          });
          if (rtxSsrc) {
              if (offerRtpParameters.rtcp.cname) {
                  this._mediaObject.ssrcs.push({
                      id: rtxSsrc,
                      attribute: 'cname',
                      value: offerRtpParameters.rtcp.cname
                  });
              }
              this._mediaObject.ssrcs.push({
                  id: rtxSsrc,
                  attribute: 'msid',
                  value: `${streamId || '-'} ${trackId}`
              });
              // Associate original and retransmission SSRCs.
              this._mediaObject.ssrcGroups.push({
                  semantics: 'FID',
                  ssrcs: `${ssrc} ${rtxSsrc}`
              });
          }
      }
      planBStopReceiving({ offerRtpParameters }) {
          const encoding = offerRtpParameters.encodings[0];
          const ssrc = encoding.ssrc;
          const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
              ? encoding.rtx.ssrc
              : undefined;
          this._mediaObject.ssrcs = this._mediaObject.ssrcs
              .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);
          if (rtxSsrc) {
              this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups
                  .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);
          }
      }
  }
  exports.OfferMediaSection = OfferMediaSection;
  function getCodecName(codec) {
      const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
      if (!mimeTypeMatch)
          throw new TypeError('invalid codec.mimeType');
      return mimeTypeMatch[2];
  }
  });

  unwrapExports(MediaSection_1);
  var MediaSection_2 = MediaSection_1.MediaSection;
  var MediaSection_3 = MediaSection_1.AnswerMediaSection;
  var MediaSection_4 = MediaSection_1.OfferMediaSection;

  var RemoteSdp_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  const logger = new Logger_1.Logger('RemoteSdp');
  class RemoteSdp {
      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {
          // MediaSection instances.
          this._mediaSections = [];
          // MediaSection indices indexed by MID.
          this._midToIndex = new Map();
          this._iceParameters = iceParameters;
          this._iceCandidates = iceCandidates;
          this._dtlsParameters = dtlsParameters;
          this._sctpParameters = sctpParameters;
          this._plainRtpParameters = plainRtpParameters;
          this._planB = planB;
          this._sdpObject =
              {
                  version: 0,
                  origin: {
                      address: '0.0.0.0',
                      ipVer: 4,
                      netType: 'IN',
                      sessionId: 10000,
                      sessionVersion: 0,
                      username: 'mediasoup-client'
                  },
                  name: '-',
                  timing: { start: 0, stop: 0 },
                  media: []
              };
          // If ICE parameters are given, add ICE-Lite indicator.
          if (iceParameters && iceParameters.iceLite) {
              this._sdpObject.icelite = 'ice-lite';
          }
          // If DTLS parameters are given, assume WebRTC and BUNDLE.
          if (dtlsParameters) {
              this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };
              // NOTE: We take the latest fingerprint.
              const numFingerprints = this._dtlsParameters.fingerprints.length;
              this._sdpObject.fingerprint =
                  {
                      type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,
                      hash: dtlsParameters.fingerprints[numFingerprints - 1].value
                  };
              this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];
          }
          // If there are plain RPT parameters, override SDP origin.
          if (plainRtpParameters) {
              this._sdpObject.origin.address = plainRtpParameters.ip;
              this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;
          }
      }
      updateIceParameters(iceParameters) {
          logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);
          this._iceParameters = iceParameters;
          this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;
          for (const mediaSection of this._mediaSections) {
              mediaSection.setIceParameters(iceParameters);
          }
      }
      updateDtlsRole(role) {
          logger.debug('updateDtlsRole() [role:%s]', role);
          this._dtlsParameters.role = role;
          for (const mediaSection of this._mediaSections) {
              mediaSection.setDtlsRole(role);
          }
      }
      getNextMediaSectionIdx() {
          // If a closed media section is found, return its index.
          for (let idx = 0; idx < this._mediaSections.length; ++idx) {
              const mediaSection = this._mediaSections[idx];
              if (mediaSection.closed)
                  return { idx, reuseMid: mediaSection.mid };
          }
          // If no closed media section is found, return next one.
          return { idx: this._mediaSections.length };
      }
      send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
          const mediaSection = new MediaSection_1.AnswerMediaSection({
              iceParameters: this._iceParameters,
              iceCandidates: this._iceCandidates,
              dtlsParameters: this._dtlsParameters,
              plainRtpParameters: this._plainRtpParameters,
              planB: this._planB,
              offerMediaObject,
              offerRtpParameters,
              answerRtpParameters,
              codecOptions,
              extmapAllowMixed
          });
          // Unified-Plan with closed media section replacement.
          if (reuseMid) {
              this._replaceMediaSection(mediaSection, reuseMid);
          }
          // Unified-Plan or Plan-B with different media kind.
          else if (!this._midToIndex.has(mediaSection.mid)) {
              this._addMediaSection(mediaSection);
          }
          // Plan-B with same media kind.
          else {
              this._replaceMediaSection(mediaSection);
          }
      }
      receive({ mid, kind, offerRtpParameters, streamId, trackId }) {
          const idx = this._midToIndex.get(mid);
          let mediaSection;
          if (idx !== undefined)
              mediaSection = this._mediaSections[idx];
          // Unified-Plan or different media kind.
          if (!mediaSection) {
              mediaSection = new MediaSection_1.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  mid,
                  kind,
                  offerRtpParameters,
                  streamId,
                  trackId
              });
              this._addMediaSection(mediaSection);
          }
          // Plan-B.
          else {
              mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });
              this._replaceMediaSection(mediaSection);
          }
      }
      disableMediaSection(mid) {
          const idx = this._midToIndex.get(mid);
          if (idx === undefined) {
              throw new Error(`no media section found with mid '${mid}'`);
          }
          const mediaSection = this._mediaSections[idx];
          mediaSection.disable();
      }
      closeMediaSection(mid) {
          const idx = this._midToIndex.get(mid);
          if (idx === undefined) {
              throw new Error(`no media section found with mid '${mid}'`);
          }
          const mediaSection = this._mediaSections[idx];
          // NOTE: Closing the first m section is a pain since it invalidates the
          // bundled transport, so let's avoid it.
          if (mid === this._firstMid) {
              logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);
              this.disableMediaSection(mid);
              return;
          }
          mediaSection.close();
          // Regenerate BUNDLE mids.
          this._regenerateBundleMids();
      }
      planBStopReceiving({ mid, offerRtpParameters }) {
          const idx = this._midToIndex.get(mid);
          if (idx === undefined) {
              throw new Error(`no media section found with mid '${mid}'`);
          }
          const mediaSection = this._mediaSections[idx];
          mediaSection.planBStopReceiving({ offerRtpParameters });
          this._replaceMediaSection(mediaSection);
      }
      sendSctpAssociation({ offerMediaObject }) {
          const mediaSection = new MediaSection_1.AnswerMediaSection({
              iceParameters: this._iceParameters,
              iceCandidates: this._iceCandidates,
              dtlsParameters: this._dtlsParameters,
              sctpParameters: this._sctpParameters,
              plainRtpParameters: this._plainRtpParameters,
              offerMediaObject
          });
          this._addMediaSection(mediaSection);
      }
      receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {
          const mediaSection = new MediaSection_1.OfferMediaSection({
              iceParameters: this._iceParameters,
              iceCandidates: this._iceCandidates,
              dtlsParameters: this._dtlsParameters,
              sctpParameters: this._sctpParameters,
              plainRtpParameters: this._plainRtpParameters,
              mid: 'datachannel',
              kind: 'application',
              oldDataChannelSpec
          });
          this._addMediaSection(mediaSection);
      }
      getSdp() {
          // Increase SDP version.
          this._sdpObject.origin.sessionVersion++;
          return lib$4.write(this._sdpObject);
      }
      _addMediaSection(newMediaSection) {
          if (!this._firstMid)
              this._firstMid = newMediaSection.mid;
          // Add to the vector.
          this._mediaSections.push(newMediaSection);
          // Add to the map.
          this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);
          // Add to the SDP object.
          this._sdpObject.media.push(newMediaSection.getObject());
          // Regenerate BUNDLE mids.
          this._regenerateBundleMids();
      }
      _replaceMediaSection(newMediaSection, reuseMid) {
          // Store it in the map.
          if (typeof reuseMid === 'string') {
              const idx = this._midToIndex.get(reuseMid);
              if (idx === undefined) {
                  throw new Error(`no media section found for reuseMid '${reuseMid}'`);
              }
              const oldMediaSection = this._mediaSections[idx];
              // Replace the index in the vector with the new media section.
              this._mediaSections[idx] = newMediaSection;
              // Update the map.
              this._midToIndex.delete(oldMediaSection.mid);
              this._midToIndex.set(newMediaSection.mid, idx);
              // Update the SDP object.
              this._sdpObject.media[idx] = newMediaSection.getObject();
              // Regenerate BUNDLE mids.
              this._regenerateBundleMids();
          }
          else {
              const idx = this._midToIndex.get(newMediaSection.mid);
              if (idx === undefined) {
                  throw new Error(`no media section found with mid '${newMediaSection.mid}'`);
              }
              // Replace the index in the vector with the new media section.
              this._mediaSections[idx] = newMediaSection;
              // Update the SDP object.
              this._sdpObject.media[idx] = newMediaSection.getObject();
          }
      }
      _regenerateBundleMids() {
          if (!this._dtlsParameters)
              return;
          this._sdpObject.groups[0].mids = this._mediaSections
              .filter((mediaSection) => !mediaSection.closed)
              .map((mediaSection) => mediaSection.mid)
              .join(' ');
      }
  }
  exports.RemoteSdp = RemoteSdp;
  });

  unwrapExports(RemoteSdp_1);
  var RemoteSdp_2 = RemoteSdp_1.RemoteSdp;

  var scalabilityModes = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})');
  function parse(scalabilityMode) {
      const match = ScalabilityModeRegex.exec(scalabilityMode || '');
      if (match) {
          return {
              spatialLayers: Number(match[1]),
              temporalLayers: Number(match[2])
          };
      }
      else {
          return {
              spatialLayers: 1,
              temporalLayers: 1
          };
      }
  }
  exports.parse = parse;
  });

  unwrapExports(scalabilityModes);
  var scalabilityModes_1 = scalabilityModes.parse;

  var Chrome74_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1.Logger('Chrome74');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Chrome74 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Map of RTCTransceivers indexed by MID.
          this._mapMidTransceiver = new Map();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Chrome74();
      }
      get name() {
          return 'Chrome74';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'unified-plan'
          });
          try {
              pc.addTransceiver('audio');
              pc.addTransceiver('video');
              const offer = await pc.createOffer();
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'unified-plan',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (encodings && encodings.length > 1) {
              encodings.forEach((encoding, idx) => {
                  encoding.rid = `r${idx}`;
              });
          }
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
          const transceiver = this._pc.addTransceiver(track, {
              direction: 'sendonly',
              streams: [this._sendStream],
              sendEncodings: encodings
          });
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          // Special case for VP9 with SVC.
          let hackVp9Svc = false;
          const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
          if (encodings &&
              encodings.length === 1 &&
              layers.spatialLayers > 1 &&
              sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
              logger.debug('send() | enabling legacy simulcast for VP9 SVC');
              hackVp9Svc = true;
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
              unifiedPlanUtils.addLegacySimulcast({
                  offerMediaObject,
                  numStreams: layers.spatialLayers
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          // We can now get the transceiver.mid.
          const localId = transceiver.mid;
          // Set MID.
          sendingRtpParameters.mid = localId;
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings by parsing the SDP offer if no encodings are given.
          if (!encodings) {
              sendingRtpParameters.encodings =
                  unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
          }
          // Set RTP encodings by parsing the SDP offer and complete them with given
          // one if just a single encoding has been given.
          else if (encodings.length === 1) {
              let newEncodings = unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
              Object.assign(newEncodings[0], encodings[0]);
              // Hack for VP9 SVC.
              if (hackVp9Svc)
                  newEncodings = [newEncodings[0]];
              sendingRtpParameters.encodings = newEncodings;
          }
          // Otherwise if more than 1 encoding are given use them verbatim.
          else {
              sendingRtpParameters.encodings = encodings;
          }
          // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
          // each encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
                  sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              reuseMid: mediaSectionIdx.reuseMid,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions,
              extmapAllowMixed: true
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              rtpParameters: sendingRtpParameters,
              rtpSender: transceiver.sender
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          transceiver.sender.replaceTrack(null);
          this._pc.removeTrack(transceiver.sender);
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          await transceiver.sender.replaceTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await transceiver.sender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await transceiver.sender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.sender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
          this._remoteSdp.receive({
              mid: localId,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === localId);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const transceiver = this._pc.getTransceivers()
              .find((t) => t.mid === localId);
          if (!transceiver)
              throw new Error('new RTCRtpTransceiver not found');
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              track: transceiver.receiver.track,
              rtpReceiver: transceiver.receiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.receiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation();
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Chrome74 = Chrome74;
  });

  unwrapExports(Chrome74_1);
  var Chrome74_2 = Chrome74_1.Chrome74;

  var Chrome70_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1.Logger('Chrome70');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Chrome70 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Map of RTCTransceivers indexed by MID.
          this._mapMidTransceiver = new Map();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Chrome70();
      }
      get name() {
          return 'Chrome70';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'unified-plan'
          });
          try {
              pc.addTransceiver('audio');
              pc.addTransceiver('video');
              const offer = await pc.createOffer();
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'unified-plan',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
          const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (encodings && encodings.length > 1) {
              logger.debug('send() | enabling legacy simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
              unifiedPlanUtils.addLegacySimulcast({
                  offerMediaObject,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          // Special case for VP9 with SVC.
          let hackVp9Svc = false;
          const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
          if (encodings &&
              encodings.length === 1 &&
              layers.spatialLayers > 1 &&
              sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
              logger.debug('send() | enabling legacy simulcast for VP9 SVC');
              hackVp9Svc = true;
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
              unifiedPlanUtils.addLegacySimulcast({
                  offerMediaObject,
                  numStreams: layers.spatialLayers
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          // If encodings are given, apply them now.
          if (encodings) {
              logger.debug('send() | applying given encodings');
              const parameters = transceiver.sender.getParameters();
              for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {
                  const encoding = parameters.encodings[idx];
                  const desiredEncoding = encodings[idx];
                  // Should not happen but just in case.
                  if (!desiredEncoding)
                      break;
                  parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);
              }
              await transceiver.sender.setParameters(parameters);
          }
          // We can now get the transceiver.mid.
          const localId = transceiver.mid;
          // Set MID.
          sendingRtpParameters.mid = localId;
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // Hack for VP9 SVC.
          if (hackVp9Svc) {
              sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];
          }
          // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
          // each encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
                  sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              reuseMid: mediaSectionIdx.reuseMid,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              rtpParameters: sendingRtpParameters,
              rtpSender: transceiver.sender
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          transceiver.sender.replaceTrack(null);
          this._pc.removeTrack(transceiver.sender);
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          await transceiver.sender.replaceTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await transceiver.sender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await transceiver.sender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.sender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
          this._remoteSdp.receive({
              mid: localId,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === localId);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const transceiver = this._pc.getTransceivers()
              .find((t) => t.mid === localId);
          if (!transceiver)
              throw new Error('new RTCRtpTransceiver not found');
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              track: transceiver.receiver.track,
              rtpReceiver: transceiver.receiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.receiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation();
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Chrome70 = Chrome70;
  });

  unwrapExports(Chrome70_1);
  var Chrome70_2 = Chrome70_1.Chrome70;

  var planBUtils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function getRtpEncodings({ offerMediaObject, track }) {
      const ssrcs = new Set();
      for (const line of offerMediaObject.ssrcs || []) {
          if (line.attribute !== 'msid')
              continue;
          const trackId = line.value.split(' ')[1];
          if (trackId === track.id) {
              const ssrc = line.id;
              ssrcs.add(ssrc);
          }
      }
      if (ssrcs.size === 0)
          throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
      const ssrcToRtxSsrc = new Map();
      // First assume RTX is used.
      for (const line of offerMediaObject.ssrcGroups || []) {
          if (line.semantics !== 'FID')
              continue;
          let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
          ssrc = Number(ssrc);
          rtxSsrc = Number(rtxSsrc);
          if (ssrcs.has(ssrc)) {
              // Remove both the SSRC and RTX SSRC from the set so later we know that they
              // are already handled.
              ssrcs.delete(ssrc);
              ssrcs.delete(rtxSsrc);
              // Add to the map.
              ssrcToRtxSsrc.set(ssrc, rtxSsrc);
          }
      }
      // If the set of SSRCs is not empty it means that RTX is not being used, so take
      // media SSRCs from there.
      for (const ssrc of ssrcs) {
          // Add to the map.
          ssrcToRtxSsrc.set(ssrc, null);
      }
      const encodings = [];
      for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
          const encoding = { ssrc };
          if (rtxSsrc)
              encoding.rtx = { ssrc: rtxSsrc };
          encodings.push(encoding);
      }
      return encodings;
  }
  exports.getRtpEncodings = getRtpEncodings;
  /**
   * Adds multi-ssrc based simulcast into the given SDP media section offer.
   */
  function addLegacySimulcast({ offerMediaObject, track, numStreams }) {
      if (numStreams <= 1)
          throw new TypeError('numStreams must be greater than 1');
      let firstSsrc;
      let firstRtxSsrc;
      let streamId;
      // Get the SSRC.
      const ssrcMsidLine = (offerMediaObject.ssrcs || [])
          .find((line) => {
          if (line.attribute !== 'msid')
              return false;
          const trackId = line.value.split(' ')[1];
          if (trackId === track.id) {
              firstSsrc = line.id;
              streamId = line.value.split(' ')[0];
              return true;
          }
          else {
              return false;
          }
      });
      if (!ssrcMsidLine)
          throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
      // Get the SSRC for RTX.
      (offerMediaObject.ssrcGroups || [])
          .some((line) => {
          if (line.semantics !== 'FID')
              return false;
          const ssrcs = line.ssrcs.split(/\s+/);
          if (Number(ssrcs[0]) === firstSsrc) {
              firstRtxSsrc = Number(ssrcs[1]);
              return true;
          }
          else {
              return false;
          }
      });
      const ssrcCnameLine = offerMediaObject.ssrcs
          .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));
      if (!ssrcCnameLine)
          throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);
      const cname = ssrcCnameLine.value;
      const ssrcs = [];
      const rtxSsrcs = [];
      for (let i = 0; i < numStreams; ++i) {
          ssrcs.push(firstSsrc + i);
          if (firstRtxSsrc)
              rtxSsrcs.push(firstRtxSsrc + i);
      }
      offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];
      offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];
      offerMediaObject.ssrcGroups.push({
          semantics: 'SIM',
          ssrcs: ssrcs.join(' ')
      });
      for (let i = 0; i < ssrcs.length; ++i) {
          const ssrc = ssrcs[i];
          offerMediaObject.ssrcs.push({
              id: ssrc,
              attribute: 'cname',
              value: cname
          });
          offerMediaObject.ssrcs.push({
              id: ssrc,
              attribute: 'msid',
              value: `${streamId} ${track.id}`
          });
      }
      for (let i = 0; i < rtxSsrcs.length; ++i) {
          const ssrc = ssrcs[i];
          const rtxSsrc = rtxSsrcs[i];
          offerMediaObject.ssrcs.push({
              id: rtxSsrc,
              attribute: 'cname',
              value: cname
          });
          offerMediaObject.ssrcs.push({
              id: rtxSsrc,
              attribute: 'msid',
              value: `${streamId} ${track.id}`
          });
          offerMediaObject.ssrcGroups.push({
              semantics: 'FID',
              ssrcs: `${ssrc} ${rtxSsrc}`
          });
      }
  }
  exports.addLegacySimulcast = addLegacySimulcast;
  });

  unwrapExports(planBUtils);
  var planBUtils_1 = planBUtils.getRtpEncodings;
  var planBUtils_2 = planBUtils.addLegacySimulcast;

  var Chrome67_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });








  const logger = new Logger_1.Logger('Chrome67');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Chrome67 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Map of RTCRtpSender indexed by localId.
          this._mapSendLocalIdRtpSender = new Map();
          // Next sending localId.
          this._nextSendLocalId = 0;
          // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
          // Value is an Object with mid, rtpParameters and rtpReceiver.
          this._mapRecvLocalIdInfo = new Map();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Chrome67();
      }
      get name() {
          return 'Chrome67';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b'
          });
          try {
              const offer = await pc.createOffer({
                  offerToReceiveAudio: true,
                  offerToReceiveVideo: true
              });
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              planB: true
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (codec) {
              logger.warn('send() | codec selection is not available in %s handler', this.name);
          }
          this._sendStream.addTrack(track);
          this._pc.addTrack(track, this._sendStream);
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (track.kind === 'video' && encodings && encodings.length > 1) {
              logger.debug('send() | enabling simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'video');
              planBUtils.addLegacySimulcast({
                  offerMediaObject,
                  track,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media
              .find((m) => m.type === track.kind);
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              planBUtils.getRtpEncodings({ offerMediaObject, track });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // If VP8 and there is effective simulcast, add scalabilityMode to each
          // encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          const localId = String(this._nextSendLocalId);
          this._nextSendLocalId++;
          const rtpSender = this._pc.getSenders()
              .find((s) => s.track === track);
          // Insert into the map.
          this._mapSendLocalIdRtpSender.set(localId, rtpSender);
          return {
              localId: localId,
              rtpParameters: sendingRtpParameters,
              rtpSender
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          this._pc.removeTrack(rtpSender);
          if (rtpSender.track)
              this._sendStream.removeTrack(rtpSender.track);
          this._mapSendLocalIdRtpSender.delete(localId);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          try {
              await this._pc.setLocalDescription(offer);
          }
          catch (error) {
              // NOTE: If there are no sending tracks, setLocalDescription() will fail with
              // "Failed to create channels". If so, ignore it.
              if (this._sendStream.getTracks().length === 0) {
                  logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
                  return;
              }
              throw error;
          }
          if (this._pc.signalingState === 'stable')
              return;
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const oldTrack = rtpSender.track;
          await rtpSender.replaceTrack(track);
          // Remove the old track from the local stream.
          if (oldTrack)
              this._sendStream.removeTrack(oldTrack);
          // Add the new track to the local stream.
          if (track)
              this._sendStream.addTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await rtpSender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await rtpSender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          return rtpSender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = trackId;
          const mid = kind;
          this._remoteSdp.receive({
              mid,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === mid);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const rtpReceiver = this._pc.getReceivers()
              .find((r) => r.track && r.track.id === localId);
          if (!rtpReceiver)
              throw new Error('new RTCRtpReceiver not');
          // Insert into the map.
          this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
          return {
              localId,
              track: rtpReceiver.track,
              rtpReceiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
          // Remove from the map.
          this._mapRecvLocalIdInfo.delete(localId);
          this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
          if (!rtpReceiver)
              throw new Error('associated RTCRtpReceiver not found');
          return rtpReceiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Chrome67 = Chrome67;
  });

  unwrapExports(Chrome67_1);
  var Chrome67_2 = Chrome67_1.Chrome67;

  var Chrome55_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1.Logger('Chrome55');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Chrome55 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Map of sending MediaStreamTracks indexed by localId.
          this._mapSendLocalIdTrack = new Map();
          // Next sending localId.
          this._nextSendLocalId = 0;
          // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
          // Value is an Object with mid, rtpParameters and rtpReceiver.
          this._mapRecvLocalIdInfo = new Map();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Chrome55();
      }
      get name() {
          return 'Chrome55';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b'
          });
          try {
              const offer = await pc.createOffer({
                  offerToReceiveAudio: true,
                  offerToReceiveVideo: true
              });
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              planB: true
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (codec) {
              logger.warn('send() | codec selection is not available in %s handler', this.name);
          }
          this._sendStream.addTrack(track);
          this._pc.addStream(this._sendStream);
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (track.kind === 'video' && encodings && encodings.length > 1) {
              logger.debug('send() | enabling simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
              planBUtils.addLegacySimulcast({
                  offerMediaObject,
                  track,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media
              .find((m) => m.type === track.kind);
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              planBUtils.getRtpEncodings({ offerMediaObject, track });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // If VP8 and there is effective simulcast, add scalabilityMode to each
          // encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          const localId = String(this._nextSendLocalId);
          this._nextSendLocalId++;
          // Insert into the map.
          this._mapSendLocalIdTrack.set(localId, track);
          return {
              localId: localId,
              rtpParameters: sendingRtpParameters
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const track = this._mapSendLocalIdTrack.get(localId);
          if (!track)
              throw new Error('track not found');
          this._mapSendLocalIdTrack.delete(localId);
          this._sendStream.removeTrack(track);
          this._pc.addStream(this._sendStream);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          try {
              await this._pc.setLocalDescription(offer);
          }
          catch (error) {
              // NOTE: If there are no sending tracks, setLocalDescription() will fail with
              // "Failed to create channels". If so, ignore it.
              if (this._sendStream.getTracks().length === 0) {
                  logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
                  return;
              }
              throw error;
          }
          if (this._pc.signalingState === 'stable')
              return;
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      localId, track) {
          throw new errors.UnsupportedError('not implemented');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async setMaxSpatialLayer(localId, spatialLayer) {
          throw new errors.UnsupportedError(' not implemented');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async setRtpEncodingParameters(localId, params) {
          throw new errors.UnsupportedError('not supported');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async getSenderStats(localId) {
          throw new errors.UnsupportedError('not implemented');
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = trackId;
          const mid = kind;
          const streamId = rtpParameters.rtcp.cname;
          this._remoteSdp.receive({
              mid,
              kind,
              offerRtpParameters: rtpParameters,
              streamId,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === mid);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const stream = this._pc.getRemoteStreams()
              .find((s) => s.id === streamId);
          const track = stream.getTrackById(localId);
          if (!track)
              throw new Error('remote track not found');
          // Insert into the map.
          this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
          return { localId, track };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
          // Remove from the map.
          this._mapRecvLocalIdInfo.delete(localId);
          this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async getReceiverStats(localId) {
          throw new errors.UnsupportedError('not implemented');
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Chrome55 = Chrome55;
  });

  unwrapExports(Chrome55_1);
  var Chrome55_2 = Chrome55_1.Chrome55;

  var Firefox60_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1.Logger('Firefox60');
  const SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };
  class Firefox60 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Map of RTCTransceivers indexed by MID.
          this._mapMidTransceiver = new Map();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Firefox60();
      }
      get name() {
          return 'Firefox60';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require'
          });
          // NOTE: We need to add a real video track to get the RID extension mapping.
          const canvas = document.createElement('canvas');
          // NOTE: Otherwise Firefox fails in next line.
          canvas.getContext('2d');
          const fakeStream = canvas.captureStream();
          const fakeVideoTrack = fakeStream.getVideoTracks()[0];
          try {
              pc.addTransceiver('audio', { direction: 'sendrecv' });
              const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });
              const parameters = videoTransceiver.sender.getParameters();
              const encodings = [
                  { rid: 'r0', maxBitrate: 100000 },
                  { rid: 'r1', maxBitrate: 500000 }
              ];
              parameters.encodings = encodings;
              await videoTransceiver.sender.setParameters(parameters);
              const offer = await pc.createOffer();
              try {
                  canvas.remove();
              }
              catch (error) { }
              try {
                  fakeVideoTrack.stop();
              }
              catch (error) { }
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  canvas.remove();
              }
              catch (error2) { }
              try {
                  fakeVideoTrack.stop();
              }
              catch (error2) { }
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async updateIceServers(iceServers) {
          // NOTE: Firefox does not implement pc.setConfiguration().
          throw new errors.UnsupportedError('not supported');
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          let reverseEncodings;
          if (encodings && encodings.length > 1) {
              encodings.forEach((encoding, idx) => {
                  encoding.rid = `r${idx}`;
              });
              // Clone the encodings and reverse them because Firefox likes them
              // from high to low.
              reverseEncodings = utils.clone(encodings).reverse();
          }
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
          // NOTE: Firefox fails sometimes to properly anticipate the closed media
          // section that it should use, so don't reuse closed media sections.
          //   https://github.com/versatica/mediasoup-client/issues/104
          //
          // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();
          const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
          // NOTE: This is not spec compliants. Encodings should be given in addTransceiver
          // second argument, but Firefox does not support it.
          if (reverseEncodings) {
              const parameters = transceiver.sender.getParameters();
              parameters.encodings = reverseEncodings;
              await transceiver.sender.setParameters(parameters);
          }
          const offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          // In Firefox use DTLS role client even if we are the "offerer" since
          // Firefox does not respect ICE-Lite.
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          // We can now get the transceiver.mid.
          const localId = transceiver.mid;
          // Set MID.
          sendingRtpParameters.mid = localId;
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings by parsing the SDP offer if no encodings are given.
          if (!encodings) {
              sendingRtpParameters.encodings =
                  unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
          }
          // Set RTP encodings by parsing the SDP offer and complete them with given
          // one if just a single encoding has been given.
          else if (encodings.length === 1) {
              const newEncodings = unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
              Object.assign(newEncodings[0], encodings[0]);
              sendingRtpParameters.encodings = newEncodings;
          }
          // Otherwise if more than 1 encoding are given use them verbatim.
          else {
              sendingRtpParameters.encodings = encodings;
          }
          // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
          // each encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
                  sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions,
              extmapAllowMixed: true
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              rtpParameters: sendingRtpParameters,
              rtpSender: transceiver.sender
          };
      }
      async stopSending(localId) {
          logger.debug('stopSending() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated transceiver not found');
          transceiver.sender.replaceTrack(null);
          this._pc.removeTrack(transceiver.sender);
          // NOTE: Cannot use closeMediaSection() due to the the note above in send()
          // method.
          // this._remoteSdp!.closeMediaSection(transceiver.mid);
          this._remoteSdp.disableMediaSection(transceiver.mid);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          await transceiver.sender.replaceTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated transceiver not found');
          const parameters = transceiver.sender.getParameters();
          // NOTE: We require encodings given from low to high, however Firefox
          // requires them in reverse order, so do magic here.
          spatialLayer = parameters.encodings.length - 1 - spatialLayer;
          parameters.encodings.forEach((encoding, idx) => {
              if (idx >= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await transceiver.sender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await transceiver.sender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.sender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
          this._remoteSdp.receive({
              mid: localId,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === localId);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const transceiver = this._pc.getTransceivers()
              .find((t) => t.mid === localId);
          if (!transceiver)
              throw new Error('new RTCRtpTransceiver not found');
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              track: transceiver.receiver.track,
              rtpReceiver: transceiver.receiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.receiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation();
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Firefox60 = Firefox60;
  });

  unwrapExports(Firefox60_1);
  var Firefox60_2 = Firefox60_1.Firefox60;

  var Safari12_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });








  const logger = new Logger_1.Logger('Safari12');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Safari12 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Map of RTCTransceivers indexed by MID.
          this._mapMidTransceiver = new Map();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Safari12();
      }
      get name() {
          return 'Safari12';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require'
          });
          try {
              pc.addTransceiver('audio');
              pc.addTransceiver('video');
              const offer = await pc.createOffer();
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          // This may throw.
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
          const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (encodings && encodings.length > 1) {
              logger.debug('send() | enabling legacy simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
              unifiedPlanUtils.addLegacySimulcast({
                  offerMediaObject,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          // We can now get the transceiver.mid.
          const localId = transceiver.mid;
          // Set MID.
          sendingRtpParameters.mid = localId;
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
          // each encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
                  sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              reuseMid: mediaSectionIdx.reuseMid,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              rtpParameters: sendingRtpParameters,
              rtpSender: transceiver.sender
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          transceiver.sender.replaceTrack(null);
          this._pc.removeTrack(transceiver.sender);
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          await transceiver.sender.replaceTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await transceiver.sender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          const parameters = transceiver.sender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await transceiver.sender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.sender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
          this._remoteSdp.receive({
              mid: localId,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === localId);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const transceiver = this._pc.getTransceivers()
              .find((t) => t.mid === localId);
          if (!transceiver)
              throw new Error('new RTCRtpTransceiver not found');
          // Store in the map.
          this._mapMidTransceiver.set(localId, transceiver);
          return {
              localId,
              track: transceiver.receiver.track,
              rtpReceiver: transceiver.receiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          this._remoteSdp.closeMediaSection(transceiver.mid);
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const transceiver = this._mapMidTransceiver.get(localId);
          if (!transceiver)
              throw new Error('associated RTCRtpTransceiver not found');
          return transceiver.receiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation();
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Safari12 = Safari12;
  });

  unwrapExports(Safari12_1);
  var Safari12_2 = Safari12_1.Safari12;

  var Safari11_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });








  const logger = new Logger_1.Logger('Safari11');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class Safari11 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Map of RTCRtpSender indexed by localId.
          this._mapSendLocalIdRtpSender = new Map();
          // Next sending localId.
          this._nextSendLocalId = 0;
          // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
          // Value is an Object with mid, rtpParameters and rtpReceiver.
          this._mapRecvLocalIdInfo = new Map();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Safari11();
      }
      get name() {
          return 'Safari11';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b'
          });
          try {
              const offer = await pc.createOffer({
                  offerToReceiveAudio: true,
                  offerToReceiveVideo: true
              });
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              planB: true
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (codec) {
              logger.warn('send() | codec selection is not available in %s handler', this.name);
          }
          this._sendStream.addTrack(track);
          this._pc.addTrack(track, this._sendStream);
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (track.kind === 'video' && encodings && encodings.length > 1) {
              logger.debug('send() | enabling simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
              planBUtils.addLegacySimulcast({
                  offerMediaObject,
                  track,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media
              .find((m) => m.type === track.kind);
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              planBUtils.getRtpEncodings({ offerMediaObject, track });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // If VP8 and there is effective simulcast, add scalabilityMode to each
          // encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          const localId = String(this._nextSendLocalId);
          this._nextSendLocalId++;
          const rtpSender = this._pc.getSenders()
              .find((s) => s.track === track);
          // Insert into the map.
          this._mapSendLocalIdRtpSender.set(localId, rtpSender);
          return {
              localId: localId,
              rtpParameters: sendingRtpParameters,
              rtpSender
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          if (rtpSender.track)
              this._sendStream.removeTrack(rtpSender.track);
          this._mapSendLocalIdRtpSender.delete(localId);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          try {
              await this._pc.setLocalDescription(offer);
          }
          catch (error) {
              // NOTE: If there are no sending tracks, setLocalDescription() will fail with
              // "Failed to create channels". If so, ignore it.
              if (this._sendStream.getTracks().length === 0) {
                  logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
                  return;
              }
              throw error;
          }
          if (this._pc.signalingState === 'stable')
              return;
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(localId, track) {
          this._assertSendDirection();
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const oldTrack = rtpSender.track;
          await rtpSender.replaceTrack(track);
          // Remove the old track from the local stream.
          if (oldTrack)
              this._sendStream.removeTrack(oldTrack);
          // Add the new track to the local stream.
          if (track)
              this._sendStream.addTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          this._assertSendDirection();
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await rtpSender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          this._assertSendDirection();
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await rtpSender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          this._assertSendDirection();
          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
          if (!rtpSender)
              throw new Error('associated RTCRtpSender not found');
          return rtpSender.getStats();
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = trackId;
          const mid = kind;
          this._remoteSdp.receive({
              mid,
              kind,
              offerRtpParameters: rtpParameters,
              streamId: rtpParameters.rtcp.cname,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === mid);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const rtpReceiver = this._pc.getReceivers()
              .find((r) => r.track && r.track.id === localId);
          if (!rtpReceiver)
              throw new Error('new RTCRtpReceiver not');
          // Insert into the map.
          this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
          return {
              localId,
              track: rtpReceiver.track,
              rtpReceiver
          };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
          // Remove from the map.
          this._mapRecvLocalIdInfo.delete(localId);
          this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      async getReceiverStats(localId) {
          this._assertRecvDirection();
          const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
          if (!rtpReceiver)
              throw new Error('associated RTCRtpReceiver not found');
          return rtpReceiver.getStats();
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.Safari11 = Safari11;
  });

  unwrapExports(Safari11_1);
  var Safari11_2 = Safari11_1.Safari11;

  var edgeUtils = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  /**
   * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full
   * compliant ORTC RTCRtpCapabilities.
   */
  function getCapabilities() {
      const nativeCaps = RTCRtpReceiver.getCapabilities();
      const caps = utils.clone(nativeCaps);
      for (const codec of caps.codecs) {
          // Rename numChannels to channels.
          codec.channels = codec.numChannels;
          delete codec.numChannels;
          // Add mimeType.
          codec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;
          // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.
          if (codec.parameters) {
              const parameters = codec.parameters;
              if (parameters.apt)
                  parameters.apt = Number(parameters.apt);
              if (parameters['packetization-mode'])
                  parameters['packetization-mode'] = Number(parameters['packetization-mode']);
          }
          // Delete emty parameter String in rtcpFeedback.
          for (const feedback of codec.rtcpFeedback || []) {
              if (!feedback.parameter)
                  feedback.parameter = '';
          }
      }
      return caps;
  }
  exports.getCapabilities = getCapabilities;
  /**
   * Generate RTCRtpParameters as ORTC based Edge likes.
   */
  function mangleRtpParameters(rtpParameters) {
      const params = utils.clone(rtpParameters);
      // Rename mid to muxId.
      if (params.mid) {
          params.muxId = params.mid;
          delete params.mid;
      }
      for (const codec of params.codecs) {
          // Rename channels to numChannels.
          if (codec.channels) {
              codec.numChannels = codec.channels;
              delete codec.channels;
          }
          // Add codec.name (requried by Edge).
          if (codec.mimeType && !codec.name)
              codec.name = codec.mimeType.split('/')[1];
          // Remove mimeType.
          delete codec.mimeType;
      }
      return params;
  }
  exports.mangleRtpParameters = mangleRtpParameters;
  });

  unwrapExports(edgeUtils);
  var edgeUtils_1 = edgeUtils.getCapabilities;
  var edgeUtils_2 = edgeUtils.mangleRtpParameters;

  var Edge11_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });






  const logger = new Logger_1.Logger('Edge11');
  class Edge11 extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Map of RTCRtpSenders indexed by id.
          this._rtpSenders = new Map();
          // Map of RTCRtpReceivers indexed by id.
          this._rtpReceivers = new Map();
          // Next localId for sending tracks.
          this._nextSendLocalId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new Edge11();
      }
      get name() {
          return 'Edge11';
      }
      close() {
          logger.debug('close()');
          // Close the ICE gatherer.
          // NOTE: Not yet implemented by Edge.
          try {
              this._iceGatherer.close();
          }
          catch (error) { }
          // Close the ICE transport.
          try {
              this._iceTransport.stop();
          }
          catch (error) { }
          // Close the DTLS transport.
          try {
              this._dtlsTransport.stop();
          }
          catch (error) { }
          // Close RTCRtpSenders.
          for (const rtpSender of this._rtpSenders.values()) {
              try {
                  rtpSender.stop();
              }
              catch (error) { }
          }
          // Close RTCRtpReceivers.
          for (const rtpReceiver of this._rtpReceivers.values()) {
              try {
                  rtpReceiver.stop();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          return edgeUtils.getCapabilities();
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: { OS: 0, MIS: 0 }
          };
      }
      run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars
      iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars
      iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars
      proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars
      extendedRtpCapabilities }) {
          logger.debug('run()');
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._remoteIceParameters = iceParameters;
          this._remoteIceCandidates = iceCandidates;
          this._remoteDtlsParameters = dtlsParameters;
          this._cname = `CNAME-${utils.generateRandomNumber()}`;
          this._setIceGatherer({ iceServers, iceTransportPolicy });
          this._setIceTransport();
          this._setDtlsTransport();
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async updateIceServers(iceServers) {
          // NOTE: Edge 11 does not implement iceGatherer.gater().
          throw new errors.UnsupportedError('not supported');
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          this._remoteIceParameters = iceParameters;
          if (!this._transportReady)
              return;
          logger.debug('restartIce() | calling iceTransport.start()');
          this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');
          for (const candidate of this._remoteIceCandidates) {
              this._iceTransport.addRemoteCandidate(candidate);
          }
          this._iceTransport.addRemoteCandidate({});
      }
      async getTransportStats() {
          return this._iceTransport.getStats();
      }
      async send(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      { track, encodings, codecOptions, codec }) {
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server' });
          logger.debug('send() | calling new RTCRtpSender()');
          const rtpSender = new RTCRtpSender(track, this._dtlsTransport);
          const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);
          const useRtx = rtpParameters.codecs
              .some((_codec) => /.+\/rtx$/i.test(_codec.mimeType));
          if (!encodings)
              encodings = [{}];
          for (const encoding of encodings) {
              encoding.ssrc = utils.generateRandomNumber();
              if (useRtx)
                  encoding.rtx = { ssrc: utils.generateRandomNumber() };
          }
          rtpParameters.encodings = encodings;
          // Fill RTCRtpParameters.rtcp.
          rtpParameters.rtcp =
              {
                  cname: this._cname,
                  reducedSize: true,
                  mux: true
              };
          // NOTE: Convert our standard RTCRtpParameters into those that Edge
          // expects.
          const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
          logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);
          await rtpSender.send(edgeRtpParameters);
          const localId = String(this._nextSendLocalId);
          this._nextSendLocalId++;
          // Store it.
          this._rtpSenders.set(localId, rtpSender);
          return { localId, rtpParameters, rtpSender };
      }
      async stopSending(localId) {
          logger.debug('stopSending() [localId:%s]', localId);
          const rtpSender = this._rtpSenders.get(localId);
          if (!rtpSender)
              throw new Error('RTCRtpSender not found');
          this._rtpSenders.delete(localId);
          try {
              logger.debug('stopSending() | calling rtpSender.stop()');
              rtpSender.stop();
          }
          catch (error) {
              logger.warn('stopSending() | rtpSender.stop() failed:%o', error);
              throw error;
          }
      }
      async replaceTrack(localId, track) {
          if (track) {
              logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
          }
          else {
              logger.debug('replaceTrack() [localId:%s, no track]', localId);
          }
          const rtpSender = this._rtpSenders.get(localId);
          if (!rtpSender)
              throw new Error('RTCRtpSender not found');
          rtpSender.setTrack(track);
      }
      async setMaxSpatialLayer(localId, spatialLayer) {
          logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
          const rtpSender = this._rtpSenders.get(localId);
          if (!rtpSender)
              throw new Error('RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings
              .forEach((encoding, idx) => {
              if (idx <= spatialLayer)
                  encoding.active = true;
              else
                  encoding.active = false;
          });
          await rtpSender.setParameters(parameters);
      }
      async setRtpEncodingParameters(localId, params) {
          logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
          const rtpSender = this._rtpSenders.get(localId);
          if (!rtpSender)
              throw new Error('RTCRtpSender not found');
          const parameters = rtpSender.getParameters();
          parameters.encodings.forEach((encoding, idx) => {
              parameters.encodings[idx] = { ...encoding, ...params };
          });
          await rtpSender.setParameters(parameters);
      }
      async getSenderStats(localId) {
          const rtpSender = this._rtpSenders.get(localId);
          if (!rtpSender)
              throw new Error('RTCRtpSender not found');
          return rtpSender.getStats();
      }
      async sendDataChannel(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      options) {
          throw new errors.UnsupportedError('not implemented');
      }
      async receive({ trackId, kind, rtpParameters }) {
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server' });
          logger.debug('receive() | calling new RTCRtpReceiver()');
          const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);
          rtpReceiver.addEventListener('error', (event) => {
              logger.error('rtpReceiver "error" event [event:%o]', event);
          });
          // NOTE: Convert our standard RTCRtpParameters into those that Edge
          // expects.
          const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
          logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);
          await rtpReceiver.receive(edgeRtpParameters);
          const localId = trackId;
          // Store it.
          this._rtpReceivers.set(localId, rtpReceiver);
          return {
              localId,
              track: rtpReceiver.track,
              rtpReceiver
          };
      }
      async stopReceiving(localId) {
          logger.debug('stopReceiving() [localId:%s]', localId);
          const rtpReceiver = this._rtpReceivers.get(localId);
          if (!rtpReceiver)
              throw new Error('RTCRtpReceiver not found');
          this._rtpReceivers.delete(localId);
          try {
              logger.debug('stopReceiving() | calling rtpReceiver.stop()');
              rtpReceiver.stop();
          }
          catch (error) {
              logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);
          }
      }
      async getReceiverStats(localId) {
          const rtpReceiver = this._rtpReceivers.get(localId);
          if (!rtpReceiver)
              throw new Error('RTCRtpReceiver not found');
          return rtpReceiver.getStats();
      }
      async receiveDataChannel(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      options) {
          throw new errors.UnsupportedError('not implemented');
      }
      _setIceGatherer({ iceServers, iceTransportPolicy }) {
          const iceGatherer = new RTCIceGatherer({
              iceServers: iceServers || [],
              gatherPolicy: iceTransportPolicy || 'all'
          });
          iceGatherer.addEventListener('error', (event) => {
              logger.error('iceGatherer "error" event [event:%o]', event);
          });
          // NOTE: Not yet implemented by Edge, which starts gathering automatically.
          try {
              iceGatherer.gather();
          }
          catch (error) {
              logger.debug('_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());
          }
          this._iceGatherer = iceGatherer;
      }
      _setIceTransport() {
          const iceTransport = new RTCIceTransport(this._iceGatherer);
          // NOTE: Not yet implemented by Edge.
          iceTransport.addEventListener('statechange', () => {
              switch (iceTransport.state) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
          // NOTE: Not standard, but implemented by Edge.
          iceTransport.addEventListener('icestatechange', () => {
              switch (iceTransport.state) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
          iceTransport.addEventListener('candidatepairchange', (event) => {
              logger.debug('iceTransport "candidatepairchange" event [pair:%o]', event.pair);
          });
          this._iceTransport = iceTransport;
      }
      _setDtlsTransport() {
          const dtlsTransport = new RTCDtlsTransport(this._iceTransport);
          // NOTE: Not yet implemented by Edge.
          dtlsTransport.addEventListener('statechange', () => {
              logger.debug('dtlsTransport "statechange" event [state:%s]', dtlsTransport.state);
          });
          // NOTE: Not standard, but implemented by Edge.
          dtlsTransport.addEventListener('dtlsstatechange', () => {
              logger.debug('dtlsTransport "dtlsstatechange" event [state:%s]', dtlsTransport.state);
              if (dtlsTransport.state === 'closed')
                  this.emit('@connectionstatechange', 'closed');
          });
          dtlsTransport.addEventListener('error', (event) => {
              logger.error('dtlsTransport "error" event [event:%o]', event);
          });
          this._dtlsTransport = dtlsTransport;
      }
      async _setupTransport({ localDtlsRole }) {
          logger.debug('_setupTransport()');
          // Get our local DTLS parameters.
          const dtlsParameters = this._dtlsTransport.getLocalParameters();
          dtlsParameters.role = localDtlsRole;
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          // Start the RTCIceTransport.
          this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');
          // Add remote ICE candidates.
          for (const candidate of this._remoteIceCandidates) {
              this._iceTransport.addRemoteCandidate(candidate);
          }
          // Also signal a 'complete' candidate as per spec.
          // NOTE: It should be {complete: true} but Edge prefers {}.
          // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport
          // won't enter the 'completed' state.
          this._iceTransport.addRemoteCandidate({});
          // NOTE: Edge does not like SHA less than 256.
          this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints
              .filter((fingerprint) => {
              return (fingerprint.algorithm === 'sha-256' ||
                  fingerprint.algorithm === 'sha-384' ||
                  fingerprint.algorithm === 'sha-512');
          });
          // Start the RTCDtlsTransport.
          this._dtlsTransport.start(this._remoteDtlsParameters);
          this._transportReady = true;
      }
  }
  exports.Edge11 = Edge11;
  });

  unwrapExports(Edge11_1);
  var Edge11_2 = Edge11_1.Edge11;

  var ReactNative_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1.Logger('ReactNative');
  const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
  class ReactNative extends HandlerInterface_1.HandlerInterface {
      constructor() {
          super();
          // Local stream for sending.
          this._sendStream = new MediaStream();
          // Map of sending MediaStreamTracks indexed by localId.
          this._mapSendLocalIdTrack = new Map();
          // Next sending localId.
          this._nextSendLocalId = 0;
          // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
          // Value is an Object with mid, rtpParameters and rtpReceiver.
          this._mapRecvLocalIdInfo = new Map();
          // Whether a DataChannel m=application section has been created.
          this._hasDataChannelMediaSection = false;
          // Sending DataChannel id value counter. Incremented for each new DataChannel.
          this._nextSendSctpStreamId = 0;
          // Got transport local and remote parameters.
          this._transportReady = false;
      }
      /**
       * Creates a factory function.
       */
      static createFactory() {
          return () => new ReactNative();
      }
      get name() {
          return 'ReactNative';
      }
      close() {
          logger.debug('close()');
          // Close RTCPeerConnection.
          if (this._pc) {
              try {
                  this._pc.close();
              }
              catch (error) { }
          }
      }
      async getNativeRtpCapabilities() {
          logger.debug('getNativeRtpCapabilities()');
          const pc = new RTCPeerConnection({
              iceServers: [],
              iceTransportPolicy: 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b'
          });
          try {
              const offer = await pc.createOffer({
                  offerToReceiveAudio: true,
                  offerToReceiveVideo: true
              });
              try {
                  pc.close();
              }
              catch (error) { }
              const sdpObject = lib$4.parse(offer.sdp);
              const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
              return nativeRtpCapabilities;
          }
          catch (error) {
              try {
                  pc.close();
              }
              catch (error2) { }
              throw error;
          }
      }
      async getNativeSctpCapabilities() {
          logger.debug('getNativeSctpCapabilities()');
          return {
              numStreams: SCTP_NUM_STREAMS
          };
      }
      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
          logger.debug('run()');
          this._direction = direction;
          this._remoteSdp = new RemoteSdp_1.RemoteSdp({
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              planB: true
          });
          this._sendingRtpParametersByKind =
              {
                  audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
              };
          this._sendingRemoteRtpParametersByKind =
              {
                  audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
                  video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
              };
          this._pc = new RTCPeerConnection({
              iceServers: iceServers || [],
              iceTransportPolicy: iceTransportPolicy || 'all',
              bundlePolicy: 'max-bundle',
              rtcpMuxPolicy: 'require',
              sdpSemantics: 'plan-b',
              ...additionalSettings
          }, proprietaryConstraints);
          // Handle RTCPeerConnection connection status.
          this._pc.addEventListener('iceconnectionstatechange', () => {
              switch (this._pc.iceConnectionState) {
                  case 'checking':
                      this.emit('@connectionstatechange', 'connecting');
                      break;
                  case 'connected':
                  case 'completed':
                      this.emit('@connectionstatechange', 'connected');
                      break;
                  case 'failed':
                      this.emit('@connectionstatechange', 'failed');
                      break;
                  case 'disconnected':
                      this.emit('@connectionstatechange', 'disconnected');
                      break;
                  case 'closed':
                      this.emit('@connectionstatechange', 'closed');
                      break;
              }
          });
      }
      async updateIceServers(iceServers) {
          logger.debug('updateIceServers()');
          const configuration = this._pc.getConfiguration();
          configuration.iceServers = iceServers;
          this._pc.setConfiguration(configuration);
      }
      async restartIce(iceParameters) {
          logger.debug('restartIce()');
          // Provide the remote SDP handler with new remote ICE parameters.
          this._remoteSdp.updateIceParameters(iceParameters);
          if (!this._transportReady)
              return;
          if (this._direction === 'send') {
              const offer = await this._pc.createOffer({ iceRestart: true });
              logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
          }
          else {
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
          }
      }
      async getTransportStats() {
          return this._pc.getStats();
      }
      async send({ track, encodings, codecOptions, codec }) {
          this._assertSendDirection();
          logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
          if (codec) {
              logger.warn('send() | codec selection is not available in %s handler', this.name);
          }
          this._sendStream.addTrack(track);
          this._pc.addStream(this._sendStream);
          let offer = await this._pc.createOffer();
          let localSdpObject = lib$4.parse(offer.sdp);
          let offerMediaObject;
          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
          sendingRtpParameters.codecs =
              ortc.reduceCodecs(sendingRtpParameters.codecs);
          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
          sendingRemoteRtpParameters.codecs =
              ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
          if (track.kind === 'video' && encodings && encodings.length > 1) {
              logger.debug('send() | enabling simulcast');
              localSdpObject = lib$4.parse(offer.sdp);
              offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'video');
              planBUtils.addLegacySimulcast({
                  offerMediaObject,
                  track,
                  numStreams: encodings.length
              });
              offer = { type: 'offer', sdp: lib$4.write(localSdpObject) };
          }
          logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
          await this._pc.setLocalDescription(offer);
          localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          offerMediaObject = localSdpObject.media
              .find((m) => m.type === track.kind);
          // Set RTCP CNAME.
          sendingRtpParameters.rtcp.cname =
              commonUtils.getCname({ offerMediaObject });
          // Set RTP encodings.
          sendingRtpParameters.encodings =
              planBUtils.getRtpEncodings({ offerMediaObject, track });
          // Complete encodings with given values.
          if (encodings) {
              for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
                  if (encodings[idx])
                      Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
              }
          }
          // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
          // each encoding.
          if (sendingRtpParameters.encodings.length > 1 &&
              (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
                  sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
              for (const encoding of sendingRtpParameters.encodings) {
                  encoding.scalabilityMode = 'S1T3';
              }
          }
          this._remoteSdp.send({
              offerMediaObject,
              offerRtpParameters: sendingRtpParameters,
              answerRtpParameters: sendingRemoteRtpParameters,
              codecOptions
          });
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
          const localId = String(this._nextSendLocalId);
          this._nextSendLocalId++;
          // Insert into the map.
          this._mapSendLocalIdTrack.set(localId, track);
          return {
              localId: localId,
              rtpParameters: sendingRtpParameters
          };
      }
      async stopSending(localId) {
          this._assertSendDirection();
          logger.debug('stopSending() [localId:%s]', localId);
          const track = this._mapSendLocalIdTrack.get(localId);
          if (!track)
              throw new Error('track not found');
          this._mapSendLocalIdTrack.delete(localId);
          this._sendStream.removeTrack(track);
          this._pc.addStream(this._sendStream);
          const offer = await this._pc.createOffer();
          logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
          try {
              await this._pc.setLocalDescription(offer);
          }
          catch (error) {
              // NOTE: If there are no sending tracks, setLocalDescription() will fail with
              // "Failed to create channels". If so, ignore it.
              if (this._sendStream.getTracks().length === 0) {
                  logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
                  return;
              }
              throw error;
          }
          if (this._pc.signalingState === 'stable')
              return;
          const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
          await this._pc.setRemoteDescription(answer);
      }
      async replaceTrack(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      localId, track) {
          throw new errors.UnsupportedError('not implemented');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async setMaxSpatialLayer(localId, spatialLayer) {
          throw new errors.UnsupportedError('not implemented');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async setRtpEncodingParameters(localId, params) {
          throw new errors.UnsupportedError('not implemented');
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async getSenderStats(localId) {
          throw new errors.UnsupportedError('not implemented');
      }
      async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
          this._assertSendDirection();
          const options = {
              negotiated: true,
              id: this._nextSendSctpStreamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol,
              priority
          };
          logger.debug('sendDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // Increase next id.
          this._nextSendSctpStreamId =
              ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
          // If this is the first DataChannel we need to create the SDP answer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              const offer = await this._pc.createOffer();
              const localSdpObject = lib$4.parse(offer.sdp);
              const offerMediaObject = localSdpObject.media
                  .find((m) => m.type === 'application');
              if (!this._transportReady)
                  await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
              logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
              await this._pc.setLocalDescription(offer);
              this._remoteSdp.sendSctpAssociation({ offerMediaObject });
              const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
              logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setRemoteDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          const sctpStreamParameters = {
              streamId: options.id,
              ordered: options.ordered,
              maxPacketLifeTime: options.maxPacketLifeTime,
              maxRetransmits: options.maxRetransmits
          };
          return { dataChannel, sctpStreamParameters };
      }
      async receive({ trackId, kind, rtpParameters }) {
          this._assertRecvDirection();
          logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
          const localId = trackId;
          const mid = kind;
          let streamId = rtpParameters.rtcp.cname;
          // NOTE: In React-Native we cannot reuse the same remote MediaStream for new
          // remote tracks. This is because react-native-webrtc does not react on new
          // tracks generated within already existing streams, so force the streamId
          // to be different.
          logger.debug('receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc');
          streamId += `-hack-${utils.generateRandomNumber()}`;
          this._remoteSdp.receive({
              mid,
              kind,
              offerRtpParameters: rtpParameters,
              streamId,
              trackId
          });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          let answer = await this._pc.createAnswer();
          const localSdpObject = lib$4.parse(answer.sdp);
          const answerMediaObject = localSdpObject.media
              .find((m) => String(m.mid) === mid);
          // May need to modify codec parameters in the answer based on codec
          // parameters in the offer.
          commonUtils.applyCodecParameters({
              offerRtpParameters: rtpParameters,
              answerMediaObject
          });
          answer = { type: 'answer', sdp: lib$4.write(localSdpObject) };
          if (!this._transportReady)
              await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
          logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
          const stream = this._pc.getRemoteStreams()
              .find((s) => s.id === streamId);
          const track = stream.getTrackById(localId);
          if (!track)
              throw new Error('remote track not found');
          // Insert into the map.
          this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
          return { localId, track };
      }
      async stopReceiving(localId) {
          this._assertRecvDirection();
          logger.debug('stopReceiving() [localId:%s]', localId);
          const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
          // Remove from the map.
          this._mapRecvLocalIdInfo.delete(localId);
          this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
          const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
          logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
          await this._pc.setRemoteDescription(offer);
          const answer = await this._pc.createAnswer();
          logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
          await this._pc.setLocalDescription(answer);
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async getReceiverStats(localId) {
          throw new errors.UnsupportedError('not implemented');
      }
      async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
          this._assertRecvDirection();
          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
          const options = {
              negotiated: true,
              id: streamId,
              ordered,
              maxPacketLifeTime,
              maxRetransmitTime: maxPacketLifeTime,
              maxRetransmits,
              protocol
          };
          logger.debug('receiveDataChannel() [options:%o]', options);
          const dataChannel = this._pc.createDataChannel(label, options);
          // If this is the first DataChannel we need to create the SDP offer with
          // m=application section.
          if (!this._hasDataChannelMediaSection) {
              this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
              const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
              await this._pc.setRemoteDescription(offer);
              const answer = await this._pc.createAnswer();
              if (!this._transportReady) {
                  const localSdpObject = lib$4.parse(answer.sdp);
                  await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
              }
              logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
              await this._pc.setLocalDescription(answer);
              this._hasDataChannelMediaSection = true;
          }
          return { dataChannel };
      }
      async _setupTransport({ localDtlsRole, localSdpObject }) {
          if (!localSdpObject)
              localSdpObject = lib$4.parse(this._pc.localDescription.sdp);
          // Get our local DTLS parameters.
          const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
          // Set our DTLS role.
          dtlsParameters.role = localDtlsRole;
          // Update the remote DTLS role in the SDP.
          this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
          // Need to tell the remote transport about our parameters.
          await this.safeEmitAsPromise('@connect', { dtlsParameters });
          this._transportReady = true;
      }
      _assertSendDirection() {
          if (this._direction !== 'send') {
              throw new Error('method can just be called for handlers with "send" direction');
          }
      }
      _assertRecvDirection() {
          if (this._direction !== 'recv') {
              throw new Error('method can just be called for handlers with "recv" direction');
          }
      }
  }
  exports.ReactNative = ReactNative;
  });

  unwrapExports(ReactNative_1);
  var ReactNative_2 = ReactNative_1.ReactNative;

  var Device_1 = createCommonjsModule(function (module, exports) {
  /* global RTCRtpTransceiver */
  Object.defineProperty(exports, "__esModule", { value: true });














  const logger = new Logger_1.Logger('Device');
  function detectDevice() {
      // React-Native.
      // NOTE: react-native-webrtc >= 1.75.0 is required.
      if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
          if (typeof RTCPeerConnection === 'undefined') {
              logger.warn('this._detectDevice() | unsupported ReactNative without RTCPeerConnection');
              return undefined;
          }
          logger.debug('this._detectDevice() | ReactNative handler chosen');
          return 'ReactNative';
      }
      // Browser.
      else if (typeof navigator === 'object' && typeof navigator.userAgent === 'string') {
          const ua = navigator.userAgent;
          const browser = Bowser.getParser(ua);
          const engine = browser.getEngine();
          // Chrome and Chromium.
          if (browser.satisfies({ chrome: '>=74', chromium: '>=74' })) {
              return 'Chrome74';
          }
          else if (browser.satisfies({ chrome: '>=70', chromium: '>=70' })) {
              return 'Chrome70';
          }
          else if (browser.satisfies({ chrome: '>=67', chromium: '>=67' })) {
              return 'Chrome67';
          }
          else if (browser.satisfies({ chrome: '>=55', chromium: '>=55' })) {
              return 'Chrome55';
          }
          // Firefox.
          else if (browser.satisfies({ firefox: '>=60' })) {
              return 'Firefox60';
          }
          // Safari with Unified-Plan support enabled.
          else if (browser.satisfies({ safari: '>=12.0' }) &&
              typeof RTCRtpTransceiver !== 'undefined' &&
              RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')) {
              return 'Safari12';
          }
          // Safari with Plab-B support.
          else if (browser.satisfies({ safari: '>=11' })) {
              return 'Safari11';
          }
          // Old Edge with ORTC support.
          else if (browser.satisfies({ 'microsoft edge': '>=11' }) &&
              browser.satisfies({ 'microsoft edge': '<=18' })) {
              return 'Edge11';
          }
          // Best effort for Chromium based browsers.
          else if (engine.name && engine.name.toLowerCase() === 'blink') {
              const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
              if (match) {
                  const version = Number(match[1]);
                  if (version >= 74) {
                      return 'Chrome74';
                  }
                  else if (version >= 70) {
                      return 'Chrome70';
                  }
                  else if (version >= 67) {
                      return 'Chrome67';
                  }
                  else {
                      return 'Chrome55';
                  }
              }
              else {
                  return 'Chrome74';
              }
          }
          // Unsupported browser.
          else {
              logger.warn('this._detectDevice() | browser not supported [name:%s, version:%s]', browser.getBrowserName(), browser.getBrowserVersion());
              return undefined;
          }
      }
      // Unknown device.
      else {
          logger.warn('this._detectDevice() | unknown device');
          return undefined;
      }
  }
  exports.detectDevice = detectDevice;
  class Device {
      /**
       * Create a new Device to connect to mediasoup server.
       *
       * @throws {UnsupportedError} if device is not supported.
       */
      constructor({ handlerName, handlerFactory, Handler } = {}) {
          // Loaded flag.
          this._loaded = false;
          logger.debug('constructor()');
          // Handle deprecated option.
          if (Handler) {
              logger.warn('constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead');
              if (typeof Handler === 'string')
                  handlerName = Handler;
              else
                  throw new TypeError('non string Handler option no longer supported, use handlerFactory instead');
          }
          if (handlerName && handlerFactory) {
              throw new TypeError('just one of handlerName or handlerInterface can be given');
          }
          if (handlerFactory) {
              this._handlerFactory = handlerFactory;
          }
          else {
              if (handlerName) {
                  logger.debug('constructor() | handler given: %s', handlerName);
              }
              else {
                  handlerName = detectDevice();
                  if (handlerName)
                      logger.debug('constructor() | detected handler: %s', handlerName);
                  else
                      throw new errors.UnsupportedError('device not supported');
              }
              switch (handlerName) {
                  case 'Chrome74':
                      this._handlerFactory = Chrome74_1.Chrome74.createFactory();
                      break;
                  case 'Chrome70':
                      this._handlerFactory = Chrome70_1.Chrome70.createFactory();
                      break;
                  case 'Chrome67':
                      this._handlerFactory = Chrome67_1.Chrome67.createFactory();
                      break;
                  case 'Chrome55':
                      this._handlerFactory = Chrome55_1.Chrome55.createFactory();
                      break;
                  case 'Firefox60':
                      this._handlerFactory = Firefox60_1.Firefox60.createFactory();
                      break;
                  case 'Safari12':
                      this._handlerFactory = Safari12_1.Safari12.createFactory();
                      break;
                  case 'Safari11':
                      this._handlerFactory = Safari11_1.Safari11.createFactory();
                      break;
                  case 'Edge11':
                      this._handlerFactory = Edge11_1.Edge11.createFactory();
                      break;
                  case 'ReactNative':
                      this._handlerFactory = ReactNative_1.ReactNative.createFactory();
                      break;
                  default:
                      throw new TypeError(`unknown handlerName "${handlerName}"`);
              }
          }
          // Create a temporal handler to get its name.
          const handler = this._handlerFactory();
          this._handlerName = handler.name;
          handler.close();
          this._extendedRtpCapabilities = undefined;
          this._recvRtpCapabilities = undefined;
          this._canProduceByKind =
              {
                  audio: false,
                  video: false
              };
          this._sctpCapabilities = undefined;
      }
      /**
       * The RTC handler name.
       */
      get handlerName() {
          return this._handlerName;
      }
      /**
       * Whether the Device is loaded.
       */
      get loaded() {
          return this._loaded;
      }
      /**
       * RTP capabilities of the Device for receiving media.
       *
       * @throws {InvalidStateError} if not loaded.
       */
      get rtpCapabilities() {
          if (!this._loaded)
              throw new errors.InvalidStateError('not loaded');
          return this._recvRtpCapabilities;
      }
      /**
       * SCTP capabilities of the Device.
       *
       * @throws {InvalidStateError} if not loaded.
       */
      get sctpCapabilities() {
          if (!this._loaded)
              throw new errors.InvalidStateError('not loaded');
          return this._sctpCapabilities;
      }
      /**
       * Initialize the Device.
       */
      async load({ routerRtpCapabilities }) {
          logger.debug('load() [routerRtpCapabilities:%o]', routerRtpCapabilities);
          // Temporal handler to get its capabilities.
          let handler;
          try {
              if (this._loaded)
                  throw new errors.InvalidStateError('already loaded');
              // This may throw.
              ortc.validateRtpCapabilities(routerRtpCapabilities);
              handler = this._handlerFactory();
              const nativeRtpCapabilities = await handler.getNativeRtpCapabilities();
              logger.debug('load() | got native RTP capabilities:%o', nativeRtpCapabilities);
              // This may throw.
              ortc.validateRtpCapabilities(nativeRtpCapabilities);
              // Get extended RTP capabilities.
              this._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(nativeRtpCapabilities, routerRtpCapabilities);
              logger.debug('load() | got extended RTP capabilities:%o', this._extendedRtpCapabilities);
              // Check whether we can produce audio/video.
              this._canProduceByKind.audio =
                  ortc.canSend('audio', this._extendedRtpCapabilities);
              this._canProduceByKind.video =
                  ortc.canSend('video', this._extendedRtpCapabilities);
              // Generate our receiving RTP capabilities for receiving media.
              this._recvRtpCapabilities =
                  ortc.getRecvRtpCapabilities(this._extendedRtpCapabilities);
              // This may throw.
              ortc.validateRtpCapabilities(this._recvRtpCapabilities);
              logger.debug('load() | got receiving RTP capabilities:%o', this._recvRtpCapabilities);
              // Generate our SCTP capabilities.
              this._sctpCapabilities = await handler.getNativeSctpCapabilities();
              logger.debug('load() | got native SCTP capabilities:%o', this._sctpCapabilities);
              // This may throw.
              ortc.validateSctpCapabilities(this._sctpCapabilities);
              logger.debug('load() succeeded');
              this._loaded = true;
              handler.close();
          }
          catch (error) {
              if (handler)
                  handler.close();
              throw error;
          }
      }
      /**
       * Whether we can produce audio/video.
       *
       * @throws {InvalidStateError} if not loaded.
       * @throws {TypeError} if wrong arguments.
       */
      canProduce(kind) {
          if (!this._loaded)
              throw new errors.InvalidStateError('not loaded');
          else if (kind !== 'audio' && kind !== 'video')
              throw new TypeError(`invalid kind "${kind}"`);
          return this._canProduceByKind[kind];
      }
      /**
       * Creates a Transport for sending media.
       *
       * @throws {InvalidStateError} if not loaded.
       * @throws {TypeError} if wrong arguments.
       */
      createSendTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
          logger.debug('createSendTransport()');
          return this._createTransport({
              direction: 'send',
              id: id,
              iceParameters: iceParameters,
              iceCandidates: iceCandidates,
              dtlsParameters: dtlsParameters,
              sctpParameters: sctpParameters,
              iceServers: iceServers,
              iceTransportPolicy: iceTransportPolicy,
              additionalSettings: additionalSettings,
              proprietaryConstraints: proprietaryConstraints,
              appData: appData
          });
      }
      /**
       * Creates a Transport for receiving media.
       *
       * @throws {InvalidStateError} if not loaded.
       * @throws {TypeError} if wrong arguments.
       */
      createRecvTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
          logger.debug('createRecvTransport()');
          return this._createTransport({
              direction: 'recv',
              id: id,
              iceParameters: iceParameters,
              iceCandidates: iceCandidates,
              dtlsParameters: dtlsParameters,
              sctpParameters: sctpParameters,
              iceServers: iceServers,
              iceTransportPolicy: iceTransportPolicy,
              additionalSettings: additionalSettings,
              proprietaryConstraints: proprietaryConstraints,
              appData: appData
          });
      }
      _createTransport({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
          if (!this._loaded)
              throw new errors.InvalidStateError('not loaded');
          else if (typeof id !== 'string')
              throw new TypeError('missing id');
          else if (typeof iceParameters !== 'object')
              throw new TypeError('missing iceParameters');
          else if (!Array.isArray(iceCandidates))
              throw new TypeError('missing iceCandidates');
          else if (typeof dtlsParameters !== 'object')
              throw new TypeError('missing dtlsParameters');
          else if (sctpParameters && typeof sctpParameters !== 'object')
              throw new TypeError('wrong sctpParameters');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // Create a new Transport.
          const transport = new Transport_1.Transport({
              direction,
              id,
              iceParameters,
              iceCandidates,
              dtlsParameters,
              sctpParameters,
              iceServers,
              iceTransportPolicy,
              additionalSettings,
              proprietaryConstraints,
              appData,
              handlerFactory: this._handlerFactory,
              extendedRtpCapabilities: this._extendedRtpCapabilities,
              canProduceByKind: this._canProduceByKind
          });
          return transport;
      }
  }
  exports.Device = Device;
  });

  unwrapExports(Device_1);
  var Device_2 = Device_1.detectDevice;
  var Device_3 = Device_1.Device;

  var types = createCommonjsModule(function (module, exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export(Device_1);
  __export(Transport_1);
  __export(Producer_1);
  __export(Consumer_1);
  __export(DataProducer_1);
  __export(DataConsumer_1);
  __export(HandlerInterface_1);
  __export(errors);
  });

  unwrapExports(types);

  var lib$5 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  exports.Device = Device_1.Device;
  exports.detectDevice = Device_1.detectDevice;

  exports.types = types;
  /**
   * Expose mediasoup-client version.
   */
  exports.version = '3.6.12';
  /**
   * Expose parseScalabilityMode() function.
   */

  exports.parseScalabilityMode = scalabilityModes.parse;
  });

  unwrapExports(lib$5);
  var lib_1$3 = lib$5.Device;
  var lib_2$2 = lib$5.detectDevice;
  var lib_3$2 = lib$5.types;
  var lib_4$2 = lib$5.version;
  var lib_5$2 = lib$5.parseScalabilityMode;

  // Adds support for Promise to socket.io-client
  function promise(socket) {
      return function request(type, data = {}) {
          return new Promise(resolve => {
              socket.emit(type, data, resolve);
              console.log("Emitting data: " + data);
          });
      };
  }

  // adding constraints, VIDEO_CONSTRAINTS is video quality levels
  // localMediaConstraints is passed to the getUserMedia object to request a lower video quality than the maximum
  const VIDEO_CONSTRAINTS = {
      qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
      vga: { width: { ideal: 640 }, height: { ideal: 480 } },
      hd: { width: { ideal: 1280 }, height: { ideal: 720 } }
  };
  const localMediaConstraints = {
      audio: true,
      video: {
          width: VIDEO_CONSTRAINTS.qvga.width,
          height: VIDEO_CONSTRAINTS.qvga.height,
          frameRate: { max: 30 }
      }
  };
  // encodings for outgoing video
  // just two resolutions, for now, as chrome 75 seems to ignore more
  // than two encodings
  const CAM_VIDEO_SIMULCAST_ENCODINGS = [
      { maxBitrate: 36000, scaleResolutionDownBy: 2 }
      // { maxBitrate: 96000, scaleResolutionDownBy: 2 },
      // { maxBitrate: 680000, scaleResolutionDownBy: 1 },
  ];

  function sleep(ms) {
      return __awaiter(this, void 0, void 0, function* () {
          return new Promise(r => setTimeout(() => r(), ms));
      });
  }

  const MessageTypes = {
      Heartbeat: 0,
      ConnectionRequest: 1,
      ClientConnected: 2,
      DisconnectionRequest: 3,
      ClientDisconnected: 4,
      InitializationRequest: 5,
      InitializationResponse: 6,
      SynchronizationRequest: 7,
      JoinWorldRequest: 8,
      LeaveWorldRequest: 9,
      WebRTCTransportCreateRequest: 9,
      WebRTCTransportConnectRequest: 10,
      WebRTCTransportCloseRequest: 11,
      WebRTCSendTrackRequest: 12,
      WebRTCReceiveTrackRequest: 13,
      WebRTCPauseConsumerRequest: 14,
      WebRTCResumeConsumerRequest: 15,
      WebRTCCloseConsumerRequest: 16,
      WebRTCPauseProducerRequest: 17,
      WebRTCResumeProducerRequest: 18,
      WebRTCCloseProducerRequest: 19,
      WebRTCMuteOtherProducerRequest: 20,
      WebRTCUnmuteOtherProducerRequest: 21,
      WebRTCConsumerSetLayersRequest: 22,
      ReliableMessage: 23,
      UnreliableMessage: 24
  };

  class MediaStreamControlSystem extends System {
      constructor(world) {
          super(world);
          MediaStreamControlSystem.instance = this;
          this.mediaStreamComponent = world
              .registerComponent(MediaStreamComponent)
              .createEntity()
              .addComponent(MediaStreamComponent)
              .getComponent(MediaStreamComponent);
          this.startCamera();
      }
      execute() {
          // eh
      }
      startCamera() {
          return __awaiter(this, void 0, void 0, function* () {
              if (this.mediaStreamComponent.mediaStream)
                  return false;
              console.log("start camera");
              return this.getMediaStream();
          });
      }
      // switch to sending video from the "next" camera device in our device
      // list (if we have multiple cameras)
      cycleCamera() {
          return __awaiter(this, void 0, void 0, function* () {
              if (!(this.mediaStreamComponent.camVideoProducer && this.mediaStreamComponent.camVideoProducer.track)) {
                  console.log("cannot cycle camera - no current camera track");
                  return false;
              }
              console.log("cycle camera");
              // find "next" device in device list
              const deviceId = yield this.getCurrentDeviceId();
              const allDevices = yield navigator.mediaDevices.enumerateDevices();
              const vidDevices = allDevices.filter(d => d.kind === "videoinput");
              if (!(vidDevices.length > 1)) {
                  console.log("cannot cycle camera - only one camera");
                  return false;
              }
              let idx = vidDevices.findIndex(d => d.deviceId === deviceId);
              if (idx === vidDevices.length - 1)
                  idx = 0;
              else
                  idx += 1;
              // get a new video stream. might as well get a new audio stream too,
              // just in case browsers want to group audio/video streams together
              // from the same device when possible (though they don't seem to,
              // currently)
              console.log("getting a video stream from new device", vidDevices[idx].label);
              this.mediaStreamComponent.mediaStream = yield navigator.mediaDevices.getUserMedia({
                  video: { deviceId: { exact: vidDevices[idx].deviceId } },
                  audio: true
              });
              // replace the tracks we are sending
              yield this.mediaStreamComponent.camVideoProducer.replaceTrack({ track: this.mediaStreamComponent.mediaStream.getVideoTracks()[0] });
              yield this.mediaStreamComponent.camAudioProducer.replaceTrack({ track: this.mediaStreamComponent.mediaStream.getAudioTracks()[0] });
              return true;
          });
      }
      // -- user interface --
      getScreenPausedState() {
          return MediaStreamComponent.instance.screenShareVideoPaused;
      }
      getScreenAudioPausedState() {
          return MediaStreamComponent.instance.screenShareAudioPaused;
      }
      toggleWebcamVideoPauseState() {
          return __awaiter(this, void 0, void 0, function* () {
              const videoPaused = MediaStreamComponent.instance.toggleVideoPaused();
              if (videoPaused)
                  NetworkTransportComponent.instance.transport.pauseProducer(MediaStreamComponent.instance.camVideoProducer);
              else
                  NetworkTransportComponent.instance.transport.resumeProducer(MediaStreamComponent.instance.camVideoProducer);
          });
      }
      toggleWebcamAudioPauseState() {
          return __awaiter(this, void 0, void 0, function* () {
              const audioPaused = MediaStreamComponent.instance.toggleAudioPaused();
              if (audioPaused)
                  NetworkTransportComponent.instance.transport.resumeProducer(MediaStreamComponent.instance.camAudioProducer);
              else
                  NetworkTransportComponent.instance.transport.pauseProducer(MediaStreamComponent.instance.camAudioProducer);
          });
      }
      toggleScreenshareVideoPauseState() {
          return __awaiter(this, void 0, void 0, function* () {
              if (this.getScreenPausedState())
                  NetworkTransportComponent.instance.transport.pauseProducer(MediaStreamComponent.instance.screenVideoProducer);
              else
                  NetworkTransportComponent.instance.transport.resumeProducer(MediaStreamComponent.instance.screenVideoProducer);
              MediaStreamComponent.instance.screenShareVideoPaused = !MediaStreamComponent.instance.screenShareVideoPaused;
          });
      }
      toggleScreenshareAudioPauseState() {
          return __awaiter(this, void 0, void 0, function* () {
              if (this.getScreenAudioPausedState())
                  NetworkTransportComponent.instance.transport.pauseProducer(MediaStreamComponent.instance.screenAudioProducer);
              else
                  NetworkTransportComponent.instance.transport.resumeProducer(MediaStreamComponent.instance.screenAudioProducer);
              MediaStreamComponent.instance.screenShareAudioPaused = !MediaStreamComponent.instance.screenShareAudioPaused;
          });
      }
      removeVideoAudio(consumer) {
          document.querySelectorAll(consumer.id).forEach(v => {
              if (v.consumer === consumer)
                  v.parentNode.removeChild(v);
          });
      }
      addVideoAudio(consumer, peerId) {
          if (!(consumer && consumer.track)) {
              return;
          }
          const elementID = `${peerId}_${consumer.kind}`;
          let el = document.getElementById(elementID);
          // set some attributes on our audio and video elements to make
          // mobile Safari happy. note that for audio to play you need to be
          // capturing from the mic/camera
          if (consumer.kind === "video") {
              if (el === null) {
                  console.log(`Creating video element for user with ID: ${peerId}`);
                  el = document.createElement("video");
                  el.id = `${peerId}_${consumer.kind}`;
                  // @ts-ignore
                  el.autoplay = true;
                  // @ts-ignore
                  // el.muted = true // necessary for
                  // @ts-ignore
                  // el.style = "visibility: hidden;"
                  document.body.appendChild(el);
                  // @ts-ignore
                  el.setAttribute("playsinline", true);
              }
              // TODO: do i need to update video width and height? or is that based on stream...?
              console.log(`Updating video source for user with ID: ${peerId}`);
              // @ts-ignore
              el.srcObject = new MediaStream([consumer.track.clone()]);
              // @ts-ignore
              el.consumer = consumer;
              // let's "yield" and return before playing, rather than awaiting on
              // play() succeeding. play() will not succeed on a producer-paused
              // track until the producer unpauses.
              // @ts-ignore
              el.play().catch((e) => {
                  console.log(`Play video error: ${e}`);
                  console.error(e);
              });
          }
          else {
              // Positional Audio Works in Firefox:
              // Global Audio:
              if (el === null) {
                  console.log(`Creating audio element for user with ID: ${peerId}`);
                  el = document.createElement("audio");
                  el.id = `${peerId}_${consumer.kind}`;
                  document.body.appendChild(el);
                  // @ts-ignore
                  el.setAttribute("playsinline", true);
                  // @ts-ignore
                  el.setAttribute("autoplay", true);
              }
              console.log(`Updating <audio> source object for client with ID: ${peerId}`);
              // @ts-ignore
              el.srcObject = new MediaStream([consumer.track.clone()]);
              // @ts-ignore
              el.consumer = consumer;
              // @ts-ignore
              el.volume = 0; // start at 0 and let the three.js scene take over from here...
              // this.worldScene.createOrUpdatePositionalAudio(peerId)
              // let's "yield" and return before playing, rather than awaiting on
              // play() succeeding. play() will not succeed on a producer-paused
              // track until the producer unpauses.
              // @ts-ignore
              el.play().catch((e) => {
                  console.log(`Play audio error: ${e}`);
                  console.error(e);
              });
          }
      }
      getCurrentDeviceId() {
          return __awaiter(this, void 0, void 0, function* () {
              if (!MediaStreamComponent.instance.camVideoProducer)
                  return null;
              const { deviceId } = MediaStreamComponent.instance.camVideoProducer.track.getSettings();
              if (deviceId)
                  return deviceId;
              // Firefox doesn't have deviceId in MediaTrackSettings object
              const track = MediaStreamComponent.instance.mediaStream && MediaStreamComponent.instance.mediaStream.getVideoTracks()[0];
              if (!track)
                  return null;
              const devices = yield navigator.mediaDevices.enumerateDevices();
              const deviceInfo = devices.find(d => d.label.startsWith(track.label));
              return deviceInfo.deviceId;
          });
      }
      stopCamera() {
          throw new Error("Method not implemented.");
      }
      stopScreenshare() {
          throw new Error("Method not implemented.");
      }
      startAudio() {
          throw new Error("Method not implemented.");
      }
      stopAudio() {
          throw new Error("Method not implemented.");
      }
      muteUser(userId) {
          throw new Error("Method not implemented.");
      }
      unmuteUser(userId) {
          throw new Error("Method not implemented.");
      }
      getMediaStream() {
          return __awaiter(this, void 0, void 0, function* () {
              this.mediaStreamComponent.mediaStream = yield navigator.mediaDevices.getUserMedia(localMediaConstraints);
              if (this.mediaStreamComponent.mediaStream.active) {
                  this.mediaStreamComponent.audioPaused = false;
                  this.mediaStreamComponent.videoPaused = false;
                  return true;
              }
              this.mediaStreamComponent.audioPaused = true;
              this.mediaStreamComponent.videoPaused = true;
              return false;
          });
      }
  }

  class RingBuffer {
      constructor(size) {
          this.buffer = [];
          this.pos = 0;
          console.log("Constructing ring buffer");
          if (size < 0) {
              throw new RangeError("The size does not allow negative values.");
          }
          this.size = size;
      }
      static fromArray(data, size = 0) {
          const actionBuffer = new RingBuffer(size);
          actionBuffer.fromArray(data, size === 0);
          return actionBuffer;
      }
      copy() {
          const newAxisBuffer = new RingBuffer(this.getBufferLength());
          newAxisBuffer.buffer = this.buffer;
          return newAxisBuffer;
      }
      clone() {
          const newAxisBuffer = new RingBuffer(this.getBufferLength());
          newAxisBuffer.buffer = this.buffer;
          return newAxisBuffer;
      }
      getSize() {
          return this.size;
      }
      getPos() {
          return this.pos;
      }
      getBufferLength() {
          return this.buffer.length;
      }
      add(...items) {
          items.forEach(item => {
              this.buffer[this.pos] = item;
              this.pos = (this.pos + 1) % this.size;
          });
      }
      get(index) {
          if (index < 0) {
              index += this.buffer.length;
          }
          if (index < 0 || index > this.buffer.length) {
              return undefined;
          }
          if (this.buffer.length < this.size) {
              return this.buffer[index];
          }
          return this.buffer[(this.pos + index) % this.size];
      }
      getFirst() {
          return this.get(0);
      }
      getLast() {
          return this.get(-1);
      }
      remove(index, count = 1) {
          if (index < 0) {
              index += this.buffer.length;
          }
          if (index < 0 || index > this.buffer.length) {
              return [];
          }
          const arr = this.toArray();
          const removedItems = arr.splice(index, count);
          this.fromArray(arr);
          return removedItems;
      }
      pop() {
          return this.remove(0)[0];
      }
      popLast() {
          return this.remove(-1)[0];
      }
      toArray() {
          return this.buffer.slice(this.pos).concat(this.buffer.slice(0, this.pos));
      }
      fromArray(data, resize = false) {
          if (!Array.isArray(data)) {
              throw new TypeError("Input value is not an array.");
          }
          if (resize)
              this.resize(data.length);
          if (this.size === 0)
              return;
          this.buffer = data.slice(-this.size);
          this.pos = this.buffer.length % this.size;
      }
      clear() {
          this.buffer = [];
          this.pos = 0;
      }
      resize(newSize) {
          if (newSize < 0) {
              throw new RangeError("The size does not allow negative values.");
          }
          if (newSize === 0) {
              this.clear();
          }
          else if (newSize !== this.size) {
              const currentBuffer = this.toArray();
              this.fromArray(currentBuffer.slice(-newSize));
              this.pos = this.buffer.length % newSize;
          }
          this.size = newSize;
      }
      full() {
          return this.buffer.length === this.size;
      }
      empty() {
          return this.buffer.length === 0;
      }
  }

  // TODO: Clean me up, add schema, etc
  class MessageQueue extends Component {
      // TODO: Message ring buffer should be able to grow
      constructor() {
          super();
          this.outgoingReliableQueue = new RingBuffer(200);
          this.outgoingUnreliableQueue = new RingBuffer(200);
          this.incomingReliableQueue = new RingBuffer(200);
          this.incomingUnreliableQueue = new RingBuffer(200);
          MessageQueue.instance = this;
      }
  }

  const Device = lib_1$3;
  class SocketWebRTCClientTransport {
      constructor() {
          this.supportsMediaStreams = true;
          this.lastPollSyncData = {};
          this.heartbeatInterval = 2000;
          this.pollingTickRate = 1000;
      }
      sendAllReliableMessages() {
          while (!MessageQueue.instance.outgoingReliableQueue.empty) {
              this.socket.emit(MessageTypes.ReliableMessage, MessageQueue.instance.outgoingReliableQueue.pop);
          }
      }
      initialize(address = "https://localhost", port = 3001) {
          return __awaiter(this, void 0, void 0, function* () {
              this.mediasoupDevice = new Device();
              this.socket = lib$2.connect(`${address}:${port}`);
              this.request = promise(this.socket);
              // use sendBeacon to tell the server we're disconnecting when
              // the page unloads
              window.addEventListener("unload", () => __awaiter(this, void 0, void 0, function* () {
                  const result = yield this.request(MessageTypes.LeaveWorldRequest, {});
                  console.log(result);
              }));
              //@ts-ignore
              window.screenshare = yield this.startScreenshare;
              // only join  after we user has interacted with DOM (to ensure that media elements play)
              if (MediaStreamComponent.instance.initialized)
                  return;
              MediaStreamComponent.instance.initialized = true;
              yield this.sendCameraStreams();
              function initSockets() {
                  return new Promise(resolve => {
                      console.log(`Initializing socket.io...,`);
                      this.socket.on(MessageTypes.ConnectionRequest, () => this.onConnectedCallback());
                      this.socket.on(MessageTypes.InitializationRequest, (_id, _ids) => {
                          if (_ids !== undefined)
                              NetworkSystem.instance.initializeClient(_id, _ids);
                          resolve();
                      });
                      this.socket.on(MessageTypes.ClientConnected, (clientCount, _id) => NetworkSystem.instance.addClient(_id));
                      this.socket.on(MessageTypes.ClientDisconnected, (_id) => NetworkSystem.instance.removeClient(_id));
                      this.socket.on(MessageTypes.ReliableMessage, (message) => {
                          MessageQueue.instance.incomingReliableQueue.add(message);
                      });
                  });
              }
              initSockets();
              setInterval(() => {
                  this.socket.emit(MessageTypes.Heartbeat);
              }, this.heartbeatInterval);
              console.log("Initialized!");
          });
      }
      //= =//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//
      // Mediasoup Code:
      //= =//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//==//
      // meeting control actions
      joinWorld() {
          return __awaiter(this, void 0, void 0, function* () {
              if (this.joined)
                  return;
              this.joined = true;
              console.log("Joining world");
              // signal that we're a new peer and initialize our
              // mediasoup-client device, if this is our first time connecting
              const resp = yield this.request(MessageTypes.JoinWorldRequest);
              const { routerRtpCapabilities } = resp;
              if (!this.mediasoupDevice.loaded)
                  yield this.mediasoupDevice.load({ routerRtpCapabilities });
              yield this.pollAndUpdate(); // start this polling loop
          });
      }
      sendCameraStreams() {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("send camera streams");
              // make sure we've joined the  and started our camera. these
              // functions don't do anything if they've already been called this
              // session
              yield this.joinWorld();
              // create a transport for outgoing media, if we don't already have one
              if (!this.sendTransport)
                  this.sendTransport = yield this.createTransport("send");
              if (!MediaStreamComponent.instance.mediaStream)
                  return;
              // start sending video. the transport logic will initiate a
              // signaling conversation with the server to set up an outbound rtp
              // stream for the camera video track. our createTransport() function
              // includes logic to tell the server to start the stream in a paused
              // state, if the checkbox in our UI is unchecked. so as soon as we
              // have a client-side camVideoProducer object, we need to set it to
              // paused as appropriate, too.
              MediaStreamComponent.instance.camVideoProducer = yield this.sendTransport.produce({
                  track: MediaStreamComponent.instance.mediaStream.getVideoTracks()[0],
                  encodings: CAM_VIDEO_SIMULCAST_ENCODINGS,
                  appData: { mediaTag: "cam-video" }
              });
              if (MediaStreamComponent.instance.videoPaused)
                  yield MediaStreamComponent.instance.camVideoProducer.pause();
              // same thing for audio, but we can use our already-created
              MediaStreamComponent.instance.camAudioProducer = yield this.sendTransport.produce({
                  track: MediaStreamComponent.instance.mediaStream.getAudioTracks()[0],
                  appData: { mediaTag: "cam-audio" }
              });
              if (MediaStreamComponent.instance.audioPaused)
                  MediaStreamComponent.instance.camAudioProducer.pause();
          });
      }
      startScreenshare() {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("start screen share");
              // make sure we've joined the  and that we have a sending
              // transport
              yield this.joinWorld();
              if (!this.sendTransport)
                  this.sendTransport = yield this.createTransport("send");
              // get a screen share track
              // @ts-ignore
              this.localScreen = yield navigator.mediaDevices.getDisplayMedia({
                  video: true,
                  audio: true
              });
              // create a producer for video
              MediaStreamComponent.instance.screenVideoProducer = yield this.sendTransport.produce({
                  track: MediaStreamComponent.instance.localScreen.getVideoTracks()[0],
                  encodings: {},
                  appData: { mediaTag: "screen-video" }
              });
              // create a producer for audio, if we have it
              if (MediaStreamComponent.instance.localScreen.getAudioTracks().length) {
                  MediaStreamComponent.instance.screenAudioProducer = yield this.sendTransport.produce({
                      track: MediaStreamComponent.instance.localScreen.getAudioTracks()[0],
                      appData: { mediaTag: "screen-audio" }
                  });
              }
              // handler for screen share stopped event (triggered by the
              // browser's built-in screen sharing ui)
              MediaStreamComponent.instance.screenVideoProducer.track.onended = () => __awaiter(this, void 0, void 0, function* () {
                  console.log("screen share stopped");
                  yield MediaStreamComponent.instance.screenVideoProducer.pause();
                  const { error } = (yield this.request(MessageTypes.WebRTCCloseProducerRequest, {
                      producerId: MediaStreamComponent.instance.screenVideoProducer.id
                  }));
                  yield MediaStreamComponent.instance.screenVideoProducer.close();
                  MediaStreamComponent.instance.screenVideoProducer = null;
                  if (error) {
                      console.error(error);
                  }
                  if (MediaStreamComponent.instance.screenAudioProducer) {
                      const { error: screenAudioProducerError } = (yield this.request(MessageTypes.WebRTCCloseProducerRequest, {
                          producerId: MediaStreamComponent.instance.screenAudioProducer.id
                      }));
                      yield MediaStreamComponent.instance.screenAudioProducer.close();
                      MediaStreamComponent.instance.screenAudioProducer = null;
                      if (screenAudioProducerError) {
                          console.error(screenAudioProducerError);
                      }
                  }
              });
              return true;
          });
      }
      stopSendingMediaStreams() {
          return __awaiter(this, void 0, void 0, function* () {
              if (!(MediaStreamComponent.instance.mediaStream && MediaStreamComponent.instance.localScreen))
                  return false;
              if (!this.sendTransport)
                  return false;
              console.log("stop sending media streams");
              const { error } = (yield this.request(MessageTypes.WebRTCTransportCloseRequest, {
                  transportId: this.sendTransport.id
              }));
              if (error)
                  console.error(error);
              // closing the sendTransport closes all associated producers. when
              // the camVideoProducer and camAudioProducer are closed,
              // mediasoup-client stops the local cam tracks, so we don't need to
              // do anything except set all our local variables to null.
              yield this.sendTransport.close();
              this.sendTransport = null;
              MediaStreamComponent.instance.camVideoProducer = null;
              MediaStreamComponent.instance.camAudioProducer = null;
              MediaStreamComponent.instance.screenVideoProducer = null;
              MediaStreamComponent.instance.screenAudioProducer = null;
              MediaStreamComponent.instance.mediaStream = null;
              MediaStreamComponent.instance.localScreen = null;
              return true;
          });
      }
      leave() {
          return __awaiter(this, void 0, void 0, function* () {
              if (!this.joined)
                  return false;
              console.log("leave ");
              // stop polling
              clearInterval(this.pollingInterval);
              // close everything on the server-side (transports, producers, consumers)
              const { error } = (yield this.request(MessageTypes.LeaveWorldRequest));
              if (error) {
                  console.error(error);
              }
              // closing the transports closes all producers and consumers. we
              // don't need to do anything beyond closing the transports, except
              // to set all our local variables to their initial states
              if (this.recvTransport)
                  yield this.recvTransport.close();
              if (this.sendTransport)
                  yield this.sendTransport.close();
              this.recvTransport = null;
              this.sendTransport = null;
              MediaStreamComponent.instance.camVideoProducer = null;
              MediaStreamComponent.instance.camAudioProducer = null;
              MediaStreamComponent.instance.screenVideoProducer = null;
              MediaStreamComponent.instance.screenAudioProducer = null;
              MediaStreamComponent.instance.mediaStream = null;
              MediaStreamComponent.instance.localScreen = null;
              this.lastPollSyncData = {};
              MediaStreamComponent.instance.consumers = [];
              this.joined = false;
              return true;
          });
      }
      subscribeToTrack(peerId, mediaTag) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("subscribe to track", peerId, mediaTag);
              // create a receive transport if we don't already have one
              if (!this.recvTransport)
                  this.recvTransport = yield this.createTransport("recv");
              // if we do already have a consumer, we shouldn't have called this
              // method
              let consumer = MediaStreamComponent.instance.consumers.find(c => c.appData.peerId === peerId && c.appData.mediaTag === mediaTag);
              if (consumer)
                  return console.error("already have consumer for track", peerId, mediaTag);
              // ask the server to create a server-side consumer object and send
              // us back the info we need to create a client-side consumer
              const consumerParameters = (yield this.request(MessageTypes.WebRTCReceiveTrackRequest, {
                  mediaTag,
                  mediaPeerId: peerId,
                  rtpCapabilities: this.mediasoupDevice.rtpCapabilities
              }));
              consumer = yield this.recvTransport.consume(Object.assign(Object.assign({}, consumerParameters), { appData: { peerId, mediaTag } }));
              // the server-side consumer will be started in paused state. wait
              // until we're connected, then send a resume request to the server
              // to get our first keyframe and start displaying video
              while (this.recvTransport.connectionState !== "connected")
                  yield sleep(100);
              // okay, we're ready. let's ask the peer to send us media
              yield this.resumeConsumer(consumer);
              // keep track of all our consumers
              MediaStreamComponent.instance.consumers.push(consumer);
              // ui
              yield MediaStreamControlSystem.instance.addVideoAudio(consumer, peerId);
          });
      }
      unsubscribeFromTrack(peerId, mediaTag) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("unsubscribe from track", peerId, mediaTag);
              const consumer = MediaStreamComponent.instance.consumers.find(c => c.appData.peerId === peerId && c.appData.mediaTag === mediaTag);
              if (!consumer)
                  return;
              yield this.closeConsumer(consumer);
          });
      }
      pauseConsumer(consumer) {
          return __awaiter(this, void 0, void 0, function* () {
              if (!consumer)
                  return;
              console.log("pause consumer", consumer.appData.peerId, consumer.appData.mediaTag);
              yield this.request(MessageTypes.WebRTCPauseConsumerRequest, { consumerId: consumer.id });
              yield consumer.pause();
          });
      }
      resumeConsumer(consumer) {
          return __awaiter(this, void 0, void 0, function* () {
              if (!consumer)
                  return;
              console.log("resume consumer", consumer.appData.peerId, consumer.appData.mediaTag);
              yield this.request(MessageTypes.WebRTCResumeConsumerRequest, { consumerId: consumer.id });
              yield consumer.resume();
          });
      }
      pauseProducer(producer) {
          return __awaiter(this, void 0, void 0, function* () {
              if (!producer)
                  return;
              console.log("pause producer", producer.appData.mediaTag);
              yield this.request(MessageTypes.WebRTCPauseProducerRequest, { producerId: producer.id });
              yield producer.pause();
          });
      }
      resumeProducer(producer) {
          return __awaiter(this, void 0, void 0, function* () {
              if (!producer)
                  return;
              console.log("resume producer", producer.appData.mediaTag);
              yield this.request(MessageTypes.WebRTCResumeProducerRequest, { producerId: producer.id });
              yield producer.resume();
          });
      }
      closeConsumer(consumer) {
          return __awaiter(this, void 0, void 0, function* () {
              if (!consumer)
                  return;
              console.log("closing consumer", consumer.appData.peerId, consumer.appData.mediaTag);
              // tell the server we're closing this consumer. (the server-side
              // consumer may have been closed already, but that's okay.)
              yield this.request(MessageTypes.WebRTCTransportCloseRequest, { consumerId: consumer.id });
              yield consumer.close();
              MediaStreamComponent.instance.consumers = MediaStreamComponent.instance.consumers.filter(c => c !== consumer);
              MediaStreamControlSystem.instance.removeVideoAudio(consumer);
          });
      }
      // utility function to create a transport and hook up signaling logic
      // appropriate to the transport's direction
      createTransport(direction) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log(`create ${direction} transport`);
              // ask the server to create a server-side transport object and send
              // us back the info we need to create a client-side transport
              let transport;
              const { transportOptions } = (yield this.request(MessageTypes.WebRTCTransportCreateRequest, { direction }));
              console.log("transport options", transportOptions);
              if (direction === "recv") {
                  transport = yield this.mediasoupDevice.createRecvTransport(transportOptions);
              }
              else if (direction === "send") {
                  console.log("transport options:");
                  console.log(transportOptions);
                  transport = yield this.mediasoupDevice.createSendTransport(transportOptions);
              }
              else {
                  throw new Error(`bad transport 'direction': ${direction}`);
              }
              // mediasoup-client will emit a connect event when media needs to
              // start flowing for the first time. send dtlsParameters to the
              // server, then call callback() on success or errback() on failure.
              transport.on("connect", ({ dtlsParameters }, callback, errback) => __awaiter(this, void 0, void 0, function* () {
                  console.log("transport connect event", direction);
                  const { error } = (yield this.request(MessageTypes.WebRTCTransportConnectRequest, { transportId: transportOptions.id, dtlsParameters }));
                  if (error) {
                      console.error("error connecting transport", direction, error);
                      errback();
                      return;
                  }
                  callback();
              }));
              if (direction === "send") {
                  // sending transports will emit a produce event when a new track
                  // needs to be set up to start sending. the producer's appData is
                  // passed as a parameter
                  transport.on("produce", ({ kind, rtpParameters, appData }, callback, errback) => __awaiter(this, void 0, void 0, function* () {
                      console.log("transport produce event", appData.mediaTag);
                      // we may want to start out paused (if the checkboxes in the ui
                      // aren't checked, for each media type. not very clean code, here
                      // but, you know, this isn't a real application.)
                      let paused = false;
                      if (appData.mediaTag === "cam-video")
                          paused = MediaStreamComponent.instance.videoPaused;
                      else if (appData.mediaTag === "cam-audio")
                          paused = MediaStreamComponent.instance.audioPaused;
                      // tell the server what it needs to know from us in order to set
                      // up a server-side producer object, and get back a
                      // producer.id. call callback() on success or errback() on
                      // failure.
                      const { error, id } = (yield this.request(MessageTypes.WebRTCSendTrackRequest, {
                          transportId: transportOptions.id,
                          kind,
                          rtpParameters,
                          paused,
                          appData
                      }));
                      if (error) {
                          console.error("error setting up server-side producer", error);
                          errback();
                          return;
                      }
                      callback({ id });
                  }));
              }
              // any time a transport transitions to closed,
              // failed, or disconnected, leave the  and reset
              transport.on("connectionstatechange", (state) => __awaiter(this, void 0, void 0, function* () {
                  console.log(`transport ${transport.id} connectionstatechange ${state}`);
                  // for this simple sample code, assume that transports being
                  // closed is an error (we never close these transports except when
                  // we leave the )
                  if (state === "closed" || state === "failed" || state === "disconnected") {
                      console.log("transport closed ... leaving the  and resetting");
                      alert("Your connection failed.  Please restart the page");
                  }
              }));
              return transport;
          });
      }
      // polling/update logic
      pollAndUpdate() {
          var _a;
          return __awaiter(this, void 0, void 0, function* () {
              console.log("Polling server for current peers array!");
              setTimeout(this.pollAndUpdate, this.pollingTickRate);
              const { peers, error } = (yield this.request(MessageTypes.SynchronizationRequest));
              if (error)
                  console.error("PollAndUpdateError: ", error);
              const localConnectionId = NetworkSystem.instance.getLocalConnectionId();
              if (!(localConnectionId in peers))
                  console.log("Server doesn't think you're connected!");
              // decide if we need to update tracks list and video/audio
              // elements. build list of peers, sorted by join time, removing last
              // seen time and stats, so we can easily do a deep-equals
              // comparison. compare this list with the cached list from last
              // poll.
              // auto-subscribe to their feeds:
              const closestPeers = NetworkSystem.instance.getClosestPeers();
              for (const id in peers) {
                  // for each peer...
                  if (id !== localConnectionId) {
                      // if it isnt me...
                      if (closestPeers !== undefined && closestPeers.includes(id)) {
                          // and if it is close enough in the 3d space...
                          for (const [mediaTag, _] of Object.entries(peers[id].media)) {
                              // for each of the peer's producers...
                              console.log(id + " | " + mediaTag);
                              if (((_a = MediaStreamComponent.instance.consumers) === null || _a === void 0 ? void 0 : _a.find(c => c.appData.peerId === id && c.appData.mediaTag === mediaTag)) !== null)
                                  return;
                              // that we don't already have consumers for...
                              console.log(`auto subscribing to track that ${id} has added`);
                              yield this.subscribeToTrack(id, mediaTag);
                          }
                      }
                  }
              }
              // if a peer has gone away, we need to close all consumers we have
              // for that peer and remove video and audio elements
              for (const id in this.lastPollSyncData) {
                  if (!peers[id]) {
                      console.log(`Peer ${id} has exited`);
                      if (MediaStreamComponent.instance.consumers.length === 0)
                          return console.log("Consumers length is 0");
                      MediaStreamComponent.instance.consumers.forEach(consumer => {
                          if (consumer.appData.peerId === id) {
                              this.closeConsumer(consumer);
                          }
                      });
                  }
              }
              // if a peer has stopped sending media that we are consuming, we
              // need to close the consumer and remove video and audio elements
              if (MediaStreamComponent.instance.consumers == undefined || MediaStreamComponent.instance.consumers.length === 0)
                  return console.log("Consumers length is 0");
              MediaStreamComponent.instance.consumers.forEach(consumer => {
                  const { peerId, mediaTag } = consumer.appData;
                  if (!peers[peerId]) {
                      console.log(`Peer ${peerId} has stopped transmitting ${mediaTag}`);
                      this.closeConsumer(consumer);
                  }
                  else if (!peers[peerId].media[mediaTag]) {
                      console.log(`Peer ${peerId} has stopped transmitting ${mediaTag}`);
                      this.closeConsumer(consumer);
                  }
              });
              // push through the paused state to new sync list
              this.lastPollSyncData = peers;
          });
      }
  }

  var Logger_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  const APP_NAME = 'mediasoup';
  class Logger {
      constructor(prefix) {
          if (prefix) {
              this._debug = src.default(`${APP_NAME}:${prefix}`);
              this._warn = src.default(`${APP_NAME}:WARN:${prefix}`);
              this._error = src.default(`${APP_NAME}:ERROR:${prefix}`);
          }
          else {
              this._debug = src.default(APP_NAME);
              this._warn = src.default(`${APP_NAME}:WARN`);
              this._error = src.default(`${APP_NAME}:ERROR`);
          }
          /* eslint-disable no-console */
          this._debug.log = console.info.bind(console);
          this._warn.log = console.warn.bind(console);
          this._error.log = console.error.bind(console);
          /* eslint-enable no-console */
      }
      get debug() {
          return this._debug;
      }
      get warn() {
          return this._warn;
      }
      get error() {
          return this._error;
      }
  }
  exports.Logger = Logger;
  });

  unwrapExports(Logger_1$1);
  var Logger_2$1 = Logger_1$1.Logger;

  var EnhancedEventEmitter_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('EnhancedEventEmitter');
  class EnhancedEventEmitter extends events.EventEmitter {
      constructor() {
          super();
          this.setMaxListeners(Infinity);
      }
      safeEmit(event, ...args) {
          const numListeners = this.listenerCount(event);
          try {
              return this.emit(event, ...args);
          }
          catch (error) {
              logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);
              return Boolean(numListeners);
          }
      }
      async safeEmitAsPromise(event, ...args) {
          return new Promise((resolve, reject) => (this.safeEmit(event, ...args, resolve, reject)));
      }
  }
  exports.EnhancedEventEmitter = EnhancedEventEmitter;
  });

  unwrapExports(EnhancedEventEmitter_1$1);
  var EnhancedEventEmitter_2$1 = EnhancedEventEmitter_1$1.EnhancedEventEmitter;

  const rnds8 = new Uint8Array(16);
  function rng() {
    return crypto.randomFillSync(rnds8);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  const byteToHex = [];

  for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
  }

  function stringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }

    return uuid;
  }

  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  let _nodeId;

  let _clockseq; // Previous uuid creation time


  let _lastMSecs = 0;
  let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

  function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189

    if (node == null || clockseq == null) {
      const seedBytes = options.random || (options.rng || rng)();

      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock

    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval


    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    } // Per 4.2.1.2 Throw error if too many uuids are requested


    if (nsecs >= 10000) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

    msecs += 12219292800000; // `time_low`

    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`

    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`

    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

    b[i++] = clockseq & 0xff; // `node`

    for (let n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf || stringify(b);
  }

  function parse$4(uuid) {
    if (!validate(uuid)) {
      throw TypeError('Invalid UUID');
    }

    let v;
    const arr = new Uint8Array(16); // Parse ########-....-....-....-............

    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............

    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............

    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............

    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
  }

  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape

    const bytes = [];

    for (let i = 0; i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }

    return bytes;
  }

  const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
  const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  function v35 (name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === 'string') {
        value = stringToBytes(value);
      }

      if (typeof namespace === 'string') {
        namespace = parse$4(namespace);
      }

      if (namespace.length !== 16) {
        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
      } // Compute hash of namespace and value, Per 4.3
      // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
      // hashfunc([...namespace, ... value])`


      let bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 0x0f | version;
      bytes[8] = bytes[8] & 0x3f | 0x80;

      if (buf) {
        offset = offset || 0;

        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }

        return buf;
      }

      return stringify(bytes);
    } // Function#name is not settable on some platforms (#270)


    try {
      generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support


    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
  }

  function md5(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === 'string') {
      bytes = Buffer.from(bytes, 'utf8');
    }

    return crypto.createHash('md5').update(bytes).digest();
  }

  const v3 = v35('v3', 0x30, md5);

  function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }

      return buf;
    }

    return stringify(rnds);
  }

  function sha1(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === 'string') {
      bytes = Buffer.from(bytes, 'utf8');
    }

    return crypto.createHash('sha1').update(bytes).digest();
  }

  const v5 = v35('v5', 0x50, sha1);

  var nil = '00000000-0000-0000-0000-000000000000';

  function version(uuid) {
    if (!validate(uuid)) {
      throw TypeError('Invalid UUID');
    }

    return parseInt(uuid.substr(14, 1), 16);
  }



  var esmNode = /*#__PURE__*/Object.freeze({
    __proto__: null,
    v1: v1,
    v3: v3,
    v4: v4,
    v5: v5,
    NIL: nil,
    version: version,
    validate: validate,
    stringify: stringify,
    parse: parse$4
  });

  var randomNumber = createCommonjsModule(function (module) {
  void function(root){

    function defaults(options){
      var options = options || {};
      var min = options.min;
      var max = options.max;
      var integer = options.integer || false;
      if ( min == null && max == null ) {
        min = 0;
        max = 1;
      } else if ( min == null ) {
        min = max - 1;
      } else if ( max == null ) {
        max = min + 1;
      }
      if ( max < min ) throw new Error('invalid options, max must be >= min')
      return {
        min:     min
      , max:     max
      , integer: integer
      }
    }

    function random(options){
      options = defaults(options);
      if ( options.max === options.min ) return options.min
      var r = Math.random() * (options.max - options.min + Number(!!options.integer)) + options.min;
      return options.integer ? Math.floor(r) : r
    }

    function generator(options){
      options = defaults(options);
      return function(min, max, integer){
        options.min     = min != null ? min : options.min;
        options.max     = max != null ? max : options.max;
        options.integer = integer != null ? integer : options.integer;
        return random(options)
      }
    }

    module.exports =  random;
    module.exports.generator = generator;
    module.exports.defaults = defaults;
  }();
  });
  var randomNumber_1 = randomNumber.generator;
  var randomNumber_2 = randomNumber.defaults;

  var utils$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });

  const randomNumberGenerator = randomNumber.generator({
      min: 100000000,
      max: 999999999,
      integer: true
  });
  exports.generateRandomNumber = randomNumberGenerator;
  /**
   * Clones the given object/array.
   */
  function clone(data) {
      if (typeof data !== 'object')
          return {};
      return JSON.parse(JSON.stringify(data));
  }
  exports.clone = clone;
  });

  unwrapExports(utils$1);
  var utils_1$1 = utils$1.generateRandomNumber;
  var utils_2$1 = utils$1.clone;

  var errors$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Error indicating not support for something.
   */
  class UnsupportedError extends Error {
      constructor(message) {
          super(message);
          this.name = 'UnsupportedError';
          if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
              Error.captureStackTrace(this, UnsupportedError);
          else
              this.stack = (new Error(message)).stack;
      }
  }
  exports.UnsupportedError = UnsupportedError;
  /**
   * Error produced when calling a method in an invalid state.
   */
  class InvalidStateError extends Error {
      constructor(message) {
          super(message);
          this.name = 'InvalidStateError';
          if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
              Error.captureStackTrace(this, InvalidStateError);
          else
              this.stack = (new Error(message)).stack;
      }
  }
  exports.InvalidStateError = InvalidStateError;
  });

  unwrapExports(errors$1);
  var errors_1$1 = errors$1.UnsupportedError;
  var errors_2$1 = errors$1.InvalidStateError;

  var supportedRtpCapabilities_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  const supportedRtpCapabilities = {
      codecs: [
          {
              kind: 'audio',
              mimeType: 'audio/opus',
              clockRate: 48000,
              channels: 2,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/PCMU',
              preferredPayloadType: 0,
              clockRate: 8000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/PCMA',
              preferredPayloadType: 8,
              clockRate: 8000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/ISAC',
              clockRate: 32000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/ISAC',
              clockRate: 16000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/G722',
              preferredPayloadType: 9,
              clockRate: 8000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/iLBC',
              clockRate: 8000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/SILK',
              clockRate: 24000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/SILK',
              clockRate: 16000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/SILK',
              clockRate: 12000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/SILK',
              clockRate: 8000,
              rtcpFeedback: [
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'audio',
              mimeType: 'audio/CN',
              preferredPayloadType: 13,
              clockRate: 32000
          },
          {
              kind: 'audio',
              mimeType: 'audio/CN',
              preferredPayloadType: 13,
              clockRate: 16000
          },
          {
              kind: 'audio',
              mimeType: 'audio/CN',
              preferredPayloadType: 13,
              clockRate: 8000
          },
          {
              kind: 'audio',
              mimeType: 'audio/telephone-event',
              clockRate: 48000
          },
          {
              kind: 'audio',
              mimeType: 'audio/telephone-event',
              clockRate: 32000
          },
          {
              kind: 'audio',
              mimeType: 'audio/telephone-event',
              clockRate: 16000
          },
          {
              kind: 'audio',
              mimeType: 'audio/telephone-event',
              clockRate: 8000
          },
          {
              kind: 'video',
              mimeType: 'video/VP8',
              clockRate: 90000,
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'video',
              mimeType: 'video/VP9',
              clockRate: 90000,
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'video',
              mimeType: 'video/H264',
              clockRate: 90000,
              parameters: {
                  'packetization-mode': 1,
                  'level-asymmetry-allowed': 1
              },
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'video',
              mimeType: 'video/H264',
              clockRate: 90000,
              parameters: {
                  'packetization-mode': 0,
                  'level-asymmetry-allowed': 1
              },
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'video',
              mimeType: 'video/H265',
              clockRate: 90000,
              parameters: {
                  'packetization-mode': 1,
                  'level-asymmetry-allowed': 1
              },
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          },
          {
              kind: 'video',
              mimeType: 'video/H265',
              clockRate: 90000,
              parameters: {
                  'packetization-mode': 0,
                  'level-asymmetry-allowed': 1
              },
              rtcpFeedback: [
                  { type: 'nack' },
                  { type: 'nack', parameter: 'pli' },
                  { type: 'ccm', parameter: 'fir' },
                  { type: 'goog-remb' },
                  { type: 'transport-cc' }
              ]
          }
      ],
      headerExtensions: [
          {
              kind: 'audio',
              uri: 'urn:ietf:params:rtp-hdrext:sdes:mid',
              preferredId: 1,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'urn:ietf:params:rtp-hdrext:sdes:mid',
              preferredId: 1,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id',
              preferredId: 2,
              preferredEncrypt: false,
              direction: 'recvonly'
          },
          {
              kind: 'video',
              uri: 'urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id',
              preferredId: 3,
              preferredEncrypt: false,
              direction: 'recvonly'
          },
          {
              kind: 'audio',
              uri: 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time',
              preferredId: 4,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time',
              preferredId: 4,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          // NOTE: For audio we just enable transport-wide-cc-01 when receiving media.
          {
              kind: 'audio',
              uri: 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01',
              preferredId: 5,
              preferredEncrypt: false,
              direction: 'recvonly'
          },
          {
              kind: 'video',
              uri: 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01',
              preferredId: 5,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          // NOTE: Remove this once framemarking draft becomes RFC.
          {
              kind: 'video',
              uri: 'http://tools.ietf.org/html/draft-ietf-avtext-framemarking-07',
              preferredId: 6,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'urn:ietf:params:rtp-hdrext:framemarking',
              preferredId: 7,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'audio',
              uri: 'urn:ietf:params:rtp-hdrext:ssrc-audio-level',
              preferredId: 10,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'urn:3gpp:video-orientation',
              preferredId: 11,
              preferredEncrypt: false,
              direction: 'sendrecv'
          },
          {
              kind: 'video',
              uri: 'urn:ietf:params:rtp-hdrext:toffset',
              preferredId: 12,
              preferredEncrypt: false,
              direction: 'sendrecv'
          }
      ]
  };
  exports.supportedRtpCapabilities = supportedRtpCapabilities;
  });

  unwrapExports(supportedRtpCapabilities_1);
  var supportedRtpCapabilities_2 = supportedRtpCapabilities_1.supportedRtpCapabilities;

  var scalabilityModes$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})(_KEY)?');
  function parse(scalabilityMode) {
      const match = ScalabilityModeRegex.exec(scalabilityMode || '');
      if (match) {
          return {
              spatialLayers: Number(match[1]),
              temporalLayers: Number(match[2]),
              ksvc: Boolean(match[3])
          };
      }
      else {
          return {
              spatialLayers: 1,
              temporalLayers: 1,
              ksvc: false
          };
      }
  }
  exports.parse = parse;
  });

  unwrapExports(scalabilityModes$1);
  var scalabilityModes_1$1 = scalabilityModes$1.parse;

  var ortc$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });





  const DynamicPayloadTypes = [
      100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
      111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
      122, 123, 124, 125, 126, 127, 96, 97, 98, 99
  ];
  /**
   * Validates RtpCapabilities. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCapabilities(caps) {
      if (typeof caps !== 'object')
          throw new TypeError('caps is not an object');
      // codecs is optional. If unset, fill with an empty array.
      if (caps.codecs && !Array.isArray(caps.codecs))
          throw new TypeError('caps.codecs is not an array');
      else if (!caps.codecs)
          caps.codecs = [];
      for (const codec of caps.codecs) {
          validateRtpCodecCapability(codec);
      }
      // headerExtensions is optional. If unset, fill with an empty array.
      if (caps.headerExtensions && !Array.isArray(caps.headerExtensions))
          throw new TypeError('caps.headerExtensions is not an array');
      else if (!caps.headerExtensions)
          caps.headerExtensions = [];
      for (const ext of caps.headerExtensions) {
          validateRtpHeaderExtension(ext);
      }
  }
  exports.validateRtpCapabilities = validateRtpCapabilities;
  /**
   * Validates RtpCodecCapability. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCodecCapability(codec) {
      const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
      if (typeof codec !== 'object')
          throw new TypeError('codec is not an object');
      // mimeType is mandatory.
      if (!codec.mimeType || typeof codec.mimeType !== 'string')
          throw new TypeError('missing codec.mimeType');
      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
      if (!mimeTypeMatch)
          throw new TypeError('invalid codec.mimeType');
      // Just override kind with media component of mimeType.
      codec.kind = mimeTypeMatch[1].toLowerCase();
      // preferredPayloadType is optional.
      if (codec.preferredPayloadType && typeof codec.preferredPayloadType !== 'number')
          throw new TypeError('invalid codec.preferredPayloadType');
      // clockRate is mandatory.
      if (typeof codec.clockRate !== 'number')
          throw new TypeError('missing codec.clockRate');
      // channels is optional. If unset, set it to 1 (just if audio).
      if (codec.kind === 'audio') {
          if (typeof codec.channels !== 'number')
              codec.channels = 1;
      }
      else {
          delete codec.channels;
      }
      // parameters is optional. If unset, set it to an empty object.
      if (!codec.parameters || typeof codec.parameters !== 'object')
          codec.parameters = {};
      for (const key of Object.keys(codec.parameters)) {
          let value = codec.parameters[key];
          if (value === undefined) {
              codec.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number') {
              throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
          }
          // Specific parameters validation.
          if (key === 'apt') {
              if (typeof value !== 'number')
                  throw new TypeError('invalid codec apt parameter');
          }
      }
      // rtcpFeedback is optional. If unset, set it to an empty array.
      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
          codec.rtcpFeedback = [];
      for (const fb of codec.rtcpFeedback) {
          validateRtcpFeedback(fb);
      }
  }
  exports.validateRtpCodecCapability = validateRtpCodecCapability;
  /**
   * Validates RtcpFeedback. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtcpFeedback(fb) {
      if (typeof fb !== 'object')
          throw new TypeError('fb is not an object');
      // type is mandatory.
      if (!fb.type || typeof fb.type !== 'string')
          throw new TypeError('missing fb.type');
      // parameter is optional. If unset set it to an empty string.
      if (!fb.parameter || typeof fb.parameter !== 'string')
          fb.parameter = '';
  }
  exports.validateRtcpFeedback = validateRtcpFeedback;
  /**
   * Validates RtpHeaderExtension. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpHeaderExtension(ext) {
      if (typeof ext !== 'object')
          throw new TypeError('ext is not an object');
      // kind is optional. If unset set it to an empty string.
      if (!ext.kind || typeof ext.kind !== 'string')
          ext.kind = '';
      if (ext.kind !== '' && ext.kind !== 'audio' && ext.kind !== 'video')
          throw new TypeError('invalid ext.kind');
      // uri is mandatory.
      if (!ext.uri || typeof ext.uri !== 'string')
          throw new TypeError('missing ext.uri');
      // preferredId is mandatory.
      if (typeof ext.preferredId !== 'number')
          throw new TypeError('missing ext.preferredId');
      // preferredEncrypt is optional. If unset set it to false.
      if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean')
          throw new TypeError('invalid ext.preferredEncrypt');
      else if (!ext.preferredEncrypt)
          ext.preferredEncrypt = false;
      // direction is optional. If unset set it to sendrecv.
      if (ext.direction && typeof ext.direction !== 'string')
          throw new TypeError('invalid ext.direction');
      else if (!ext.direction)
          ext.direction = 'sendrecv';
  }
  exports.validateRtpHeaderExtension = validateRtpHeaderExtension;
  /**
   * Validates RtpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // mid is optional.
      if (params.mid && typeof params.mid !== 'string')
          throw new TypeError('params.mid is not a string');
      // codecs is mandatory.
      if (!Array.isArray(params.codecs))
          throw new TypeError('missing params.codecs');
      for (const codec of params.codecs) {
          validateRtpCodecParameters(codec);
      }
      // headerExtensions is optional. If unset, fill with an empty array.
      if (params.headerExtensions && !Array.isArray(params.headerExtensions))
          throw new TypeError('params.headerExtensions is not an array');
      else if (!params.headerExtensions)
          params.headerExtensions = [];
      for (const ext of params.headerExtensions) {
          validateRtpHeaderExtensionParameters(ext);
      }
      // encodings is optional. If unset, fill with an empty array.
      if (params.encodings && !Array.isArray(params.encodings))
          throw new TypeError('params.encodings is not an array');
      else if (!params.encodings)
          params.encodings = [];
      for (const encoding of params.encodings) {
          validateRtpEncodingParameters(encoding);
      }
      // rtcp is optional. If unset, fill with an empty object.
      if (params.rtcp && typeof params.rtcp !== 'object')
          throw new TypeError('params.rtcp is not an object');
      else if (!params.rtcp)
          params.rtcp = {};
      validateRtcpParameters(params.rtcp);
  }
  exports.validateRtpParameters = validateRtpParameters;
  /**
   * Validates RtpCodecParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpCodecParameters(codec) {
      const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
      if (typeof codec !== 'object')
          throw new TypeError('codec is not an object');
      // mimeType is mandatory.
      if (!codec.mimeType || typeof codec.mimeType !== 'string')
          throw new TypeError('missing codec.mimeType');
      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
      if (!mimeTypeMatch)
          throw new TypeError('invalid codec.mimeType');
      // payloadType is mandatory.
      if (typeof codec.payloadType !== 'number')
          throw new TypeError('missing codec.payloadType');
      // clockRate is mandatory.
      if (typeof codec.clockRate !== 'number')
          throw new TypeError('missing codec.clockRate');
      const kind = mimeTypeMatch[1].toLowerCase();
      // channels is optional. If unset, set it to 1 (just if audio).
      if (kind === 'audio') {
          if (typeof codec.channels !== 'number')
              codec.channels = 1;
      }
      else {
          delete codec.channels;
      }
      // parameters is optional. If unset, set it to an empty object.
      if (!codec.parameters || typeof codec.parameters !== 'object')
          codec.parameters = {};
      for (const key of Object.keys(codec.parameters)) {
          let value = codec.parameters[key];
          if (value === undefined) {
              codec.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number') {
              throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
          }
          // Specific parameters validation.
          if (key === 'apt') {
              if (typeof value !== 'number')
                  throw new TypeError('invalid codec apt parameter');
          }
      }
      // rtcpFeedback is optional. If unset, set it to an empty array.
      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
          codec.rtcpFeedback = [];
      for (const fb of codec.rtcpFeedback) {
          validateRtcpFeedback(fb);
      }
  }
  exports.validateRtpCodecParameters = validateRtpCodecParameters;
  /**
   * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpHeaderExtensionParameters(ext) {
      if (typeof ext !== 'object')
          throw new TypeError('ext is not an object');
      // uri is mandatory.
      if (!ext.uri || typeof ext.uri !== 'string')
          throw new TypeError('missing ext.uri');
      // id is mandatory.
      if (typeof ext.id !== 'number')
          throw new TypeError('missing ext.id');
      // encrypt is optional. If unset set it to false.
      if (ext.encrypt && typeof ext.encrypt !== 'boolean')
          throw new TypeError('invalid ext.encrypt');
      else if (!ext.encrypt)
          ext.encrypt = false;
      // parameters is optional. If unset, set it to an empty object.
      if (!ext.parameters || typeof ext.parameters !== 'object')
          ext.parameters = {};
      for (const key of Object.keys(ext.parameters)) {
          let value = ext.parameters[key];
          if (value === undefined) {
              ext.parameters[key] = '';
              value = '';
          }
          if (typeof value !== 'string' && typeof value !== 'number')
              throw new TypeError('invalid header extension parameter');
      }
  }
  exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;
  /**
   * Validates RtpEncodingParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtpEncodingParameters(encoding) {
      if (typeof encoding !== 'object')
          throw new TypeError('encoding is not an object');
      // ssrc is optional.
      if (encoding.ssrc && typeof encoding.ssrc !== 'number')
          throw new TypeError('invalid encoding.ssrc');
      // rid is optional.
      if (encoding.rid && typeof encoding.rid !== 'string')
          throw new TypeError('invalid encoding.rid');
      // rtx is optional.
      if (encoding.rtx && typeof encoding.rtx !== 'object') {
          throw new TypeError('invalid encoding.rtx');
      }
      else if (encoding.rtx) {
          // RTX ssrc is mandatory if rtx is present.
          if (typeof encoding.rtx.ssrc !== 'number')
              throw new TypeError('missing encoding.rtx.ssrc');
      }
      // dtx is optional. If unset set it to false.
      if (!encoding.dtx || typeof encoding.dtx !== 'boolean')
          encoding.dtx = false;
      // scalabilityMode is optional.
      if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string')
          throw new TypeError('invalid encoding.scalabilityMode');
  }
  exports.validateRtpEncodingParameters = validateRtpEncodingParameters;
  /**
   * Validates RtcpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateRtcpParameters(rtcp) {
      if (typeof rtcp !== 'object')
          throw new TypeError('rtcp is not an object');
      // cname is optional.
      if (rtcp.cname && typeof rtcp.cname !== 'string')
          throw new TypeError('invalid rtcp.cname');
      // reducedSize is optional. If unset set it to true.
      if (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean')
          rtcp.reducedSize = true;
  }
  exports.validateRtcpParameters = validateRtcpParameters;
  /**
   * Validates SctpCapabilities. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpCapabilities(caps) {
      if (typeof caps !== 'object')
          throw new TypeError('caps is not an object');
      // numStreams is mandatory.
      if (!caps.numStreams || typeof caps.numStreams !== 'object')
          throw new TypeError('missing caps.numStreams');
      validateNumSctpStreams(caps.numStreams);
  }
  exports.validateSctpCapabilities = validateSctpCapabilities;
  /**
   * Validates NumSctpStreams. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateNumSctpStreams(numStreams) {
      if (typeof numStreams !== 'object')
          throw new TypeError('numStreams is not an object');
      // OS is mandatory.
      if (typeof numStreams.OS !== 'number')
          throw new TypeError('missing numStreams.OS');
      // MIS is mandatory.
      if (typeof numStreams.MIS !== 'number')
          throw new TypeError('missing numStreams.MIS');
  }
  exports.validateNumSctpStreams = validateNumSctpStreams;
  /**
   * Validates SctpParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // port is mandatory.
      if (typeof params.port !== 'number')
          throw new TypeError('missing params.port');
      // OS is mandatory.
      if (typeof params.OS !== 'number')
          throw new TypeError('missing params.OS');
      // MIS is mandatory.
      if (typeof params.MIS !== 'number')
          throw new TypeError('missing params.MIS');
      // maxMessageSize is mandatory.
      if (typeof params.maxMessageSize !== 'number')
          throw new TypeError('missing params.maxMessageSize');
  }
  exports.validateSctpParameters = validateSctpParameters;
  /**
   * Validates SctpStreamParameters. It may modify given data by adding missing
   * fields with default values.
   * It throws if invalid.
   */
  function validateSctpStreamParameters(params) {
      if (typeof params !== 'object')
          throw new TypeError('params is not an object');
      // streamId is mandatory.
      if (typeof params.streamId !== 'number')
          throw new TypeError('missing params.streamId');
      // ordered is optional.
      let orderedGiven = false;
      if (typeof params.ordered === 'boolean')
          orderedGiven = true;
      else
          params.ordered = true;
      // maxPacketLifeTime is optional.
      if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number')
          throw new TypeError('invalid params.maxPacketLifeTime');
      // maxRetransmits is optional.
      if (params.maxRetransmits && typeof params.maxRetransmits !== 'number')
          throw new TypeError('invalid params.maxRetransmits');
      if (params.maxPacketLifeTime && params.maxRetransmits)
          throw new TypeError('cannot provide both maxPacketLifeTime and maxRetransmits');
      if (orderedGiven &&
          params.ordered &&
          (params.maxPacketLifeTime || params.maxRetransmits)) {
          throw new TypeError('cannot be ordered with maxPacketLifeTime or maxRetransmits');
      }
      else if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits)) {
          params.ordered = false;
      }
  }
  exports.validateSctpStreamParameters = validateSctpStreamParameters;
  /**
   * Generate RTP capabilities for the Router based on the given media codecs and
   * mediasoup supported RTP capabilities.
   */
  function generateRouterRtpCapabilities(mediaCodecs = []) {
      // Normalize supported RTP capabilities.
      validateRtpCapabilities(supportedRtpCapabilities_1.supportedRtpCapabilities);
      if (!Array.isArray(mediaCodecs))
          throw new TypeError('mediaCodecs must be an Array');
      const clonedSupportedRtpCapabilities = utils$1.clone(supportedRtpCapabilities_1.supportedRtpCapabilities);
      const dynamicPayloadTypes = utils$1.clone(DynamicPayloadTypes);
      const caps = {
          codecs: [],
          headerExtensions: clonedSupportedRtpCapabilities.headerExtensions
      };
      for (const mediaCodec of mediaCodecs) {
          // This may throw.
          validateRtpCodecCapability(mediaCodec);
          const matchedSupportedCodec = clonedSupportedRtpCapabilities
              .codecs
              .find((supportedCodec) => (matchCodecs(mediaCodec, supportedCodec, { strict: false })));
          if (!matchedSupportedCodec) {
              throw new errors$1.UnsupportedError(`media codec not supported [mimeType:${mediaCodec.mimeType}]`);
          }
          // Clone the supported codec.
          const codec = utils$1.clone(matchedSupportedCodec);
          // If the given media codec has preferredPayloadType, keep it.
          if (typeof mediaCodec.preferredPayloadType === 'number') {
              codec.preferredPayloadType = mediaCodec.preferredPayloadType;
              // Also remove the pt from the list of available dynamic values.
              const idx = dynamicPayloadTypes.indexOf(codec.preferredPayloadType);
              if (idx > -1)
                  dynamicPayloadTypes.splice(idx, 1);
          }
          // Otherwise if the supported codec has preferredPayloadType, use it.
          else if (typeof codec.preferredPayloadType === 'number') ;
          // Otherwise choose a dynamic one.
          else {
              // Take the first available pt and remove it from the list.
              const pt = dynamicPayloadTypes.shift();
              if (!pt)
                  throw new Error('cannot allocate more dynamic codec payload types');
              codec.preferredPayloadType = pt;
          }
          // Ensure there is not duplicated preferredPayloadType values.
          if (caps.codecs.some((c) => c.preferredPayloadType === codec.preferredPayloadType))
              throw new TypeError('duplicated codec.preferredPayloadType');
          // Merge the media codec parameters.
          codec.parameters = { ...codec.parameters, ...mediaCodec.parameters };
          // Append to the codec list.
          caps.codecs.push(codec);
          // Add a RTX video codec if video.
          if (codec.kind === 'video') {
              // Take the first available pt and remove it from the list.
              const pt = dynamicPayloadTypes.shift();
              if (!pt)
                  throw new Error('cannot allocate more dynamic codec payload types');
              const rtxCodec = {
                  kind: codec.kind,
                  mimeType: `${codec.kind}/rtx`,
                  preferredPayloadType: pt,
                  clockRate: codec.clockRate,
                  parameters: {
                      apt: codec.preferredPayloadType
                  },
                  rtcpFeedback: []
              };
              // Append to the codec list.
              caps.codecs.push(rtxCodec);
          }
      }
      return caps;
  }
  exports.generateRouterRtpCapabilities = generateRouterRtpCapabilities;
  /**
   * Get a mapping of codec payloads and encodings of the given Producer RTP
   * parameters as values expected by the Router.
   *
   * It may throw if invalid or non supported RTP parameters are given.
   */
  function getProducerRtpParametersMapping(params, caps) {
      const rtpMapping = {
          codecs: [],
          encodings: []
      };
      // Match parameters media codecs to capabilities media codecs.
      const codecToCapCodec = new Map();
      for (const codec of params.codecs) {
          if (isRtxCodec(codec))
              continue;
          // Search for the same media codec in capabilities.
          const matchedCapCodec = caps.codecs
              .find((capCodec) => (matchCodecs(codec, capCodec, { strict: true, modify: true })));
          if (!matchedCapCodec) {
              throw new errors$1.UnsupportedError(`unsupported codec [mimeType:${codec.mimeType}, payloadType:${codec.payloadType}]`);
          }
          codecToCapCodec.set(codec, matchedCapCodec);
      }
      // Match parameters RTX codecs to capabilities RTX codecs.
      for (const codec of params.codecs) {
          if (!isRtxCodec(codec))
              continue;
          // Search for the associated media codec.
          const associatedMediaCodec = params.codecs
              .find((mediaCodec) => mediaCodec.payloadType === codec.parameters.apt);
          if (!associatedMediaCodec) {
              throw new TypeError(`missing media codec found for RTX PT ${codec.payloadType}`);
          }
          const capMediaCodec = codecToCapCodec.get(associatedMediaCodec);
          // Ensure that the capabilities media codec has a RTX codec.
          const associatedCapRtxCodec = caps.codecs
              .find((capCodec) => (isRtxCodec(capCodec) &&
              capCodec.parameters.apt === capMediaCodec.preferredPayloadType));
          if (!associatedCapRtxCodec) {
              throw new errors$1.UnsupportedError(`no RTX codec for capability codec PT ${capMediaCodec.preferredPayloadType}`);
          }
          codecToCapCodec.set(codec, associatedCapRtxCodec);
      }
      // Generate codecs mapping.
      for (const [codec, capCodec] of codecToCapCodec) {
          rtpMapping.codecs.push({
              payloadType: codec.payloadType,
              mappedPayloadType: capCodec.preferredPayloadType
          });
      }
      // Generate encodings mapping.
      let mappedSsrc = utils$1.generateRandomNumber();
      for (const encoding of params.encodings) {
          const mappedEncoding = {};
          mappedEncoding.mappedSsrc = mappedSsrc++;
          if (encoding.rid)
              mappedEncoding.rid = encoding.rid;
          if (encoding.ssrc)
              mappedEncoding.ssrc = encoding.ssrc;
          if (encoding.scalabilityMode)
              mappedEncoding.scalabilityMode = encoding.scalabilityMode;
          rtpMapping.encodings.push(mappedEncoding);
      }
      return rtpMapping;
  }
  exports.getProducerRtpParametersMapping = getProducerRtpParametersMapping;
  /**
   * Generate RTP parameters to be internally used by Consumers given the RTP
   * parameters of a Producer and the RTP capabilities of the Router.
   */
  function getConsumableRtpParameters(kind, params, caps, rtpMapping) {
      const consumableParams = {
          codecs: [],
          headerExtensions: [],
          encodings: [],
          rtcp: {}
      };
      for (const codec of params.codecs) {
          if (isRtxCodec(codec))
              continue;
          const consumableCodecPt = rtpMapping.codecs
              .find((entry) => entry.payloadType === codec.payloadType)
              .mappedPayloadType;
          const matchedCapCodec = caps.codecs
              .find((capCodec) => capCodec.preferredPayloadType === consumableCodecPt);
          const consumableCodec = {
              mimeType: matchedCapCodec.mimeType,
              payloadType: matchedCapCodec.preferredPayloadType,
              clockRate: matchedCapCodec.clockRate,
              channels: matchedCapCodec.channels,
              parameters: codec.parameters,
              rtcpFeedback: matchedCapCodec.rtcpFeedback
          };
          consumableParams.codecs.push(consumableCodec);
          const consumableCapRtxCodec = caps.codecs
              .find((capRtxCodec) => (isRtxCodec(capRtxCodec) &&
              capRtxCodec.parameters.apt === consumableCodec.payloadType));
          if (consumableCapRtxCodec) {
              const consumableRtxCodec = {
                  mimeType: consumableCapRtxCodec.mimeType,
                  payloadType: consumableCapRtxCodec.preferredPayloadType,
                  clockRate: consumableCapRtxCodec.clockRate,
                  parameters: consumableCapRtxCodec.parameters,
                  rtcpFeedback: consumableCapRtxCodec.rtcpFeedback
              };
              consumableParams.codecs.push(consumableRtxCodec);
          }
      }
      for (const capExt of caps.headerExtensions) {
          // Just take RTP header extension that can be used in Consumers.
          if (capExt.kind !== kind ||
              (capExt.direction !== 'sendrecv' && capExt.direction !== 'sendonly')) {
              continue;
          }
          const consumableExt = {
              uri: capExt.uri,
              id: capExt.preferredId,
              encrypt: capExt.preferredEncrypt,
              parameters: {}
          };
          consumableParams.headerExtensions.push(consumableExt);
      }
      // Clone Producer encodings since we'll mangle them.
      const consumableEncodings = utils$1.clone(params.encodings);
      for (let i = 0; i < consumableEncodings.length; ++i) {
          const consumableEncoding = consumableEncodings[i];
          const { mappedSsrc } = rtpMapping.encodings[i];
          // Remove useless fields.
          delete consumableEncoding.rid;
          delete consumableEncoding.rtx;
          delete consumableEncoding.codecPayloadType;
          // Set the mapped ssrc.
          consumableEncoding.ssrc = mappedSsrc;
          consumableParams.encodings.push(consumableEncoding);
      }
      consumableParams.rtcp =
          {
              cname: params.rtcp.cname,
              reducedSize: true,
              mux: true
          };
      return consumableParams;
  }
  exports.getConsumableRtpParameters = getConsumableRtpParameters;
  /**
   * Check whether the given RTP capabilities can consume the given Producer.
   */
  function canConsume(consumableParams, caps) {
      // This may throw.
      validateRtpCapabilities(caps);
      const matchingCodecs = [];
      for (const codec of consumableParams.codecs) {
          const matchedCapCodec = caps.codecs
              .find((capCodec) => matchCodecs(capCodec, codec, { strict: true }));
          if (!matchedCapCodec)
              continue;
          matchingCodecs.push(codec);
      }
      // Ensure there is at least one media codec.
      if (matchingCodecs.length === 0 || isRtxCodec(matchingCodecs[0]))
          return false;
      return true;
  }
  exports.canConsume = canConsume;
  /**
   * Generate RTP parameters for a specific Consumer.
   *
   * It reduces encodings to just one and takes into account given RTP capabilities
   * to reduce codecs, codecs' RTCP feedback and header extensions, and also enables
   * or disabled RTX.
   */
  function getConsumerRtpParameters(consumableParams, caps) {
      const consumerParams = {
          codecs: [],
          headerExtensions: [],
          encodings: [],
          rtcp: consumableParams.rtcp
      };
      for (const capCodec of caps.codecs) {
          validateRtpCodecCapability(capCodec);
      }
      const consumableCodecs = utils$1.clone(consumableParams.codecs);
      let rtxSupported = false;
      for (const codec of consumableCodecs) {
          const matchedCapCodec = caps.codecs
              .find((capCodec) => matchCodecs(capCodec, codec, { strict: true }));
          if (!matchedCapCodec)
              continue;
          codec.rtcpFeedback = matchedCapCodec.rtcpFeedback;
          consumerParams.codecs.push(codec);
          if (!rtxSupported && isRtxCodec(codec))
              rtxSupported = true;
      }
      // Ensure there is at least one media codec.
      if (consumerParams.codecs.length === 0 || isRtxCodec(consumerParams.codecs[0])) {
          throw new errors$1.UnsupportedError('no compatible media codecs');
      }
      consumerParams.headerExtensions = consumableParams.headerExtensions
          .filter((ext) => (caps.headerExtensions
          .some((capExt) => (capExt.preferredId === ext.id &&
          capExt.uri === ext.uri))));
      // Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.
      if (consumerParams.headerExtensions.some((ext) => (ext.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'))) {
          for (const codec of consumerParams.codecs) {
              codec.rtcpFeedback = codec.rtcpFeedback
                  .filter((fb) => fb.type !== 'goog-remb');
          }
      }
      else if (consumerParams.headerExtensions.some((ext) => (ext.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'))) {
          for (const codec of consumerParams.codecs) {
              codec.rtcpFeedback = codec.rtcpFeedback
                  .filter((fb) => fb.type !== 'transport-cc');
          }
      }
      else {
          for (const codec of consumerParams.codecs) {
              codec.rtcpFeedback = codec.rtcpFeedback
                  .filter((fb) => (fb.type !== 'transport-cc' &&
                  fb.type !== 'goog-remb'));
          }
      }
      const consumerEncoding = {
          ssrc: utils$1.generateRandomNumber()
      };
      if (rtxSupported)
          consumerEncoding.rtx = { ssrc: utils$1.generateRandomNumber() };
      // If any of the consumableParams.encodings has scalabilityMode, process it
      // (assume all encodings have the same value).
      const encodingWithScalabilityMode = consumableParams.encodings.find((encoding) => encoding.scalabilityMode);
      let scalabilityMode = encodingWithScalabilityMode
          ? encodingWithScalabilityMode.scalabilityMode
          : undefined;
      // If there is simulast, mangle spatial layers in scalabilityMode.
      if (consumableParams.encodings.length > 1) {
          const { temporalLayers } = scalabilityModes$1.parse(scalabilityMode);
          scalabilityMode = `S${consumableParams.encodings.length}T${temporalLayers}`;
      }
      if (scalabilityMode)
          consumerEncoding.scalabilityMode = scalabilityMode;
      // Use the maximum maxBitrate in any encoding and honor it in the Consumer's
      // encoding.
      const maxEncodingMaxBitrate = consumableParams.encodings.reduce((maxBitrate, encoding) => (encoding.maxBitrate && encoding.maxBitrate > maxBitrate
          ? encoding.maxBitrate
          : maxBitrate), 0);
      if (maxEncodingMaxBitrate) {
          consumerEncoding.maxBitrate = maxEncodingMaxBitrate;
      }
      // Set a single encoding for the Consumer.
      consumerParams.encodings.push(consumerEncoding);
      // Copy verbatim.
      consumerParams.rtcp = consumableParams.rtcp;
      return consumerParams;
  }
  exports.getConsumerRtpParameters = getConsumerRtpParameters;
  /**
   * Generate RTP parameters for a pipe Consumer.
   *
   * It keeps all original consumable encodings and removes support for BWE. If
   * enableRtx is false, it also removes RTX and NACK support.
   */
  function getPipeConsumerRtpParameters(consumableParams, enableRtx = false) {
      const consumerParams = {
          codecs: [],
          headerExtensions: [],
          encodings: [],
          rtcp: consumableParams.rtcp
      };
      const consumableCodecs = utils$1.clone(consumableParams.codecs);
      for (const codec of consumableCodecs) {
          if (!enableRtx && isRtxCodec(codec))
              continue;
          codec.rtcpFeedback = codec.rtcpFeedback
              .filter((fb) => ((fb.type === 'nack' && fb.parameter === 'pli') ||
              (fb.type === 'ccm' && fb.parameter === 'fir') ||
              (enableRtx && fb.type === 'nack' && !fb.parameter)));
          consumerParams.codecs.push(codec);
      }
      // Reduce RTP extensions by disabling transport MID and BWE related ones.
      consumerParams.headerExtensions = consumableParams.headerExtensions
          .filter((ext) => (ext.uri !== 'urn:ietf:params:rtp-hdrext:sdes:mid' &&
          ext.uri !== 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time' &&
          ext.uri !== 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'));
      const consumableEncodings = utils$1.clone(consumableParams.encodings);
      const baseSsrc = utils$1.generateRandomNumber();
      const baseRtxSsrc = utils$1.generateRandomNumber();
      for (let i = 0; i < consumableEncodings.length; ++i) {
          const encoding = consumableEncodings[i];
          encoding.ssrc = baseSsrc + i;
          if (enableRtx)
              encoding.rtx = { ssrc: baseRtxSsrc + i };
          else
              delete encoding.rtx;
          consumerParams.encodings.push(encoding);
      }
      return consumerParams;
  }
  exports.getPipeConsumerRtpParameters = getPipeConsumerRtpParameters;
  function isRtxCodec(codec) {
      return /.+\/rtx$/i.test(codec.mimeType);
  }
  function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {
      const aMimeType = aCodec.mimeType.toLowerCase();
      const bMimeType = bCodec.mimeType.toLowerCase();
      if (aMimeType !== bMimeType)
          return false;
      if (aCodec.clockRate !== bCodec.clockRate)
          return false;
      if (aCodec.channels !== bCodec.channels)
          return false;
      // Per codec special checks.
      switch (aMimeType) {
          case 'video/h264':
              {
                  const aPacketizationMode = aCodec.parameters['packetization-mode'] || 0;
                  const bPacketizationMode = bCodec.parameters['packetization-mode'] || 0;
                  if (aPacketizationMode !== bPacketizationMode)
                      return false;
                  // If strict matching check profile-level-id.
                  if (strict) {
                      if (!h264ProfileLevelId.isSameProfile(aCodec.parameters, bCodec.parameters))
                          return false;
                      let selectedProfileLevelId;
                      try {
                          selectedProfileLevelId =
                              h264ProfileLevelId.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);
                      }
                      catch (error) {
                          return false;
                      }
                      if (modify) {
                          if (selectedProfileLevelId)
                              aCodec.parameters['profile-level-id'] = selectedProfileLevelId;
                          else
                              delete aCodec.parameters['profile-level-id'];
                      }
                  }
                  break;
              }
          case 'video/vp9':
              {
                  // If strict matching check profile-id.
                  if (strict) {
                      const aProfileId = aCodec.parameters['profile-id'] || 0;
                      const bProfileId = bCodec.parameters['profile-id'] || 0;
                      if (aProfileId !== bProfileId)
                          return false;
                  }
                  break;
              }
      }
      return true;
  }
  });

  unwrapExports(ortc$1);
  var ortc_1$1 = ortc$1.validateRtpCapabilities;
  var ortc_2$1 = ortc$1.validateRtpCodecCapability;
  var ortc_3$1 = ortc$1.validateRtcpFeedback;
  var ortc_4$1 = ortc$1.validateRtpHeaderExtension;
  var ortc_5$1 = ortc$1.validateRtpParameters;
  var ortc_6$1 = ortc$1.validateRtpCodecParameters;
  var ortc_7$1 = ortc$1.validateRtpHeaderExtensionParameters;
  var ortc_8$1 = ortc$1.validateRtpEncodingParameters;
  var ortc_9$1 = ortc$1.validateRtcpParameters;
  var ortc_10$1 = ortc$1.validateSctpCapabilities;
  var ortc_11$1 = ortc$1.validateNumSctpStreams;
  var ortc_12$1 = ortc$1.validateSctpParameters;
  var ortc_13$1 = ortc$1.validateSctpStreamParameters;
  var ortc_14$1 = ortc$1.generateRouterRtpCapabilities;
  var ortc_15$1 = ortc$1.getProducerRtpParametersMapping;
  var ortc_16$1 = ortc$1.getConsumableRtpParameters;
  var ortc_17$1 = ortc$1.canConsume;
  var ortc_18$1 = ortc$1.getConsumerRtpParameters;
  var ortc_19$1 = ortc$1.getPipeConsumerRtpParameters;

  // An implementation of the http://cr.yp.to/proto/netstrings.txt format.



  var util   = require(!!process.binding('natives').util ? 'util' : 'sys');

  // Get the length of the netstring payload (i.e. excluding header and footer)
  // pointed to by Buffer or String 'buf'. Returns -1 if the buffer is
  // incomplete (note that this happens even if we're only missing the trailing
  // ',').
  var nsPayloadLength = function (buf, off, encoding) {
    off = off || 0;

    if (typeof buf === 'string') {
      encoding = String(encoding || 'utf8').toLowerCase();
      buf = new Buffer(buf, encoding);
    }

    var len, i;
    for (len = 0, i = off; i < buf.length; i++) {
      var cc = buf[i];

      if (cc === 0x3a) {
        if (i === off) {
          throw new Error('Invalid netstring with leading \':\'');
        }

        return len;
      }

      if (cc < 0x30 || cc > 0x39) {
        throw new Error('Unexpected character \'' + String.fromCharCode(buf[i])  + '\' found at offset ' + i);
      }

      if (len === 0 && i > off) {
        throw new Error('Invalid netstring with leading 0');
      }

      len = len * 10 + cc - 0x30;
    }

    assert.ok(i > off || off >= buf.length);

    // We didn't get a complete length specification
    if (i === buf.length) {
      return -1;
    }

    return len;
  };
  var nsPayloadLength_1 = nsPayloadLength;

  // Get the length of teh netstring that would result if writing the given
  // number of bytes.
  var nsWriteLength = function (len) {
    // Negative values are special (see nsPayloadLength()); just return it
    if (len < 0) {
      return len;
    }

    // Compute the number of digits in the length specifier. Stop at
    // any value < 10 and just add 1 later (this catches the case where
    // '0' requires a digit.
    var nslen = len;
    while (len >= 10) {
      nslen += 1;
      len /= 10;
    }

    // nslen + 1 (last digit) + 1 (:) + 1 (,)
    return nslen + 3;
  };
  var nsWriteLength_1 = nsWriteLength;

  // Get the length of the netstring itself (i.e. including header and footer)
  // pointed to by Buffer or String 'buf'. Negative return values are the same
  // as length().
  var nsLength = function (buf, off, encoding) {
    return nsWriteLength(nsPayloadLength(buf, off, encoding));
  };
  var nsLength_1 = nsLength;

  // Get the netstring payload pointed to by the Buffer or String 'buf'.
  // Returns an object of the same type or a negative integer on exceptional
  // condition (same as nsPayloadLength())
  var nsPayload = function (buf, off, encoding) {
    off = off || 0;

    if (typeof buf === 'string') {
      encoding = String(encoding || 'utf8').toLowerCase();
      buf = new Buffer(buf, encoding);
    }

    var len = nsPayloadLength(buf, off);
    if (len < 0) {
      return len;
    }

    var nsLen = nsWriteLength(len);

    // We don't have the entire buffer yet
    if (buf.length - off - nsLen < 0) {
      return -1;
    }

    var start = off + (nsLen - len - 1);

    return buf.slice(start, start + len);
  };
  var nsPayload_1 = nsPayload;

  // Write the given payload to a netstring.
  //
  // All parameters other than 'pay' are optional; 'pay' itself can be either a
  // Buffer or a string. If 'payStart' is specified, the payload begins at this
  // offset, defaulting to 0 if unspecified. If 'payEnd' is specified, this is
  // offset of the first char (or byte, if 'pay' is a Buffer) that will be not
  // be written, defaulting to writing the entire string from 'payOff'. If
  // 'buf' is specified, the netstring is written to the given buffer, with a
  // string being returned by default. If 'bufOff' is specified, we start at
  // this offset in 'buf', defaulting to 0 is unspecified.
  //
  // If constructing a new string, the string is returned. If writing to a
  // buffer, the number of bytes consumed is returned, or -1 if there was not
  // enough space remaining in the buffer.
  var nsWrite = function (pay, payStart, payEnd, buf, bufOff, encoding) {
    if (typeof pay === 'string') {
      encoding = String(encoding || 'utf8').toLowerCase();
      pay = new Buffer(pay, encoding);
    }

    payStart = payStart || 0;
    payEnd = (payEnd === undefined) ? pay.length : payEnd;
    bufOff = bufOff || 0;

    if (payStart < 0 || payStart > pay.length) {
      throw new Error('payStart is out of bounds');
    }

    if (payEnd > pay.length || payEnd < payStart) {
      throw new Error('payEnd is out of bounds');
    }

    assert.equal(typeof pay, 'object');

    var len = payEnd - payStart;
    var nsLen = nsWriteLength(len);
    var hdrLen = nsLen - len - 1;

    var allocBuf = (buf === undefined || buf === null);
    if (allocBuf) {
      buf = new Buffer(nsLen);
    }

    if (typeof buf !== 'object') {
      throw new Error('The \'buf\' parameter must be a Buffer');
    }

    if (buf.length - bufOff < nsLen) {
      throw new Error('Target buffer does not have enough space');
    }

    buf.write(len + ':', bufOff);
    pay.copy(buf, bufOff + hdrLen, payStart, payEnd);
    buf.write(',', bufOff + nsLen - 1);

    return allocBuf ? buf : nsLen;
  };
  var nsWrite_1 = nsWrite;

  var Stream = function (s) {
    var self = this;

    events.EventEmitter.call(self);

    self.buf = null;

    s.addListener('data', function (d) {
      if (self.buf) {
        var b = new Buffer(self.buf.length + d.length);
        self.buf.copy(b, 0, 0, self.buf.length);
        d.copy(b, self.buf.length, 0, d.length);

        self.buf = b;
      } else {
        self.buf = d;
      }

      while (self.buf && self.buf.length > 0) {
        try {
          var pay = nsPayload(self.buf);

          if (pay === -1) {
            break;
          }

          var nsLen = nsWriteLength(pay.length);
          self.buf = self.buf.slice(nsLen, self.buf.length);

          if (self._decoder) {
            var string = self._decoder.write(pay);
            if (string.length) {
              self.emit('data', string);
            }
          } else {
            self.emit('data', pay);
          }
        } catch (exception) {
          self.emit('error', exception);
          break;
        }
      }
    });
  };

  util.inherits(Stream, events.EventEmitter);

  Stream.prototype.setEncoding = function (encoding) {
    var StringDecoder = string_decoder.StringDecoder;
    this._decoder = new StringDecoder(encoding);
  };

  var Stream_1 = Stream;

  var ns = {
  	nsPayloadLength: nsPayloadLength_1,
  	nsWriteLength: nsWriteLength_1,
  	nsLength: nsLength_1,
  	nsPayload: nsPayload_1,
  	nsWrite: nsWrite_1,
  	Stream: Stream_1
  };

  var Channel_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  // @ts-ignore




  const logger = new Logger_1$1.Logger('Channel');
  // netstring length for a 4194304 bytes payload.
  const NS_MESSAGE_MAX_LEN = 4194313;
  const NS_PAYLOAD_MAX_LEN = 4194304;
  class Channel extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       */
      constructor({ producerSocket, consumerSocket, pid }) {
          super();
          // Closed flag.
          this._closed = false;
          // Next id for messages sent to the worker process.
          this._nextId = 0;
          // Map of pending sent requests.
          this._sents = new Map();
          logger.debug('constructor()');
          this._producerSocket = producerSocket;
          this._consumerSocket = consumerSocket;
          // Read Channel responses/notifications from the worker.
          this._consumerSocket.on('data', (buffer) => {
              if (!this._recvBuffer) {
                  this._recvBuffer = buffer;
              }
              else {
                  this._recvBuffer = Buffer.concat([this._recvBuffer, buffer], this._recvBuffer.length + buffer.length);
              }
              if (this._recvBuffer.length > NS_PAYLOAD_MAX_LEN) {
                  logger.error('receiving buffer is full, discarding all data into it');
                  // Reset the buffer and exit.
                  this._recvBuffer = undefined;
                  return;
              }
              while (true) // eslint-disable-line no-constant-condition
               {
                  let nsPayload;
                  try {
                      nsPayload = ns.nsPayload(this._recvBuffer);
                  }
                  catch (error) {
                      logger.error('invalid netstring data received from the worker process: %s', String(error));
                      // Reset the buffer and exit.
                      this._recvBuffer = undefined;
                      return;
                  }
                  // Incomplete netstring message.
                  if (nsPayload === -1)
                      return;
                  try {
                      // We can receive JSON messages (Channel messages) or log strings.
                      switch (nsPayload[0]) {
                          // 123 = '{' (a Channel JSON messsage).
                          case 123:
                              this._processMessage(JSON.parse(nsPayload.toString('utf8')));
                              break;
                          // 68 = 'D' (a debug log).
                          case 68:
                              logger.debug(`[pid:${pid}] ${nsPayload.toString('utf8', 1)}`);
                              break;
                          // 87 = 'W' (a warn log).
                          case 87:
                              logger.warn(`[pid:${pid}] ${nsPayload.toString('utf8', 1)}`);
                              break;
                          // 69 = 'E' (an error log).
                          case 69:
                              logger.error(`[pid:${pid} ${nsPayload.toString('utf8', 1)}`);
                              break;
                          // 88 = 'X' (a dump log).
                          case 88:
                              // eslint-disable-next-line no-console
                              console.log(nsPayload.toString('utf8', 1));
                              break;
                          default:
                              // eslint-disable-next-line no-console
                              console.warn(`worker[pid:${pid}] unexpected data: %s`, nsPayload.toString('utf8', 1));
                      }
                  }
                  catch (error) {
                      logger.error('received invalid message from the worker process: %s', String(error));
                  }
                  // Remove the read payload from the buffer.
                  this._recvBuffer =
                      this._recvBuffer.slice(ns.nsLength(this._recvBuffer));
                  if (!this._recvBuffer.length) {
                      this._recvBuffer = undefined;
                      return;
                  }
              }
          });
          this._consumerSocket.on('end', () => (logger.debug('Consumer Channel ended by the worker process')));
          this._consumerSocket.on('error', (error) => (logger.error('Consumer Channel error: %s', String(error))));
          this._producerSocket.on('end', () => (logger.debug('Producer Channel ended by the worker process')));
          this._producerSocket.on('error', (error) => (logger.error('Producer Channel error: %s', String(error))));
      }
      /**
       * @private
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Close every pending sent.
          for (const sent of this._sents.values()) {
              sent.close();
          }
          // Remove event listeners but leave a fake 'error' hander to avoid
          // propagation.
          this._consumerSocket.removeAllListeners('end');
          this._consumerSocket.removeAllListeners('error');
          this._consumerSocket.on('error', () => { });
          this._producerSocket.removeAllListeners('end');
          this._producerSocket.removeAllListeners('error');
          this._producerSocket.on('error', () => { });
          // Destroy the socket after a while to allow pending incoming messages.
          setTimeout(() => {
              try {
                  this._producerSocket.destroy();
              }
              catch (error) { }
              try {
                  this._consumerSocket.destroy();
              }
              catch (error) { }
          }, 200);
      }
      /**
       * @private
       */
      async request(method, internal, data) {
          this._nextId < 4294967295 ? ++this._nextId : (this._nextId = 1);
          const id = this._nextId;
          logger.debug('request() [method:%s, id:%s]', method, id);
          if (this._closed)
              throw new errors$1.InvalidStateError('Channel closed');
          const request = { id, method, internal, data };
          const ns$1 = ns.nsWrite(JSON.stringify(request));
          if (Buffer.byteLength(ns$1) > NS_MESSAGE_MAX_LEN)
              throw new Error('Channel request too big');
          // This may throw if closed or remote side ended.
          this._producerSocket.write(ns$1);
          return new Promise((pResolve, pReject) => {
              const timeout = 1000 * (15 + (0.1 * this._sents.size));
              const sent = {
                  id: id,
                  method: method,
                  resolve: (data2) => {
                      if (!this._sents.delete(id))
                          return;
                      clearTimeout(sent.timer);
                      pResolve(data2);
                  },
                  reject: (error) => {
                      if (!this._sents.delete(id))
                          return;
                      clearTimeout(sent.timer);
                      pReject(error);
                  },
                  timer: setTimeout(() => {
                      if (!this._sents.delete(id))
                          return;
                      pReject(new Error('Channel request timeout'));
                  }, timeout),
                  close: () => {
                      clearTimeout(sent.timer);
                      pReject(new errors$1.InvalidStateError('Channel closed'));
                  }
              };
              // Add sent stuff to the map.
              this._sents.set(id, sent);
          });
      }
      _processMessage(msg) {
          // If a response retrieve its associated request.
          if (msg.id) {
              const sent = this._sents.get(msg.id);
              if (!sent) {
                  logger.error('received response does not match any sent request [id:%s]', msg.id);
                  return;
              }
              if (msg.accepted) {
                  logger.debug('request succeeded [method:%s, id:%s]', sent.method, sent.id);
                  sent.resolve(msg.data);
              }
              else if (msg.error) {
                  logger.warn('request failed [method:%s, id:%s]: %s', sent.method, sent.id, msg.reason);
                  switch (msg.error) {
                      case 'TypeError':
                          sent.reject(new TypeError(msg.reason));
                          break;
                      default:
                          sent.reject(new Error(msg.reason));
                  }
              }
              else {
                  logger.error('received response is not accepted nor rejected [method:%s, id:%s]', sent.method, sent.id);
              }
          }
          // If a notification emit it to the corresponding entity.
          else if (msg.targetId && msg.event) {
              this.emit(msg.targetId, msg.event, msg.data);
          }
          // Otherwise unexpected message.
          else {
              logger.error('received message is not a response nor a notification');
          }
      }
  }
  exports.Channel = Channel;
  });

  unwrapExports(Channel_1);
  var Channel_2 = Channel_1.Channel;

  var PayloadChannel_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  // @ts-ignore




  const logger = new Logger_1$1.Logger('PayloadChannel');
  // netstring length for a 4194304 bytes payload.
  const NS_MESSAGE_MAX_LEN = 4194313;
  const NS_PAYLOAD_MAX_LEN = 4194304;
  class PayloadChannel extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       */
      constructor({ producerSocket, consumerSocket }) {
          super();
          // Closed flag.
          this._closed = false;
          logger.debug('constructor()');
          this._producerSocket = producerSocket;
          this._consumerSocket = consumerSocket;
          // Read PayloadChannel notifications from the worker.
          this._consumerSocket.on('data', (buffer) => {
              if (!this._recvBuffer) {
                  this._recvBuffer = buffer;
              }
              else {
                  this._recvBuffer = Buffer.concat([this._recvBuffer, buffer], this._recvBuffer.length + buffer.length);
              }
              if (this._recvBuffer.length > NS_PAYLOAD_MAX_LEN) {
                  logger.error('receiving buffer is full, discarding all data into it');
                  // Reset the buffer and exit.
                  this._recvBuffer = undefined;
                  return;
              }
              while (true) // eslint-disable-line no-constant-condition
               {
                  let nsPayload;
                  try {
                      nsPayload = ns.nsPayload(this._recvBuffer);
                  }
                  catch (error) {
                      logger.error('invalid netstring data received from the worker process: %s', String(error));
                      // Reset the buffer and exit.
                      this._recvBuffer = undefined;
                      return;
                  }
                  // Incomplete netstring message.
                  if (nsPayload === -1)
                      return;
                  this._processData(nsPayload);
                  // Remove the read payload from the buffer.
                  this._recvBuffer =
                      this._recvBuffer.slice(ns.nsLength(this._recvBuffer));
                  if (!this._recvBuffer.length) {
                      this._recvBuffer = undefined;
                      return;
                  }
              }
          });
          this._consumerSocket.on('end', () => (logger.debug('Consumer PayloadChannel ended by the worker process')));
          this._consumerSocket.on('error', (error) => (logger.error('Consumer PayloadChannel error: %s', String(error))));
          this._producerSocket.on('end', () => (logger.debug('Producer PayloadChannel ended by the worker process')));
          this._producerSocket.on('error', (error) => (logger.error('Producer PayloadChannel error: %s', String(error))));
      }
      /**
       * @private
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove event listeners but leave a fake 'error' hander to avoid
          // propagation.
          this._consumerSocket.removeAllListeners('end');
          this._consumerSocket.removeAllListeners('error');
          this._consumerSocket.on('error', () => { });
          this._producerSocket.removeAllListeners('end');
          this._producerSocket.removeAllListeners('error');
          this._producerSocket.on('error', () => { });
          // Destroy the socket after a while to allow pending incoming messages.
          setTimeout(() => {
              try {
                  this._producerSocket.destroy();
              }
              catch (error) { }
              try {
                  this._consumerSocket.destroy();
              }
              catch (error) { }
          }, 200);
      }
      /**
       * @private
       */
      notify(event, internal, data, payload) {
          logger.debug('notify() [event:%s]', event);
          if (this._closed)
              throw new errors$1.InvalidStateError('PayloadChannel closed');
          const notification = { event, internal, data };
          const ns1 = ns.nsWrite(JSON.stringify(notification));
          const ns2 = ns.nsWrite(payload);
          if (Buffer.byteLength(ns1) > NS_MESSAGE_MAX_LEN)
              throw new Error('PayloadChannel notification too big');
          else if (Buffer.byteLength(ns2) > NS_MESSAGE_MAX_LEN)
              throw new Error('PayloadChannel payload too big');
          try {
              // This may throw if closed or remote side ended.
              this._producerSocket.write(ns1);
          }
          catch (error) {
              logger.warn('notify() | sending notification failed: %s', String(error));
              return;
          }
          try {
              // This may throw if closed or remote side ended.
              this._producerSocket.write(ns2);
          }
          catch (error) {
              logger.warn('notify() | sending payload failed: %s', String(error));
              return;
          }
      }
      _processData(data) {
          if (!this._ongoingNotification) {
              let msg;
              try {
                  msg = JSON.parse(data.toString('utf8'));
              }
              catch (error) {
                  logger.error('received invalid data from the worker process: %s', String(error));
                  return;
              }
              if (!msg.targetId || !msg.event) {
                  logger.error('received message is not a notification');
                  return;
              }
              this._ongoingNotification =
                  {
                      targetId: msg.targetId,
                      event: msg.event,
                      data: msg.data
                  };
          }
          else {
              const payload = data;
              // Emit the corresponding event.
              this.emit(this._ongoingNotification.targetId, this._ongoingNotification.event, this._ongoingNotification.data, payload);
              // Unset ongoing notification.
              this._ongoingNotification = undefined;
          }
      }
  }
  exports.PayloadChannel = PayloadChannel;
  });

  unwrapExports(PayloadChannel_1);
  var PayloadChannel_2 = PayloadChannel_1.PayloadChannel;

  var Producer_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('Producer');
  class Producer extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits transportclose
       * @emits score - (score: ProducerScore[])
       * @emits videoorientationchange - (videoOrientation: ProducerVideoOrientation)
       * @emits trace - (trace: ProducerTraceEventData)
       * @emits @close
       */
      constructor({ internal, data, channel, payloadChannel, appData, paused }) {
          super();
          // Closed flag.
          this._closed = false;
          // Paused flag.
          this._paused = false;
          // Current score.
          this._score = [];
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._paused = paused;
          this._handleWorkerNotifications();
      }
      /**
       * Producer id.
       */
      get id() {
          return this._internal.producerId;
      }
      /**
       * Whether the Producer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Media kind.
       */
      get kind() {
          return this._data.kind;
      }
      /**
       * RTP parameters.
       */
      get rtpParameters() {
          return this._data.rtpParameters;
      }
      /**
       * Producer type.
       */
      get type() {
          return this._data.type;
      }
      /**
       * Consumable RTP parameters.
       *
       * @private
       */
      get consumableRtpParameters() {
          return this._data.consumableRtpParameters;
      }
      /**
       * Whether the Producer is paused.
       */
      get paused() {
          return this._paused;
      }
      /**
       * Producer score list.
       */
      get score() {
          return this._score;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits pause
       * @emits resume
       * @emits score - (score: ProducerScore[])
       * @emits videoorientationchange - (videoOrientation: ProducerVideoOrientation)
       * @emits trace - (trace: ProducerTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the Producer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.producerId);
          this._channel.request('producer.close', this._internal)
              .catch(() => { });
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Transport was closed.
       *
       * @private
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.producerId);
          this.safeEmit('transportclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump Producer.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('producer.dump', this._internal);
      }
      /**
       * Get Producer stats.
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('producer.getStats', this._internal);
      }
      /**
       * Pause the Producer.
       */
      async pause() {
          logger.debug('pause()');
          const wasPaused = this._paused;
          await this._channel.request('producer.pause', this._internal);
          this._paused = true;
          // Emit observer event.
          if (!wasPaused)
              this._observer.safeEmit('pause');
      }
      /**
       * Resume the Producer.
       */
      async resume() {
          logger.debug('resume()');
          const wasPaused = this._paused;
          await this._channel.request('producer.resume', this._internal);
          this._paused = false;
          // Emit observer event.
          if (wasPaused)
              this._observer.safeEmit('resume');
      }
      /**
       * Enable 'trace' event.
       */
      async enableTraceEvent(types = []) {
          logger.debug('enableTraceEvent()');
          const reqData = { types };
          await this._channel.request('producer.enableTraceEvent', this._internal, reqData);
      }
      /**
       * Send RTP packet (just valid for Producers created on a DirectTransport).
       */
      send(rtpPacket) {
          if (!Buffer.isBuffer(rtpPacket)) {
              throw new TypeError('rtpPacket must be a Buffer');
          }
          this._payloadChannel.notify('producer.send', this._internal, undefined, rtpPacket);
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.producerId, (event, data) => {
              switch (event) {
                  case 'score':
                      {
                          const score = data;
                          this._score = score;
                          this.safeEmit('score', score);
                          // Emit observer event.
                          this._observer.safeEmit('score', score);
                          break;
                      }
                  case 'videoorientationchange':
                      {
                          const videoOrientation = data;
                          this.safeEmit('videoorientationchange', videoOrientation);
                          // Emit observer event.
                          this._observer.safeEmit('videoorientationchange', videoOrientation);
                          break;
                      }
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.Producer = Producer;
  });

  unwrapExports(Producer_1$1);
  var Producer_2$1 = Producer_1$1.Producer;

  var Consumer_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('Consumer');
  class Consumer extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits transportclose
       * @emits producerclose
       * @emits producerpause
       * @emits producerresume
       * @emits score - (score: ConsumerScore)
       * @emits layerschange - (layers: ConsumerLayers | undefined)
       * @emits rtp - (packet: Buffer)
       * @emits trace - (trace: ConsumerTraceEventData)
       * @emits @close
       * @emits @producerclose
       */
      constructor({ internal, data, channel, payloadChannel, appData, paused, producerPaused, score = { score: 10, producerScore: 10, producerScores: [] }, preferredLayers }) {
          super();
          // Closed flag.
          this._closed = false;
          // Paused flag.
          this._paused = false;
          // Associated Producer paused flag.
          this._producerPaused = false;
          // Current priority.
          this._priority = 1;
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._paused = paused;
          this._producerPaused = producerPaused;
          this._score = score;
          this._preferredLayers = preferredLayers;
          this._handleWorkerNotifications();
      }
      /**
       * Consumer id.
       */
      get id() {
          return this._internal.consumerId;
      }
      /**
       * Associated Producer id.
       */
      get producerId() {
          return this._internal.producerId;
      }
      /**
       * Whether the Consumer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Media kind.
       */
      get kind() {
          return this._data.kind;
      }
      /**
       * RTP parameters.
       */
      get rtpParameters() {
          return this._data.rtpParameters;
      }
      /**
       * Consumer type.
       */
      get type() {
          return this._data.type;
      }
      /**
       * Whether the Consumer is paused.
       */
      get paused() {
          return this._paused;
      }
      /**
       * Whether the associate Producer is paused.
       */
      get producerPaused() {
          return this._producerPaused;
      }
      /**
       * Current priority.
       */
      get priority() {
          return this._priority;
      }
      /**
       * Consumer score.
       */
      get score() {
          return this._score;
      }
      /**
       * Preferred video layers.
       */
      get preferredLayers() {
          return this._preferredLayers;
      }
      /**
       * Current video layers.
       */
      get currentLayers() {
          return this._currentLayers;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits pause
       * @emits resume
       * @emits score - (score: ConsumerScore)
       * @emits layerschange - (layers: ConsumerLayers | undefined)
       * @emits trace - (trace: ConsumerTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the Consumer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.consumerId);
          this._channel.request('consumer.close', this._internal)
              .catch(() => { });
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Transport was closed.
       *
       * @private
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.consumerId);
          this.safeEmit('transportclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump Consumer.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('consumer.dump', this._internal);
      }
      /**
       * Get Consumer stats.
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('consumer.getStats', this._internal);
      }
      /**
       * Pause the Consumer.
       */
      async pause() {
          logger.debug('pause()');
          const wasPaused = this._paused || this._producerPaused;
          await this._channel.request('consumer.pause', this._internal);
          this._paused = true;
          // Emit observer event.
          if (!wasPaused)
              this._observer.safeEmit('pause');
      }
      /**
       * Resume the Consumer.
       */
      async resume() {
          logger.debug('resume()');
          const wasPaused = this._paused || this._producerPaused;
          await this._channel.request('consumer.resume', this._internal);
          this._paused = false;
          // Emit observer event.
          if (wasPaused && !this._producerPaused)
              this._observer.safeEmit('resume');
      }
      /**
       * Set preferred video layers.
       */
      async setPreferredLayers({ spatialLayer, temporalLayer }) {
          logger.debug('setPreferredLayers()');
          const reqData = { spatialLayer, temporalLayer };
          const data = await this._channel.request('consumer.setPreferredLayers', this._internal, reqData);
          this._preferredLayers = data || undefined;
      }
      /**
       * Set priority.
       */
      async setPriority(priority) {
          logger.debug('setPriority()');
          const reqData = { priority };
          const data = await this._channel.request('consumer.setPriority', this._internal, reqData);
          this._priority = data.priority;
      }
      /**
       * Unset priority.
       */
      async unsetPriority() {
          logger.debug('unsetPriority()');
          const reqData = { priority: 1 };
          const data = await this._channel.request('consumer.setPriority', this._internal, reqData);
          this._priority = data.priority;
      }
      /**
       * Request a key frame to the Producer.
       */
      async requestKeyFrame() {
          logger.debug('requestKeyFrame()');
          await this._channel.request('consumer.requestKeyFrame', this._internal);
      }
      /**
       * Enable 'trace' event.
       */
      async enableTraceEvent(types = []) {
          logger.debug('enableTraceEvent()');
          const reqData = { types };
          await this._channel.request('consumer.enableTraceEvent', this._internal, reqData);
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.consumerId, (event, data) => {
              switch (event) {
                  case 'producerclose':
                      {
                          if (this._closed)
                              break;
                          this._closed = true;
                          // Remove notification subscriptions.
                          this._channel.removeAllListeners(this._internal.consumerId);
                          this.emit('@producerclose');
                          this.safeEmit('producerclose');
                          // Emit observer event.
                          this._observer.safeEmit('close');
                          break;
                      }
                  case 'producerpause':
                      {
                          if (this._producerPaused)
                              break;
                          const wasPaused = this._paused || this._producerPaused;
                          this._producerPaused = true;
                          this.safeEmit('producerpause');
                          // Emit observer event.
                          if (!wasPaused)
                              this._observer.safeEmit('pause');
                          break;
                      }
                  case 'producerresume':
                      {
                          if (!this._producerPaused)
                              break;
                          const wasPaused = this._paused || this._producerPaused;
                          this._producerPaused = false;
                          this.safeEmit('producerresume');
                          // Emit observer event.
                          if (wasPaused && !this._paused)
                              this._observer.safeEmit('resume');
                          break;
                      }
                  case 'score':
                      {
                          const score = data;
                          this._score = score;
                          this.safeEmit('score', score);
                          // Emit observer event.
                          this._observer.safeEmit('score', score);
                          break;
                      }
                  case 'layerschange':
                      {
                          const layers = data;
                          this._currentLayers = layers;
                          this.safeEmit('layerschange', layers);
                          // Emit observer event.
                          this._observer.safeEmit('layerschange', layers);
                          break;
                      }
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
          this._payloadChannel.on(this._internal.consumerId, (event, data, payload) => {
              switch (event) {
                  case 'rtp':
                      {
                          if (this._closed)
                              break;
                          const packet = payload;
                          this.safeEmit('rtp', packet);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.Consumer = Consumer;
  });

  unwrapExports(Consumer_1$1);
  var Consumer_2$1 = Consumer_1$1.Consumer;

  var DataProducer_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('DataProducer');
  class DataProducer extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits transportclose
       * @emits @close
       */
      constructor({ internal, data, channel, payloadChannel, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._handleWorkerNotifications();
      }
      /**
       * DataProducer id.
       */
      get id() {
          return this._internal.dataProducerId;
      }
      /**
       * Whether the DataProducer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * DataProducer type.
       */
      get type() {
          return this._data.type;
      }
      /**
       * SCTP stream parameters.
       */
      get sctpStreamParameters() {
          return this._data.sctpStreamParameters;
      }
      /**
       * DataChannel label.
       */
      get label() {
          return this._data.label;
      }
      /**
       * DataChannel protocol.
       */
      get protocol() {
          return this._data.protocol;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the DataProducer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.dataProducerId);
          this._channel.request('dataProducer.close', this._internal)
              .catch(() => { });
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Transport was closed.
       *
       * @private
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          this.safeEmit('transportclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump DataProducer.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('dataProducer.dump', this._internal);
      }
      /**
       * Get DataProducer stats.
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('dataProducer.getStats', this._internal);
      }
      /**
       * Send data (just valid for DataProducers created on a DirectTransport).
       */
      send(message, ppid) {
          if (typeof message !== 'string' && !Buffer.isBuffer(message)) {
              throw new TypeError('message must be a string or a Buffer');
          }
          /*
           * +-------------------------------+----------+
           * | Value                         | SCTP     |
           * |                               | PPID     |
           * +-------------------------------+----------+
           * | WebRTC String                 | 51       |
           * | WebRTC Binary Partial         | 52       |
           * | (Deprecated)                  |          |
           * | WebRTC Binary                 | 53       |
           * | WebRTC String Partial         | 54       |
           * | (Deprecated)                  |          |
           * | WebRTC String Empty           | 56       |
           * | WebRTC Binary Empty           | 57       |
           * +-------------------------------+----------+
           */
          if (typeof ppid !== 'number') {
              ppid = (typeof message === 'string')
                  ? message.length > 0 ? 51 : 56
                  : message.length > 0 ? 53 : 57;
          }
          // Ensure we honor PPIDs.
          if (ppid === 56)
              message = ' ';
          else if (ppid === 57)
              message = Buffer.alloc(1);
          const notifData = { ppid };
          this._payloadChannel.notify('dataProducer.send', this._internal, notifData, message);
      }
      _handleWorkerNotifications() {
          // No need to subscribe to any event.
      }
  }
  exports.DataProducer = DataProducer;
  });

  unwrapExports(DataProducer_1$1);
  var DataProducer_2$1 = DataProducer_1$1.DataProducer;

  var DataConsumer_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('DataConsumer');
  class DataConsumer extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits transportclose
       * @emits dataproducerclose
       * @emits message - (message: Buffer, ppid: number)
       * @emits sctpsendbufferfull
       * @emits @close
       * @emits @dataproducerclose
       */
      constructor({ internal, data, channel, payloadChannel, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._handleWorkerNotifications();
      }
      /**
       * DataConsumer id.
       */
      get id() {
          return this._internal.dataConsumerId;
      }
      /**
       * Associated DataProducer id.
       */
      get dataProducerId() {
          return this._internal.dataProducerId;
      }
      /**
       * Whether the DataConsumer is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * DataConsumer type.
       */
      get type() {
          return this._data.type;
      }
      /**
       * SCTP stream parameters.
       */
      get sctpStreamParameters() {
          return this._data.sctpStreamParameters;
      }
      /**
       * DataChannel label.
       */
      get label() {
          return this._data.label;
      }
      /**
       * DataChannel protocol.
       */
      get protocol() {
          return this._data.protocol;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the DataConsumer.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.dataConsumerId);
          this._channel.request('dataConsumer.close', this._internal)
              .catch(() => { });
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Transport was closed.
       *
       * @private
       */
      transportClosed() {
          if (this._closed)
              return;
          logger.debug('transportClosed()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.dataConsumerId);
          this.safeEmit('transportclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump DataConsumer.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('dataConsumer.dump', this._internal);
      }
      /**
       * Get DataConsumer stats.
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('dataConsumer.getStats', this._internal);
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.dataConsumerId, (event) => {
              switch (event) {
                  case 'dataproducerclose':
                      {
                          if (this._closed)
                              break;
                          this._closed = true;
                          // Remove notification subscriptions.
                          this._channel.removeAllListeners(this._internal.dataConsumerId);
                          this.emit('@dataproducerclose');
                          this.safeEmit('dataproducerclose');
                          // Emit observer event.
                          this._observer.safeEmit('close');
                          break;
                      }
                  case 'sctpsendbufferfull':
                      {
                          this.safeEmit('sctpsendbufferfull');
                          // Emit observer event.
                          this._observer.safeEmit('sctpsendbufferfull');
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
          this._payloadChannel.on(this._internal.dataConsumerId, (event, data, payload) => {
              switch (event) {
                  case 'message':
                      {
                          if (this._closed)
                              break;
                          const ppid = data.ppid;
                          const message = payload;
                          this.safeEmit('message', message, ppid);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.DataConsumer = DataConsumer;
  });

  unwrapExports(DataConsumer_1$1);
  var DataConsumer_2$1 = DataConsumer_1$1.DataConsumer;

  var Transport_1$1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });









  const logger = new Logger_1$1.Logger('Transport');
  class Transport extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @interface
       * @emits routerclose
       * @emits @close
       * @emits @newproducer - (producer: Producer)
       * @emits @producerclose - (producer: Producer)
       * @emits @newdataproducer - (dataProducer: DataProducer)
       * @emits @dataproducerclose - (dataProducer: DataProducer)
       */
      constructor({ internal, data, channel, payloadChannel, appData, getRouterRtpCapabilities, getProducerById, getDataProducerById }) {
          super();
          // Close flag.
          this._closed = false;
          // Producers map.
          this._producers = new Map();
          // Consumers map.
          this._consumers = new Map();
          // DataProducers map.
          this._dataProducers = new Map();
          // DataConsumers map.
          this._dataConsumers = new Map();
          // Next MID for Consumers. It's converted into string when used.
          this._nextMidForConsumers = 0;
          // Next SCTP stream id.
          this._nextSctpStreamId = 0;
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._getRouterRtpCapabilities = getRouterRtpCapabilities;
          this._getProducerById = getProducerById;
          this._getDataProducerById = getDataProducerById;
      }
      /**
       * Transport id.
       */
      get id() {
          return this._internal.transportId;
      }
      /**
       * Whether the Transport is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits newproducer - (producer: Producer)
       * @emits newconsumer - (producer: Producer)
       * @emits newdataproducer - (dataProducer: DataProducer)
       * @emits newdataconsumer - (dataProducer: DataProducer)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the Transport.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.transportId);
          this._channel.request('transport.close', this._internal)
              .catch(() => { });
          // Close every Producer.
          for (const producer of this._producers.values()) {
              producer.transportClosed();
              // Must tell the Router.
              this.emit('@producerclose', producer);
          }
          this._producers.clear();
          // Close every Consumer.
          for (const consumer of this._consumers.values()) {
              consumer.transportClosed();
          }
          this._consumers.clear();
          // Close every DataProducer.
          for (const dataProducer of this._dataProducers.values()) {
              dataProducer.transportClosed();
              // Must tell the Router.
              this.emit('@dataproducerclose', dataProducer);
          }
          this._dataProducers.clear();
          // Close every DataConsumer.
          for (const dataConsumer of this._dataConsumers.values()) {
              dataConsumer.transportClosed();
          }
          this._dataConsumers.clear();
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Router was closed.
       *
       * @private
       * @virtual
       */
      routerClosed() {
          if (this._closed)
              return;
          logger.debug('routerClosed()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.transportId);
          // Close every Producer.
          for (const producer of this._producers.values()) {
              producer.transportClosed();
              // NOTE: No need to tell the Router since it already knows (it has
              // been closed in fact).
          }
          this._producers.clear();
          // Close every Consumer.
          for (const consumer of this._consumers.values()) {
              consumer.transportClosed();
          }
          this._consumers.clear();
          // Close every DataProducer.
          for (const dataProducer of this._dataProducers.values()) {
              dataProducer.transportClosed();
              // NOTE: No need to tell the Router since it already knows (it has
              // been closed in fact).
          }
          this._dataProducers.clear();
          // Close every DataConsumer.
          for (const dataConsumer of this._dataConsumers.values()) {
              dataConsumer.transportClosed();
          }
          this._dataConsumers.clear();
          this.safeEmit('routerclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump Transport.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('transport.dump', this._internal);
      }
      /**
       * Get Transport stats.
       *
       * @abstract
       */
      async getStats() {
          // Should not happen.
          throw new Error('method not implemented in the subclass');
      }
      /**
       * Provide the Transport remote parameters.
       *
       * @abstract
       */
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async connect(params) {
          // Should not happen.
          throw new Error('method not implemented in the subclass');
      }
      /**
       * Set maximum incoming bitrate for receiving media.
       */
      async setMaxIncomingBitrate(bitrate) {
          logger.debug('setMaxIncomingBitrate() [bitrate:%s]', bitrate);
          const reqData = { bitrate };
          await this._channel.request('transport.setMaxIncomingBitrate', this._internal, reqData);
      }
      /**
       * Create a Producer.
       */
      async produce({ id = undefined, kind, rtpParameters, paused = false, keyFrameRequestDelay, appData = {} }) {
          logger.debug('produce()');
          if (id && this._producers.has(id))
              throw new TypeError(`a Producer with same id "${id}" already exists`);
          else if (!['audio', 'video'].includes(kind))
              throw new TypeError(`invalid kind "${kind}"`);
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // This may throw.
          ortc$1.validateRtpParameters(rtpParameters);
          // If missing or empty encodings, add one.
          if (!rtpParameters.encodings ||
              !Array.isArray(rtpParameters.encodings) ||
              rtpParameters.encodings.length === 0) {
              rtpParameters.encodings = [{}];
          }
          // Don't do this in PipeTransports since there we must keep CNAME value in
          // each Producer.
          if (this.constructor.name !== 'PipeTransport') {
              // If CNAME is given and we don't have yet a CNAME for Producers in this
              // Transport, take it.
              if (!this._cnameForProducers && rtpParameters.rtcp && rtpParameters.rtcp.cname) {
                  this._cnameForProducers = rtpParameters.rtcp.cname;
              }
              // Otherwise if we don't have yet a CNAME for Producers and the RTP parameters
              // do not include CNAME, create a random one.
              else if (!this._cnameForProducers) {
                  this._cnameForProducers = esmNode.v4().substr(0, 8);
              }
              // Override Producer's CNAME.
              rtpParameters.rtcp = rtpParameters.rtcp || {};
              rtpParameters.rtcp.cname = this._cnameForProducers;
          }
          const routerRtpCapabilities = this._getRouterRtpCapabilities();
          // This may throw.
          const rtpMapping = ortc$1.getProducerRtpParametersMapping(rtpParameters, routerRtpCapabilities);
          // This may throw.
          const consumableRtpParameters = ortc$1.getConsumableRtpParameters(kind, rtpParameters, routerRtpCapabilities, rtpMapping);
          const internal = { ...this._internal, producerId: id || esmNode.v4() };
          const reqData = { kind, rtpParameters, rtpMapping, keyFrameRequestDelay, paused };
          const status = await this._channel.request('transport.produce', internal, reqData);
          const data = {
              kind,
              rtpParameters,
              type: status.type,
              consumableRtpParameters
          };
          const producer = new Producer_1$1.Producer({
              internal,
              data,
              payloadChannel: this._payloadChannel,
              channel: this._channel,
              appData,
              paused
          });
          this._producers.set(producer.id, producer);
          producer.on('@close', () => {
              this._producers.delete(producer.id);
              this.emit('@producerclose', producer);
          });
          this.emit('@newproducer', producer);
          // Emit observer event.
          this._observer.safeEmit('newproducer', producer);
          return producer;
      }
      /**
       * Create a Consumer.
       *
       * @virtual
       */
      async consume({ producerId, rtpCapabilities, paused = false, preferredLayers, appData = {} }) {
          logger.debug('consume()');
          if (!producerId || typeof producerId !== 'string')
              throw new TypeError('missing producerId');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // This may throw.
          ortc$1.validateRtpCapabilities(rtpCapabilities);
          const producer = this._getProducerById(producerId);
          if (!producer)
              throw Error(`Producer with id "${producerId}" not found`);
          // This may throw.
          const rtpParameters = ortc$1.getConsumerRtpParameters(producer.consumableRtpParameters, rtpCapabilities);
          // Set MID.
          rtpParameters.mid = `${this._nextMidForConsumers++}`;
          // We use up to 8 bytes for MID (string).
          if (this._nextMidForConsumers === 100000000) {
              logger.error(`consume() | reaching max MID value "${this._nextMidForConsumers}"`);
              this._nextMidForConsumers = 0;
          }
          const internal = { ...this._internal, consumerId: esmNode.v4(), producerId };
          const reqData = {
              kind: producer.kind,
              rtpParameters,
              type: producer.type,
              consumableRtpEncodings: producer.consumableRtpParameters.encodings,
              paused,
              preferredLayers
          };
          const status = await this._channel.request('transport.consume', internal, reqData);
          const data = { kind: producer.kind, rtpParameters, type: producer.type };
          const consumer = new Consumer_1$1.Consumer({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              paused: status.paused,
              producerPaused: status.producerPaused,
              score: status.score,
              preferredLayers: status.preferredLayers
          });
          this._consumers.set(consumer.id, consumer);
          consumer.on('@close', () => this._consumers.delete(consumer.id));
          consumer.on('@producerclose', () => this._consumers.delete(consumer.id));
          // Emit observer event.
          this._observer.safeEmit('newconsumer', consumer);
          return consumer;
      }
      /**
       * Create a DataProducer.
       */
      async produceData({ id = undefined, sctpStreamParameters, label = '', protocol = '', appData = {} } = {}) {
          logger.debug('produceData()');
          if (id && this._dataProducers.has(id))
              throw new TypeError(`a DataProducer with same id "${id}" already exists`);
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          let type;
          // If this is not a DirectTransport, sctpStreamParameters are required.
          if (this.constructor.name !== 'DirectTransport') {
              type = 'sctp';
              // This may throw.
              ortc$1.validateSctpStreamParameters(sctpStreamParameters);
          }
          // If this is a DirectTransport, sctpStreamParameters must not be given.
          else {
              type = 'direct';
              if (sctpStreamParameters) {
                  logger.warn('produceData() | sctpStreamParameters are ignored when producing data on a DirectTransport');
              }
          }
          const internal = { ...this._internal, dataProducerId: id || esmNode.v4() };
          const reqData = {
              type,
              sctpStreamParameters,
              label,
              protocol
          };
          const data = await this._channel.request('transport.produceData', internal, reqData);
          const dataProducer = new DataProducer_1$1.DataProducer({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData
          });
          this._dataProducers.set(dataProducer.id, dataProducer);
          dataProducer.on('@close', () => {
              this._dataProducers.delete(dataProducer.id);
              this.emit('@dataproducerclose', dataProducer);
          });
          this.emit('@newdataproducer', dataProducer);
          // Emit observer event.
          this._observer.safeEmit('newdataproducer', dataProducer);
          return dataProducer;
      }
      /**
       * Create a DataConsumer.
       */
      async consumeData({ dataProducerId, ordered, maxPacketLifeTime, maxRetransmits, appData = {} }) {
          logger.debug('consumeData()');
          if (!dataProducerId || typeof dataProducerId !== 'string')
              throw new TypeError('missing dataProducerId');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          const dataProducer = this._getDataProducerById(dataProducerId);
          if (!dataProducer)
              throw Error(`DataProducer with id "${dataProducerId}" not found`);
          let type;
          let sctpStreamParameters;
          let sctpStreamId;
          // If this is not a DirectTransport, use sctpStreamParameters from the
          // DataProducer (if type 'sctp') unless they are given in method parameters.
          if (this.constructor.name !== 'DirectTransport') {
              type = 'sctp';
              sctpStreamParameters =
                  utils$1.clone(dataProducer.sctpStreamParameters);
              // Override if given.
              if (ordered !== undefined)
                  sctpStreamParameters.ordered = ordered;
              if (maxPacketLifeTime !== undefined)
                  sctpStreamParameters.maxPacketLifeTime = maxPacketLifeTime;
              if (maxRetransmits !== undefined)
                  sctpStreamParameters.maxRetransmits = maxRetransmits;
              // This may throw.
              sctpStreamId = this._getNextSctpStreamId();
              this._sctpStreamIds[sctpStreamId] = 1;
              sctpStreamParameters.streamId = sctpStreamId;
          }
          // If this is a DirectTransport, sctpStreamParameters must not be used.
          else {
              type = 'direct';
              if (ordered !== undefined ||
                  maxPacketLifeTime !== undefined ||
                  maxRetransmits !== undefined) {
                  logger.warn('consumeData() | ordered, maxPacketLifeTime and maxRetransmits are ignored when consuming data on a DirectTransport');
              }
          }
          const { label, protocol } = dataProducer;
          const internal = { ...this._internal, dataConsumerId: esmNode.v4(), dataProducerId };
          const reqData = {
              type,
              sctpStreamParameters,
              label,
              protocol
          };
          const data = await this._channel.request('transport.consumeData', internal, reqData);
          const dataConsumer = new DataConsumer_1$1.DataConsumer({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData
          });
          this._dataConsumers.set(dataConsumer.id, dataConsumer);
          dataConsumer.on('@close', () => {
              this._dataConsumers.delete(dataConsumer.id);
              if (this._sctpStreamIds)
                  this._sctpStreamIds[sctpStreamId] = 0;
          });
          dataConsumer.on('@dataproducerclose', () => {
              this._dataConsumers.delete(dataConsumer.id);
              if (this._sctpStreamIds)
                  this._sctpStreamIds[sctpStreamId] = 0;
          });
          // Emit observer event.
          this._observer.safeEmit('newdataconsumer', dataConsumer);
          return dataConsumer;
      }
      /**
       * Enable 'trace' event.
       */
      async enableTraceEvent(types = []) {
          logger.debug('pause()');
          const reqData = { types };
          await this._channel.request('transport.enableTraceEvent', this._internal, reqData);
      }
      _getNextSctpStreamId() {
          if (!this._data.sctpParameters ||
              typeof this._data.sctpParameters.MIS !== 'number') {
              throw new TypeError('missing data.sctpParameters.MIS');
          }
          const numStreams = this._data.sctpParameters.MIS;
          if (!this._sctpStreamIds)
              this._sctpStreamIds = Buffer.alloc(numStreams, 0);
          let sctpStreamId;
          for (let idx = 0; idx < this._sctpStreamIds.length; ++idx) {
              sctpStreamId = (this._nextSctpStreamId + idx) % this._sctpStreamIds.length;
              if (!this._sctpStreamIds[sctpStreamId]) {
                  this._nextSctpStreamId = sctpStreamId + 1;
                  return sctpStreamId;
              }
          }
          throw new Error('no sctpStreamId available');
      }
  }
  exports.Transport = Transport;
  });

  unwrapExports(Transport_1$1);
  var Transport_2$1 = Transport_1$1.Transport;

  var WebRtcTransport_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('WebRtcTransport');
  class WebRtcTransport extends Transport_1$1.Transport {
      /**
       * @private
       * @emits icestatechange - (iceState: IceState)
       * @emits iceselectedtuplechange - (iceSelectedTuple: TransportTuple)
       * @emits dtlsstatechange - (dtlsState: DtlsState)
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      constructor(params) {
          super(params);
          logger.debug('constructor()');
          const { data } = params;
          this._data =
              {
                  iceRole: data.iceRole,
                  iceParameters: data.iceParameters,
                  iceCandidates: data.iceCandidates,
                  iceState: data.iceState,
                  iceSelectedTuple: data.iceSelectedTuple,
                  dtlsParameters: data.dtlsParameters,
                  dtlsState: data.dtlsState,
                  dtlsRemoteCert: data.dtlsRemoteCert,
                  sctpParameters: data.sctpParameters,
                  sctpState: data.sctpState
              };
          this._handleWorkerNotifications();
      }
      /**
       * ICE role.
       */
      get iceRole() {
          return this._data.iceRole;
      }
      /**
       * ICE parameters.
       */
      get iceParameters() {
          return this._data.iceParameters;
      }
      /**
       * ICE candidates.
       */
      get iceCandidates() {
          return this._data.iceCandidates;
      }
      /**
       * ICE state.
       */
      get iceState() {
          return this._data.iceState;
      }
      /**
       * ICE selected tuple.
       */
      get iceSelectedTuple() {
          return this._data.iceSelectedTuple;
      }
      /**
       * DTLS parameters.
       */
      get dtlsParameters() {
          return this._data.dtlsParameters;
      }
      /**
       * DTLS state.
       */
      get dtlsState() {
          return this._data.dtlsState;
      }
      /**
       * Remote certificate in PEM format.
       */
      get dtlsRemoteCert() {
          return this._data.dtlsRemoteCert;
      }
      /**
       * SCTP parameters.
       */
      get sctpParameters() {
          return this._data.sctpParameters;
      }
      /**
       * SCTP state.
       */
      get sctpState() {
          return this._data.sctpState;
      }
      /**
       * Observer.
       *
       * @override
       * @emits close
       * @emits newproducer - (producer: Producer)
       * @emits newconsumer - (consumer: Consumer)
       * @emits newdataproducer - (dataProducer: DataProducer)
       * @emits newdataconsumer - (dataConsumer: DataConsumer)
       * @emits icestatechange - (iceState: IceState)
       * @emits iceselectedtuplechange - (iceSelectedTuple: TransportTuple)
       * @emits dtlsstatechange - (dtlsState: DtlsState)
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the WebRtcTransport.
       *
       * @override
       */
      close() {
          if (this._closed)
              return;
          this._data.iceState = 'closed';
          this._data.iceSelectedTuple = undefined;
          this._data.dtlsState = 'closed';
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.close();
      }
      /**
       * Router was closed.
       *
       * @private
       * @override
       */
      routerClosed() {
          if (this._closed)
              return;
          this._data.iceState = 'closed';
          this._data.iceSelectedTuple = undefined;
          this._data.dtlsState = 'closed';
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.routerClosed();
      }
      /**
       * Get WebRtcTransport stats.
       *
       * @override
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('transport.getStats', this._internal);
      }
      /**
       * Provide the WebRtcTransport remote parameters.
       *
       * @override
       */
      async connect({ dtlsParameters }) {
          logger.debug('connect()');
          const reqData = { dtlsParameters };
          const data = await this._channel.request('transport.connect', this._internal, reqData);
          // Update data.
          this._data.dtlsParameters.role = data.dtlsLocalRole;
      }
      /**
       * Restart ICE.
       */
      async restartIce() {
          logger.debug('restartIce()');
          const data = await this._channel.request('transport.restartIce', this._internal);
          const { iceParameters } = data;
          this._data.iceParameters = iceParameters;
          return iceParameters;
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.transportId, (event, data) => {
              switch (event) {
                  case 'icestatechange':
                      {
                          const iceState = data.iceState;
                          this._data.iceState = iceState;
                          this.safeEmit('icestatechange', iceState);
                          // Emit observer event.
                          this._observer.safeEmit('icestatechange', iceState);
                          break;
                      }
                  case 'iceselectedtuplechange':
                      {
                          const iceSelectedTuple = data.iceSelectedTuple;
                          this._data.iceSelectedTuple = iceSelectedTuple;
                          this.safeEmit('iceselectedtuplechange', iceSelectedTuple);
                          // Emit observer event.
                          this._observer.safeEmit('iceselectedtuplechange', iceSelectedTuple);
                          break;
                      }
                  case 'dtlsstatechange':
                      {
                          const dtlsState = data.dtlsState;
                          const dtlsRemoteCert = data.dtlsRemoteCert;
                          this._data.dtlsState = dtlsState;
                          if (dtlsState === 'connected')
                              this._data.dtlsRemoteCert = dtlsRemoteCert;
                          this.safeEmit('dtlsstatechange', dtlsState);
                          // Emit observer event.
                          this._observer.safeEmit('dtlsstatechange', dtlsState);
                          break;
                      }
                  case 'sctpstatechange':
                      {
                          const sctpState = data.sctpState;
                          this._data.sctpState = sctpState;
                          this.safeEmit('sctpstatechange', sctpState);
                          // Emit observer event.
                          this._observer.safeEmit('sctpstatechange', sctpState);
                          break;
                      }
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.WebRtcTransport = WebRtcTransport;
  });

  unwrapExports(WebRtcTransport_1);
  var WebRtcTransport_2 = WebRtcTransport_1.WebRtcTransport;

  var PlainTransport_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('PlainTransport');
  class PlainTransport extends Transport_1$1.Transport {
      /**
       * @private
       * @emits tuple - (tuple: TransportTuple)
       * @emits rtcptuple - (rtcpTuple: TransportTuple)
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      constructor(params) {
          super(params);
          logger.debug('constructor()');
          const { data } = params;
          this._data =
              {
                  rtcpMux: data.rtcpMux,
                  comedia: data.comedia,
                  tuple: data.tuple,
                  rtcpTuple: data.rtcpTuple,
                  sctpParameters: data.sctpParameters,
                  sctpState: data.sctpState,
                  srtpParameters: data.srtpParameters
              };
          this._handleWorkerNotifications();
      }
      /**
       * Transport tuple.
       */
      get tuple() {
          return this._data.tuple;
      }
      /**
       * Transport RTCP tuple.
       */
      get rtcpTuple() {
          return this._data.rtcpTuple;
      }
      /**
       * SCTP parameters.
       */
      get sctpParameters() {
          return this._data.sctpParameters;
      }
      /**
       * SCTP state.
       */
      get sctpState() {
          return this._data.sctpState;
      }
      /**
       * SRTP parameters.
       */
      get srtpParameters() {
          return this._data.srtpParameters;
      }
      /**
       * Observer.
       *
       * @override
       * @emits close
       * @emits newproducer - (producer: Producer)
       * @emits newconsumer - (consumer: Consumer)
       * @emits newdataproducer - (dataProducer: DataProducer)
       * @emits newdataconsumer - (dataConsumer: DataConsumer)
       * @emits tuple - (tuple: TransportTuple)
       * @emits rtcptuple - (rtcpTuple: TransportTuple)
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the PlainTransport.
       *
       * @override
       */
      close() {
          if (this._closed)
              return;
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.close();
      }
      /**
       * Router was closed.
       *
       * @private
       * @override
       */
      routerClosed() {
          if (this._closed)
              return;
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.routerClosed();
      }
      /**
       * Get PlainTransport stats.
       *
       * @override
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('transport.getStats', this._internal);
      }
      /**
       * Provide the PlainTransport remote parameters.
       *
       * @override
       */
      async connect({ ip, port, rtcpPort, srtpParameters }) {
          logger.debug('connect()');
          const reqData = { ip, port, rtcpPort, srtpParameters };
          const data = await this._channel.request('transport.connect', this._internal, reqData);
          // Update data.
          if (data.tuple)
              this._data.tuple = data.tuple;
          if (data.rtcpTuple)
              this._data.rtcpTuple = data.rtcpTuple;
          this._data.srtpParameters = data.srtpParameters;
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.transportId, (event, data) => {
              switch (event) {
                  case 'tuple':
                      {
                          const tuple = data.tuple;
                          this._data.tuple = tuple;
                          this.safeEmit('tuple', tuple);
                          // Emit observer event.
                          this._observer.safeEmit('tuple', tuple);
                          break;
                      }
                  case 'rtcptuple':
                      {
                          const rtcpTuple = data.rtcpTuple;
                          this._data.rtcpTuple = rtcpTuple;
                          this.safeEmit('rtcptuple', rtcpTuple);
                          // Emit observer event.
                          this._observer.safeEmit('rtcptuple', rtcpTuple);
                          break;
                      }
                  case 'sctpstatechange':
                      {
                          const sctpState = data.sctpState;
                          this._data.sctpState = sctpState;
                          this.safeEmit('sctpstatechange', sctpState);
                          // Emit observer event.
                          this._observer.safeEmit('sctpstatechange', sctpState);
                          break;
                      }
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.PlainTransport = PlainTransport;
  /**
   * DEPRECATED: Use PlainTransport.
   */
  class PlainRtpTransport extends PlainTransport {
      constructor(params) {
          super(params);
      }
  }
  exports.PlainRtpTransport = PlainRtpTransport;
  });

  unwrapExports(PlainTransport_1);
  var PlainTransport_2 = PlainTransport_1.PlainTransport;
  var PlainTransport_3 = PlainTransport_1.PlainRtpTransport;

  var PipeTransport_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });





  const logger = new Logger_1$1.Logger('PipeTransport');
  class PipeTransport extends Transport_1$1.Transport {
      /**
       * @private
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      constructor(params) {
          super(params);
          logger.debug('constructor()');
          const { data } = params;
          this._data =
              {
                  tuple: data.tuple,
                  sctpParameters: data.sctpParameters,
                  sctpState: data.sctpState,
                  rtx: data.rtx,
                  srtpParameters: data.srtpParameters
              };
          this._handleWorkerNotifications();
      }
      /**
       * Transport tuple.
       */
      get tuple() {
          return this._data.tuple;
      }
      /**
       * SCTP parameters.
       */
      get sctpParameters() {
          return this._data.sctpParameters;
      }
      /**
       * SCTP state.
       */
      get sctpState() {
          return this._data.sctpState;
      }
      /**
       * SRTP parameters.
       */
      get srtpParameters() {
          return this._data.srtpParameters;
      }
      /**
       * Observer.
       *
       * @override
       * @emits close
       * @emits newproducer - (producer: Producer)
       * @emits newconsumer - (consumer: Consumer)
       * @emits newdataproducer - (dataProducer: DataProducer)
       * @emits newdataconsumer - (dataConsumer: DataConsumer)
       * @emits sctpstatechange - (sctpState: SctpState)
       * @emits trace - (trace: TransportTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the PipeTransport.
       *
       * @override
       */
      close() {
          if (this._closed)
              return;
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.close();
      }
      /**
       * Router was closed.
       *
       * @private
       * @override
       */
      routerClosed() {
          if (this._closed)
              return;
          if (this._data.sctpState)
              this._data.sctpState = 'closed';
          super.routerClosed();
      }
      /**
       * Get PipeTransport stats.
       *
       * @override
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('transport.getStats', this._internal);
      }
      /**
       * Provide the PipeTransport remote parameters.
       *
       * @override
       */
      async connect({ ip, port, srtpParameters }) {
          logger.debug('connect()');
          const reqData = { ip, port, srtpParameters };
          const data = await this._channel.request('transport.connect', this._internal, reqData);
          // Update data.
          this._data.tuple = data.tuple;
      }
      /**
       * Create a pipe Consumer.
       *
       * @override
       */
      async consume({ producerId, appData = {} }) {
          logger.debug('consume()');
          if (!producerId || typeof producerId !== 'string')
              throw new TypeError('missing producerId');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          const producer = this._getProducerById(producerId);
          if (!producer)
              throw Error(`Producer with id "${producerId}" not found`);
          // This may throw.
          const rtpParameters = ortc$1.getPipeConsumerRtpParameters(producer.consumableRtpParameters, this._data.rtx);
          const internal = { ...this._internal, consumerId: esmNode.v4(), producerId };
          const reqData = {
              kind: producer.kind,
              rtpParameters,
              type: 'pipe',
              consumableRtpEncodings: producer.consumableRtpParameters.encodings
          };
          const status = await this._channel.request('transport.consume', internal, reqData);
          const data = { kind: producer.kind, rtpParameters, type: 'pipe' };
          const consumer = new Consumer_1$1.Consumer({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              paused: status.paused,
              producerPaused: status.producerPaused
          });
          this._consumers.set(consumer.id, consumer);
          consumer.on('@close', () => this._consumers.delete(consumer.id));
          consumer.on('@producerclose', () => this._consumers.delete(consumer.id));
          // Emit observer event.
          this._observer.safeEmit('newconsumer', consumer);
          return consumer;
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.transportId, (event, data) => {
              switch (event) {
                  case 'sctpstatechange':
                      {
                          const sctpState = data.sctpState;
                          this._data.sctpState = sctpState;
                          this.safeEmit('sctpstatechange', sctpState);
                          // Emit observer event.
                          this._observer.safeEmit('sctpstatechange', sctpState);
                          break;
                      }
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.PipeTransport = PipeTransport;
  });

  unwrapExports(PipeTransport_1);
  var PipeTransport_2 = PipeTransport_1.PipeTransport;

  var DirectTransport_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });



  const logger = new Logger_1$1.Logger('DirectTransport');
  class DirectTransport extends Transport_1$1.Transport {
      /**
       * @private
       * @emits rtcp - (packet: Buffer)
       * @emits trace - (trace: TransportTraceEventData)
       */
      constructor(params) {
          super(params);
          logger.debug('constructor()');
          this._data =
              {
              // Nothing for now.
              };
          this._handleWorkerNotifications();
      }
      /**
       * Observer.
       *
       * @override
       * @emits close
       * @emits newdataproducer - (dataProducer: DataProducer)
       * @emits newdataconsumer - (dataProducer: DataProducer)
       * @emits trace - (trace: TransportTraceEventData)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the DirectTransport.
       *
       * @override
       */
      close() {
          if (this._closed)
              return;
          super.close();
      }
      /**
       * Router was closed.
       *
       * @private
       * @override
       */
      routerClosed() {
          if (this._closed)
              return;
          super.routerClosed();
      }
      /**
       * Get DirectTransport stats.
       *
       * @override
       */
      async getStats() {
          logger.debug('getStats()');
          return this._channel.request('transport.getStats', this._internal);
      }
      /**
       * NO-OP method in DirectTransport.
       *
       * @override
       */
      async connect() {
          logger.debug('connect()');
      }
      /**
       * @override
       */
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async setMaxIncomingBitrate(bitrate) {
          throw new errors$1.UnsupportedError('setMaxIncomingBitrate() not implemented in DirectTransport');
      }
      /**
       * Send RTCP packet.
       */
      sendRtcp(rtcpPacket) {
          if (!Buffer.isBuffer(rtcpPacket)) {
              throw new TypeError('rtcpPacket must be a Buffer');
          }
          this._payloadChannel.notify('transport.sendRtcp', this._internal, undefined, rtcpPacket);
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.transportId, (event, data) => {
              switch (event) {
                  case 'trace':
                      {
                          const trace = data;
                          this.safeEmit('trace', trace);
                          // Emit observer event.
                          this._observer.safeEmit('trace', trace);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
          this._payloadChannel.on(this._internal.transportId, (event, data, payload) => {
              switch (event) {
                  case 'rtcp':
                      {
                          if (this._closed)
                              break;
                          const packet = payload;
                          this.safeEmit('rtcp', packet);
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.DirectTransport = DirectTransport;
  });

  unwrapExports(DirectTransport_1);
  var DirectTransport_2 = DirectTransport_1.DirectTransport;

  var RtpObserver_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('RtpObserver');
  class RtpObserver extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @interface
       * @emits routerclose
       * @emits @close
       */
      constructor({ internal, channel, payloadChannel, appData, getProducerById }) {
          super();
          // Closed flag.
          this._closed = false;
          // Paused flag.
          this._paused = false;
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
          this._getProducerById = getProducerById;
      }
      /**
       * RtpObserver id.
       */
      get id() {
          return this._internal.rtpObserverId;
      }
      /**
       * Whether the RtpObserver is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * Whether the RtpObserver is paused.
       */
      get paused() {
          return this._paused;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits pause
       * @emits resume
       * @emits addproducer - (producer: Producer)
       * @emits removeproducer - (producer: Producer)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the RtpObserver.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.rtpObserverId);
          this._channel.request('rtpObserver.close', this._internal)
              .catch(() => { });
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Router was closed.
       *
       * @private
       */
      routerClosed() {
          if (this._closed)
              return;
          logger.debug('routerClosed()');
          this._closed = true;
          // Remove notification subscriptions.
          this._channel.removeAllListeners(this._internal.rtpObserverId);
          this.safeEmit('routerclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Pause the RtpObserver.
       */
      async pause() {
          logger.debug('pause()');
          const wasPaused = this._paused;
          await this._channel.request('rtpObserver.pause', this._internal);
          this._paused = true;
          // Emit observer event.
          if (!wasPaused)
              this._observer.safeEmit('pause');
      }
      /**
       * Resume the RtpObserver.
       */
      async resume() {
          logger.debug('resume()');
          const wasPaused = this._paused;
          await this._channel.request('rtpObserver.resume', this._internal);
          this._paused = false;
          // Emit observer event.
          if (wasPaused)
              this._observer.safeEmit('resume');
      }
      /**
       * Add a Producer to the RtpObserver.
       */
      async addProducer({ producerId }) {
          logger.debug('addProducer()');
          const producer = this._getProducerById(producerId);
          const internal = { ...this._internal, producerId };
          await this._channel.request('rtpObserver.addProducer', internal);
          // Emit observer event.
          this._observer.safeEmit('addproducer', producer);
      }
      /**
       * Remove a Producer from the RtpObserver.
       */
      async removeProducer({ producerId }) {
          logger.debug('removeProducer()');
          const producer = this._getProducerById(producerId);
          const internal = { ...this._internal, producerId };
          await this._channel.request('rtpObserver.removeProducer', internal);
          // Emit observer event.
          this._observer.safeEmit('removeproducer', producer);
      }
  }
  exports.RtpObserver = RtpObserver;
  });

  unwrapExports(RtpObserver_1);
  var RtpObserver_2 = RtpObserver_1.RtpObserver;

  var AudioLevelObserver_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });


  const logger = new Logger_1$1.Logger('AudioLevelObserver');
  class AudioLevelObserver extends RtpObserver_1.RtpObserver {
      /**
       * @private
       * @emits volumes - (volumes: AudioLevelObserverVolume[])
       * @emits silence
       */
      constructor(params) {
          super(params);
          this._handleWorkerNotifications();
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits pause
       * @emits resume
       * @emits addproducer - (producer: Producer)
       * @emits removeproducer - (producer: Producer)
       * @emits volumes - (volumes: AudioLevelObserverVolume[])
       * @emits silence
       */
      get observer() {
          return this._observer;
      }
      _handleWorkerNotifications() {
          this._channel.on(this._internal.rtpObserverId, (event, data) => {
              switch (event) {
                  case 'volumes':
                      {
                          // Get the corresponding Producer instance and remove entries with
                          // no Producer (it may have been closed in the meanwhile).
                          const volumes = data
                              .map(({ producerId, volume }) => ({
                              producer: this._getProducerById(producerId),
                              volume
                          }))
                              .filter(({ producer }) => producer);
                          if (volumes.length > 0) {
                              this.safeEmit('volumes', volumes);
                              // Emit observer event.
                              this._observer.safeEmit('volumes', volumes);
                          }
                          break;
                      }
                  case 'silence':
                      {
                          this.safeEmit('silence');
                          // Emit observer event.
                          this._observer.safeEmit('silence');
                          break;
                      }
                  default:
                      {
                          logger.error('ignoring unknown event "%s"', event);
                      }
              }
          });
      }
  }
  exports.AudioLevelObserver = AudioLevelObserver;
  });

  unwrapExports(AudioLevelObserver_1);
  var AudioLevelObserver_2 = AudioLevelObserver_1.AudioLevelObserver;

  var Router_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });











  const logger = new Logger_1$1.Logger('Router');
  class Router extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits workerclose
       * @emits @close
       */
      constructor({ internal, data, channel, payloadChannel, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          // Transports map.
          this._transports = new Map();
          // Producers map.
          this._producers = new Map();
          // RtpObservers map.
          this._rtpObservers = new Map();
          // DataProducers map.
          this._dataProducers = new Map();
          // Router to PipeTransport map.
          this._mapRouterPipeTransports = new Map();
          // AwaitQueue instance to make pipeToRouter tasks happen sequentially.
          this._pipeToRouterQueue = new lib$3.AwaitQueue({ ClosedErrorClass: errors$1.InvalidStateError });
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          this._internal = internal;
          this._data = data;
          this._channel = channel;
          this._payloadChannel = payloadChannel;
          this._appData = appData;
      }
      /**
       * Router id.
       */
      get id() {
          return this._internal.routerId;
      }
      /**
       * Whether the Router is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * RTC capabilities of the Router.
       */
      get rtpCapabilities() {
          return this._data.rtpCapabilities;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits newtransport - (transport: Transport)
       * @emits newrtpobserver - (rtpObserver: RtpObserver)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the Router.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          this._channel.request('router.close', this._internal)
              .catch(() => { });
          // Close every Transport.
          for (const transport of this._transports.values()) {
              transport.routerClosed();
          }
          this._transports.clear();
          // Clear the Producers map.
          this._producers.clear();
          // Close every RtpObserver.
          for (const rtpObserver of this._rtpObservers.values()) {
              rtpObserver.routerClosed();
          }
          this._rtpObservers.clear();
          // Clear the DataProducers map.
          this._dataProducers.clear();
          // Clear map of Router/PipeTransports.
          this._mapRouterPipeTransports.clear();
          // Close the pipeToRouter AwaitQueue instance.
          this._pipeToRouterQueue.close();
          this.emit('@close');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Worker was closed.
       *
       * @private
       */
      workerClosed() {
          if (this._closed)
              return;
          logger.debug('workerClosed()');
          this._closed = true;
          // Close every Transport.
          for (const transport of this._transports.values()) {
              transport.routerClosed();
          }
          this._transports.clear();
          // Clear the Producers map.
          this._producers.clear();
          // Close every RtpObserver.
          for (const rtpObserver of this._rtpObservers.values()) {
              rtpObserver.routerClosed();
          }
          this._rtpObservers.clear();
          // Clear the DataProducers map.
          this._dataProducers.clear();
          // Clear map of Router/PipeTransports.
          this._mapRouterPipeTransports.clear();
          this.safeEmit('workerclose');
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump Router.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('router.dump', this._internal);
      }
      /**
       * Create a WebRtcTransport.
       */
      async createWebRtcTransport({ listenIps, enableUdp = true, enableTcp = false, preferUdp = false, preferTcp = false, initialAvailableOutgoingBitrate = 600000, enableSctp = false, numSctpStreams = { OS: 1024, MIS: 1024 }, maxSctpMessageSize = 262144, sctpSendBufferSize = 262144, appData = {} }) {
          logger.debug('createWebRtcTransport()');
          if (!Array.isArray(listenIps))
              throw new TypeError('missing listenIps');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          listenIps = listenIps.map((listenIp) => {
              if (typeof listenIp === 'string' && listenIp) {
                  return { ip: listenIp };
              }
              else if (typeof listenIp === 'object') {
                  return {
                      ip: listenIp.ip,
                      announcedIp: listenIp.announcedIp || undefined
                  };
              }
              else {
                  throw new TypeError('wrong listenIp');
              }
          });
          const internal = { ...this._internal, transportId: esmNode.v4() };
          const reqData = {
              listenIps,
              enableUdp,
              enableTcp,
              preferUdp,
              preferTcp,
              initialAvailableOutgoingBitrate,
              enableSctp,
              numSctpStreams,
              maxSctpMessageSize,
              sctpSendBufferSize,
              isDataChannel: true
          };
          const data = await this._channel.request('router.createWebRtcTransport', internal, reqData);
          const transport = new WebRtcTransport_1.WebRtcTransport({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              getRouterRtpCapabilities: () => this._data.rtpCapabilities,
              getProducerById: (producerId) => (this._producers.get(producerId)),
              getDataProducerById: (dataProducerId) => (this._dataProducers.get(dataProducerId))
          });
          this._transports.set(transport.id, transport);
          transport.on('@close', () => this._transports.delete(transport.id));
          transport.on('@newproducer', (producer) => this._producers.set(producer.id, producer));
          transport.on('@producerclose', (producer) => this._producers.delete(producer.id));
          transport.on('@newdataproducer', (dataProducer) => (this._dataProducers.set(dataProducer.id, dataProducer)));
          transport.on('@dataproducerclose', (dataProducer) => (this._dataProducers.delete(dataProducer.id)));
          // Emit observer event.
          this._observer.safeEmit('newtransport', transport);
          return transport;
      }
      /**
       * Create a PlainTransport.
       */
      async createPlainTransport({ listenIp, rtcpMux = true, comedia = false, enableSctp = false, numSctpStreams = { OS: 1024, MIS: 1024 }, maxSctpMessageSize = 262144, sctpSendBufferSize = 262144, enableSrtp = false, srtpCryptoSuite = 'AES_CM_128_HMAC_SHA1_80', appData = {} }) {
          logger.debug('createPlainTransport()');
          if (!listenIp)
              throw new TypeError('missing listenIp');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          if (typeof listenIp === 'string' && listenIp) {
              listenIp = { ip: listenIp };
          }
          else if (typeof listenIp === 'object') {
              listenIp =
                  {
                      ip: listenIp.ip,
                      announcedIp: listenIp.announcedIp || undefined
                  };
          }
          else {
              throw new TypeError('wrong listenIp');
          }
          const internal = { ...this._internal, transportId: esmNode.v4() };
          const reqData = {
              listenIp,
              rtcpMux,
              comedia,
              enableSctp,
              numSctpStreams,
              maxSctpMessageSize,
              sctpSendBufferSize,
              isDataChannel: false,
              enableSrtp,
              srtpCryptoSuite
          };
          const data = await this._channel.request('router.createPlainTransport', internal, reqData);
          const transport = new PlainTransport_1.PlainTransport({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              getRouterRtpCapabilities: () => this._data.rtpCapabilities,
              getProducerById: (producerId) => (this._producers.get(producerId)),
              getDataProducerById: (dataProducerId) => (this._dataProducers.get(dataProducerId))
          });
          this._transports.set(transport.id, transport);
          transport.on('@close', () => this._transports.delete(transport.id));
          transport.on('@newproducer', (producer) => this._producers.set(producer.id, producer));
          transport.on('@producerclose', (producer) => this._producers.delete(producer.id));
          transport.on('@newdataproducer', (dataProducer) => (this._dataProducers.set(dataProducer.id, dataProducer)));
          transport.on('@dataproducerclose', (dataProducer) => (this._dataProducers.delete(dataProducer.id)));
          // Emit observer event.
          this._observer.safeEmit('newtransport', transport);
          return transport;
      }
      /**
       * DEPRECATED: Use createPlainTransport().
       */
      async createPlainRtpTransport(options) {
          logger.warn('createPlainRtpTransport() is DEPRECATED, use createPlainTransport()');
          return this.createPlainTransport(options);
      }
      /**
       * Create a PipeTransport.
       */
      async createPipeTransport({ listenIp, enableSctp = false, numSctpStreams = { OS: 1024, MIS: 1024 }, maxSctpMessageSize = 268435456, sctpSendBufferSize = 268435456, enableRtx = false, enableSrtp = false, appData = {} }) {
          logger.debug('createPipeTransport()');
          if (!listenIp)
              throw new TypeError('missing listenIp');
          else if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          if (typeof listenIp === 'string' && listenIp) {
              listenIp = { ip: listenIp };
          }
          else if (typeof listenIp === 'object') {
              listenIp =
                  {
                      ip: listenIp.ip,
                      announcedIp: listenIp.announcedIp || undefined
                  };
          }
          else {
              throw new TypeError('wrong listenIp');
          }
          const internal = { ...this._internal, transportId: esmNode.v4() };
          const reqData = {
              listenIp,
              enableSctp,
              numSctpStreams,
              maxSctpMessageSize,
              sctpSendBufferSize,
              isDataChannel: false,
              enableRtx,
              enableSrtp
          };
          const data = await this._channel.request('router.createPipeTransport', internal, reqData);
          const transport = new PipeTransport_1.PipeTransport({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              getRouterRtpCapabilities: () => this._data.rtpCapabilities,
              getProducerById: (producerId) => (this._producers.get(producerId)),
              getDataProducerById: (dataProducerId) => (this._dataProducers.get(dataProducerId))
          });
          this._transports.set(transport.id, transport);
          transport.on('@close', () => this._transports.delete(transport.id));
          transport.on('@newproducer', (producer) => this._producers.set(producer.id, producer));
          transport.on('@producerclose', (producer) => this._producers.delete(producer.id));
          transport.on('@newdataproducer', (dataProducer) => (this._dataProducers.set(dataProducer.id, dataProducer)));
          transport.on('@dataproducerclose', (dataProducer) => (this._dataProducers.delete(dataProducer.id)));
          // Emit observer event.
          this._observer.safeEmit('newtransport', transport);
          return transport;
      }
      /**
       * Create a DirectTransport.
       */
      async createDirectTransport({ maxMessageSize = 262144, appData = {} } = {
          maxMessageSize: 262144
      }) {
          logger.debug('createDirectTransport()');
          const internal = { ...this._internal, transportId: esmNode.v4() };
          const reqData = { direct: true, maxMessageSize };
          const data = await this._channel.request('router.createDirectTransport', internal, reqData);
          const transport = new DirectTransport_1.DirectTransport({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              getRouterRtpCapabilities: () => this._data.rtpCapabilities,
              getProducerById: (producerId) => (this._producers.get(producerId)),
              getDataProducerById: (dataProducerId) => (this._dataProducers.get(dataProducerId))
          });
          this._transports.set(transport.id, transport);
          transport.on('@close', () => this._transports.delete(transport.id));
          transport.on('@newproducer', (producer) => this._producers.set(producer.id, producer));
          transport.on('@producerclose', (producer) => this._producers.delete(producer.id));
          transport.on('@newdataproducer', (dataProducer) => (this._dataProducers.set(dataProducer.id, dataProducer)));
          transport.on('@dataproducerclose', (dataProducer) => (this._dataProducers.delete(dataProducer.id)));
          // Emit observer event.
          this._observer.safeEmit('newtransport', transport);
          return transport;
      }
      /**
       * Pipes the given Producer or DataProducer into another Router in same host.
       */
      async pipeToRouter({ producerId, dataProducerId, router, listenIp = '127.0.0.1', enableSctp = true, numSctpStreams = { OS: 1024, MIS: 1024 }, enableRtx = false, enableSrtp = false }) {
          if (!producerId && !dataProducerId)
              throw new TypeError('missing producerId or dataProducerId');
          else if (producerId && dataProducerId)
              throw new TypeError('just producerId or dataProducerId can be given');
          else if (!router)
              throw new TypeError('Router not found');
          else if (router === this)
              throw new TypeError('cannot use this Router as destination');
          let producer;
          let dataProducer;
          if (producerId) {
              producer = this._producers.get(producerId);
              if (!producer)
                  throw new TypeError('Producer not found');
          }
          else if (dataProducerId) {
              dataProducer = this._dataProducers.get(dataProducerId);
              if (!dataProducer)
                  throw new TypeError('DataProducer not found');
          }
          // Here we may have to create a new PipeTransport pair to connect source and
          // destination Routers. We just want to keep a PipeTransport pair for each
          // pair of Routers. Since this operation is async, it may happen that two
          // simultaneous calls to router1.pipeToRouter({ producerId: xxx, router: router2 })
          // would end up generating two pairs of PipeTranports. To prevent that, let's
          // use an async queue.
          let localPipeTransport;
          let remotePipeTransport;
          await this._pipeToRouterQueue.push(async () => {
              let pipeTransportPair = this._mapRouterPipeTransports.get(router);
              if (pipeTransportPair) {
                  localPipeTransport = pipeTransportPair[0];
                  remotePipeTransport = pipeTransportPair[1];
              }
              else {
                  try {
                      pipeTransportPair = await Promise.all([
                          this.createPipeTransport({ listenIp, enableSctp, numSctpStreams, enableRtx, enableSrtp }),
                          router.createPipeTransport({ listenIp, enableSctp, numSctpStreams, enableRtx, enableSrtp })
                      ]);
                      localPipeTransport = pipeTransportPair[0];
                      remotePipeTransport = pipeTransportPair[1];
                      await Promise.all([
                          localPipeTransport.connect({
                              ip: remotePipeTransport.tuple.localIp,
                              port: remotePipeTransport.tuple.localPort,
                              srtpParameters: remotePipeTransport.srtpParameters
                          }),
                          remotePipeTransport.connect({
                              ip: localPipeTransport.tuple.localIp,
                              port: localPipeTransport.tuple.localPort,
                              srtpParameters: localPipeTransport.srtpParameters
                          })
                      ]);
                      localPipeTransport.observer.on('close', () => {
                          remotePipeTransport.close();
                          this._mapRouterPipeTransports.delete(router);
                      });
                      remotePipeTransport.observer.on('close', () => {
                          localPipeTransport.close();
                          this._mapRouterPipeTransports.delete(router);
                      });
                      this._mapRouterPipeTransports.set(router, [localPipeTransport, remotePipeTransport]);
                  }
                  catch (error) {
                      logger.error('pipeToRouter() | error creating PipeTransport pair:%o', error);
                      if (localPipeTransport)
                          localPipeTransport.close();
                      if (remotePipeTransport)
                          remotePipeTransport.close();
                      throw error;
                  }
              }
          });
          if (producer) {
              let pipeConsumer;
              let pipeProducer;
              try {
                  pipeConsumer = await localPipeTransport.consume({
                      producerId: producerId
                  });
                  pipeProducer = await remotePipeTransport.produce({
                      id: producer.id,
                      kind: pipeConsumer.kind,
                      rtpParameters: pipeConsumer.rtpParameters,
                      paused: pipeConsumer.producerPaused,
                      appData: producer.appData
                  });
                  // Pipe events from the pipe Consumer to the pipe Producer.
                  pipeConsumer.observer.on('close', () => pipeProducer.close());
                  pipeConsumer.observer.on('pause', () => pipeProducer.pause());
                  pipeConsumer.observer.on('resume', () => pipeProducer.resume());
                  // Pipe events from the pipe Producer to the pipe Consumer.
                  pipeProducer.observer.on('close', () => pipeConsumer.close());
                  return { pipeConsumer, pipeProducer };
              }
              catch (error) {
                  logger.error('pipeToRouter() | error creating pipe Consumer/Producer pair:%o', error);
                  if (pipeConsumer)
                      pipeConsumer.close();
                  if (pipeProducer)
                      pipeProducer.close();
                  throw error;
              }
          }
          else if (dataProducer) {
              let pipeDataConsumer;
              let pipeDataProducer;
              try {
                  pipeDataConsumer = await localPipeTransport.consumeData({
                      dataProducerId: dataProducerId
                  });
                  pipeDataProducer = await remotePipeTransport.produceData({
                      id: dataProducer.id,
                      sctpStreamParameters: pipeDataConsumer.sctpStreamParameters,
                      label: pipeDataConsumer.label,
                      protocol: pipeDataConsumer.protocol,
                      appData: dataProducer.appData
                  });
                  // Pipe events from the pipe DataConsumer to the pipe DataProducer.
                  pipeDataConsumer.observer.on('close', () => pipeDataProducer.close());
                  // Pipe events from the pipe DataProducer to the pipe DataConsumer.
                  pipeDataProducer.observer.on('close', () => pipeDataConsumer.close());
                  return { pipeDataConsumer, pipeDataProducer };
              }
              catch (error) {
                  logger.error('pipeToRouter() | error creating pipe DataConsumer/DataProducer pair:%o', error);
                  if (pipeDataConsumer)
                      pipeDataConsumer.close();
                  if (pipeDataProducer)
                      pipeDataProducer.close();
                  throw error;
              }
          }
          else {
              throw new Error('internal error');
          }
      }
      /**
       * Create an AudioLevelObserver.
       */
      async createAudioLevelObserver({ maxEntries = 1, threshold = -80, interval = 1000, appData = {} } = {}) {
          logger.debug('createAudioLevelObserver()');
          if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          const internal = { ...this._internal, rtpObserverId: esmNode.v4() };
          const reqData = { maxEntries, threshold, interval };
          await this._channel.request('router.createAudioLevelObserver', internal, reqData);
          const audioLevelObserver = new AudioLevelObserver_1.AudioLevelObserver({
              internal,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData,
              getProducerById: (producerId) => (this._producers.get(producerId))
          });
          this._rtpObservers.set(audioLevelObserver.id, audioLevelObserver);
          audioLevelObserver.on('@close', () => {
              this._rtpObservers.delete(audioLevelObserver.id);
          });
          // Emit observer event.
          this._observer.safeEmit('newrtpobserver', audioLevelObserver);
          return audioLevelObserver;
      }
      /**
       * Check whether the given RTP capabilities can consume the given Producer.
       */
      canConsume({ producerId, rtpCapabilities }) {
          const producer = this._producers.get(producerId);
          if (!producer) {
              logger.error('canConsume() | Producer with id "%s" not found', producerId);
              return false;
          }
          try {
              return ortc$1.canConsume(producer.consumableRtpParameters, rtpCapabilities);
          }
          catch (error) {
              logger.error('canConsume() | unexpected error: %s', String(error));
              return false;
          }
      }
  }
  exports.Router = Router;
  });

  unwrapExports(Router_1);
  var Router_2 = Router_1.Router;

  var Worker_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });










  // If env MEDIASOUP_WORKER_BIN is given, use it as worker binary.
  // Otherwise if env MEDIASOUP_BUILDTYPE is 'Debug' use the Debug binary.
  // Otherwise use the Release binary.
  const workerBin = process$1.env.MEDIASOUP_WORKER_BIN
      ? process$1.env.MEDIASOUP_WORKER_BIN
      : process$1.env.MEDIASOUP_BUILDTYPE === 'Debug'
          ? path$3.join(__dirname, '..', 'worker', 'out', 'Debug', 'mediasoup-worker')
          : path$3.join(__dirname, '..', 'worker', 'out', 'Release', 'mediasoup-worker');
  const logger = new Logger_1$1.Logger('Worker');
  const workerLogger = new Logger_1$1.Logger('Worker');
  class Worker extends EnhancedEventEmitter_1$1.EnhancedEventEmitter {
      /**
       * @private
       * @emits died - (error: Error)
       * @emits @success
       * @emits @failure - (error: Error)
       */
      constructor({ logLevel, logTags, rtcMinPort, rtcMaxPort, dtlsCertificateFile, dtlsPrivateKeyFile, appData }) {
          super();
          // Closed flag.
          this._closed = false;
          // Routers set.
          this._routers = new Set();
          // Observer instance.
          this._observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
          logger.debug('constructor()');
          let spawnBin = workerBin;
          let spawnArgs = [];
          if (process$1.env.MEDIASOUP_USE_VALGRIND === 'true') {
              spawnBin = process$1.env.MEDIASOUP_VALGRIND_BIN || 'valgrind';
              if (process$1.env.MEDIASOUP_VALGRIND_OPTIONS)
                  spawnArgs = spawnArgs.concat(process$1.env.MEDIASOUP_VALGRIND_OPTIONS.split(/\s+/));
              spawnArgs.push(workerBin);
          }
          if (typeof logLevel === 'string' && logLevel)
              spawnArgs.push(`--logLevel=${logLevel}`);
          for (const logTag of (Array.isArray(logTags) ? logTags : [])) {
              if (typeof logTag === 'string' && logTag)
                  spawnArgs.push(`--logTag=${logTag}`);
          }
          if (typeof rtcMinPort === 'number' && !Number.isNaN(rtcMinPort))
              spawnArgs.push(`--rtcMinPort=${rtcMinPort}`);
          if (typeof rtcMaxPort === 'number' && !Number.isNaN(rtcMaxPort))
              spawnArgs.push(`--rtcMaxPort=${rtcMaxPort}`);
          if (typeof dtlsCertificateFile === 'string' && dtlsCertificateFile)
              spawnArgs.push(`--dtlsCertificateFile=${dtlsCertificateFile}`);
          if (typeof dtlsPrivateKeyFile === 'string' && dtlsPrivateKeyFile)
              spawnArgs.push(`--dtlsPrivateKeyFile=${dtlsPrivateKeyFile}`);
          logger.debug('spawning worker process: %s %s', spawnBin, spawnArgs.join(' '));
          this._child = child_process.spawn(
          // command
          spawnBin, 
          // args
          spawnArgs, 
          // options
          {
              env: {
                  MEDIASOUP_VERSION: '3.6.14'
              },
              detached: false,
              // fd 0 (stdin)   : Just ignore it.
              // fd 1 (stdout)  : Pipe it for 3rd libraries that log their own stuff.
              // fd 2 (stderr)  : Same as stdout.
              // fd 3 (channel) : Producer Channel fd.
              // fd 4 (channel) : Consumer Channel fd.
              // fd 5 (channel) : Producer PayloadChannel fd.
              // fd 6 (channel) : Consumer PayloadChannel fd.
              stdio: ['ignore', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe'],
              windowsHide: true
          });
          this._pid = this._child.pid;
          this._channel = new Channel_1.Channel({
              producerSocket: this._child.stdio[3],
              consumerSocket: this._child.stdio[4],
              pid: this._pid
          });
          this._payloadChannel = new PayloadChannel_1.PayloadChannel({
              // NOTE: TypeScript does not like more than 5 fds.
              // @ts-ignore
              producerSocket: this._child.stdio[5],
              // @ts-ignore
              consumerSocket: this._child.stdio[6]
          });
          this._appData = appData;
          let spawnDone = false;
          // Listen for 'running' notification.
          this._channel.once(String(this._pid), (event) => {
              if (!spawnDone && event === 'running') {
                  spawnDone = true;
                  logger.debug('worker process running [pid:%s]', this._pid);
                  this.emit('@success');
              }
          });
          this._child.on('exit', (code, signal) => {
              this._child = undefined;
              this.close();
              if (!spawnDone) {
                  spawnDone = true;
                  if (code === 42) {
                      logger.error('worker process failed due to wrong settings [pid:%s]', this._pid);
                      this.emit('@failure', new TypeError('wrong settings'));
                  }
                  else {
                      logger.error('worker process failed unexpectedly [pid:%s, code:%s, signal:%s]', this._pid, code, signal);
                      this.emit('@failure', new Error(`[pid:${this._pid}, code:${code}, signal:${signal}]`));
                  }
              }
              else {
                  logger.error('worker process died unexpectedly [pid:%s, code:%s, signal:%s]', this._pid, code, signal);
                  this.safeEmit('died', new Error(`[pid:${this._pid}, code:${code}, signal:${signal}]`));
              }
          });
          this._child.on('error', (error) => {
              this._child = undefined;
              this.close();
              if (!spawnDone) {
                  spawnDone = true;
                  logger.error('worker process failed [pid:%s]: %s', this._pid, error.message);
                  this.emit('@failure', error);
              }
              else {
                  logger.error('worker process error [pid:%s]: %s', this._pid, error.message);
                  this.safeEmit('died', error);
              }
          });
          // Be ready for 3rd party worker libraries logging to stdout.
          this._child.stdout.on('data', (buffer) => {
              for (const line of buffer.toString('utf8').split('\n')) {
                  if (line)
                      workerLogger.debug(`(stdout) ${line}`);
              }
          });
          // In case of a worker bug, mediasoup will log to stderr.
          this._child.stderr.on('data', (buffer) => {
              for (const line of buffer.toString('utf8').split('\n')) {
                  if (line)
                      workerLogger.error(`(stderr) ${line}`);
              }
          });
      }
      /**
       * Worker process identifier (PID).
       */
      get pid() {
          return this._pid;
      }
      /**
       * Whether the Worker is closed.
       */
      get closed() {
          return this._closed;
      }
      /**
       * App custom data.
       */
      get appData() {
          return this._appData;
      }
      /**
       * Invalid setter.
       */
      set appData(appData) {
          throw new Error('cannot override appData object');
      }
      /**
       * Observer.
       *
       * @emits close
       * @emits newrouter - (router: Router)
       */
      get observer() {
          return this._observer;
      }
      /**
       * Close the Worker.
       */
      close() {
          if (this._closed)
              return;
          logger.debug('close()');
          this._closed = true;
          // Kill the worker process.
          if (this._child) {
              // Remove event listeners but leave a fake 'error' hander to avoid
              // propagation.
              this._child.removeAllListeners('exit');
              this._child.removeAllListeners('error');
              this._child.on('error', () => { });
              this._child.kill('SIGTERM');
              this._child = undefined;
          }
          // Close the Channel instance.
          this._channel.close();
          // Close the PayloadChannel instance.
          this._payloadChannel.close();
          // Close every Router.
          for (const router of this._routers) {
              router.workerClosed();
          }
          this._routers.clear();
          // Emit observer event.
          this._observer.safeEmit('close');
      }
      /**
       * Dump Worker.
       */
      async dump() {
          logger.debug('dump()');
          return this._channel.request('worker.dump');
      }
      /**
       * Get mediasoup-worker process resource usage.
       */
      async getResourceUsage() {
          logger.debug('getResourceUsage()');
          return this._channel.request('worker.getResourceUsage');
      }
      /**
       * Update settings.
       */
      async updateSettings({ logLevel, logTags } = {}) {
          logger.debug('updateSettings()');
          const reqData = { logLevel, logTags };
          await this._channel.request('worker.updateSettings', undefined, reqData);
      }
      /**
       * Create a Router.
       */
      async createRouter({ mediaCodecs, appData = {} } = {}) {
          logger.debug('createRouter()');
          if (appData && typeof appData !== 'object')
              throw new TypeError('if given, appData must be an object');
          // This may throw.
          const rtpCapabilities = ortc$1.generateRouterRtpCapabilities(mediaCodecs);
          const internal = { routerId: esmNode.v4() };
          await this._channel.request('worker.createRouter', internal);
          const data = { rtpCapabilities };
          const router = new Router_1.Router({
              internal,
              data,
              channel: this._channel,
              payloadChannel: this._payloadChannel,
              appData
          });
          this._routers.add(router);
          router.on('@close', () => this._routers.delete(router));
          // Emit observer event.
          this._observer.safeEmit('newrouter', router);
          return router;
      }
  }
  exports.Worker = Worker;
  });

  unwrapExports(Worker_1);
  var Worker_2 = Worker_1.Worker;

  var types$1 = createCommonjsModule(function (module, exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export(Worker_1);
  __export(Router_1);
  __export(Transport_1$1);
  __export(WebRtcTransport_1);
  __export(PlainTransport_1);
  __export(PipeTransport_1);
  __export(DirectTransport_1);
  __export(Producer_1$1);
  __export(Consumer_1$1);
  __export(DataProducer_1$1);
  __export(DataConsumer_1$1);
  __export(RtpObserver_1);
  __export(AudioLevelObserver_1);
  __export(errors$1);
  });

  unwrapExports(types$1);

  var lib$6 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });






  exports.types = types$1;
  /**
   * Expose mediasoup version.
   */
  exports.version = '3.6.14';
  /**
   * Expose parseScalabilityMode() function.
   */

  exports.parseScalabilityMode = scalabilityModes$1.parse;
  const logger = new Logger_1$1.Logger();
  const observer = new EnhancedEventEmitter_1$1.EnhancedEventEmitter();
  exports.observer = observer;
  /**
   * Create a Worker.
   */
  async function createWorker({ logLevel = 'error', logTags, rtcMinPort = 10000, rtcMaxPort = 59999, dtlsCertificateFile, dtlsPrivateKeyFile, appData = {} } = {}) {
      logger.debug('createWorker()');
      if (appData && typeof appData !== 'object')
          throw new TypeError('if given, appData must be an object');
      const worker = new Worker_1.Worker({
          logLevel,
          logTags,
          rtcMinPort,
          rtcMaxPort,
          dtlsCertificateFile,
          dtlsPrivateKeyFile,
          appData
      });
      return new Promise((resolve, reject) => {
          worker.on('@success', () => {
              // Emit observer event.
              observer.safeEmit('newworker', worker);
              resolve(worker);
          });
          worker.on('@failure', reject);
      });
  }
  exports.createWorker = createWorker;
  /**
   * Get a cloned copy of the mediasoup supported RTP capabilities.
   */
  function getSupportedRtpCapabilities() {
      return utils$1.clone(supportedRtpCapabilities_1.supportedRtpCapabilities);
  }
  exports.getSupportedRtpCapabilities = getSupportedRtpCapabilities;
  });

  var mediasoup = unwrapExports(lib$6);
  var lib_1$4 = lib$6.types;
  var lib_2$3 = lib$6.version;
  var lib_3$3 = lib$6.parseScalabilityMode;
  var lib_4$3 = lib$6.observer;
  var lib_5$3 = lib$6.createWorker;
  var lib_6$1 = lib$6.getSupportedRtpCapabilities;

  /*!
   * depd
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var callsiteTostring = callSiteToString;

  /**
   * Format a CallSite file location to a string.
   */

  function callSiteFileLocation (callSite) {
    var fileName;
    var fileLocation = '';

    if (callSite.isNative()) {
      fileLocation = 'native';
    } else if (callSite.isEval()) {
      fileName = callSite.getScriptNameOrSourceURL();
      if (!fileName) {
        fileLocation = callSite.getEvalOrigin();
      }
    } else {
      fileName = callSite.getFileName();
    }

    if (fileName) {
      fileLocation += fileName;

      var lineNumber = callSite.getLineNumber();
      if (lineNumber != null) {
        fileLocation += ':' + lineNumber;

        var columnNumber = callSite.getColumnNumber();
        if (columnNumber) {
          fileLocation += ':' + columnNumber;
        }
      }
    }

    return fileLocation || 'unknown source'
  }

  /**
   * Format a CallSite to a string.
   */

  function callSiteToString (callSite) {
    var addSuffix = true;
    var fileLocation = callSiteFileLocation(callSite);
    var functionName = callSite.getFunctionName();
    var isConstructor = callSite.isConstructor();
    var isMethodCall = !(callSite.isToplevel() || isConstructor);
    var line = '';

    if (isMethodCall) {
      var methodName = callSite.getMethodName();
      var typeName = getConstructorName(callSite);

      if (functionName) {
        if (typeName && functionName.indexOf(typeName) !== 0) {
          line += typeName + '.';
        }

        line += functionName;

        if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
          line += ' [as ' + methodName + ']';
        }
      } else {
        line += typeName + '.' + (methodName || '<anonymous>');
      }
    } else if (isConstructor) {
      line += 'new ' + (functionName || '<anonymous>');
    } else if (functionName) {
      line += functionName;
    } else {
      addSuffix = false;
      line += fileLocation;
    }

    if (addSuffix) {
      line += ' (' + fileLocation + ')';
    }

    return line
  }

  /**
   * Get constructor name of reviver.
   */

  function getConstructorName (obj) {
    var receiver = obj.receiver;
    return (receiver.constructor && receiver.constructor.name) || null
  }

  /*!
   * depd
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var eventListenerCount_1 = eventListenerCount;

  /**
   * Get the count of listeners on an event emitter of a specific type.
   */

  function eventListenerCount (emitter, type) {
    return emitter.listeners(type).length
  }

  var compat = createCommonjsModule(function (module) {

  /**
   * Module dependencies.
   * @private
   */

  var EventEmitter = events.EventEmitter;

  /**
   * Module exports.
   * @public
   */

  lazyProperty(module.exports, 'callSiteToString', function callSiteToString () {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;

    function prepareObjectStackTrace (obj, stack) {
      return stack
    }

    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = 2;

    // capture the stack
    Error.captureStackTrace(obj);

    // slice the stack
    var stack = obj.stack.slice();

    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;

    return stack[0].toString ? toString : callsiteTostring
  });

  lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount () {
    return EventEmitter.listenerCount || eventListenerCount_1
  });

  /**
   * Define a lazy property.
   */

  function lazyProperty (obj, prop, getter) {
    function get () {
      var val = getter();

      Object.defineProperty(obj, prop, {
        configurable: true,
        enumerable: true,
        value: val
      });

      return val
    }

    Object.defineProperty(obj, prop, {
      configurable: true,
      enumerable: true,
      get: get
    });
  }

  /**
   * Call toString() on the obj
   */

  function toString (obj) {
    return obj.toString()
  }
  });

  /*!
   * depd
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module dependencies.
   */

  var callSiteToString$1 = compat.callSiteToString;
  var eventListenerCount$1 = compat.eventListenerCount;
  var relative = path$3.relative;

  /**
   * Module exports.
   */

  var depd_1 = depd;

  /**
   * Get the path to base files on.
   */

  var basePath = process.cwd();

  /**
   * Determine if namespace is contained in the string.
   */

  function containsNamespace (str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();

    for (var i = 0; i < vals.length; i++) {
      var val = vals[i];

      // namespace contained
      if (val && (val === '*' || val.toLowerCase() === ns)) {
        return true
      }
    }

    return false
  }

  /**
   * Convert a data descriptor to accessor descriptor.
   */

  function convertDataDescriptorToAccessor (obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;

    descriptor.get = function getter () { return value };

    if (descriptor.writable) {
      descriptor.set = function setter (val) { return (value = val) };
    }

    delete descriptor.value;
    delete descriptor.writable;

    Object.defineProperty(obj, prop, descriptor);

    return descriptor
  }

  /**
   * Create arguments string to keep arity.
   */

  function createArgumentsString (arity) {
    var str = '';

    for (var i = 0; i < arity; i++) {
      str += ', arg' + i;
    }

    return str.substr(2)
  }

  /**
   * Create stack string from stack.
   */

  function createStackString (stack) {
    var str = this.name + ': ' + this.namespace;

    if (this.message) {
      str += ' deprecated ' + this.message;
    }

    for (var i = 0; i < stack.length; i++) {
      str += '\n    at ' + callSiteToString$1(stack[i]);
    }

    return str
  }

  /**
   * Create deprecate for namespace in caller.
   */

  function depd (namespace) {
    if (!namespace) {
      throw new TypeError('argument namespace is required')
    }

    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];

    function deprecate (message) {
      // call to self as log
      log.call(deprecate, message);
    }

    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);

    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;

    return deprecate
  }

  /**
   * Determine if namespace is ignored.
   */

  function isignored (namespace) {
    /* istanbul ignore next: tested in a child processs */
    if (process.noDeprecation) {
      // --no-deprecation support
      return true
    }

    var str = process.env.NO_DEPRECATION || '';

    // namespace ignored
    return containsNamespace(str, namespace)
  }

  /**
   * Determine if namespace is traced.
   */

  function istraced (namespace) {
    /* istanbul ignore next: tested in a child processs */
    if (process.traceDeprecation) {
      // --trace-deprecation support
      return true
    }

    var str = process.env.TRACE_DEPRECATION || '';

    // namespace traced
    return containsNamespace(str, namespace)
  }

  /**
   * Display deprecation message.
   */

  function log (message, site) {
    var haslisteners = eventListenerCount$1(process, 'deprecation') !== 0;

    // abort early if no destination
    if (!haslisteners && this._ignored) {
      return
    }

    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;

    if (site) {
      // provided site
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      // get call site
      i = 2;
      depSite = callSiteLocation(stack[i]);
      callSite = depSite;
    }

    // get caller of deprecated thing in relation to file
    for (; i < stack.length; i++) {
      caller = callSiteLocation(stack[i]);
      callFile = caller[0];

      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break
      }
    }

    var key = caller
      ? depSite.join(':') + '__' + caller.join(':')
      : undefined;

    if (key !== undefined && key in this._warned) {
      // already warned
      return
    }

    this._warned[key] = true;

    // generate automatic message from call site
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name
        ? defaultMessage(depSite)
        : defaultMessage(callSite);
    }

    // emit deprecation if listeners exist
    if (haslisteners) {
      var err = DeprecationError(this._namespace, msg, stack.slice(i));
      process.emit('deprecation', err);
      return
    }

    // format and write message
    var format = process.stderr.isTTY
      ? formatColor
      : formatPlain;
    var output = format.call(this, msg, caller, stack.slice(i));
    process.stderr.write(output + '\n', 'utf8');
  }

  /**
   * Get call site location as array.
   */

  function callSiteLocation (callSite) {
    var file = callSite.getFileName() || '<anonymous>';
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();

    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ', ' + file;
    }

    var site = [file, line, colm];

    site.callSite = callSite;
    site.name = callSite.getFunctionName();

    return site
  }

  /**
   * Generate a default message from the site.
   */

  function defaultMessage (site) {
    var callSite = site.callSite;
    var funcName = site.name;

    // make useful anonymous name
    if (!funcName) {
      funcName = '<anonymous@' + formatLocation(site) + '>';
    }

    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();

    // ignore useless type name
    if (typeName === 'Object') {
      typeName = undefined;
    }

    // make useful type name
    if (typeName === 'Function') {
      typeName = context.name || typeName;
    }

    return typeName && callSite.getMethodName()
      ? typeName + '.' + funcName
      : funcName
  }

  /**
   * Format deprecation message without color.
   */

  function formatPlain (msg, caller, stack) {
    var timestamp = new Date().toUTCString();

    var formatted = timestamp +
      ' ' + this._namespace +
      ' deprecated ' + msg;

    // add stack trace
    if (this._traced) {
      for (var i = 0; i < stack.length; i++) {
        formatted += '\n    at ' + callSiteToString$1(stack[i]);
      }

      return formatted
    }

    if (caller) {
      formatted += ' at ' + formatLocation(caller);
    }

    return formatted
  }

  /**
   * Format deprecation message with color.
   */

  function formatColor (msg, caller, stack) {
    var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
      ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
      ' \x1b[0m' + msg + '\x1b[39m'; // reset

    // add stack trace
    if (this._traced) {
      for (var i = 0; i < stack.length; i++) {
        formatted += '\n    \x1b[36mat ' + callSiteToString$1(stack[i]) + '\x1b[39m'; // cyan
      }

      return formatted
    }

    if (caller) {
      formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m'; // cyan
    }

    return formatted
  }

  /**
   * Format call site location.
   */

  function formatLocation (callSite) {
    return relative(basePath, callSite[0]) +
      ':' + callSite[1] +
      ':' + callSite[2]
  }

  /**
   * Get the stack as array of call sites.
   */

  function getStack () {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;

    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);

    // capture the stack
    Error.captureStackTrace(obj);

    // slice this function off the top
    var stack = obj.stack.slice(1);

    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;

    return stack
  }

  /**
   * Capture call site stack from v8.
   */

  function prepareObjectStackTrace (obj, stack) {
    return stack
  }

  /**
   * Return a wrapped function in a deprecation message.
   */

  function wrapfunction (fn, message) {
    if (typeof fn !== 'function') {
      throw new TypeError('argument fn must be a function')
    }

    var args = createArgumentsString(fn.length);
    var stack = getStack();
    var site = callSiteLocation(stack[1]);

    site.name = fn.name;

     // eslint-disable-next-line no-eval
    var deprecatedfn = eval('(function (' + args + ') {\n' +
      '"use strict"\n' +
      'log.call(deprecate, message, site)\n' +
      'return fn.apply(this, arguments)\n' +
      '})');

    return deprecatedfn
  }

  /**
   * Wrap property in a deprecation message.
   */

  function wrapproperty (obj, prop, message) {
    if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
      throw new TypeError('argument obj must be object')
    }

    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

    if (!descriptor) {
      throw new TypeError('must call property on owner object')
    }

    if (!descriptor.configurable) {
      throw new TypeError('property must be configurable')
    }

    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);

    // set site name
    site.name = prop;

    // convert data descriptor
    if ('value' in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop);
    }

    var get = descriptor.get;
    var set = descriptor.set;

    // wrap getter
    if (typeof get === 'function') {
      descriptor.get = function getter () {
        log.call(deprecate, message, site);
        return get.apply(this, arguments)
      };
    }

    // wrap setter
    if (typeof set === 'function') {
      descriptor.set = function setter () {
        log.call(deprecate, message, site);
        return set.apply(this, arguments)
      };
    }

    Object.defineProperty(obj, prop, descriptor);
  }

  /**
   * Create DeprecationError for deprecation
   */

  function DeprecationError (namespace, message, stack) {
    var error = new Error();
    var stackString;

    Object.defineProperty(error, 'constructor', {
      value: DeprecationError
    });

    Object.defineProperty(error, 'message', {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });

    Object.defineProperty(error, 'name', {
      enumerable: false,
      configurable: true,
      value: 'DeprecationError',
      writable: true
    });

    Object.defineProperty(error, 'namespace', {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });

    Object.defineProperty(error, 'stack', {
      configurable: true,
      enumerable: false,
      get: function () {
        if (stackString !== undefined) {
          return stackString
        }

        // prepare stack trace
        return (stackString = createStackString.call(this, stack))
      },
      set: function setter (val) {
        stackString = val;
      }
    });

    return error
  }

  /*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var bytes_1 = bytes;
  var format_1 = format$2;
  var parse_1 = parse$5;

  /**
   * Module variables.
   * @private
   */

  var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;

  var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;

  var map$1 = {
    b:  1,
    kb: 1 << 10,
    mb: 1 << 20,
    gb: 1 << 30,
    tb: Math.pow(1024, 4),
    pb: Math.pow(1024, 5),
  };

  var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;

  /**
   * Convert the given value in bytes into a string or parse to string to an integer in bytes.
   *
   * @param {string|number} value
   * @param {{
   *  case: [string],
   *  decimalPlaces: [number]
   *  fixedDecimals: [boolean]
   *  thousandsSeparator: [string]
   *  unitSeparator: [string]
   *  }} [options] bytes options.
   *
   * @returns {string|number|null}
   */

  function bytes(value, options) {
    if (typeof value === 'string') {
      return parse$5(value);
    }

    if (typeof value === 'number') {
      return format$2(value, options);
    }

    return null;
  }

  /**
   * Format the given value in bytes into a string.
   *
   * If the value is negative, it is kept as such. If it is a float,
   * it is rounded.
   *
   * @param {number} value
   * @param {object} [options]
   * @param {number} [options.decimalPlaces=2]
   * @param {number} [options.fixedDecimals=false]
   * @param {string} [options.thousandsSeparator=]
   * @param {string} [options.unit=]
   * @param {string} [options.unitSeparator=]
   *
   * @returns {string|null}
   * @public
   */

  function format$2(value, options) {
    if (!Number.isFinite(value)) {
      return null;
    }

    var mag = Math.abs(value);
    var thousandsSeparator = (options && options.thousandsSeparator) || '';
    var unitSeparator = (options && options.unitSeparator) || '';
    var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;
    var fixedDecimals = Boolean(options && options.fixedDecimals);
    var unit = (options && options.unit) || '';

    if (!unit || !map$1[unit.toLowerCase()]) {
      if (mag >= map$1.pb) {
        unit = 'PB';
      } else if (mag >= map$1.tb) {
        unit = 'TB';
      } else if (mag >= map$1.gb) {
        unit = 'GB';
      } else if (mag >= map$1.mb) {
        unit = 'MB';
      } else if (mag >= map$1.kb) {
        unit = 'KB';
      } else {
        unit = 'B';
      }
    }

    var val = value / map$1[unit.toLowerCase()];
    var str = val.toFixed(decimalPlaces);

    if (!fixedDecimals) {
      str = str.replace(formatDecimalsRegExp, '$1');
    }

    if (thousandsSeparator) {
      str = str.replace(formatThousandsRegExp, thousandsSeparator);
    }

    return str + unitSeparator + unit;
  }

  /**
   * Parse the string value into an integer in bytes.
   *
   * If no unit is given, it is assumed the value is in bytes.
   *
   * @param {number|string} val
   *
   * @returns {number|null}
   * @public
   */

  function parse$5(val) {
    if (typeof val === 'number' && !isNaN(val)) {
      return val;
    }

    if (typeof val !== 'string') {
      return null;
    }

    // Test if the string passed is valid
    var results = parseRegExp.exec(val);
    var floatValue;
    var unit = 'b';

    if (!results) {
      // Nothing could be extracted from the given string
      floatValue = parseInt(val, 10);
      unit = 'b';
    } else {
      // Retrieve the value and the unit
      floatValue = parseFloat(results[1]);
      unit = results[4].toLowerCase();
    }

    return Math.floor(map$1[unit] * floatValue);
  }
  bytes_1.format = format_1;
  bytes_1.parse = parse_1;

  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
   *
   * parameter     = token "=" ( token / quoted-string )
   * token         = 1*tchar
   * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
   *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
   *               / DIGIT / ALPHA
   *               ; any VCHAR, except delimiters
   * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
   * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
   * obs-text      = %x80-FF
   * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
   */
  var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

  /**
   * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
   *
   * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
   * obs-text    = %x80-FF
   */
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;

  /**
   * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
   */
  var QUOTE_REGEXP = /([\\"])/g;

  /**
   * RegExp to match type in RFC 7231 sec 3.1.1.1
   *
   * media-type = type "/" subtype
   * type       = token
   * subtype    = token
   */
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

  /**
   * Module exports.
   * @public
   */

  var format_1$1 = format$3;
  var parse_1$1 = parse$6;

  /**
   * Format object to media type.
   *
   * @param {object} obj
   * @return {string}
   * @public
   */

  function format$3 (obj) {
    if (!obj || typeof obj !== 'object') {
      throw new TypeError('argument obj is required')
    }

    var parameters = obj.parameters;
    var type = obj.type;

    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError('invalid type')
    }

    var string = type;

    // append parameters
    if (parameters && typeof parameters === 'object') {
      var param;
      var params = Object.keys(parameters).sort();

      for (var i = 0; i < params.length; i++) {
        param = params[i];

        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError('invalid parameter name')
        }

        string += '; ' + param + '=' + qstring(parameters[param]);
      }
    }

    return string
  }

  /**
   * Parse media type to object.
   *
   * @param {string|object} string
   * @return {Object}
   * @public
   */

  function parse$6 (string) {
    if (!string) {
      throw new TypeError('argument string is required')
    }

    // support req/res-like objects as argument
    var header = typeof string === 'object'
      ? getcontenttype(string)
      : string;

    if (typeof header !== 'string') {
      throw new TypeError('argument string is required to be a string')
    }

    var index = header.indexOf(';');
    var type = index !== -1
      ? header.substr(0, index).trim()
      : header.trim();

    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError('invalid media type')
    }

    var obj = new ContentType(type.toLowerCase());

    // parse parameters
    if (index !== -1) {
      var key;
      var match;
      var value;

      PARAM_REGEXP.lastIndex = index;

      while ((match = PARAM_REGEXP.exec(header))) {
        if (match.index !== index) {
          throw new TypeError('invalid parameter format')
        }

        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];

        if (value[0] === '"') {
          // remove quotes and escapes
          value = value
            .substr(1, value.length - 2)
            .replace(QESC_REGEXP, '$1');
        }

        obj.parameters[key] = value;
      }

      if (index !== header.length) {
        throw new TypeError('invalid parameter format')
      }
    }

    return obj
  }

  /**
   * Get content-type from req/res objects.
   *
   * @param {object}
   * @return {Object}
   * @private
   */

  function getcontenttype (obj) {
    var header;

    if (typeof obj.getHeader === 'function') {
      // res-like
      header = obj.getHeader('content-type');
    } else if (typeof obj.headers === 'object') {
      // req-like
      header = obj.headers && obj.headers['content-type'];
    }

    if (typeof header !== 'string') {
      throw new TypeError('content-type header is missing from object')
    }

    return header
  }

  /**
   * Quote a string if necessary.
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function qstring (val) {
    var str = String(val);

    // no need to quote tokens
    if (TOKEN_REGEXP.test(str)) {
      return str
    }

    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError('invalid parameter value')
    }

    return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
  }

  /**
   * Class to represent a content type.
   * @private
   */
  function ContentType (type) {
    this.parameters = Object.create(null);
    this.type = type;
  }

  var contentType = {
  	format: format_1$1,
  	parse: parse_1$1
  };

  /* eslint no-proto: 0 */
  var setprototypeof = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

  function setProtoOf (obj, proto) {
    obj.__proto__ = proto;
    return obj
  }

  function mixinProperties (obj, proto) {
    for (var prop in proto) {
      if (!obj.hasOwnProperty(prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj
  }

  var codes = {
  	"100": "Continue",
  	"101": "Switching Protocols",
  	"102": "Processing",
  	"103": "Early Hints",
  	"200": "OK",
  	"201": "Created",
  	"202": "Accepted",
  	"203": "Non-Authoritative Information",
  	"204": "No Content",
  	"205": "Reset Content",
  	"206": "Partial Content",
  	"207": "Multi-Status",
  	"208": "Already Reported",
  	"226": "IM Used",
  	"300": "Multiple Choices",
  	"301": "Moved Permanently",
  	"302": "Found",
  	"303": "See Other",
  	"304": "Not Modified",
  	"305": "Use Proxy",
  	"306": "(Unused)",
  	"307": "Temporary Redirect",
  	"308": "Permanent Redirect",
  	"400": "Bad Request",
  	"401": "Unauthorized",
  	"402": "Payment Required",
  	"403": "Forbidden",
  	"404": "Not Found",
  	"405": "Method Not Allowed",
  	"406": "Not Acceptable",
  	"407": "Proxy Authentication Required",
  	"408": "Request Timeout",
  	"409": "Conflict",
  	"410": "Gone",
  	"411": "Length Required",
  	"412": "Precondition Failed",
  	"413": "Payload Too Large",
  	"414": "URI Too Long",
  	"415": "Unsupported Media Type",
  	"416": "Range Not Satisfiable",
  	"417": "Expectation Failed",
  	"418": "I'm a teapot",
  	"421": "Misdirected Request",
  	"422": "Unprocessable Entity",
  	"423": "Locked",
  	"424": "Failed Dependency",
  	"425": "Unordered Collection",
  	"426": "Upgrade Required",
  	"428": "Precondition Required",
  	"429": "Too Many Requests",
  	"431": "Request Header Fields Too Large",
  	"451": "Unavailable For Legal Reasons",
  	"500": "Internal Server Error",
  	"501": "Not Implemented",
  	"502": "Bad Gateway",
  	"503": "Service Unavailable",
  	"504": "Gateway Timeout",
  	"505": "HTTP Version Not Supported",
  	"506": "Variant Also Negotiates",
  	"507": "Insufficient Storage",
  	"508": "Loop Detected",
  	"509": "Bandwidth Limit Exceeded",
  	"510": "Not Extended",
  	"511": "Network Authentication Required"
  };

  var codes$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': codes
  });

  var codes$2 = getCjsExportFromNamespace(codes$1);

  /**
   * Module dependencies.
   * @private
   */



  /**
   * Module exports.
   * @public
   */

  var statuses = status;

  // status code to message map
  status.STATUS_CODES = codes$2;

  // array of status codes
  status.codes = populateStatusesMap(status, codes$2);

  // status codes for redirects
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };

  // status codes for empty bodies
  status.empty = {
    204: true,
    205: true,
    304: true
  };

  // status codes for when you should retry the request
  status.retry = {
    502: true,
    503: true,
    504: true
  };

  /**
   * Populate the statuses map for given codes.
   * @private
   */

  function populateStatusesMap (statuses, codes) {
    var arr = [];

    Object.keys(codes).forEach(function forEachCode (code) {
      var message = codes[code];
      var status = Number(code);

      // Populate properties
      statuses[status] = message;
      statuses[message] = status;
      statuses[message.toLowerCase()] = status;

      // Add to array
      arr.push(status);
    });

    return arr
  }

  /**
   * Get the status code.
   *
   * Given a number, this will throw if it is not a known status
   * code, otherwise the code will be returned. Given a string,
   * the string will be parsed for a number and return the code
   * if valid, otherwise will lookup the code assuming this is
   * the status message.
   *
   * @param {string|number} code
   * @returns {number}
   * @public
   */

  function status (code) {
    if (typeof code === 'number') {
      if (!status[code]) throw new Error('invalid status code: ' + code)
      return code
    }

    if (typeof code !== 'string') {
      throw new TypeError('code must be a number or string')
    }

    // '403'
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      if (!status[n]) throw new Error('invalid status code: ' + n)
      return n
    }

    n = status[code.toLowerCase()];
    if (!n) throw new Error('invalid status message: "' + code + '"')
    return n
  }

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var inherits = createCommonjsModule(function (module) {
  try {
    var util = util$2;
    if (typeof util.inherits !== 'function') throw '';
    module.exports = util.inherits;
  } catch (e) {
    module.exports = inherits_browser;
  }
  });

  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var toidentifier = toIdentifier;

  /**
   * Trasform the given string into a JavaScript identifier
   *
   * @param {string} str
   * @returns {string}
   * @public
   */

  function toIdentifier (str) {
    return str
      .split(' ')
      .map(function (token) {
        return token.slice(0, 1).toUpperCase() + token.slice(1)
      })
      .join('')
      .replace(/[^ _0-9a-z]/gi, '')
  }

  var httpErrors = createCommonjsModule(function (module) {

  /**
   * Module dependencies.
   * @private
   */

  var deprecate = depd_1('http-errors');





  /**
   * Module exports.
   * @public
   */

  module.exports = createError;
  module.exports.HttpError = createHttpErrorConstructor();

  // Populate exports for all constructors
  populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);

  /**
   * Get the code class of a status code.
   * @private
   */

  function codeClass (status) {
    return Number(String(status).charAt(0) + '00')
  }

  /**
   * Create a new HTTP Error.
   *
   * @returns {Error}
   * @public
   */

  function createError () {
    // so much arity going on ~_~
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (arg instanceof Error) {
        err = arg;
        status = err.status || err.statusCode || status;
        continue
      }
      switch (typeof arg) {
        case 'string':
          msg = arg;
          break
        case 'number':
          status = arg;
          if (i !== 0) {
            deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)');
          }
          break
        case 'object':
          props = arg;
          break
      }
    }

    if (typeof status === 'number' && (status < 400 || status >= 600)) {
      deprecate('non-error status code; use only 4xx or 5xx status codes');
    }

    if (typeof status !== 'number' ||
      (!statuses[status] && (status < 400 || status >= 600))) {
      status = 500;
    }

    // constructor
    var HttpError = createError[status] || createError[codeClass(status)];

    if (!err) {
      // create error
      err = HttpError
        ? new HttpError(msg)
        : new Error(msg || statuses[status]);
      Error.captureStackTrace(err, createError);
    }

    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      // add properties to generic error
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }

    for (var key in props) {
      if (key !== 'status' && key !== 'statusCode') {
        err[key] = props[key];
      }
    }

    return err
  }

  /**
   * Create HTTP error abstract base class.
   * @private
   */

  function createHttpErrorConstructor () {
    function HttpError () {
      throw new TypeError('cannot construct abstract class')
    }

    inherits(HttpError, Error);

    return HttpError
  }

  /**
   * Create a constructor for a client error.
   * @private
   */

  function createClientErrorConstructor (HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + 'Error';

    function ClientError (message) {
      // create the error object
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);

      // capture a stack trace to the construction point
      Error.captureStackTrace(err, ClientError);

      // adjust the [[Prototype]]
      setprototypeof(err, ClientError.prototype);

      // redefine the error message
      Object.defineProperty(err, 'message', {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });

      // redefine the error name
      Object.defineProperty(err, 'name', {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });

      return err
    }

    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);

    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;

    return ClientError
  }

  /**
   * Create a constructor for a server error.
   * @private
   */

  function createServerErrorConstructor (HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + 'Error';

    function ServerError (message) {
      // create the error object
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);

      // capture a stack trace to the construction point
      Error.captureStackTrace(err, ServerError);

      // adjust the [[Prototype]]
      setprototypeof(err, ServerError.prototype);

      // redefine the error message
      Object.defineProperty(err, 'message', {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });

      // redefine the error name
      Object.defineProperty(err, 'name', {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });

      return err
    }

    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);

    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;

    return ServerError
  }

  /**
   * Set the name of a function, if possible.
   * @private
   */

  function nameFunc (func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, 'name');

    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, 'name', desc);
    }
  }

  /**
   * Populate the exports object with constructors for every error class.
   * @private
   */

  function populateConstructorExports (exports, codes, HttpError) {
    codes.forEach(function forEachCode (code) {
      var CodeError;
      var name = toidentifier(statuses[code]);

      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break
      }

      if (CodeError) {
        // export the constructor
        exports[code] = CodeError;
        exports[name] = CodeError;
      }
    });

    // backwards-compatibility
    exports["I'mateapot"] = deprecate.function(exports.ImATeapot,
      '"I\'mateapot"; use "ImATeapot" instead');
  }
  });
  var httpErrors_1 = httpErrors.HttpError;

  /**
   * Helpers.
   */

  var s$2 = 1000;
  var m$2 = s$2 * 60;
  var h$2 = m$2 * 60;
  var d$2 = h$2 * 24;
  var y$3 = d$2 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$2 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$7(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$2(val) : fmtShort$2(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$7(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$3;
      case 'days':
      case 'day':
      case 'd':
        return n * d$2;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$2;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$2;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$2;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$2(ms) {
    if (ms >= d$2) {
      return Math.round(ms / d$2) + 'd';
    }
    if (ms >= h$2) {
      return Math.round(ms / h$2) + 'h';
    }
    if (ms >= m$2) {
      return Math.round(ms / m$2) + 'm';
    }
    if (ms >= s$2) {
      return Math.round(ms / s$2) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$2(ms) {
    return plural$2(ms, d$2, 'day') ||
      plural$2(ms, h$2, 'hour') ||
      plural$2(ms, m$2, 'minute') ||
      plural$2(ms, s$2, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$2(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug$7 = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$2;

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    return debug;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1$1 = debug$7.coerce;
  var debug_2$1 = debug$7.disable;
  var debug_3$1 = debug$7.enable;
  var debug_4$1 = debug$7.enabled;
  var debug_5$1 = debug$7.humanize;
  var debug_6$1 = debug$7.names;
  var debug_7$1 = debug$7.skips;
  var debug_8$1 = debug$7.formatters;

  var browser$2 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$7;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1$2 = browser$2.log;
  var browser_2$2 = browser$2.formatArgs;
  var browser_3$2 = browser$2.save;
  var browser_4$2 = browser$2.load;
  var browser_5$2 = browser$2.useColors;
  var browser_6$2 = browser$2.storage;
  var browser_7$2 = browser$2.colors;

  var node$2 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$7;
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // camel-case
    var prop = key
      .substring(6)
      .toLowerCase()
      .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === 'null') val = null;
    else val = Number(val);

    obj[prop] = val;
    return obj;
  }, {});

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

  if (1 !== fd && 2 !== fd) {
    util$2.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
  }

  var stream = 1 === fd ? process.stdout :
               2 === fd ? process.stderr :
               createWritableStdioStream(fd);

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty.isatty(fd);
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts)
      .split('\n').map(function(str) {
        return str.trim()
      }).join(' ');
  };

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts);
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = new Date().toUTCString()
        + ' ' + name + ' ' + args[0];
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to `stream`.
   */

  function log() {
    return stream.write(util$2.format.apply(util$2, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream (fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      case 'FILE':
        var fs$1 = fs;
        stream = new fs$1.SyncWriteStream(fd, { autoClose: false });
        stream._type = 'fs';
        break;

      case 'PIPE':
      case 'TCP':
        var net$1 = net;
        stream = new net$1.Socket({
          fd: fd,
          readable: false,
          writable: true
        });

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!');
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd;

    stream._isStdio = true;

    return stream;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init (debug) {
    debug.inspectOpts = {};

    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());
  });
  var node_1$2 = node$2.init;
  var node_2$2 = node$2.log;
  var node_3$2 = node$2.formatArgs;
  var node_4$2 = node$2.save;
  var node_5$2 = node$2.load;
  var node_6$2 = node$2.useColors;
  var node_7$2 = node$2.colors;
  var node_8$2 = node$2.inspectOpts;

  var src$2 = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process !== 'undefined' && process.type === 'renderer') {
    module.exports = browser$2;
  } else {
    module.exports = node$2;
  }
  });

  var Buffer$1 = buffer.Buffer;

  var safer = {};

  var key;

  for (key in buffer) {
    if (!buffer.hasOwnProperty(key)) continue
    if (key === 'SlowBuffer' || key === 'Buffer') continue
    safer[key] = buffer[key];
  }

  var Safer = safer.Buffer = {};
  for (key in Buffer$1) {
    if (!Buffer$1.hasOwnProperty(key)) continue
    if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
    Safer[key] = Buffer$1[key];
  }

  safer.Buffer.prototype = Buffer$1.prototype;

  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function (value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
      }
      if (value && typeof value.length === 'undefined') {
        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
      }
      return Buffer$1(value, encodingOrOffset, length)
    };
  }

  if (!Safer.alloc) {
    Safer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
      var buf = Buffer$1(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf
    };
  }

  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
    } catch (e) {
      // we can't determine kStringMaxLength in environments where process.binding
      // is unsupported, so let's not set it
    }
  }

  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }

  var safer_1 = safer;

  var BOMChar = '\uFEFF';

  var PrependBOM = PrependBOMWrapper;
  function PrependBOMWrapper(encoder, options) {
      this.encoder = encoder;
      this.addBOM = true;
  }

  PrependBOMWrapper.prototype.write = function(str) {
      if (this.addBOM) {
          str = BOMChar + str;
          this.addBOM = false;
      }

      return this.encoder.write(str);
  };

  PrependBOMWrapper.prototype.end = function() {
      return this.encoder.end();
  };


  //------------------------------------------------------------------------------

  var StripBOM = StripBOMWrapper;
  function StripBOMWrapper(decoder, options) {
      this.decoder = decoder;
      this.pass = false;
      this.options = options || {};
  }

  StripBOMWrapper.prototype.write = function(buf) {
      var res = this.decoder.write(buf);
      if (this.pass || !res)
          return res;

      if (res[0] === BOMChar) {
          res = res.slice(1);
          if (typeof this.options.stripBOM === 'function')
              this.options.stripBOM();
      }

      this.pass = true;
      return res;
  };

  StripBOMWrapper.prototype.end = function() {
      return this.decoder.end();
  };

  var bomHandling = {
  	PrependBOM: PrependBOM,
  	StripBOM: StripBOM
  };

  var Buffer$2 = safer_1.Buffer;

  // Export Node.js internal encodings.

  var internal = {
      // Encodings
      utf8:   { type: "_internal", bomAware: true},
      cesu8:  { type: "_internal", bomAware: true},
      unicode11utf8: "utf8",

      ucs2:   { type: "_internal", bomAware: true},
      utf16le: "ucs2",

      binary: { type: "_internal" },
      base64: { type: "_internal" },
      hex:    { type: "_internal" },

      // Codec.
      _internal: InternalCodec,
  };

  //------------------------------------------------------------------------------

  function InternalCodec(codecOptions, iconv) {
      this.enc = codecOptions.encodingName;
      this.bomAware = codecOptions.bomAware;

      if (this.enc === "base64")
          this.encoder = InternalEncoderBase64;
      else if (this.enc === "cesu8") {
          this.enc = "utf8"; // Use utf8 for decoding.
          this.encoder = InternalEncoderCesu8;

          // Add decoder for versions of Node not supporting CESU-8
          if (Buffer$2.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
              this.decoder = InternalDecoderCesu8;
              this.defaultCharUnicode = iconv.defaultCharUnicode;
          }
      }
  }

  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;

  //------------------------------------------------------------------------------

  // We use node.js internal decoder. Its signature is the same as ours.
  var StringDecoder = string_decoder.StringDecoder;

  if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
      StringDecoder.prototype.end = function() {};


  function InternalDecoder(options, codec) {
      StringDecoder.call(this, codec.enc);
  }

  InternalDecoder.prototype = StringDecoder.prototype;


  //------------------------------------------------------------------------------
  // Encoder is mostly trivial

  function InternalEncoder(options, codec) {
      this.enc = codec.enc;
  }

  InternalEncoder.prototype.write = function(str) {
      return Buffer$2.from(str, this.enc);
  };

  InternalEncoder.prototype.end = function() {
  };


  //------------------------------------------------------------------------------
  // Except base64 encoder, which must keep its state.

  function InternalEncoderBase64(options, codec) {
      this.prevStr = '';
  }

  InternalEncoderBase64.prototype.write = function(str) {
      str = this.prevStr + str;
      var completeQuads = str.length - (str.length % 4);
      this.prevStr = str.slice(completeQuads);
      str = str.slice(0, completeQuads);

      return Buffer$2.from(str, "base64");
  };

  InternalEncoderBase64.prototype.end = function() {
      return Buffer$2.from(this.prevStr, "base64");
  };


  //------------------------------------------------------------------------------
  // CESU-8 encoder is also special.

  function InternalEncoderCesu8(options, codec) {
  }

  InternalEncoderCesu8.prototype.write = function(str) {
      var buf = Buffer$2.alloc(str.length * 3), bufIdx = 0;
      for (var i = 0; i < str.length; i++) {
          var charCode = str.charCodeAt(i);
          // Naive implementation, but it works because CESU-8 is especially easy
          // to convert from UTF-16 (which all JS strings are encoded in).
          if (charCode < 0x80)
              buf[bufIdx++] = charCode;
          else if (charCode < 0x800) {
              buf[bufIdx++] = 0xC0 + (charCode >>> 6);
              buf[bufIdx++] = 0x80 + (charCode & 0x3f);
          }
          else { // charCode will always be < 0x10000 in javascript.
              buf[bufIdx++] = 0xE0 + (charCode >>> 12);
              buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
              buf[bufIdx++] = 0x80 + (charCode & 0x3f);
          }
      }
      return buf.slice(0, bufIdx);
  };

  InternalEncoderCesu8.prototype.end = function() {
  };

  //------------------------------------------------------------------------------
  // CESU-8 decoder is not implemented in Node v4.0+

  function InternalDecoderCesu8(options, codec) {
      this.acc = 0;
      this.contBytes = 0;
      this.accBytes = 0;
      this.defaultCharUnicode = codec.defaultCharUnicode;
  }

  InternalDecoderCesu8.prototype.write = function(buf) {
      var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
          res = '';
      for (var i = 0; i < buf.length; i++) {
          var curByte = buf[i];
          if ((curByte & 0xC0) !== 0x80) { // Leading byte
              if (contBytes > 0) { // Previous code is invalid
                  res += this.defaultCharUnicode;
                  contBytes = 0;
              }

              if (curByte < 0x80) { // Single-byte code
                  res += String.fromCharCode(curByte);
              } else if (curByte < 0xE0) { // Two-byte code
                  acc = curByte & 0x1F;
                  contBytes = 1; accBytes = 1;
              } else if (curByte < 0xF0) { // Three-byte code
                  acc = curByte & 0x0F;
                  contBytes = 2; accBytes = 1;
              } else { // Four or more are not supported for CESU-8.
                  res += this.defaultCharUnicode;
              }
          } else { // Continuation byte
              if (contBytes > 0) { // We're waiting for it.
                  acc = (acc << 6) | (curByte & 0x3f);
                  contBytes--; accBytes++;
                  if (contBytes === 0) {
                      // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                      if (accBytes === 2 && acc < 0x80 && acc > 0)
                          res += this.defaultCharUnicode;
                      else if (accBytes === 3 && acc < 0x800)
                          res += this.defaultCharUnicode;
                      else
                          // Actually add character.
                          res += String.fromCharCode(acc);
                  }
              } else { // Unexpected continuation byte
                  res += this.defaultCharUnicode;
              }
          }
      }
      this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
      return res;
  };

  InternalDecoderCesu8.prototype.end = function() {
      var res = 0;
      if (this.contBytes > 0)
          res += this.defaultCharUnicode;
      return res;
  };

  var Buffer$3 = safer_1.Buffer;

  // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

  // == UTF16-BE codec. ==========================================================

  var utf16be = Utf16BECodec;
  function Utf16BECodec() {
  }

  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;


  // -- Encoding

  function Utf16BEEncoder() {
  }

  Utf16BEEncoder.prototype.write = function(str) {
      var buf = Buffer$3.from(str, 'ucs2');
      for (var i = 0; i < buf.length; i += 2) {
          var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
      }
      return buf;
  };

  Utf16BEEncoder.prototype.end = function() {
  };


  // -- Decoding

  function Utf16BEDecoder() {
      this.overflowByte = -1;
  }

  Utf16BEDecoder.prototype.write = function(buf) {
      if (buf.length == 0)
          return '';

      var buf2 = Buffer$3.alloc(buf.length + 1),
          i = 0, j = 0;

      if (this.overflowByte !== -1) {
          buf2[0] = buf[0];
          buf2[1] = this.overflowByte;
          i = 1; j = 2;
      }

      for (; i < buf.length-1; i += 2, j+= 2) {
          buf2[j] = buf[i+1];
          buf2[j+1] = buf[i];
      }

      this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

      return buf2.slice(0, j).toString('ucs2');
  };

  Utf16BEDecoder.prototype.end = function() {
  };


  // == UTF-16 codec =============================================================
  // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
  // Defaults to UTF-16LE, as it's prevalent and default in Node.
  // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
  // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

  // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

  var utf16_1 = Utf16Codec;
  function Utf16Codec(codecOptions, iconv) {
      this.iconv = iconv;
  }

  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;


  // -- Encoding (pass-through)

  function Utf16Encoder(options, codec) {
      options = options || {};
      if (options.addBOM === undefined)
          options.addBOM = true;
      this.encoder = codec.iconv.getEncoder('utf-16le', options);
  }

  Utf16Encoder.prototype.write = function(str) {
      return this.encoder.write(str);
  };

  Utf16Encoder.prototype.end = function() {
      return this.encoder.end();
  };


  // -- Decoding

  function Utf16Decoder(options, codec) {
      this.decoder = null;
      this.initialBytes = [];
      this.initialBytesLen = 0;

      this.options = options || {};
      this.iconv = codec.iconv;
  }

  Utf16Decoder.prototype.write = function(buf) {
      if (!this.decoder) {
          // Codec is not chosen yet. Accumulate initial bytes.
          this.initialBytes.push(buf);
          this.initialBytesLen += buf.length;
          
          if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
              return '';

          // We have enough bytes -> detect endianness.
          var buf = Buffer$3.concat(this.initialBytes),
              encoding = detectEncoding(buf, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          this.initialBytes.length = this.initialBytesLen = 0;
      }

      return this.decoder.write(buf);
  };

  Utf16Decoder.prototype.end = function() {
      if (!this.decoder) {
          var buf = Buffer$3.concat(this.initialBytes),
              encoding = detectEncoding(buf, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);

          var res = this.decoder.write(buf),
              trail = this.decoder.end();

          return trail ? (res + trail) : res;
      }
      return this.decoder.end();
  };

  function detectEncoding(buf, defaultEncoding) {
      var enc = defaultEncoding || 'utf-16le';

      if (buf.length >= 2) {
          // Check BOM.
          if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
              enc = 'utf-16be';
          else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
              enc = 'utf-16le';
          else {
              // No BOM found. Try to deduce encoding from initial content.
              // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
              // So, we count ASCII as if it was LE or BE, and decide from that.
              var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                  _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

              for (var i = 0; i < _len; i += 2) {
                  if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                  if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
              }

              if (asciiCharsBE > asciiCharsLE)
                  enc = 'utf-16be';
              else if (asciiCharsBE < asciiCharsLE)
                  enc = 'utf-16le';
          }
      }

      return enc;
  }

  var utf16 = {
  	utf16be: utf16be,
  	utf16: utf16_1
  };

  var Buffer$4 = safer_1.Buffer;

  // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
  // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

  var utf7_1 = Utf7Codec;
  var unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
  function Utf7Codec(codecOptions, iconv) {
      this.iconv = iconv;
  }
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;


  // -- Encoding

  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

  function Utf7Encoder(options, codec) {
      this.iconv = codec.iconv;
  }

  Utf7Encoder.prototype.write = function(str) {
      // Naive implementation.
      // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
      return Buffer$4.from(str.replace(nonDirectChars, function(chunk) {
          return "+" + (chunk === '+' ? '' : 
              this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
              + "-";
      }.bind(this)));
  };

  Utf7Encoder.prototype.end = function() {
  };


  // -- Decoding

  function Utf7Decoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = '';
  }

  var base64Regex = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (var i$1 = 0; i$1 < 256; i$1++)
      base64Chars[i$1] = base64Regex.test(String.fromCharCode(i$1));

  var plusChar = '+'.charCodeAt(0), 
      minusChar = '-'.charCodeAt(0),
      andChar = '&'.charCodeAt(0);

  Utf7Decoder.prototype.write = function(buf) {
      var res = "", lastI = 0,
          inBase64 = this.inBase64,
          base64Accum = this.base64Accum;

      // The decoder is more involved as we must handle chunks in stream.

      for (var i = 0; i < buf.length; i++) {
          if (!inBase64) { // We're in direct mode.
              // Write direct chars until '+'
              if (buf[i] == plusChar) {
                  res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                  lastI = i+1;
                  inBase64 = true;
              }
          } else { // We decode base64.
              if (!base64Chars[buf[i]]) { // Base64 ended.
                  if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                      res += "+";
                  } else {
                      var b64str = base64Accum + buf.slice(lastI, i).toString();
                      res += this.iconv.decode(Buffer$4.from(b64str, 'base64'), "utf16-be");
                  }

                  if (buf[i] != minusChar) // Minus is absorbed after base64.
                      i--;

                  lastI = i+1;
                  inBase64 = false;
                  base64Accum = '';
              }
          }
      }

      if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
      } else {
          var b64str = base64Accum + buf.slice(lastI).toString();

          var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
          base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
          b64str = b64str.slice(0, canBeDecoded);

          res += this.iconv.decode(Buffer$4.from(b64str, 'base64'), "utf16-be");
      }

      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;

      return res;
  };

  Utf7Decoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
          res = this.iconv.decode(Buffer$4.from(this.base64Accum, 'base64'), "utf16-be");

      this.inBase64 = false;
      this.base64Accum = '';
      return res;
  };


  // UTF-7-IMAP codec.
  // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
  // Differences:
  //  * Base64 part is started by "&" instead of "+"
  //  * Direct characters are 0x20-0x7E, except "&" (0x26)
  //  * In Base64, "," is used instead of "/"
  //  * Base64 must not be used to represent direct characters.
  //  * No implicit shift back from Base64 (should always end with '-')
  //  * String must end in non-shifted position.
  //  * "-&" while in base64 is not allowed.


  var utf7imap = Utf7IMAPCodec;
  function Utf7IMAPCodec(codecOptions, iconv) {
      this.iconv = iconv;
  }
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;


  // -- Encoding

  function Utf7IMAPEncoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = Buffer$4.alloc(6);
      this.base64AccumIdx = 0;
  }

  Utf7IMAPEncoder.prototype.write = function(str) {
      var inBase64 = this.inBase64,
          base64Accum = this.base64Accum,
          base64AccumIdx = this.base64AccumIdx,
          buf = Buffer$4.alloc(str.length*5 + 10), bufIdx = 0;

      for (var i = 0; i < str.length; i++) {
          var uChar = str.charCodeAt(i);
          if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
              if (inBase64) {
                  if (base64AccumIdx > 0) {
                      bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                      base64AccumIdx = 0;
                  }

                  buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                  inBase64 = false;
              }

              if (!inBase64) {
                  buf[bufIdx++] = uChar; // Write direct character

                  if (uChar === andChar)  // Ampersand -> '&-'
                      buf[bufIdx++] = minusChar;
              }

          } else { // Non-direct character
              if (!inBase64) {
                  buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                  inBase64 = true;
              }
              if (inBase64) {
                  base64Accum[base64AccumIdx++] = uChar >> 8;
                  base64Accum[base64AccumIdx++] = uChar & 0xFF;

                  if (base64AccumIdx == base64Accum.length) {
                      bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                      base64AccumIdx = 0;
                  }
              }
          }
      }

      this.inBase64 = inBase64;
      this.base64AccumIdx = base64AccumIdx;

      return buf.slice(0, bufIdx);
  };

  Utf7IMAPEncoder.prototype.end = function() {
      var buf = Buffer$4.alloc(10), bufIdx = 0;
      if (this.inBase64) {
          if (this.base64AccumIdx > 0) {
              bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
              this.base64AccumIdx = 0;
          }

          buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
          this.inBase64 = false;
      }

      return buf.slice(0, bufIdx);
  };


  // -- Decoding

  function Utf7IMAPDecoder(options, codec) {
      this.iconv = codec.iconv;
      this.inBase64 = false;
      this.base64Accum = '';
  }

  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[','.charCodeAt(0)] = true;

  Utf7IMAPDecoder.prototype.write = function(buf) {
      var res = "", lastI = 0,
          inBase64 = this.inBase64,
          base64Accum = this.base64Accum;

      // The decoder is more involved as we must handle chunks in stream.
      // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

      for (var i = 0; i < buf.length; i++) {
          if (!inBase64) { // We're in direct mode.
              // Write direct chars until '&'
              if (buf[i] == andChar) {
                  res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                  lastI = i+1;
                  inBase64 = true;
              }
          } else { // We decode base64.
              if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                  if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                      res += "&";
                  } else {
                      var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                      res += this.iconv.decode(Buffer$4.from(b64str, 'base64'), "utf16-be");
                  }

                  if (buf[i] != minusChar) // Minus may be absorbed after base64.
                      i--;

                  lastI = i+1;
                  inBase64 = false;
                  base64Accum = '';
              }
          }
      }

      if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
      } else {
          var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

          var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
          base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
          b64str = b64str.slice(0, canBeDecoded);

          res += this.iconv.decode(Buffer$4.from(b64str, 'base64'), "utf16-be");
      }

      this.inBase64 = inBase64;
      this.base64Accum = base64Accum;

      return res;
  };

  Utf7IMAPDecoder.prototype.end = function() {
      var res = "";
      if (this.inBase64 && this.base64Accum.length > 0)
          res = this.iconv.decode(Buffer$4.from(this.base64Accum, 'base64'), "utf16-be");

      this.inBase64 = false;
      this.base64Accum = '';
      return res;
  };

  var utf7 = {
  	utf7: utf7_1,
  	unicode11utf7: unicode11utf7,
  	utf7imap: utf7imap
  };

  var Buffer$5 = safer_1.Buffer;

  // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
  // correspond to encoded bytes (if 128 - then lower half is ASCII). 

  var _sbcs = SBCSCodec;
  function SBCSCodec(codecOptions, iconv) {
      if (!codecOptions)
          throw new Error("SBCS codec is called without the data.")
      
      // Prepare char buffer for decoding.
      if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
          throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
      
      if (codecOptions.chars.length === 128) {
          var asciiString = "";
          for (var i = 0; i < 128; i++)
              asciiString += String.fromCharCode(i);
          codecOptions.chars = asciiString + codecOptions.chars;
      }

      this.decodeBuf = Buffer$5.from(codecOptions.chars, 'ucs2');
      
      // Encoding buffer.
      var encodeBuf = Buffer$5.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

      for (var i = 0; i < codecOptions.chars.length; i++)
          encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

      this.encodeBuf = encodeBuf;
  }

  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;


  function SBCSEncoder(options, codec) {
      this.encodeBuf = codec.encodeBuf;
  }

  SBCSEncoder.prototype.write = function(str) {
      var buf = Buffer$5.alloc(str.length);
      for (var i = 0; i < str.length; i++)
          buf[i] = this.encodeBuf[str.charCodeAt(i)];
      
      return buf;
  };

  SBCSEncoder.prototype.end = function() {
  };


  function SBCSDecoder(options, codec) {
      this.decodeBuf = codec.decodeBuf;
  }

  SBCSDecoder.prototype.write = function(buf) {
      // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
      var decodeBuf = this.decodeBuf;
      var newBuf = Buffer$5.alloc(buf.length*2);
      var idx1 = 0, idx2 = 0;
      for (var i = 0; i < buf.length; i++) {
          idx1 = buf[i]*2; idx2 = i*2;
          newBuf[idx2] = decodeBuf[idx1];
          newBuf[idx2+1] = decodeBuf[idx1+1];
      }
      return newBuf.toString('ucs2');
  };

  SBCSDecoder.prototype.end = function() {
  };

  var sbcsCodec = {
  	_sbcs: _sbcs
  };

  // Manually added data to be used by sbcs codec in addition to generated one.

  var sbcsData = {
      // Not supported by iconv, not sure why.
      "10029": "maccenteuro",
      "maccenteuro": {
          "type": "_sbcs",
          "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
      },

      "808": "cp808",
      "ibm808": "cp808",
      "cp808": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
      },

      "mik": {
          "type": "_sbcs",
          "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },

      // Aliases of generated encodings.
      "ascii8bit": "ascii",
      "usascii": "ascii",
      "ansix34": "ascii",
      "ansix341968": "ascii",
      "ansix341986": "ascii",
      "csascii": "ascii",
      "cp367": "ascii",
      "ibm367": "ascii",
      "isoir6": "ascii",
      "iso646us": "ascii",
      "iso646irv": "ascii",
      "us": "ascii",

      "latin1": "iso88591",
      "latin2": "iso88592",
      "latin3": "iso88593",
      "latin4": "iso88594",
      "latin5": "iso88599",
      "latin6": "iso885910",
      "latin7": "iso885913",
      "latin8": "iso885914",
      "latin9": "iso885915",
      "latin10": "iso885916",

      "csisolatin1": "iso88591",
      "csisolatin2": "iso88592",
      "csisolatin3": "iso88593",
      "csisolatin4": "iso88594",
      "csisolatincyrillic": "iso88595",
      "csisolatinarabic": "iso88596",
      "csisolatingreek" : "iso88597",
      "csisolatinhebrew": "iso88598",
      "csisolatin5": "iso88599",
      "csisolatin6": "iso885910",

      "l1": "iso88591",
      "l2": "iso88592",
      "l3": "iso88593",
      "l4": "iso88594",
      "l5": "iso88599",
      "l6": "iso885910",
      "l7": "iso885913",
      "l8": "iso885914",
      "l9": "iso885915",
      "l10": "iso885916",

      "isoir14": "iso646jp",
      "isoir57": "iso646cn",
      "isoir100": "iso88591",
      "isoir101": "iso88592",
      "isoir109": "iso88593",
      "isoir110": "iso88594",
      "isoir144": "iso88595",
      "isoir127": "iso88596",
      "isoir126": "iso88597",
      "isoir138": "iso88598",
      "isoir148": "iso88599",
      "isoir157": "iso885910",
      "isoir166": "tis620",
      "isoir179": "iso885913",
      "isoir199": "iso885914",
      "isoir203": "iso885915",
      "isoir226": "iso885916",

      "cp819": "iso88591",
      "ibm819": "iso88591",

      "cyrillic": "iso88595",

      "arabic": "iso88596",
      "arabic8": "iso88596",
      "ecma114": "iso88596",
      "asmo708": "iso88596",

      "greek" : "iso88597",
      "greek8" : "iso88597",
      "ecma118" : "iso88597",
      "elot928" : "iso88597",

      "hebrew": "iso88598",
      "hebrew8": "iso88598",

      "turkish": "iso88599",
      "turkish8": "iso88599",

      "thai": "iso885911",
      "thai8": "iso885911",

      "celtic": "iso885914",
      "celtic8": "iso885914",
      "isoceltic": "iso885914",

      "tis6200": "tis620",
      "tis62025291": "tis620",
      "tis62025330": "tis620",

      "10000": "macroman",
      "10006": "macgreek",
      "10007": "maccyrillic",
      "10079": "maciceland",
      "10081": "macturkish",

      "cspc8codepage437": "cp437",
      "cspc775baltic": "cp775",
      "cspc850multilingual": "cp850",
      "cspcp852": "cp852",
      "cspc862latinhebrew": "cp862",
      "cpgr": "cp869",

      "msee": "cp1250",
      "mscyrl": "cp1251",
      "msansi": "cp1252",
      "msgreek": "cp1253",
      "msturk": "cp1254",
      "mshebr": "cp1255",
      "msarab": "cp1256",
      "winbaltrim": "cp1257",

      "cp20866": "koi8r",
      "20866": "koi8r",
      "ibm878": "koi8r",
      "cskoi8r": "koi8r",

      "cp21866": "koi8u",
      "21866": "koi8u",
      "ibm1168": "koi8u",

      "strk10482002": "rk1048",

      "tcvn5712": "tcvn",
      "tcvn57121": "tcvn",

      "gb198880": "iso646cn",
      "cn": "iso646cn",

      "csiso14jisc6220ro": "iso646jp",
      "jisc62201969ro": "iso646jp",
      "jp": "iso646jp",

      "cshproman8": "hproman8",
      "r8": "hproman8",
      "roman8": "hproman8",
      "xroman8": "hproman8",
      "ibm1051": "hproman8",

      "mac": "macintosh",
      "csmacintosh": "macintosh",
  };

  // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
  var sbcsDataGenerated = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    "windows874": {
      "type": "_sbcs",
      "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "win874": "windows874",
    "cp874": "windows874",
    "windows1250": {
      "type": "_sbcs",
      "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    "win1250": "windows1250",
    "cp1250": "windows1250",
    "windows1251": {
      "type": "_sbcs",
      "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "win1251": "windows1251",
    "cp1251": "windows1251",
    "windows1252": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "win1252": "windows1252",
    "cp1252": "windows1252",
    "windows1253": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    "win1253": "windows1253",
    "cp1253": "windows1253",
    "windows1254": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    "win1254": "windows1254",
    "cp1254": "windows1254",
    "windows1255": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    "win1255": "windows1255",
    "cp1255": "windows1255",
    "windows1256": {
      "type": "_sbcs",
      "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
    },
    "win1256": "windows1256",
    "cp1256": "windows1256",
    "windows1257": {
      "type": "_sbcs",
      "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
    },
    "win1257": "windows1257",
    "cp1257": "windows1257",
    "windows1258": {
      "type": "_sbcs",
      "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "win1258": "windows1258",
    "cp1258": "windows1258",
    "iso88591": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "cp28591": "iso88591",
    "iso88592": {
      "type": "_sbcs",
      "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    "cp28592": "iso88592",
    "iso88593": {
      "type": "_sbcs",
      "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
    },
    "cp28593": "iso88593",
    "iso88594": {
      "type": "_sbcs",
      "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
    },
    "cp28594": "iso88594",
    "iso88595": {
      "type": "_sbcs",
      "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
    },
    "cp28595": "iso88595",
    "iso88596": {
      "type": "_sbcs",
      "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
    },
    "cp28596": "iso88596",
    "iso88597": {
      "type": "_sbcs",
      "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    "cp28597": "iso88597",
    "iso88598": {
      "type": "_sbcs",
      "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    "cp28598": "iso88598",
    "iso88599": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    "cp28599": "iso88599",
    "iso885910": {
      "type": "_sbcs",
      "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
    },
    "cp28600": "iso885910",
    "iso885911": {
      "type": "_sbcs",
      "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "cp28601": "iso885911",
    "iso885913": {
      "type": "_sbcs",
      "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
    },
    "cp28603": "iso885913",
    "iso885914": {
      "type": "_sbcs",
      "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
    },
    "cp28604": "iso885914",
    "iso885915": {
      "type": "_sbcs",
      "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "cp28605": "iso885915",
    "iso885916": {
      "type": "_sbcs",
      "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
    },
    "cp28606": "iso885916",
    "cp437": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm437": "cp437",
    "csibm437": "cp437",
    "cp737": {
      "type": "_sbcs",
      "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
    },
    "ibm737": "cp737",
    "csibm737": "cp737",
    "cp775": {
      "type": "_sbcs",
      "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
    },
    "ibm775": "cp775",
    "csibm775": "cp775",
    "cp850": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm850": "cp850",
    "csibm850": "cp850",
    "cp852": {
      "type": "_sbcs",
      "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
    },
    "ibm852": "cp852",
    "csibm852": "cp852",
    "cp855": {
      "type": "_sbcs",
      "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
    },
    "ibm855": "cp855",
    "csibm855": "cp855",
    "cp856": {
      "type": "_sbcs",
      "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm856": "cp856",
    "csibm856": "cp856",
    "cp857": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
    },
    "ibm857": "cp857",
    "csibm857": "cp857",
    "cp858": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    "ibm858": "cp858",
    "csibm858": "cp858",
    "cp860": {
      "type": "_sbcs",
      "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm860": "cp860",
    "csibm860": "cp860",
    "cp861": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm861": "cp861",
    "csibm861": "cp861",
    "cp862": {
      "type": "_sbcs",
      "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm862": "cp862",
    "csibm862": "cp862",
    "cp863": {
      "type": "_sbcs",
      "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm863": "cp863",
    "csibm863": "cp863",
    "cp864": {
      "type": "_sbcs",
      "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
    },
    "ibm864": "cp864",
    "csibm864": "cp864",
    "cp865": {
      "type": "_sbcs",
      "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    "ibm865": "cp865",
    "csibm865": "cp865",
    "cp866": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
    },
    "ibm866": "cp866",
    "csibm866": "cp866",
    "cp869": {
      "type": "_sbcs",
      "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
    },
    "ibm869": "cp869",
    "csibm869": "cp869",
    "cp922": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
    },
    "ibm922": "cp922",
    "csibm922": "cp922",
    "cp1046": {
      "type": "_sbcs",
      "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
    },
    "ibm1046": "cp1046",
    "csibm1046": "cp1046",
    "cp1124": {
      "type": "_sbcs",
      "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
    },
    "ibm1124": "cp1124",
    "csibm1124": "cp1124",
    "cp1125": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
    },
    "ibm1125": "cp1125",
    "csibm1125": "cp1125",
    "cp1129": {
      "type": "_sbcs",
      "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "ibm1129": "cp1129",
    "csibm1129": "cp1129",
    "cp1133": {
      "type": "_sbcs",
      "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
    },
    "ibm1133": "cp1133",
    "csibm1133": "cp1133",
    "cp1161": {
      "type": "_sbcs",
      "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
    },
    "ibm1161": "cp1161",
    "csibm1161": "cp1161",
    "cp1162": {
      "type": "_sbcs",
      "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    "ibm1162": "cp1162",
    "csibm1162": "cp1162",
    "cp1163": {
      "type": "_sbcs",
      "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    "ibm1163": "cp1163",
    "csibm1163": "cp1163",
    "maccroatian": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
    },
    "maccyrillic": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    "macgreek": {
      "type": "_sbcs",
      "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
    },
    "maciceland": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macroman": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macromania": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macthai": {
      "type": "_sbcs",
      "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
    },
    "macturkish": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "macukraine": {
      "type": "_sbcs",
      "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    "koi8r": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8u": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8ru": {
      "type": "_sbcs",
      "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "koi8t": {
      "type": "_sbcs",
      "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    "armscii8": {
      "type": "_sbcs",
      "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
    },
    "rk1048": {
      "type": "_sbcs",
      "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "tcvn": {
      "type": "_sbcs",
      "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
    },
    "georgianacademy": {
      "type": "_sbcs",
      "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "georgianps": {
      "type": "_sbcs",
      "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    "pt154": {
      "type": "_sbcs",
      "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    "viscii": {
      "type": "_sbcs",
      "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
    },
    "iso646cn": {
      "type": "_sbcs",
      "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
    },
    "iso646jp": {
      "type": "_sbcs",
      "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
    },
    "hproman8": {
      "type": "_sbcs",
      "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
    },
    "macintosh": {
      "type": "_sbcs",
      "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    "ascii": {
      "type": "_sbcs",
      "chars": "��������������������������������������������������������������������������������������������������������������������������������"
    },
    "tis620": {
      "type": "_sbcs",
      "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    }
  };

  var Buffer$6 = safer_1.Buffer;

  // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
  // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
  // To save memory and loading time, we read table files only when requested.

  var _dbcs = DBCSCodec;

  var UNASSIGNED = -1,
      GB18030_CODE = -2,
      SEQ_START  = -10,
      NODE_START = -1000,
      UNASSIGNED_NODE = new Array(0x100),
      DEF_CHAR = -1;

  for (var i$2 = 0; i$2 < 0x100; i$2++)
      UNASSIGNED_NODE[i$2] = UNASSIGNED;


  // Class DBCSCodec reads and initializes mapping tables.
  function DBCSCodec(codecOptions, iconv) {
      this.encodingName = codecOptions.encodingName;
      if (!codecOptions)
          throw new Error("DBCS codec is called without the data.")
      if (!codecOptions.table)
          throw new Error("Encoding '" + this.encodingName + "' has no data.");

      // Load tables.
      var mappingTable = codecOptions.table();


      // Decode tables: MBCS -> Unicode.

      // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
      // Trie root is decodeTables[0].
      // Values: >=  0 -> unicode character code. can be > 0xFFFF
      //         == UNASSIGNED -> unknown/unassigned sequence.
      //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
      //         <= NODE_START -> index of the next node in our trie to process next byte.
      //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
      this.decodeTables = [];
      this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

      // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
      this.decodeTableSeq = [];

      // Actual mapping tables consist of chunks. Use them to fill up decode tables.
      for (var i = 0; i < mappingTable.length; i++)
          this._addDecodeChunk(mappingTable[i]);

      this.defaultCharUnicode = iconv.defaultCharUnicode;

      
      // Encode tables: Unicode -> DBCS.

      // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
      // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
      // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
      //         == UNASSIGNED -> no conversion found. Output a default char.
      //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
      this.encodeTable = [];
      
      // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
      // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
      // means end of sequence (needed when one sequence is a strict subsequence of another).
      // Objects are kept separately from encodeTable to increase performance.
      this.encodeTableSeq = [];

      // Some chars can be decoded, but need not be encoded.
      var skipEncodeChars = {};
      if (codecOptions.encodeSkipVals)
          for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
              var val = codecOptions.encodeSkipVals[i];
              if (typeof val === 'number')
                  skipEncodeChars[val] = true;
              else
                  for (var j = val.from; j <= val.to; j++)
                      skipEncodeChars[j] = true;
          }
          
      // Use decode trie to recursively fill out encode tables.
      this._fillEncodeTable(0, 0, skipEncodeChars);

      // Add more encoding pairs when needed.
      if (codecOptions.encodeAdd) {
          for (var uChar in codecOptions.encodeAdd)
              if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                  this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
      }

      this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
      if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
      if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);


      // Load & create GB18030 tables when needed.
      if (typeof codecOptions.gb18030 === 'function') {
          this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

          // Add GB18030 decode tables.
          var thirdByteNodeIdx = this.decodeTables.length;
          var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

          var fourthByteNodeIdx = this.decodeTables.length;
          var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

          for (var i = 0x81; i <= 0xFE; i++) {
              var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
              var secondByteNode = this.decodeTables[secondByteNodeIdx];
              for (var j = 0x30; j <= 0x39; j++)
                  secondByteNode[j] = NODE_START - thirdByteNodeIdx;
          }
          for (var i = 0x81; i <= 0xFE; i++)
              thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
          for (var i = 0x30; i <= 0x39; i++)
              fourthByteNode[i] = GB18030_CODE;
      }        
  }

  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;

  // Decoder helpers
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
      var bytes = [];
      for (; addr > 0; addr >>= 8)
          bytes.push(addr & 0xFF);
      if (bytes.length == 0)
          bytes.push(0);

      var node = this.decodeTables[0];
      for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
          var val = node[bytes[i]];

          if (val == UNASSIGNED) { // Create new node.
              node[bytes[i]] = NODE_START - this.decodeTables.length;
              this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
          }
          else if (val <= NODE_START) { // Existing node.
              node = this.decodeTables[NODE_START - val];
          }
          else
              throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
      }
      return node;
  };


  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
      // First element of chunk is the hex mbcs code where we start.
      var curAddr = parseInt(chunk[0], 16);

      // Choose the decoding node where we'll write our chars.
      var writeTable = this._getDecodeTrieNode(curAddr);
      curAddr = curAddr & 0xFF;

      // Write all other elements of the chunk to the table.
      for (var k = 1; k < chunk.length; k++) {
          var part = chunk[k];
          if (typeof part === "string") { // String, write as-is.
              for (var l = 0; l < part.length;) {
                  var code = part.charCodeAt(l++);
                  if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                      var codeTrail = part.charCodeAt(l++);
                      if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                          writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                      else
                          throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                  }
                  else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                      var len = 0xFFF - code + 2;
                      var seq = [];
                      for (var m = 0; m < len; m++)
                          seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                      writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                      this.decodeTableSeq.push(seq);
                  }
                  else
                      writeTable[curAddr++] = code; // Basic char
              }
          } 
          else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
              var charCode = writeTable[curAddr - 1] + 1;
              for (var l = 0; l < part; l++)
                  writeTable[curAddr++] = charCode++;
          }
          else
              throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
      }
      if (curAddr > 0xFF)
          throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };

  // Encoder helpers
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
      var high = uCode >> 8; // This could be > 0xFF because of astral characters.
      if (this.encodeTable[high] === undefined)
          this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
      return this.encodeTable[high];
  };

  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 0xFF;
      if (bucket[low] <= SEQ_START)
          this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
      else if (bucket[low] == UNASSIGNED)
          bucket[low] = dbcsCode;
  };

  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
      
      // Get the root of character tree according to first character of the sequence.
      var uCode = seq[0];
      var bucket = this._getEncodeBucket(uCode);
      var low = uCode & 0xFF;

      var node;
      if (bucket[low] <= SEQ_START) {
          // There's already a sequence with  - use it.
          node = this.encodeTableSeq[SEQ_START-bucket[low]];
      }
      else {
          // There was no sequence object - allocate a new one.
          node = {};
          if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
          bucket[low] = SEQ_START - this.encodeTableSeq.length;
          this.encodeTableSeq.push(node);
      }

      // Traverse the character tree, allocating new nodes as needed.
      for (var j = 1; j < seq.length-1; j++) {
          var oldVal = node[uCode];
          if (typeof oldVal === 'object')
              node = oldVal;
          else {
              node = node[uCode] = {};
              if (oldVal !== undefined)
                  node[DEF_CHAR] = oldVal;
          }
      }

      // Set the leaf to given dbcsCode.
      uCode = seq[seq.length-1];
      node[uCode] = dbcsCode;
  };

  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
      var node = this.decodeTables[nodeIdx];
      for (var i = 0; i < 0x100; i++) {
          var uCode = node[i];
          var mbCode = prefix + i;
          if (skipEncodeChars[mbCode])
              continue;

          if (uCode >= 0)
              this._setEncodeChar(uCode, mbCode);
          else if (uCode <= NODE_START)
              this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
          else if (uCode <= SEQ_START)
              this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
      }
  };



  // == Encoder ==================================================================

  function DBCSEncoder(options, codec) {
      // Encoder state
      this.leadSurrogate = -1;
      this.seqObj = undefined;
      
      // Static data
      this.encodeTable = codec.encodeTable;
      this.encodeTableSeq = codec.encodeTableSeq;
      this.defaultCharSingleByte = codec.defCharSB;
      this.gb18030 = codec.gb18030;
  }

  DBCSEncoder.prototype.write = function(str) {
      var newBuf = Buffer$6.alloc(str.length * (this.gb18030 ? 4 : 3)),
          leadSurrogate = this.leadSurrogate,
          seqObj = this.seqObj, nextChar = -1,
          i = 0, j = 0;

      while (true) {
          // 0. Get next character.
          if (nextChar === -1) {
              if (i == str.length) break;
              var uCode = str.charCodeAt(i++);
          }
          else {
              var uCode = nextChar;
              nextChar = -1;    
          }

          // 1. Handle surrogates.
          if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
              if (uCode < 0xDC00) { // We've got lead surrogate.
                  if (leadSurrogate === -1) {
                      leadSurrogate = uCode;
                      continue;
                  } else {
                      leadSurrogate = uCode;
                      // Double lead surrogate found.
                      uCode = UNASSIGNED;
                  }
              } else { // We've got trail surrogate.
                  if (leadSurrogate !== -1) {
                      uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                      leadSurrogate = -1;
                  } else {
                      // Incomplete surrogate pair - only trail surrogate found.
                      uCode = UNASSIGNED;
                  }
                  
              }
          }
          else if (leadSurrogate !== -1) {
              // Incomplete surrogate pair - only lead surrogate found.
              nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
              leadSurrogate = -1;
          }

          // 2. Convert uCode character.
          var dbcsCode = UNASSIGNED;
          if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
              var resCode = seqObj[uCode];
              if (typeof resCode === 'object') { // Sequence continues.
                  seqObj = resCode;
                  continue;

              } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                  dbcsCode = resCode;

              } else if (resCode == undefined) { // Current character is not part of the sequence.

                  // Try default character for this sequence
                  resCode = seqObj[DEF_CHAR];
                  if (resCode !== undefined) {
                      dbcsCode = resCode; // Found. Write it.
                      nextChar = uCode; // Current character will be written too in the next iteration.

                  }
              }
              seqObj = undefined;
          }
          else if (uCode >= 0) {  // Regular character
              var subtable = this.encodeTable[uCode >> 8];
              if (subtable !== undefined)
                  dbcsCode = subtable[uCode & 0xFF];
              
              if (dbcsCode <= SEQ_START) { // Sequence start
                  seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                  continue;
              }

              if (dbcsCode == UNASSIGNED && this.gb18030) {
                  // Use GB18030 algorithm to find character(s) to write.
                  var idx = findIdx(this.gb18030.uChars, uCode);
                  if (idx != -1) {
                      var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                      newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                      newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                      newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                      newBuf[j++] = 0x30 + dbcsCode;
                      continue;
                  }
              }
          }

          // 3. Write dbcsCode character.
          if (dbcsCode === UNASSIGNED)
              dbcsCode = this.defaultCharSingleByte;
          
          if (dbcsCode < 0x100) {
              newBuf[j++] = dbcsCode;
          }
          else if (dbcsCode < 0x10000) {
              newBuf[j++] = dbcsCode >> 8;   // high byte
              newBuf[j++] = dbcsCode & 0xFF; // low byte
          }
          else {
              newBuf[j++] = dbcsCode >> 16;
              newBuf[j++] = (dbcsCode >> 8) & 0xFF;
              newBuf[j++] = dbcsCode & 0xFF;
          }
      }

      this.seqObj = seqObj;
      this.leadSurrogate = leadSurrogate;
      return newBuf.slice(0, j);
  };

  DBCSEncoder.prototype.end = function() {
      if (this.leadSurrogate === -1 && this.seqObj === undefined)
          return; // All clean. Most often case.

      var newBuf = Buffer$6.alloc(10), j = 0;

      if (this.seqObj) { // We're in the sequence.
          var dbcsCode = this.seqObj[DEF_CHAR];
          if (dbcsCode !== undefined) { // Write beginning of the sequence.
              if (dbcsCode < 0x100) {
                  newBuf[j++] = dbcsCode;
              }
              else {
                  newBuf[j++] = dbcsCode >> 8;   // high byte
                  newBuf[j++] = dbcsCode & 0xFF; // low byte
              }
          }
          this.seqObj = undefined;
      }

      if (this.leadSurrogate !== -1) {
          // Incomplete surrogate pair - only lead surrogate found.
          newBuf[j++] = this.defaultCharSingleByte;
          this.leadSurrogate = -1;
      }
      
      return newBuf.slice(0, j);
  };

  // Export for testing
  DBCSEncoder.prototype.findIdx = findIdx;


  // == Decoder ==================================================================

  function DBCSDecoder(options, codec) {
      // Decoder state
      this.nodeIdx = 0;
      this.prevBuf = Buffer$6.alloc(0);

      // Static data
      this.decodeTables = codec.decodeTables;
      this.decodeTableSeq = codec.decodeTableSeq;
      this.defaultCharUnicode = codec.defaultCharUnicode;
      this.gb18030 = codec.gb18030;
  }

  DBCSDecoder.prototype.write = function(buf) {
      var newBuf = Buffer$6.alloc(buf.length*2),
          nodeIdx = this.nodeIdx, 
          prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
          seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
          uCode;

      if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
          prevBuf = Buffer$6.concat([prevBuf, buf.slice(0, 10)]);
      
      for (var i = 0, j = 0; i < buf.length; i++) {
          var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

          // Lookup in current trie node.
          var uCode = this.decodeTables[nodeIdx][curByte];

          if (uCode >= 0) ;
          else if (uCode === UNASSIGNED) { // Unknown char.
              // TODO: Callback with seq.
              //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
              i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
              uCode = this.defaultCharUnicode.charCodeAt(0);
          }
          else if (uCode === GB18030_CODE) {
              var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
              var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
              var idx = findIdx(this.gb18030.gbChars, ptr);
              uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
          }
          else if (uCode <= NODE_START) { // Go to next trie node.
              nodeIdx = NODE_START - uCode;
              continue;
          }
          else if (uCode <= SEQ_START) { // Output a sequence of chars.
              var seq = this.decodeTableSeq[SEQ_START - uCode];
              for (var k = 0; k < seq.length - 1; k++) {
                  uCode = seq[k];
                  newBuf[j++] = uCode & 0xFF;
                  newBuf[j++] = uCode >> 8;
              }
              uCode = seq[seq.length-1];
          }
          else
              throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

          // Write the character to buffer, handling higher planes using surrogate pair.
          if (uCode > 0xFFFF) { 
              uCode -= 0x10000;
              var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
              newBuf[j++] = uCodeLead & 0xFF;
              newBuf[j++] = uCodeLead >> 8;

              uCode = 0xDC00 + uCode % 0x400;
          }
          newBuf[j++] = uCode & 0xFF;
          newBuf[j++] = uCode >> 8;

          // Reset trie node.
          nodeIdx = 0; seqStart = i+1;
      }

      this.nodeIdx = nodeIdx;
      this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
      return newBuf.slice(0, j).toString('ucs2');
  };

  DBCSDecoder.prototype.end = function() {
      var ret = '';

      // Try to parse all remaining chars.
      while (this.prevBuf.length > 0) {
          // Skip 1 character in the buffer.
          ret += this.defaultCharUnicode;
          var buf = this.prevBuf.slice(1);

          // Parse remaining as usual.
          this.prevBuf = Buffer$6.alloc(0);
          this.nodeIdx = 0;
          if (buf.length > 0)
              ret += this.write(buf);
      }

      this.nodeIdx = 0;
      return ret;
  };

  // Binary search for GB18030. Returns largest i such that table[i] <= val.
  function findIdx(table, val) {
      if (table[0] > val)
          return -1;

      var l = 0, r = table.length;
      while (l < r-1) { // always table[l] <= val < table[r]
          var mid = l + Math.floor((r-l+1)/2);
          if (table[mid] <= val)
              l = mid;
          else
              r = mid;
      }
      return l;
  }

  var dbcsCodec = {
  	_dbcs: _dbcs
  };

  var shiftjis = [
  	[
  		"0",
  		"\u0000",
  		128
  	],
  	[
  		"a1",
  		"｡",
  		62
  	],
  	[
  		"8140",
  		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
  		9,
  		"＋－±×"
  	],
  	[
  		"8180",
  		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
  	],
  	[
  		"81b8",
  		"∈∋⊆⊇⊂⊃∪∩"
  	],
  	[
  		"81c8",
  		"∧∨￢⇒⇔∀∃"
  	],
  	[
  		"81da",
  		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
  	],
  	[
  		"81f0",
  		"Å‰♯♭♪†‡¶"
  	],
  	[
  		"81fc",
  		"◯"
  	],
  	[
  		"824f",
  		"０",
  		9
  	],
  	[
  		"8260",
  		"Ａ",
  		25
  	],
  	[
  		"8281",
  		"ａ",
  		25
  	],
  	[
  		"829f",
  		"ぁ",
  		82
  	],
  	[
  		"8340",
  		"ァ",
  		62
  	],
  	[
  		"8380",
  		"ム",
  		22
  	],
  	[
  		"839f",
  		"Α",
  		16,
  		"Σ",
  		6
  	],
  	[
  		"83bf",
  		"α",
  		16,
  		"σ",
  		6
  	],
  	[
  		"8440",
  		"А",
  		5,
  		"ЁЖ",
  		25
  	],
  	[
  		"8470",
  		"а",
  		5,
  		"ёж",
  		7
  	],
  	[
  		"8480",
  		"о",
  		17
  	],
  	[
  		"849f",
  		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
  	],
  	[
  		"8740",
  		"①",
  		19,
  		"Ⅰ",
  		9
  	],
  	[
  		"875f",
  		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
  	],
  	[
  		"877e",
  		"㍻"
  	],
  	[
  		"8780",
  		"〝〟№㏍℡㊤",
  		4,
  		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
  	],
  	[
  		"889f",
  		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
  	],
  	[
  		"8940",
  		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
  	],
  	[
  		"8980",
  		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
  	],
  	[
  		"8a40",
  		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
  	],
  	[
  		"8a80",
  		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
  	],
  	[
  		"8b40",
  		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
  	],
  	[
  		"8b80",
  		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
  	],
  	[
  		"8c40",
  		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
  	],
  	[
  		"8c80",
  		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
  	],
  	[
  		"8d40",
  		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
  	],
  	[
  		"8d80",
  		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
  	],
  	[
  		"8e40",
  		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
  	],
  	[
  		"8e80",
  		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
  	],
  	[
  		"8f40",
  		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
  	],
  	[
  		"8f80",
  		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
  	],
  	[
  		"9040",
  		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
  	],
  	[
  		"9080",
  		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
  	],
  	[
  		"9140",
  		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
  	],
  	[
  		"9180",
  		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
  	],
  	[
  		"9240",
  		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
  	],
  	[
  		"9280",
  		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
  	],
  	[
  		"9340",
  		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
  	],
  	[
  		"9380",
  		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
  	],
  	[
  		"9440",
  		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
  	],
  	[
  		"9480",
  		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
  	],
  	[
  		"9540",
  		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
  	],
  	[
  		"9580",
  		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
  	],
  	[
  		"9640",
  		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
  	],
  	[
  		"9680",
  		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
  	],
  	[
  		"9740",
  		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
  	],
  	[
  		"9780",
  		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
  	],
  	[
  		"9840",
  		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
  	],
  	[
  		"989f",
  		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
  	],
  	[
  		"9940",
  		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
  	],
  	[
  		"9980",
  		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
  	],
  	[
  		"9a40",
  		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
  	],
  	[
  		"9a80",
  		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
  	],
  	[
  		"9b40",
  		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
  	],
  	[
  		"9b80",
  		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
  	],
  	[
  		"9c40",
  		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
  	],
  	[
  		"9c80",
  		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
  	],
  	[
  		"9d40",
  		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
  	],
  	[
  		"9d80",
  		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
  	],
  	[
  		"9e40",
  		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
  	],
  	[
  		"9e80",
  		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
  	],
  	[
  		"9f40",
  		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
  	],
  	[
  		"9f80",
  		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
  	],
  	[
  		"e040",
  		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
  	],
  	[
  		"e080",
  		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
  	],
  	[
  		"e140",
  		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
  	],
  	[
  		"e180",
  		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
  	],
  	[
  		"e240",
  		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
  	],
  	[
  		"e280",
  		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
  	],
  	[
  		"e340",
  		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
  	],
  	[
  		"e380",
  		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
  	],
  	[
  		"e440",
  		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
  	],
  	[
  		"e480",
  		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
  	],
  	[
  		"e540",
  		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
  	],
  	[
  		"e580",
  		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
  	],
  	[
  		"e640",
  		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
  	],
  	[
  		"e680",
  		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
  	],
  	[
  		"e740",
  		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
  	],
  	[
  		"e780",
  		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
  	],
  	[
  		"e840",
  		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
  	],
  	[
  		"e880",
  		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
  	],
  	[
  		"e940",
  		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
  	],
  	[
  		"e980",
  		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
  	],
  	[
  		"ea40",
  		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
  	],
  	[
  		"ea80",
  		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
  	],
  	[
  		"ed40",
  		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
  	],
  	[
  		"ed80",
  		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
  	],
  	[
  		"ee40",
  		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
  	],
  	[
  		"ee80",
  		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
  	],
  	[
  		"eeef",
  		"ⅰ",
  		9,
  		"￢￤＇＂"
  	],
  	[
  		"f040",
  		"",
  		62
  	],
  	[
  		"f080",
  		"",
  		124
  	],
  	[
  		"f140",
  		"",
  		62
  	],
  	[
  		"f180",
  		"",
  		124
  	],
  	[
  		"f240",
  		"",
  		62
  	],
  	[
  		"f280",
  		"",
  		124
  	],
  	[
  		"f340",
  		"",
  		62
  	],
  	[
  		"f380",
  		"",
  		124
  	],
  	[
  		"f440",
  		"",
  		62
  	],
  	[
  		"f480",
  		"",
  		124
  	],
  	[
  		"f540",
  		"",
  		62
  	],
  	[
  		"f580",
  		"",
  		124
  	],
  	[
  		"f640",
  		"",
  		62
  	],
  	[
  		"f680",
  		"",
  		124
  	],
  	[
  		"f740",
  		"",
  		62
  	],
  	[
  		"f780",
  		"",
  		124
  	],
  	[
  		"f840",
  		"",
  		62
  	],
  	[
  		"f880",
  		"",
  		124
  	],
  	[
  		"f940",
  		""
  	],
  	[
  		"fa40",
  		"ⅰ",
  		9,
  		"Ⅰ",
  		9,
  		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
  	],
  	[
  		"fa80",
  		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
  	],
  	[
  		"fb40",
  		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
  	],
  	[
  		"fb80",
  		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
  	],
  	[
  		"fc40",
  		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
  	]
  ];

  var shiftjis$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': shiftjis
  });

  var eucjp = [
  	[
  		"0",
  		"\u0000",
  		127
  	],
  	[
  		"8ea1",
  		"｡",
  		62
  	],
  	[
  		"a1a1",
  		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
  		9,
  		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
  	],
  	[
  		"a2a1",
  		"◆□■△▲▽▼※〒→←↑↓〓"
  	],
  	[
  		"a2ba",
  		"∈∋⊆⊇⊂⊃∪∩"
  	],
  	[
  		"a2ca",
  		"∧∨￢⇒⇔∀∃"
  	],
  	[
  		"a2dc",
  		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
  	],
  	[
  		"a2f2",
  		"Å‰♯♭♪†‡¶"
  	],
  	[
  		"a2fe",
  		"◯"
  	],
  	[
  		"a3b0",
  		"０",
  		9
  	],
  	[
  		"a3c1",
  		"Ａ",
  		25
  	],
  	[
  		"a3e1",
  		"ａ",
  		25
  	],
  	[
  		"a4a1",
  		"ぁ",
  		82
  	],
  	[
  		"a5a1",
  		"ァ",
  		85
  	],
  	[
  		"a6a1",
  		"Α",
  		16,
  		"Σ",
  		6
  	],
  	[
  		"a6c1",
  		"α",
  		16,
  		"σ",
  		6
  	],
  	[
  		"a7a1",
  		"А",
  		5,
  		"ЁЖ",
  		25
  	],
  	[
  		"a7d1",
  		"а",
  		5,
  		"ёж",
  		25
  	],
  	[
  		"a8a1",
  		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
  	],
  	[
  		"ada1",
  		"①",
  		19,
  		"Ⅰ",
  		9
  	],
  	[
  		"adc0",
  		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
  	],
  	[
  		"addf",
  		"㍻〝〟№㏍℡㊤",
  		4,
  		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
  	],
  	[
  		"b0a1",
  		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
  	],
  	[
  		"b1a1",
  		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
  	],
  	[
  		"b2a1",
  		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
  	],
  	[
  		"b3a1",
  		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
  	],
  	[
  		"b4a1",
  		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
  	],
  	[
  		"b5a1",
  		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
  	],
  	[
  		"b6a1",
  		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
  	],
  	[
  		"b7a1",
  		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
  	],
  	[
  		"b8a1",
  		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
  	],
  	[
  		"b9a1",
  		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
  	],
  	[
  		"baa1",
  		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
  	],
  	[
  		"bba1",
  		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
  	],
  	[
  		"bca1",
  		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
  	],
  	[
  		"bda1",
  		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
  	],
  	[
  		"bea1",
  		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
  	],
  	[
  		"bfa1",
  		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
  	],
  	[
  		"c0a1",
  		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
  	],
  	[
  		"c1a1",
  		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
  	],
  	[
  		"c2a1",
  		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
  	],
  	[
  		"c3a1",
  		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
  	],
  	[
  		"c4a1",
  		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
  	],
  	[
  		"c5a1",
  		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
  	],
  	[
  		"c6a1",
  		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
  	],
  	[
  		"c7a1",
  		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
  	],
  	[
  		"c8a1",
  		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
  	],
  	[
  		"c9a1",
  		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
  	],
  	[
  		"caa1",
  		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
  	],
  	[
  		"cba1",
  		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
  	],
  	[
  		"cca1",
  		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
  	],
  	[
  		"cda1",
  		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
  	],
  	[
  		"cea1",
  		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
  	],
  	[
  		"cfa1",
  		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
  	],
  	[
  		"d0a1",
  		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
  	],
  	[
  		"d1a1",
  		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
  	],
  	[
  		"d2a1",
  		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
  	],
  	[
  		"d3a1",
  		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
  	],
  	[
  		"d4a1",
  		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
  	],
  	[
  		"d5a1",
  		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
  	],
  	[
  		"d6a1",
  		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
  	],
  	[
  		"d7a1",
  		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
  	],
  	[
  		"d8a1",
  		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
  	],
  	[
  		"d9a1",
  		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
  	],
  	[
  		"daa1",
  		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
  	],
  	[
  		"dba1",
  		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
  	],
  	[
  		"dca1",
  		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
  	],
  	[
  		"dda1",
  		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
  	],
  	[
  		"dea1",
  		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
  	],
  	[
  		"dfa1",
  		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
  	],
  	[
  		"e0a1",
  		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
  	],
  	[
  		"e1a1",
  		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
  	],
  	[
  		"e2a1",
  		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
  	],
  	[
  		"e3a1",
  		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
  	],
  	[
  		"e4a1",
  		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
  	],
  	[
  		"e5a1",
  		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
  	],
  	[
  		"e6a1",
  		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
  	],
  	[
  		"e7a1",
  		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
  	],
  	[
  		"e8a1",
  		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
  	],
  	[
  		"e9a1",
  		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
  	],
  	[
  		"eaa1",
  		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
  	],
  	[
  		"eba1",
  		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
  	],
  	[
  		"eca1",
  		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
  	],
  	[
  		"eda1",
  		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
  	],
  	[
  		"eea1",
  		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
  	],
  	[
  		"efa1",
  		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
  	],
  	[
  		"f0a1",
  		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
  	],
  	[
  		"f1a1",
  		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
  	],
  	[
  		"f2a1",
  		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
  	],
  	[
  		"f3a1",
  		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
  	],
  	[
  		"f4a1",
  		"堯槇遙瑤凜熙"
  	],
  	[
  		"f9a1",
  		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
  	],
  	[
  		"faa1",
  		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
  	],
  	[
  		"fba1",
  		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
  	],
  	[
  		"fca1",
  		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
  	],
  	[
  		"fcf1",
  		"ⅰ",
  		9,
  		"￢￤＇＂"
  	],
  	[
  		"8fa2af",
  		"˘ˇ¸˙˝¯˛˚～΄΅"
  	],
  	[
  		"8fa2c2",
  		"¡¦¿"
  	],
  	[
  		"8fa2eb",
  		"ºª©®™¤№"
  	],
  	[
  		"8fa6e1",
  		"ΆΈΉΊΪ"
  	],
  	[
  		"8fa6e7",
  		"Ό"
  	],
  	[
  		"8fa6e9",
  		"ΎΫ"
  	],
  	[
  		"8fa6ec",
  		"Ώ"
  	],
  	[
  		"8fa6f1",
  		"άέήίϊΐόςύϋΰώ"
  	],
  	[
  		"8fa7c2",
  		"Ђ",
  		10,
  		"ЎЏ"
  	],
  	[
  		"8fa7f2",
  		"ђ",
  		10,
  		"ўџ"
  	],
  	[
  		"8fa9a1",
  		"ÆĐ"
  	],
  	[
  		"8fa9a4",
  		"Ħ"
  	],
  	[
  		"8fa9a6",
  		"Ĳ"
  	],
  	[
  		"8fa9a8",
  		"ŁĿ"
  	],
  	[
  		"8fa9ab",
  		"ŊØŒ"
  	],
  	[
  		"8fa9af",
  		"ŦÞ"
  	],
  	[
  		"8fa9c1",
  		"æđðħıĳĸłŀŉŋøœßŧþ"
  	],
  	[
  		"8faaa1",
  		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
  	],
  	[
  		"8faaba",
  		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
  	],
  	[
  		"8faba1",
  		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
  	],
  	[
  		"8fabbd",
  		"ġĥíìïîǐ"
  	],
  	[
  		"8fabc5",
  		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
  	],
  	[
  		"8fb0a1",
  		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
  	],
  	[
  		"8fb1a1",
  		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
  	],
  	[
  		"8fb2a1",
  		"傒傓傔傖傛傜傞",
  		4,
  		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
  	],
  	[
  		"8fb3a1",
  		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
  	],
  	[
  		"8fb4a1",
  		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
  	],
  	[
  		"8fb5a1",
  		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
  	],
  	[
  		"8fb6a1",
  		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
  		5,
  		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
  		4,
  		"囱囫园"
  	],
  	[
  		"8fb7a1",
  		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
  		4,
  		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
  	],
  	[
  		"8fb8a1",
  		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
  	],
  	[
  		"8fb9a1",
  		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
  	],
  	[
  		"8fbaa1",
  		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
  		4,
  		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
  	],
  	[
  		"8fbba1",
  		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
  	],
  	[
  		"8fbca1",
  		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
  		4,
  		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
  	],
  	[
  		"8fbda1",
  		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
  		4,
  		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
  	],
  	[
  		"8fbea1",
  		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
  		4,
  		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
  	],
  	[
  		"8fbfa1",
  		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
  	],
  	[
  		"8fc0a1",
  		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
  	],
  	[
  		"8fc1a1",
  		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
  	],
  	[
  		"8fc2a1",
  		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
  	],
  	[
  		"8fc3a1",
  		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
  		4,
  		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
  	],
  	[
  		"8fc4a1",
  		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
  	],
  	[
  		"8fc5a1",
  		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
  	],
  	[
  		"8fc6a1",
  		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
  	],
  	[
  		"8fc7a1",
  		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
  	],
  	[
  		"8fc8a1",
  		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
  	],
  	[
  		"8fc9a1",
  		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
  		4,
  		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
  		4,
  		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
  	],
  	[
  		"8fcaa1",
  		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
  	],
  	[
  		"8fcba1",
  		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
  	],
  	[
  		"8fcca1",
  		"珿琀琁琄琇琊琑琚琛琤琦琨",
  		9,
  		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
  	],
  	[
  		"8fcda1",
  		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
  		5,
  		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
  	],
  	[
  		"8fcea1",
  		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
  		6,
  		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
  	],
  	[
  		"8fcfa1",
  		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
  	],
  	[
  		"8fd0a1",
  		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
  	],
  	[
  		"8fd1a1",
  		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
  	],
  	[
  		"8fd2a1",
  		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
  		5
  	],
  	[
  		"8fd3a1",
  		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
  	],
  	[
  		"8fd4a1",
  		"綞綦綧綪綳綶綷綹緂",
  		4,
  		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
  	],
  	[
  		"8fd5a1",
  		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
  	],
  	[
  		"8fd6a1",
  		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
  	],
  	[
  		"8fd7a1",
  		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
  	],
  	[
  		"8fd8a1",
  		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
  	],
  	[
  		"8fd9a1",
  		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
  		4,
  		"蕖蕙蕜",
  		6,
  		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
  	],
  	[
  		"8fdaa1",
  		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
  		4,
  		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
  	],
  	[
  		"8fdba1",
  		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
  		6,
  		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
  	],
  	[
  		"8fdca1",
  		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
  		4,
  		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
  	],
  	[
  		"8fdda1",
  		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
  		4,
  		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
  	],
  	[
  		"8fdea1",
  		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
  		4,
  		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
  	],
  	[
  		"8fdfa1",
  		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
  	],
  	[
  		"8fe0a1",
  		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
  	],
  	[
  		"8fe1a1",
  		"轃轇轏轑",
  		4,
  		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
  	],
  	[
  		"8fe2a1",
  		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
  	],
  	[
  		"8fe3a1",
  		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
  		5,
  		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
  		4,
  		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
  	],
  	[
  		"8fe4a1",
  		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
  		4,
  		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
  	],
  	[
  		"8fe5a1",
  		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
  		4,
  		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
  	],
  	[
  		"8fe6a1",
  		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
  	],
  	[
  		"8fe7a1",
  		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
  	],
  	[
  		"8fe8a1",
  		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
  		4,
  		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
  	],
  	[
  		"8fe9a1",
  		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
  		4
  	],
  	[
  		"8feaa1",
  		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
  		4,
  		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
  	],
  	[
  		"8feba1",
  		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
  		4,
  		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
  	],
  	[
  		"8feca1",
  		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
  	],
  	[
  		"8feda1",
  		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
  		4,
  		"齓齕齖齗齘齚齝齞齨齩齭",
  		4,
  		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
  	]
  ];

  var eucjp$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': eucjp
  });

  var cp936 = [
  	[
  		"0",
  		"\u0000",
  		127,
  		"€"
  	],
  	[
  		"8140",
  		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
  		5,
  		"乲乴",
  		9,
  		"乿",
  		6,
  		"亇亊"
  	],
  	[
  		"8180",
  		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
  		6,
  		"伋伌伒",
  		4,
  		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
  		4,
  		"佄佅佇",
  		5,
  		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
  	],
  	[
  		"8240",
  		"侤侫侭侰",
  		4,
  		"侶",
  		8,
  		"俀俁係俆俇俈俉俋俌俍俒",
  		4,
  		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
  		11
  	],
  	[
  		"8280",
  		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
  		10,
  		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
  		4,
  		"偖偗偘偙偛偝",
  		7,
  		"偦",
  		5,
  		"偭",
  		8,
  		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
  		20,
  		"傤傦傪傫傭",
  		4,
  		"傳",
  		6,
  		"傼"
  	],
  	[
  		"8340",
  		"傽",
  		17,
  		"僐",
  		5,
  		"僗僘僙僛",
  		10,
  		"僨僩僪僫僯僰僱僲僴僶",
  		4,
  		"僼",
  		9,
  		"儈"
  	],
  	[
  		"8380",
  		"儉儊儌",
  		5,
  		"儓",
  		13,
  		"儢",
  		28,
  		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
  		4,
  		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
  		4,
  		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
  		5
  	],
  	[
  		"8440",
  		"凘凙凚凜凞凟凢凣凥",
  		5,
  		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
  		5,
  		"剋剎剏剒剓剕剗剘"
  	],
  	[
  		"8480",
  		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
  		9,
  		"剾劀劃",
  		4,
  		"劉",
  		6,
  		"劑劒劔",
  		6,
  		"劜劤劥劦劧劮劯劰労",
  		9,
  		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
  		5,
  		"勠勡勢勣勥",
  		10,
  		"勱",
  		7,
  		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
  	],
  	[
  		"8540",
  		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
  		9,
  		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
  	],
  	[
  		"8580",
  		"厐",
  		4,
  		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
  		6,
  		"厷厸厹厺厼厽厾叀參",
  		4,
  		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
  		4,
  		"呣呥呧呩",
  		7,
  		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
  	],
  	[
  		"8640",
  		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
  		4,
  		"哫哬哯哰哱哴",
  		5,
  		"哻哾唀唂唃唄唅唈唊",
  		4,
  		"唒唓唕",
  		5,
  		"唜唝唞唟唡唥唦"
  	],
  	[
  		"8680",
  		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
  		4,
  		"啑啒啓啔啗",
  		4,
  		"啝啞啟啠啢啣啨啩啫啯",
  		5,
  		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
  		6,
  		"喨",
  		8,
  		"喲喴営喸喺喼喿",
  		4,
  		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
  		4,
  		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
  		4,
  		"嗿嘂嘃嘄嘅"
  	],
  	[
  		"8740",
  		"嘆嘇嘊嘋嘍嘐",
  		7,
  		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
  		11,
  		"噏",
  		4,
  		"噕噖噚噛噝",
  		4
  	],
  	[
  		"8780",
  		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
  		7,
  		"嚇",
  		6,
  		"嚐嚑嚒嚔",
  		14,
  		"嚤",
  		10,
  		"嚰",
  		6,
  		"嚸嚹嚺嚻嚽",
  		12,
  		"囋",
  		8,
  		"囕囖囘囙囜団囥",
  		5,
  		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
  		6
  	],
  	[
  		"8840",
  		"園",
  		9,
  		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
  		4,
  		"圼圽圿坁坃坄坅坆坈坉坋坒",
  		4,
  		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
  	],
  	[
  		"8880",
  		"垁垇垈垉垊垍",
  		4,
  		"垔",
  		6,
  		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
  		8,
  		"埄",
  		6,
  		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
  		7,
  		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
  		4,
  		"堫",
  		4,
  		"報堲堳場堶",
  		7
  	],
  	[
  		"8940",
  		"堾",
  		5,
  		"塅",
  		6,
  		"塎塏塐塒塓塕塖塗塙",
  		4,
  		"塟",
  		5,
  		"塦",
  		4,
  		"塭",
  		16,
  		"塿墂墄墆墇墈墊墋墌"
  	],
  	[
  		"8980",
  		"墍",
  		4,
  		"墔",
  		4,
  		"墛墜墝墠",
  		7,
  		"墪",
  		17,
  		"墽墾墿壀壂壃壄壆",
  		10,
  		"壒壓壔壖",
  		13,
  		"壥",
  		5,
  		"壭壯壱売壴壵壷壸壺",
  		7,
  		"夃夅夆夈",
  		4,
  		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
  	],
  	[
  		"8a40",
  		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
  		4,
  		"奡奣奤奦",
  		12,
  		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
  	],
  	[
  		"8a80",
  		"妧妬妭妰妱妳",
  		5,
  		"妺妼妽妿",
  		6,
  		"姇姈姉姌姍姎姏姕姖姙姛姞",
  		4,
  		"姤姦姧姩姪姫姭",
  		11,
  		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
  		6,
  		"娳娵娷",
  		4,
  		"娽娾娿婁",
  		4,
  		"婇婈婋",
  		9,
  		"婖婗婘婙婛",
  		5
  	],
  	[
  		"8b40",
  		"婡婣婤婥婦婨婩婫",
  		8,
  		"婸婹婻婼婽婾媀",
  		17,
  		"媓",
  		6,
  		"媜",
  		13,
  		"媫媬"
  	],
  	[
  		"8b80",
  		"媭",
  		4,
  		"媴媶媷媹",
  		4,
  		"媿嫀嫃",
  		5,
  		"嫊嫋嫍",
  		4,
  		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
  		4,
  		"嫲",
  		22,
  		"嬊",
  		11,
  		"嬘",
  		25,
  		"嬳嬵嬶嬸",
  		7,
  		"孁",
  		6
  	],
  	[
  		"8c40",
  		"孈",
  		7,
  		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
  	],
  	[
  		"8c80",
  		"寑寔",
  		8,
  		"寠寢寣實寧審",
  		4,
  		"寯寱",
  		6,
  		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
  		6,
  		"屰屲",
  		6,
  		"屻屼屽屾岀岃",
  		4,
  		"岉岊岋岎岏岒岓岕岝",
  		4,
  		"岤",
  		4
  	],
  	[
  		"8d40",
  		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
  		5,
  		"峌",
  		5,
  		"峓",
  		5,
  		"峚",
  		6,
  		"峢峣峧峩峫峬峮峯峱",
  		9,
  		"峼",
  		4
  	],
  	[
  		"8d80",
  		"崁崄崅崈",
  		5,
  		"崏",
  		4,
  		"崕崗崘崙崚崜崝崟",
  		4,
  		"崥崨崪崫崬崯",
  		4,
  		"崵",
  		7,
  		"崿",
  		7,
  		"嵈嵉嵍",
  		10,
  		"嵙嵚嵜嵞",
  		10,
  		"嵪嵭嵮嵰嵱嵲嵳嵵",
  		12,
  		"嶃",
  		21,
  		"嶚嶛嶜嶞嶟嶠"
  	],
  	[
  		"8e40",
  		"嶡",
  		21,
  		"嶸",
  		12,
  		"巆",
  		6,
  		"巎",
  		12,
  		"巜巟巠巣巤巪巬巭"
  	],
  	[
  		"8e80",
  		"巰巵巶巸",
  		4,
  		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
  		7,
  		"帨",
  		4,
  		"帯帰帲",
  		4,
  		"帹帺帾帿幀幁幃幆",
  		5,
  		"幍",
  		6,
  		"幖",
  		4,
  		"幜幝幟幠幣",
  		14,
  		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
  		4,
  		"庮",
  		4,
  		"庴庺庻庼庽庿",
  		6
  	],
  	[
  		"8f40",
  		"廆廇廈廋",
  		5,
  		"廔廕廗廘廙廚廜",
  		11,
  		"廩廫",
  		8,
  		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
  	],
  	[
  		"8f80",
  		"弨弫弬弮弰弲",
  		6,
  		"弻弽弾弿彁",
  		14,
  		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
  		5,
  		"復徫徬徯",
  		5,
  		"徶徸徹徺徻徾",
  		4,
  		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
  	],
  	[
  		"9040",
  		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
  		4,
  		"怶",
  		4,
  		"怽怾恀恄",
  		6,
  		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
  	],
  	[
  		"9080",
  		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
  		7,
  		"惇惈惉惌",
  		4,
  		"惒惓惔惖惗惙惛惞惡",
  		4,
  		"惪惱惲惵惷惸惻",
  		4,
  		"愂愃愄愅愇愊愋愌愐",
  		4,
  		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
  		18,
  		"慀",
  		6
  	],
  	[
  		"9140",
  		"慇慉態慍慏慐慒慓慔慖",
  		6,
  		"慞慟慠慡慣慤慥慦慩",
  		6,
  		"慱慲慳慴慶慸",
  		18,
  		"憌憍憏",
  		4,
  		"憕"
  	],
  	[
  		"9180",
  		"憖",
  		6,
  		"憞",
  		8,
  		"憪憫憭",
  		9,
  		"憸",
  		5,
  		"憿懀懁懃",
  		4,
  		"應懌",
  		4,
  		"懓懕",
  		16,
  		"懧",
  		13,
  		"懶",
  		8,
  		"戀",
  		5,
  		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
  		4,
  		"扂扄扅扆扊"
  	],
  	[
  		"9240",
  		"扏扐払扖扗扙扚扜",
  		6,
  		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
  		5,
  		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
  	],
  	[
  		"9280",
  		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
  		5,
  		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
  		7,
  		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
  		6,
  		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
  	],
  	[
  		"9340",
  		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
  		6,
  		"揟揢揤",
  		4,
  		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
  		4,
  		"損搎搑搒搕",
  		5,
  		"搝搟搢搣搤"
  	],
  	[
  		"9380",
  		"搥搧搨搩搫搮",
  		5,
  		"搵",
  		4,
  		"搻搼搾摀摂摃摉摋",
  		6,
  		"摓摕摖摗摙",
  		4,
  		"摟",
  		7,
  		"摨摪摫摬摮",
  		9,
  		"摻",
  		6,
  		"撃撆撈",
  		8,
  		"撓撔撗撘撚撛撜撝撟",
  		4,
  		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
  		6,
  		"擏擑擓擔擕擖擙據"
  	],
  	[
  		"9440",
  		"擛擜擝擟擠擡擣擥擧",
  		24,
  		"攁",
  		7,
  		"攊",
  		7,
  		"攓",
  		4,
  		"攙",
  		8
  	],
  	[
  		"9480",
  		"攢攣攤攦",
  		4,
  		"攬攭攰攱攲攳攷攺攼攽敀",
  		4,
  		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
  		14,
  		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
  		7,
  		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
  		7,
  		"旡旣旤旪旫"
  	],
  	[
  		"9540",
  		"旲旳旴旵旸旹旻",
  		4,
  		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
  		4,
  		"昽昿晀時晄",
  		6,
  		"晍晎晐晑晘"
  	],
  	[
  		"9580",
  		"晙晛晜晝晞晠晢晣晥晧晩",
  		4,
  		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
  		4,
  		"暞",
  		8,
  		"暩",
  		4,
  		"暯",
  		4,
  		"暵暶暷暸暺暻暼暽暿",
  		25,
  		"曚曞",
  		7,
  		"曧曨曪",
  		5,
  		"曱曵曶書曺曻曽朁朂會"
  	],
  	[
  		"9640",
  		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
  		5,
  		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
  		4,
  		"杝杢杣杤杦杧杫杬杮東杴杶"
  	],
  	[
  		"9680",
  		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
  		7,
  		"柂柅",
  		9,
  		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
  		7,
  		"柾栁栂栃栄栆栍栐栒栔栕栘",
  		4,
  		"栞栟栠栢",
  		6,
  		"栫",
  		6,
  		"栴栵栶栺栻栿桇桋桍桏桒桖",
  		5
  	],
  	[
  		"9740",
  		"桜桝桞桟桪桬",
  		7,
  		"桵桸",
  		8,
  		"梂梄梇",
  		7,
  		"梐梑梒梔梕梖梘",
  		9,
  		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
  	],
  	[
  		"9780",
  		"梹",
  		6,
  		"棁棃",
  		5,
  		"棊棌棎棏棐棑棓棔棖棗棙棛",
  		4,
  		"棡棢棤",
  		9,
  		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
  		4,
  		"椌椏椑椓",
  		11,
  		"椡椢椣椥",
  		7,
  		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
  		16,
  		"楕楖楘楙楛楜楟"
  	],
  	[
  		"9840",
  		"楡楢楤楥楧楨楩楪楬業楯楰楲",
  		4,
  		"楺楻楽楾楿榁榃榅榊榋榌榎",
  		5,
  		"榖榗榙榚榝",
  		9,
  		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
  	],
  	[
  		"9880",
  		"榾榿槀槂",
  		7,
  		"構槍槏槑槒槓槕",
  		5,
  		"槜槝槞槡",
  		11,
  		"槮槯槰槱槳",
  		9,
  		"槾樀",
  		9,
  		"樋",
  		11,
  		"標",
  		5,
  		"樠樢",
  		5,
  		"権樫樬樭樮樰樲樳樴樶",
  		6,
  		"樿",
  		4,
  		"橅橆橈",
  		7,
  		"橑",
  		6,
  		"橚"
  	],
  	[
  		"9940",
  		"橜",
  		4,
  		"橢橣橤橦",
  		10,
  		"橲",
  		6,
  		"橺橻橽橾橿檁檂檃檅",
  		8,
  		"檏檒",
  		4,
  		"檘",
  		7,
  		"檡",
  		5
  	],
  	[
  		"9980",
  		"檧檨檪檭",
  		114,
  		"欥欦欨",
  		6
  	],
  	[
  		"9a40",
  		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
  		11,
  		"歚",
  		7,
  		"歨歩歫",
  		13,
  		"歺歽歾歿殀殅殈"
  	],
  	[
  		"9a80",
  		"殌殎殏殐殑殔殕殗殘殙殜",
  		4,
  		"殢",
  		7,
  		"殫",
  		7,
  		"殶殸",
  		6,
  		"毀毃毄毆",
  		4,
  		"毌毎毐毑毘毚毜",
  		4,
  		"毢",
  		7,
  		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
  		6,
  		"氈",
  		4,
  		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
  		4,
  		"汑汒汓汖汘"
  	],
  	[
  		"9b40",
  		"汙汚汢汣汥汦汧汫",
  		4,
  		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
  	],
  	[
  		"9b80",
  		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
  		5,
  		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
  		4,
  		"涃涄涆涇涊涋涍涏涐涒涖",
  		4,
  		"涜涢涥涬涭涰涱涳涴涶涷涹",
  		5,
  		"淁淂淃淈淉淊"
  	],
  	[
  		"9c40",
  		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
  		7,
  		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
  	],
  	[
  		"9c80",
  		"渶渷渹渻",
  		7,
  		"湅",
  		7,
  		"湏湐湑湒湕湗湙湚湜湝湞湠",
  		10,
  		"湬湭湯",
  		14,
  		"満溁溂溄溇溈溊",
  		4,
  		"溑",
  		6,
  		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
  		5
  	],
  	[
  		"9d40",
  		"滰滱滲滳滵滶滷滸滺",
  		7,
  		"漃漄漅漇漈漊",
  		4,
  		"漐漑漒漖",
  		9,
  		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
  		6,
  		"漿潀潁潂"
  	],
  	[
  		"9d80",
  		"潃潄潅潈潉潊潌潎",
  		9,
  		"潙潚潛潝潟潠潡潣潤潥潧",
  		5,
  		"潯潰潱潳潵潶潷潹潻潽",
  		6,
  		"澅澆澇澊澋澏",
  		12,
  		"澝澞澟澠澢",
  		4,
  		"澨",
  		10,
  		"澴澵澷澸澺",
  		5,
  		"濁濃",
  		5,
  		"濊",
  		6,
  		"濓",
  		10,
  		"濟濢濣濤濥"
  	],
  	[
  		"9e40",
  		"濦",
  		7,
  		"濰",
  		32,
  		"瀒",
  		7,
  		"瀜",
  		6,
  		"瀤",
  		6
  	],
  	[
  		"9e80",
  		"瀫",
  		9,
  		"瀶瀷瀸瀺",
  		17,
  		"灍灎灐",
  		13,
  		"灟",
  		11,
  		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
  		12,
  		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
  		12,
  		"烚"
  	],
  	[
  		"9f40",
  		"烜烝烞烠烡烢烣烥烪烮烰",
  		6,
  		"烸烺烻烼烾",
  		10,
  		"焋",
  		4,
  		"焑焒焔焗焛",
  		10,
  		"焧",
  		7,
  		"焲焳焴"
  	],
  	[
  		"9f80",
  		"焵焷",
  		13,
  		"煆煇煈煉煋煍煏",
  		12,
  		"煝煟",
  		4,
  		"煥煩",
  		4,
  		"煯煰煱煴煵煶煷煹煻煼煾",
  		5,
  		"熅",
  		4,
  		"熋熌熍熎熐熑熒熓熕熖熗熚",
  		4,
  		"熡",
  		6,
  		"熩熪熫熭",
  		5,
  		"熴熶熷熸熺",
  		8,
  		"燄",
  		9,
  		"燏",
  		4
  	],
  	[
  		"a040",
  		"燖",
  		9,
  		"燡燢燣燤燦燨",
  		5,
  		"燯",
  		9,
  		"燺",
  		11,
  		"爇",
  		19
  	],
  	[
  		"a080",
  		"爛爜爞",
  		9,
  		"爩爫爭爮爯爲爳爴爺爼爾牀",
  		6,
  		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
  		4,
  		"犌犎犐犑犓",
  		11,
  		"犠",
  		11,
  		"犮犱犲犳犵犺",
  		6,
  		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
  	],
  	[
  		"a1a1",
  		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
  		7,
  		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
  	],
  	[
  		"a2a1",
  		"ⅰ",
  		9
  	],
  	[
  		"a2b1",
  		"⒈",
  		19,
  		"⑴",
  		19,
  		"①",
  		9
  	],
  	[
  		"a2e5",
  		"㈠",
  		9
  	],
  	[
  		"a2f1",
  		"Ⅰ",
  		11
  	],
  	[
  		"a3a1",
  		"！＂＃￥％",
  		88,
  		"￣"
  	],
  	[
  		"a4a1",
  		"ぁ",
  		82
  	],
  	[
  		"a5a1",
  		"ァ",
  		85
  	],
  	[
  		"a6a1",
  		"Α",
  		16,
  		"Σ",
  		6
  	],
  	[
  		"a6c1",
  		"α",
  		16,
  		"σ",
  		6
  	],
  	[
  		"a6e0",
  		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
  	],
  	[
  		"a6ee",
  		"︻︼︷︸︱"
  	],
  	[
  		"a6f4",
  		"︳︴"
  	],
  	[
  		"a7a1",
  		"А",
  		5,
  		"ЁЖ",
  		25
  	],
  	[
  		"a7d1",
  		"а",
  		5,
  		"ёж",
  		25
  	],
  	[
  		"a840",
  		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
  		35,
  		"▁",
  		6
  	],
  	[
  		"a880",
  		"█",
  		7,
  		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
  	],
  	[
  		"a8a1",
  		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
  	],
  	[
  		"a8bd",
  		"ńň"
  	],
  	[
  		"a8c0",
  		"ɡ"
  	],
  	[
  		"a8c5",
  		"ㄅ",
  		36
  	],
  	[
  		"a940",
  		"〡",
  		8,
  		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
  	],
  	[
  		"a959",
  		"℡㈱"
  	],
  	[
  		"a95c",
  		"‐"
  	],
  	[
  		"a960",
  		"ー゛゜ヽヾ〆ゝゞ﹉",
  		9,
  		"﹔﹕﹖﹗﹙",
  		8
  	],
  	[
  		"a980",
  		"﹢",
  		4,
  		"﹨﹩﹪﹫"
  	],
  	[
  		"a996",
  		"〇"
  	],
  	[
  		"a9a4",
  		"─",
  		75
  	],
  	[
  		"aa40",
  		"狜狝狟狢",
  		5,
  		"狪狫狵狶狹狽狾狿猀猂猄",
  		5,
  		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
  		8
  	],
  	[
  		"aa80",
  		"獉獊獋獌獎獏獑獓獔獕獖獘",
  		7,
  		"獡",
  		10,
  		"獮獰獱"
  	],
  	[
  		"ab40",
  		"獲",
  		11,
  		"獿",
  		4,
  		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
  		5,
  		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
  		4
  	],
  	[
  		"ab80",
  		"珋珌珎珒",
  		6,
  		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
  		4
  	],
  	[
  		"ac40",
  		"珸",
  		10,
  		"琄琇琈琋琌琍琎琑",
  		8,
  		"琜",
  		5,
  		"琣琤琧琩琫琭琯琱琲琷",
  		4,
  		"琽琾琿瑀瑂",
  		11
  	],
  	[
  		"ac80",
  		"瑎",
  		6,
  		"瑖瑘瑝瑠",
  		12,
  		"瑮瑯瑱",
  		4,
  		"瑸瑹瑺"
  	],
  	[
  		"ad40",
  		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
  		10,
  		"璝璟",
  		7,
  		"璪",
  		15,
  		"璻",
  		12
  	],
  	[
  		"ad80",
  		"瓈",
  		9,
  		"瓓",
  		8,
  		"瓝瓟瓡瓥瓧",
  		6,
  		"瓰瓱瓲"
  	],
  	[
  		"ae40",
  		"瓳瓵瓸",
  		6,
  		"甀甁甂甃甅",
  		7,
  		"甎甐甒甔甕甖甗甛甝甞甠",
  		4,
  		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
  	],
  	[
  		"ae80",
  		"畝",
  		7,
  		"畧畨畩畫",
  		6,
  		"畳畵當畷畺",
  		4,
  		"疀疁疂疄疅疇"
  	],
  	[
  		"af40",
  		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
  		4,
  		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
  	],
  	[
  		"af80",
  		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
  	],
  	[
  		"b040",
  		"癅",
  		6,
  		"癎",
  		5,
  		"癕癗",
  		4,
  		"癝癟癠癡癢癤",
  		6,
  		"癬癭癮癰",
  		7,
  		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
  	],
  	[
  		"b080",
  		"皜",
  		7,
  		"皥",
  		8,
  		"皯皰皳皵",
  		9,
  		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
  	],
  	[
  		"b140",
  		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
  		4,
  		"盦",
  		7,
  		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
  		10,
  		"眛眜眝眞眡眣眤眥眧眪眫"
  	],
  	[
  		"b180",
  		"眬眮眰",
  		4,
  		"眹眻眽眾眿睂睄睅睆睈",
  		7,
  		"睒",
  		7,
  		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
  	],
  	[
  		"b240",
  		"睝睞睟睠睤睧睩睪睭",
  		11,
  		"睺睻睼瞁瞂瞃瞆",
  		5,
  		"瞏瞐瞓",
  		11,
  		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
  		4
  	],
  	[
  		"b280",
  		"瞼瞾矀",
  		12,
  		"矎",
  		8,
  		"矘矙矚矝",
  		4,
  		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
  	],
  	[
  		"b340",
  		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
  		5,
  		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
  	],
  	[
  		"b380",
  		"硛硜硞",
  		11,
  		"硯",
  		7,
  		"硸硹硺硻硽",
  		6,
  		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
  	],
  	[
  		"b440",
  		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
  		7,
  		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
  		9
  	],
  	[
  		"b480",
  		"磤磥磦磧磩磪磫磭",
  		4,
  		"磳磵磶磸磹磻",
  		5,
  		"礂礃礄礆",
  		6,
  		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
  	],
  	[
  		"b540",
  		"礍",
  		5,
  		"礔",
  		9,
  		"礟",
  		4,
  		"礥",
  		14,
  		"礵",
  		4,
  		"礽礿祂祃祄祅祇祊",
  		8,
  		"祔祕祘祙祡祣"
  	],
  	[
  		"b580",
  		"祤祦祩祪祫祬祮祰",
  		6,
  		"祹祻",
  		4,
  		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
  	],
  	[
  		"b640",
  		"禓",
  		6,
  		"禛",
  		11,
  		"禨",
  		10,
  		"禴",
  		4,
  		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
  		5,
  		"秠秡秢秥秨秪"
  	],
  	[
  		"b680",
  		"秬秮秱",
  		6,
  		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
  		4,
  		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
  	],
  	[
  		"b740",
  		"稝稟稡稢稤",
  		14,
  		"稴稵稶稸稺稾穀",
  		5,
  		"穇",
  		9,
  		"穒",
  		4,
  		"穘",
  		16
  	],
  	[
  		"b780",
  		"穩",
  		6,
  		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
  	],
  	[
  		"b840",
  		"窣窤窧窩窪窫窮",
  		4,
  		"窴",
  		10,
  		"竀",
  		10,
  		"竌",
  		9,
  		"竗竘竚竛竜竝竡竢竤竧",
  		5,
  		"竮竰竱竲竳"
  	],
  	[
  		"b880",
  		"竴",
  		4,
  		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
  	],
  	[
  		"b940",
  		"笯笰笲笴笵笶笷笹笻笽笿",
  		5,
  		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
  		10,
  		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
  		6,
  		"箎箏"
  	],
  	[
  		"b980",
  		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
  		7,
  		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
  	],
  	[
  		"ba40",
  		"篅篈築篊篋篍篎篏篐篒篔",
  		4,
  		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
  		4,
  		"篸篹篺篻篽篿",
  		7,
  		"簈簉簊簍簎簐",
  		5,
  		"簗簘簙"
  	],
  	[
  		"ba80",
  		"簚",
  		4,
  		"簠",
  		5,
  		"簨簩簫",
  		12,
  		"簹",
  		5,
  		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
  	],
  	[
  		"bb40",
  		"籃",
  		9,
  		"籎",
  		36,
  		"籵",
  		5,
  		"籾",
  		9
  	],
  	[
  		"bb80",
  		"粈粊",
  		6,
  		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
  		4,
  		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
  	],
  	[
  		"bc40",
  		"粿糀糂糃糄糆糉糋糎",
  		6,
  		"糘糚糛糝糞糡",
  		6,
  		"糩",
  		5,
  		"糰",
  		7,
  		"糹糺糼",
  		13,
  		"紋",
  		5
  	],
  	[
  		"bc80",
  		"紑",
  		14,
  		"紡紣紤紥紦紨紩紪紬紭紮細",
  		6,
  		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
  	],
  	[
  		"bd40",
  		"紷",
  		54,
  		"絯",
  		7
  	],
  	[
  		"bd80",
  		"絸",
  		32,
  		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
  	],
  	[
  		"be40",
  		"継",
  		12,
  		"綧",
  		6,
  		"綯",
  		42
  	],
  	[
  		"be80",
  		"線",
  		32,
  		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
  	],
  	[
  		"bf40",
  		"緻",
  		62
  	],
  	[
  		"bf80",
  		"縺縼",
  		4,
  		"繂",
  		4,
  		"繈",
  		21,
  		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
  	],
  	[
  		"c040",
  		"繞",
  		35,
  		"纃",
  		23,
  		"纜纝纞"
  	],
  	[
  		"c080",
  		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
  		6,
  		"罃罆",
  		9,
  		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
  	],
  	[
  		"c140",
  		"罖罙罛罜罝罞罠罣",
  		4,
  		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
  		7,
  		"羋羍羏",
  		4,
  		"羕",
  		4,
  		"羛羜羠羢羣羥羦羨",
  		6,
  		"羱"
  	],
  	[
  		"c180",
  		"羳",
  		4,
  		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
  		4,
  		"翖翗翙",
  		5,
  		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
  	],
  	[
  		"c240",
  		"翤翧翨翪翫翬翭翯翲翴",
  		6,
  		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
  		5,
  		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
  	],
  	[
  		"c280",
  		"聙聛",
  		13,
  		"聫",
  		5,
  		"聲",
  		11,
  		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
  	],
  	[
  		"c340",
  		"聾肁肂肅肈肊肍",
  		5,
  		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
  		4,
  		"胏",
  		6,
  		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
  	],
  	[
  		"c380",
  		"脌脕脗脙脛脜脝脟",
  		12,
  		"脭脮脰脳脴脵脷脹",
  		4,
  		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
  	],
  	[
  		"c440",
  		"腀",
  		5,
  		"腇腉腍腎腏腒腖腗腘腛",
  		4,
  		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
  		4,
  		"膉膋膌膍膎膐膒",
  		5,
  		"膙膚膞",
  		4,
  		"膤膥"
  	],
  	[
  		"c480",
  		"膧膩膫",
  		7,
  		"膴",
  		5,
  		"膼膽膾膿臄臅臇臈臉臋臍",
  		6,
  		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
  	],
  	[
  		"c540",
  		"臔",
  		14,
  		"臤臥臦臨臩臫臮",
  		4,
  		"臵",
  		5,
  		"臽臿舃與",
  		4,
  		"舎舏舑舓舕",
  		5,
  		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
  	],
  	[
  		"c580",
  		"艀艁艂艃艅艆艈艊艌艍艎艐",
  		7,
  		"艙艛艜艝艞艠",
  		7,
  		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
  	],
  	[
  		"c640",
  		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
  	],
  	[
  		"c680",
  		"苺苼",
  		4,
  		"茊茋茍茐茒茓茖茘茙茝",
  		9,
  		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
  	],
  	[
  		"c740",
  		"茾茿荁荂荄荅荈荊",
  		4,
  		"荓荕",
  		4,
  		"荝荢荰",
  		6,
  		"荹荺荾",
  		6,
  		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
  		6,
  		"莬莭莮"
  	],
  	[
  		"c780",
  		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
  	],
  	[
  		"c840",
  		"菮華菳",
  		4,
  		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
  		5,
  		"萙萚萛萞",
  		5,
  		"萩",
  		7,
  		"萲",
  		5,
  		"萹萺萻萾",
  		7,
  		"葇葈葉"
  	],
  	[
  		"c880",
  		"葊",
  		6,
  		"葒",
  		4,
  		"葘葝葞葟葠葢葤",
  		4,
  		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
  	],
  	[
  		"c940",
  		"葽",
  		4,
  		"蒃蒄蒅蒆蒊蒍蒏",
  		7,
  		"蒘蒚蒛蒝蒞蒟蒠蒢",
  		12,
  		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
  	],
  	[
  		"c980",
  		"蓘",
  		4,
  		"蓞蓡蓢蓤蓧",
  		4,
  		"蓭蓮蓯蓱",
  		10,
  		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
  	],
  	[
  		"ca40",
  		"蔃",
  		8,
  		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
  		8,
  		"蔭",
  		9,
  		"蔾",
  		4,
  		"蕄蕅蕆蕇蕋",
  		10
  	],
  	[
  		"ca80",
  		"蕗蕘蕚蕛蕜蕝蕟",
  		4,
  		"蕥蕦蕧蕩",
  		8,
  		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
  	],
  	[
  		"cb40",
  		"薂薃薆薈",
  		6,
  		"薐",
  		10,
  		"薝",
  		6,
  		"薥薦薧薩薫薬薭薱",
  		5,
  		"薸薺",
  		6,
  		"藂",
  		6,
  		"藊",
  		4,
  		"藑藒"
  	],
  	[
  		"cb80",
  		"藔藖",
  		5,
  		"藝",
  		6,
  		"藥藦藧藨藪",
  		14,
  		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
  	],
  	[
  		"cc40",
  		"藹藺藼藽藾蘀",
  		4,
  		"蘆",
  		10,
  		"蘒蘓蘔蘕蘗",
  		15,
  		"蘨蘪",
  		13,
  		"蘹蘺蘻蘽蘾蘿虀"
  	],
  	[
  		"cc80",
  		"虁",
  		11,
  		"虒虓處",
  		4,
  		"虛虜虝號虠虡虣",
  		7,
  		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
  	],
  	[
  		"cd40",
  		"虭虯虰虲",
  		6,
  		"蚃",
  		6,
  		"蚎",
  		4,
  		"蚔蚖",
  		5,
  		"蚞",
  		4,
  		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
  		4,
  		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
  	],
  	[
  		"cd80",
  		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
  	],
  	[
  		"ce40",
  		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
  		6,
  		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
  		5,
  		"蝡蝢蝦",
  		7,
  		"蝯蝱蝲蝳蝵"
  	],
  	[
  		"ce80",
  		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
  		4,
  		"螔螕螖螘",
  		6,
  		"螠",
  		4,
  		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
  	],
  	[
  		"cf40",
  		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
  		4,
  		"蟇蟈蟉蟌",
  		4,
  		"蟔",
  		6,
  		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
  		9
  	],
  	[
  		"cf80",
  		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
  		5,
  		"蠋",
  		7,
  		"蠔蠗蠘蠙蠚蠜",
  		4,
  		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
  	],
  	[
  		"d040",
  		"蠤",
  		13,
  		"蠳",
  		5,
  		"蠺蠻蠽蠾蠿衁衂衃衆",
  		5,
  		"衎",
  		5,
  		"衕衖衘衚",
  		6,
  		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
  	],
  	[
  		"d080",
  		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
  		4,
  		"袝",
  		4,
  		"袣袥",
  		5,
  		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
  	],
  	[
  		"d140",
  		"袬袮袯袰袲",
  		4,
  		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
  		4,
  		"裠裡裦裧裩",
  		6,
  		"裲裵裶裷裺裻製裿褀褁褃",
  		5
  	],
  	[
  		"d180",
  		"褉褋",
  		4,
  		"褑褔",
  		4,
  		"褜",
  		4,
  		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
  	],
  	[
  		"d240",
  		"褸",
  		8,
  		"襂襃襅",
  		24,
  		"襠",
  		5,
  		"襧",
  		19,
  		"襼"
  	],
  	[
  		"d280",
  		"襽襾覀覂覄覅覇",
  		26,
  		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
  	],
  	[
  		"d340",
  		"覢",
  		30,
  		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
  		6
  	],
  	[
  		"d380",
  		"觻",
  		4,
  		"訁",
  		5,
  		"計",
  		21,
  		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
  	],
  	[
  		"d440",
  		"訞",
  		31,
  		"訿",
  		8,
  		"詉",
  		21
  	],
  	[
  		"d480",
  		"詟",
  		25,
  		"詺",
  		6,
  		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
  	],
  	[
  		"d540",
  		"誁",
  		7,
  		"誋",
  		7,
  		"誔",
  		46
  	],
  	[
  		"d580",
  		"諃",
  		32,
  		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
  	],
  	[
  		"d640",
  		"諤",
  		34,
  		"謈",
  		27
  	],
  	[
  		"d680",
  		"謤謥謧",
  		30,
  		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
  	],
  	[
  		"d740",
  		"譆",
  		31,
  		"譧",
  		4,
  		"譭",
  		25
  	],
  	[
  		"d780",
  		"讇",
  		24,
  		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
  	],
  	[
  		"d840",
  		"谸",
  		8,
  		"豂豃豄豅豈豊豋豍",
  		7,
  		"豖豗豘豙豛",
  		5,
  		"豣",
  		6,
  		"豬",
  		6,
  		"豴豵豶豷豻",
  		6,
  		"貃貄貆貇"
  	],
  	[
  		"d880",
  		"貈貋貍",
  		6,
  		"貕貖貗貙",
  		20,
  		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
  	],
  	[
  		"d940",
  		"貮",
  		62
  	],
  	[
  		"d980",
  		"賭",
  		32,
  		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
  	],
  	[
  		"da40",
  		"贎",
  		14,
  		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
  		8,
  		"趂趃趆趇趈趉趌",
  		4,
  		"趒趓趕",
  		9,
  		"趠趡"
  	],
  	[
  		"da80",
  		"趢趤",
  		12,
  		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
  	],
  	[
  		"db40",
  		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
  		6,
  		"踆踇踈踋踍踎踐踑踒踓踕",
  		7,
  		"踠踡踤",
  		4,
  		"踫踭踰踲踳踴踶踷踸踻踼踾"
  	],
  	[
  		"db80",
  		"踿蹃蹅蹆蹌",
  		4,
  		"蹓",
  		5,
  		"蹚",
  		11,
  		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
  	],
  	[
  		"dc40",
  		"蹳蹵蹷",
  		4,
  		"蹽蹾躀躂躃躄躆躈",
  		6,
  		"躑躒躓躕",
  		6,
  		"躝躟",
  		11,
  		"躭躮躰躱躳",
  		6,
  		"躻",
  		7
  	],
  	[
  		"dc80",
  		"軃",
  		10,
  		"軏",
  		21,
  		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
  	],
  	[
  		"dd40",
  		"軥",
  		62
  	],
  	[
  		"dd80",
  		"輤",
  		32,
  		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
  	],
  	[
  		"de40",
  		"轅",
  		32,
  		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
  	],
  	[
  		"de80",
  		"迉",
  		4,
  		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
  	],
  	[
  		"df40",
  		"這逜連逤逥逧",
  		5,
  		"逰",
  		4,
  		"逷逹逺逽逿遀遃遅遆遈",
  		4,
  		"過達違遖遙遚遜",
  		5,
  		"遤遦遧適遪遫遬遯",
  		4,
  		"遶",
  		6,
  		"遾邁"
  	],
  	[
  		"df80",
  		"還邅邆邇邉邊邌",
  		4,
  		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
  	],
  	[
  		"e040",
  		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
  		19,
  		"鄚鄛鄜"
  	],
  	[
  		"e080",
  		"鄝鄟鄠鄡鄤",
  		10,
  		"鄰鄲",
  		6,
  		"鄺",
  		8,
  		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
  	],
  	[
  		"e140",
  		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
  		4,
  		"醆醈醊醎醏醓",
  		6,
  		"醜",
  		5,
  		"醤",
  		5,
  		"醫醬醰醱醲醳醶醷醸醹醻"
  	],
  	[
  		"e180",
  		"醼",
  		10,
  		"釈釋釐釒",
  		9,
  		"針",
  		8,
  		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
  	],
  	[
  		"e240",
  		"釦",
  		62
  	],
  	[
  		"e280",
  		"鈥",
  		32,
  		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
  		5,
  		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
  	],
  	[
  		"e340",
  		"鉆",
  		45,
  		"鉵",
  		16
  	],
  	[
  		"e380",
  		"銆",
  		7,
  		"銏",
  		24,
  		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
  	],
  	[
  		"e440",
  		"銨",
  		5,
  		"銯",
  		24,
  		"鋉",
  		31
  	],
  	[
  		"e480",
  		"鋩",
  		32,
  		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
  	],
  	[
  		"e540",
  		"錊",
  		51,
  		"錿",
  		10
  	],
  	[
  		"e580",
  		"鍊",
  		31,
  		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
  	],
  	[
  		"e640",
  		"鍬",
  		34,
  		"鎐",
  		27
  	],
  	[
  		"e680",
  		"鎬",
  		29,
  		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
  	],
  	[
  		"e740",
  		"鏎",
  		7,
  		"鏗",
  		54
  	],
  	[
  		"e780",
  		"鐎",
  		32,
  		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
  		6,
  		"缪缫缬缭缯",
  		4,
  		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
  	],
  	[
  		"e840",
  		"鐯",
  		14,
  		"鐿",
  		43,
  		"鑬鑭鑮鑯"
  	],
  	[
  		"e880",
  		"鑰",
  		20,
  		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
  	],
  	[
  		"e940",
  		"锧锳锽镃镈镋镕镚镠镮镴镵長",
  		7,
  		"門",
  		42
  	],
  	[
  		"e980",
  		"閫",
  		32,
  		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
  	],
  	[
  		"ea40",
  		"闌",
  		27,
  		"闬闿阇阓阘阛阞阠阣",
  		6,
  		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
  	],
  	[
  		"ea80",
  		"陘陙陚陜陝陞陠陣陥陦陫陭",
  		4,
  		"陳陸",
  		12,
  		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
  	],
  	[
  		"eb40",
  		"隌階隑隒隓隕隖隚際隝",
  		9,
  		"隨",
  		7,
  		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
  		9,
  		"雡",
  		6,
  		"雫"
  	],
  	[
  		"eb80",
  		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
  		4,
  		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
  	],
  	[
  		"ec40",
  		"霡",
  		8,
  		"霫霬霮霯霱霳",
  		4,
  		"霺霻霼霽霿",
  		18,
  		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
  		7
  	],
  	[
  		"ec80",
  		"靲靵靷",
  		4,
  		"靽",
  		7,
  		"鞆",
  		4,
  		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
  		4,
  		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
  	],
  	[
  		"ed40",
  		"鞞鞟鞡鞢鞤",
  		6,
  		"鞬鞮鞰鞱鞳鞵",
  		46
  	],
  	[
  		"ed80",
  		"韤韥韨韮",
  		4,
  		"韴韷",
  		23,
  		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
  	],
  	[
  		"ee40",
  		"頏",
  		62
  	],
  	[
  		"ee80",
  		"顎",
  		32,
  		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
  		4,
  		"钼钽钿铄铈",
  		6,
  		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
  	],
  	[
  		"ef40",
  		"顯",
  		5,
  		"颋颎颒颕颙颣風",
  		37,
  		"飏飐飔飖飗飛飜飝飠",
  		4
  	],
  	[
  		"ef80",
  		"飥飦飩",
  		30,
  		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
  		4,
  		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
  		8,
  		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
  	],
  	[
  		"f040",
  		"餈",
  		4,
  		"餎餏餑",
  		28,
  		"餯",
  		26
  	],
  	[
  		"f080",
  		"饊",
  		9,
  		"饖",
  		12,
  		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
  		4,
  		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
  		6,
  		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
  	],
  	[
  		"f140",
  		"馌馎馚",
  		10,
  		"馦馧馩",
  		47
  	],
  	[
  		"f180",
  		"駙",
  		32,
  		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
  	],
  	[
  		"f240",
  		"駺",
  		62
  	],
  	[
  		"f280",
  		"騹",
  		32,
  		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
  	],
  	[
  		"f340",
  		"驚",
  		17,
  		"驲骃骉骍骎骔骕骙骦骩",
  		6,
  		"骲骳骴骵骹骻骽骾骿髃髄髆",
  		4,
  		"髍髎髏髐髒體髕髖髗髙髚髛髜"
  	],
  	[
  		"f380",
  		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
  		8,
  		"髺髼",
  		6,
  		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
  	],
  	[
  		"f440",
  		"鬇鬉",
  		5,
  		"鬐鬑鬒鬔",
  		10,
  		"鬠鬡鬢鬤",
  		10,
  		"鬰鬱鬳",
  		7,
  		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
  		5
  	],
  	[
  		"f480",
  		"魛",
  		32,
  		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
  	],
  	[
  		"f540",
  		"魼",
  		62
  	],
  	[
  		"f580",
  		"鮻",
  		32,
  		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
  	],
  	[
  		"f640",
  		"鯜",
  		62
  	],
  	[
  		"f680",
  		"鰛",
  		32,
  		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
  		5,
  		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
  		5,
  		"鲥",
  		4,
  		"鲫鲭鲮鲰",
  		7,
  		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
  	],
  	[
  		"f740",
  		"鰼",
  		62
  	],
  	[
  		"f780",
  		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
  		4,
  		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
  		4,
  		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
  	],
  	[
  		"f840",
  		"鳣",
  		62
  	],
  	[
  		"f880",
  		"鴢",
  		32
  	],
  	[
  		"f940",
  		"鵃",
  		62
  	],
  	[
  		"f980",
  		"鶂",
  		32
  	],
  	[
  		"fa40",
  		"鶣",
  		62
  	],
  	[
  		"fa80",
  		"鷢",
  		32
  	],
  	[
  		"fb40",
  		"鸃",
  		27,
  		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
  		9,
  		"麀"
  	],
  	[
  		"fb80",
  		"麁麃麄麅麆麉麊麌",
  		5,
  		"麔",
  		8,
  		"麞麠",
  		5,
  		"麧麨麩麪"
  	],
  	[
  		"fc40",
  		"麫",
  		8,
  		"麵麶麷麹麺麼麿",
  		4,
  		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
  		8,
  		"黺黽黿",
  		6
  	],
  	[
  		"fc80",
  		"鼆",
  		4,
  		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
  		5,
  		"鼡鼣",
  		8,
  		"鼭鼮鼰鼱"
  	],
  	[
  		"fd40",
  		"鼲",
  		4,
  		"鼸鼺鼼鼿",
  		4,
  		"齅",
  		10,
  		"齒",
  		38
  	],
  	[
  		"fd80",
  		"齹",
  		5,
  		"龁龂龍",
  		11,
  		"龜龝龞龡",
  		4,
  		"郎凉秊裏隣"
  	],
  	[
  		"fe40",
  		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
  	]
  ];

  var cp936$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': cp936
  });

  var gbkAdded = [
  	[
  		"a140",
  		"",
  		62
  	],
  	[
  		"a180",
  		"",
  		32
  	],
  	[
  		"a240",
  		"",
  		62
  	],
  	[
  		"a280",
  		"",
  		32
  	],
  	[
  		"a2ab",
  		"",
  		5
  	],
  	[
  		"a2e3",
  		"€"
  	],
  	[
  		"a2ef",
  		""
  	],
  	[
  		"a2fd",
  		""
  	],
  	[
  		"a340",
  		"",
  		62
  	],
  	[
  		"a380",
  		"",
  		31,
  		"　"
  	],
  	[
  		"a440",
  		"",
  		62
  	],
  	[
  		"a480",
  		"",
  		32
  	],
  	[
  		"a4f4",
  		"",
  		10
  	],
  	[
  		"a540",
  		"",
  		62
  	],
  	[
  		"a580",
  		"",
  		32
  	],
  	[
  		"a5f7",
  		"",
  		7
  	],
  	[
  		"a640",
  		"",
  		62
  	],
  	[
  		"a680",
  		"",
  		32
  	],
  	[
  		"a6b9",
  		"",
  		7
  	],
  	[
  		"a6d9",
  		"",
  		6
  	],
  	[
  		"a6ec",
  		""
  	],
  	[
  		"a6f3",
  		""
  	],
  	[
  		"a6f6",
  		"",
  		8
  	],
  	[
  		"a740",
  		"",
  		62
  	],
  	[
  		"a780",
  		"",
  		32
  	],
  	[
  		"a7c2",
  		"",
  		14
  	],
  	[
  		"a7f2",
  		"",
  		12
  	],
  	[
  		"a896",
  		"",
  		10
  	],
  	[
  		"a8bc",
  		""
  	],
  	[
  		"a8bf",
  		"ǹ"
  	],
  	[
  		"a8c1",
  		""
  	],
  	[
  		"a8ea",
  		"",
  		20
  	],
  	[
  		"a958",
  		""
  	],
  	[
  		"a95b",
  		""
  	],
  	[
  		"a95d",
  		""
  	],
  	[
  		"a989",
  		"〾⿰",
  		11
  	],
  	[
  		"a997",
  		"",
  		12
  	],
  	[
  		"a9f0",
  		"",
  		14
  	],
  	[
  		"aaa1",
  		"",
  		93
  	],
  	[
  		"aba1",
  		"",
  		93
  	],
  	[
  		"aca1",
  		"",
  		93
  	],
  	[
  		"ada1",
  		"",
  		93
  	],
  	[
  		"aea1",
  		"",
  		93
  	],
  	[
  		"afa1",
  		"",
  		93
  	],
  	[
  		"d7fa",
  		"",
  		4
  	],
  	[
  		"f8a1",
  		"",
  		93
  	],
  	[
  		"f9a1",
  		"",
  		93
  	],
  	[
  		"faa1",
  		"",
  		93
  	],
  	[
  		"fba1",
  		"",
  		93
  	],
  	[
  		"fca1",
  		"",
  		93
  	],
  	[
  		"fda1",
  		"",
  		93
  	],
  	[
  		"fe50",
  		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
  	],
  	[
  		"fe80",
  		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
  		6,
  		"䶮",
  		93
  	]
  ];

  var gbkAdded$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': gbkAdded
  });

  var uChars = [
  	128,
  	165,
  	169,
  	178,
  	184,
  	216,
  	226,
  	235,
  	238,
  	244,
  	248,
  	251,
  	253,
  	258,
  	276,
  	284,
  	300,
  	325,
  	329,
  	334,
  	364,
  	463,
  	465,
  	467,
  	469,
  	471,
  	473,
  	475,
  	477,
  	506,
  	594,
  	610,
  	712,
  	716,
  	730,
  	930,
  	938,
  	962,
  	970,
  	1026,
  	1104,
  	1106,
  	8209,
  	8215,
  	8218,
  	8222,
  	8231,
  	8241,
  	8244,
  	8246,
  	8252,
  	8365,
  	8452,
  	8454,
  	8458,
  	8471,
  	8482,
  	8556,
  	8570,
  	8596,
  	8602,
  	8713,
  	8720,
  	8722,
  	8726,
  	8731,
  	8737,
  	8740,
  	8742,
  	8748,
  	8751,
  	8760,
  	8766,
  	8777,
  	8781,
  	8787,
  	8802,
  	8808,
  	8816,
  	8854,
  	8858,
  	8870,
  	8896,
  	8979,
  	9322,
  	9372,
  	9548,
  	9588,
  	9616,
  	9622,
  	9634,
  	9652,
  	9662,
  	9672,
  	9676,
  	9680,
  	9702,
  	9735,
  	9738,
  	9793,
  	9795,
  	11906,
  	11909,
  	11913,
  	11917,
  	11928,
  	11944,
  	11947,
  	11951,
  	11956,
  	11960,
  	11964,
  	11979,
  	12284,
  	12292,
  	12312,
  	12319,
  	12330,
  	12351,
  	12436,
  	12447,
  	12535,
  	12543,
  	12586,
  	12842,
  	12850,
  	12964,
  	13200,
  	13215,
  	13218,
  	13253,
  	13263,
  	13267,
  	13270,
  	13384,
  	13428,
  	13727,
  	13839,
  	13851,
  	14617,
  	14703,
  	14801,
  	14816,
  	14964,
  	15183,
  	15471,
  	15585,
  	16471,
  	16736,
  	17208,
  	17325,
  	17330,
  	17374,
  	17623,
  	17997,
  	18018,
  	18212,
  	18218,
  	18301,
  	18318,
  	18760,
  	18811,
  	18814,
  	18820,
  	18823,
  	18844,
  	18848,
  	18872,
  	19576,
  	19620,
  	19738,
  	19887,
  	40870,
  	59244,
  	59336,
  	59367,
  	59413,
  	59417,
  	59423,
  	59431,
  	59437,
  	59443,
  	59452,
  	59460,
  	59478,
  	59493,
  	63789,
  	63866,
  	63894,
  	63976,
  	63986,
  	64016,
  	64018,
  	64021,
  	64025,
  	64034,
  	64037,
  	64042,
  	65074,
  	65093,
  	65107,
  	65112,
  	65127,
  	65132,
  	65375,
  	65510,
  	65536
  ];
  var gbChars = [
  	0,
  	36,
  	38,
  	45,
  	50,
  	81,
  	89,
  	95,
  	96,
  	100,
  	103,
  	104,
  	105,
  	109,
  	126,
  	133,
  	148,
  	172,
  	175,
  	179,
  	208,
  	306,
  	307,
  	308,
  	309,
  	310,
  	311,
  	312,
  	313,
  	341,
  	428,
  	443,
  	544,
  	545,
  	558,
  	741,
  	742,
  	749,
  	750,
  	805,
  	819,
  	820,
  	7922,
  	7924,
  	7925,
  	7927,
  	7934,
  	7943,
  	7944,
  	7945,
  	7950,
  	8062,
  	8148,
  	8149,
  	8152,
  	8164,
  	8174,
  	8236,
  	8240,
  	8262,
  	8264,
  	8374,
  	8380,
  	8381,
  	8384,
  	8388,
  	8390,
  	8392,
  	8393,
  	8394,
  	8396,
  	8401,
  	8406,
  	8416,
  	8419,
  	8424,
  	8437,
  	8439,
  	8445,
  	8482,
  	8485,
  	8496,
  	8521,
  	8603,
  	8936,
  	8946,
  	9046,
  	9050,
  	9063,
  	9066,
  	9076,
  	9092,
  	9100,
  	9108,
  	9111,
  	9113,
  	9131,
  	9162,
  	9164,
  	9218,
  	9219,
  	11329,
  	11331,
  	11334,
  	11336,
  	11346,
  	11361,
  	11363,
  	11366,
  	11370,
  	11372,
  	11375,
  	11389,
  	11682,
  	11686,
  	11687,
  	11692,
  	11694,
  	11714,
  	11716,
  	11723,
  	11725,
  	11730,
  	11736,
  	11982,
  	11989,
  	12102,
  	12336,
  	12348,
  	12350,
  	12384,
  	12393,
  	12395,
  	12397,
  	12510,
  	12553,
  	12851,
  	12962,
  	12973,
  	13738,
  	13823,
  	13919,
  	13933,
  	14080,
  	14298,
  	14585,
  	14698,
  	15583,
  	15847,
  	16318,
  	16434,
  	16438,
  	16481,
  	16729,
  	17102,
  	17122,
  	17315,
  	17320,
  	17402,
  	17418,
  	17859,
  	17909,
  	17911,
  	17915,
  	17916,
  	17936,
  	17939,
  	17961,
  	18664,
  	18703,
  	18814,
  	18962,
  	19043,
  	33469,
  	33470,
  	33471,
  	33484,
  	33485,
  	33490,
  	33497,
  	33501,
  	33505,
  	33513,
  	33520,
  	33536,
  	33550,
  	37845,
  	37921,
  	37948,
  	38029,
  	38038,
  	38064,
  	38065,
  	38066,
  	38069,
  	38075,
  	38076,
  	38078,
  	39108,
  	39109,
  	39113,
  	39114,
  	39115,
  	39116,
  	39265,
  	39394,
  	189000
  ];
  var gb18030Ranges = {
  	uChars: uChars,
  	gbChars: gbChars
  };

  var gb18030Ranges$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    uChars: uChars,
    gbChars: gbChars,
    'default': gb18030Ranges
  });

  var cp949 = [
  	[
  		"0",
  		"\u0000",
  		127
  	],
  	[
  		"8141",
  		"갂갃갅갆갋",
  		4,
  		"갘갞갟갡갢갣갥",
  		6,
  		"갮갲갳갴"
  	],
  	[
  		"8161",
  		"갵갶갷갺갻갽갾갿걁",
  		9,
  		"걌걎",
  		5,
  		"걕"
  	],
  	[
  		"8181",
  		"걖걗걙걚걛걝",
  		18,
  		"걲걳걵걶걹걻",
  		4,
  		"겂겇겈겍겎겏겑겒겓겕",
  		6,
  		"겞겢",
  		5,
  		"겫겭겮겱",
  		6,
  		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
  		7,
  		"곖곘",
  		7,
  		"곢곣곥곦곩곫곭곮곲곴곷",
  		4,
  		"곾곿괁괂괃괅괇",
  		4,
  		"괎괐괒괓"
  	],
  	[
  		"8241",
  		"괔괕괖괗괙괚괛괝괞괟괡",
  		7,
  		"괪괫괮",
  		5
  	],
  	[
  		"8261",
  		"괶괷괹괺괻괽",
  		6,
  		"굆굈굊",
  		5,
  		"굑굒굓굕굖굗"
  	],
  	[
  		"8281",
  		"굙",
  		7,
  		"굢굤",
  		7,
  		"굮굯굱굲굷굸굹굺굾궀궃",
  		4,
  		"궊궋궍궎궏궑",
  		10,
  		"궞",
  		5,
  		"궥",
  		17,
  		"궸",
  		7,
  		"귂귃귅귆귇귉",
  		6,
  		"귒귔",
  		7,
  		"귝귞귟귡귢귣귥",
  		18
  	],
  	[
  		"8341",
  		"귺귻귽귾긂",
  		5,
  		"긊긌긎",
  		5,
  		"긕",
  		7
  	],
  	[
  		"8361",
  		"긝",
  		18,
  		"긲긳긵긶긹긻긼"
  	],
  	[
  		"8381",
  		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
  		4,
  		"깞깢깣깤깦깧깪깫깭깮깯깱",
  		6,
  		"깺깾",
  		5,
  		"꺆",
  		5,
  		"꺍",
  		46,
  		"꺿껁껂껃껅",
  		6,
  		"껎껒",
  		5,
  		"껚껛껝",
  		8
  	],
  	[
  		"8441",
  		"껦껧껩껪껬껮",
  		5,
  		"껵껶껷껹껺껻껽",
  		8
  	],
  	[
  		"8461",
  		"꼆꼉꼊꼋꼌꼎꼏꼑",
  		18
  	],
  	[
  		"8481",
  		"꼤",
  		7,
  		"꼮꼯꼱꼳꼵",
  		6,
  		"꼾꽀꽄꽅꽆꽇꽊",
  		5,
  		"꽑",
  		10,
  		"꽞",
  		5,
  		"꽦",
  		18,
  		"꽺",
  		5,
  		"꾁꾂꾃꾅꾆꾇꾉",
  		6,
  		"꾒꾓꾔꾖",
  		5,
  		"꾝",
  		26,
  		"꾺꾻꾽꾾"
  	],
  	[
  		"8541",
  		"꾿꿁",
  		5,
  		"꿊꿌꿏",
  		4,
  		"꿕",
  		6,
  		"꿝",
  		4
  	],
  	[
  		"8561",
  		"꿢",
  		5,
  		"꿪",
  		5,
  		"꿲꿳꿵꿶꿷꿹",
  		6,
  		"뀂뀃"
  	],
  	[
  		"8581",
  		"뀅",
  		6,
  		"뀍뀎뀏뀑뀒뀓뀕",
  		6,
  		"뀞",
  		9,
  		"뀩",
  		26,
  		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
  		29,
  		"끾끿낁낂낃낅",
  		6,
  		"낎낐낒",
  		5,
  		"낛낝낞낣낤"
  	],
  	[
  		"8641",
  		"낥낦낧낪낰낲낶낷낹낺낻낽",
  		6,
  		"냆냊",
  		5,
  		"냒"
  	],
  	[
  		"8661",
  		"냓냕냖냗냙",
  		6,
  		"냡냢냣냤냦",
  		10
  	],
  	[
  		"8681",
  		"냱",
  		22,
  		"넊넍넎넏넑넔넕넖넗넚넞",
  		4,
  		"넦넧넩넪넫넭",
  		6,
  		"넶넺",
  		5,
  		"녂녃녅녆녇녉",
  		6,
  		"녒녓녖녗녙녚녛녝녞녟녡",
  		22,
  		"녺녻녽녾녿놁놃",
  		4,
  		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
  	],
  	[
  		"8741",
  		"놞",
  		9,
  		"놩",
  		15
  	],
  	[
  		"8761",
  		"놹",
  		18,
  		"뇍뇎뇏뇑뇒뇓뇕"
  	],
  	[
  		"8781",
  		"뇖",
  		5,
  		"뇞뇠",
  		7,
  		"뇪뇫뇭뇮뇯뇱",
  		7,
  		"뇺뇼뇾",
  		5,
  		"눆눇눉눊눍",
  		6,
  		"눖눘눚",
  		5,
  		"눡",
  		18,
  		"눵",
  		6,
  		"눽",
  		26,
  		"뉙뉚뉛뉝뉞뉟뉡",
  		6,
  		"뉪",
  		4
  	],
  	[
  		"8841",
  		"뉯",
  		4,
  		"뉶",
  		5,
  		"뉽",
  		6,
  		"늆늇늈늊",
  		4
  	],
  	[
  		"8861",
  		"늏늒늓늕늖늗늛",
  		4,
  		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
  	],
  	[
  		"8881",
  		"늸",
  		15,
  		"닊닋닍닎닏닑닓",
  		4,
  		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
  		6,
  		"댒댖",
  		5,
  		"댝",
  		54,
  		"덗덙덚덝덠덡덢덣"
  	],
  	[
  		"8941",
  		"덦덨덪덬덭덯덲덳덵덶덷덹",
  		6,
  		"뎂뎆",
  		5,
  		"뎍"
  	],
  	[
  		"8961",
  		"뎎뎏뎑뎒뎓뎕",
  		10,
  		"뎢",
  		5,
  		"뎩뎪뎫뎭"
  	],
  	[
  		"8981",
  		"뎮",
  		21,
  		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
  		18,
  		"돽",
  		18,
  		"됑",
  		6,
  		"됙됚됛됝됞됟됡",
  		6,
  		"됪됬",
  		7,
  		"됵",
  		15
  	],
  	[
  		"8a41",
  		"둅",
  		10,
  		"둒둓둕둖둗둙",
  		6,
  		"둢둤둦"
  	],
  	[
  		"8a61",
  		"둧",
  		4,
  		"둭",
  		18,
  		"뒁뒂"
  	],
  	[
  		"8a81",
  		"뒃",
  		4,
  		"뒉",
  		19,
  		"뒞",
  		5,
  		"뒥뒦뒧뒩뒪뒫뒭",
  		7,
  		"뒶뒸뒺",
  		5,
  		"듁듂듃듅듆듇듉",
  		6,
  		"듑듒듓듔듖",
  		5,
  		"듞듟듡듢듥듧",
  		4,
  		"듮듰듲",
  		5,
  		"듹",
  		26,
  		"딖딗딙딚딝"
  	],
  	[
  		"8b41",
  		"딞",
  		5,
  		"딦딫",
  		4,
  		"딲딳딵딶딷딹",
  		6,
  		"땂땆"
  	],
  	[
  		"8b61",
  		"땇땈땉땊땎땏땑땒땓땕",
  		6,
  		"땞땢",
  		8
  	],
  	[
  		"8b81",
  		"땫",
  		52,
  		"떢떣떥떦떧떩떬떭떮떯떲떶",
  		4,
  		"떾떿뗁뗂뗃뗅",
  		6,
  		"뗎뗒",
  		5,
  		"뗙",
  		18,
  		"뗭",
  		18
  	],
  	[
  		"8c41",
  		"똀",
  		15,
  		"똒똓똕똖똗똙",
  		4
  	],
  	[
  		"8c61",
  		"똞",
  		6,
  		"똦",
  		5,
  		"똭",
  		6,
  		"똵",
  		5
  	],
  	[
  		"8c81",
  		"똻",
  		12,
  		"뙉",
  		26,
  		"뙥뙦뙧뙩",
  		50,
  		"뚞뚟뚡뚢뚣뚥",
  		5,
  		"뚭뚮뚯뚰뚲",
  		16
  	],
  	[
  		"8d41",
  		"뛃",
  		16,
  		"뛕",
  		8
  	],
  	[
  		"8d61",
  		"뛞",
  		17,
  		"뛱뛲뛳뛵뛶뛷뛹뛺"
  	],
  	[
  		"8d81",
  		"뛻",
  		4,
  		"뜂뜃뜄뜆",
  		33,
  		"뜪뜫뜭뜮뜱",
  		6,
  		"뜺뜼",
  		7,
  		"띅띆띇띉띊띋띍",
  		6,
  		"띖",
  		9,
  		"띡띢띣띥띦띧띩",
  		6,
  		"띲띴띶",
  		5,
  		"띾띿랁랂랃랅",
  		6,
  		"랎랓랔랕랚랛랝랞"
  	],
  	[
  		"8e41",
  		"랟랡",
  		6,
  		"랪랮",
  		5,
  		"랶랷랹",
  		8
  	],
  	[
  		"8e61",
  		"럂",
  		4,
  		"럈럊",
  		19
  	],
  	[
  		"8e81",
  		"럞",
  		13,
  		"럮럯럱럲럳럵",
  		6,
  		"럾렂",
  		4,
  		"렊렋렍렎렏렑",
  		6,
  		"렚렜렞",
  		5,
  		"렦렧렩렪렫렭",
  		6,
  		"렶렺",
  		5,
  		"롁롂롃롅",
  		11,
  		"롒롔",
  		7,
  		"롞롟롡롢롣롥",
  		6,
  		"롮롰롲",
  		5,
  		"롹롺롻롽",
  		7
  	],
  	[
  		"8f41",
  		"뢅",
  		7,
  		"뢎",
  		17
  	],
  	[
  		"8f61",
  		"뢠",
  		7,
  		"뢩",
  		6,
  		"뢱뢲뢳뢵뢶뢷뢹",
  		4
  	],
  	[
  		"8f81",
  		"뢾뢿룂룄룆",
  		5,
  		"룍룎룏룑룒룓룕",
  		7,
  		"룞룠룢",
  		5,
  		"룪룫룭룮룯룱",
  		6,
  		"룺룼룾",
  		5,
  		"뤅",
  		18,
  		"뤙",
  		6,
  		"뤡",
  		26,
  		"뤾뤿륁륂륃륅",
  		6,
  		"륍륎륐륒",
  		5
  	],
  	[
  		"9041",
  		"륚륛륝륞륟륡",
  		6,
  		"륪륬륮",
  		5,
  		"륶륷륹륺륻륽"
  	],
  	[
  		"9061",
  		"륾",
  		5,
  		"릆릈릋릌릏",
  		15
  	],
  	[
  		"9081",
  		"릟",
  		12,
  		"릮릯릱릲릳릵",
  		6,
  		"릾맀맂",
  		5,
  		"맊맋맍맓",
  		4,
  		"맚맜맟맠맢맦맧맩맪맫맭",
  		6,
  		"맶맻",
  		4,
  		"먂",
  		5,
  		"먉",
  		11,
  		"먖",
  		33,
  		"먺먻먽먾먿멁멃멄멅멆"
  	],
  	[
  		"9141",
  		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
  		6,
  		"멦멪",
  		5
  	],
  	[
  		"9161",
  		"멲멳멵멶멷멹",
  		9,
  		"몆몈몉몊몋몍",
  		5
  	],
  	[
  		"9181",
  		"몓",
  		20,
  		"몪몭몮몯몱몳",
  		4,
  		"몺몼몾",
  		5,
  		"뫅뫆뫇뫉",
  		14,
  		"뫚",
  		33,
  		"뫽뫾뫿묁묂묃묅",
  		7,
  		"묎묐묒",
  		5,
  		"묙묚묛묝묞묟묡",
  		6
  	],
  	[
  		"9241",
  		"묨묪묬",
  		7,
  		"묷묹묺묿",
  		4,
  		"뭆뭈뭊뭋뭌뭎뭑뭒"
  	],
  	[
  		"9261",
  		"뭓뭕뭖뭗뭙",
  		7,
  		"뭢뭤",
  		7,
  		"뭭",
  		4
  	],
  	[
  		"9281",
  		"뭲",
  		21,
  		"뮉뮊뮋뮍뮎뮏뮑",
  		18,
  		"뮥뮦뮧뮩뮪뮫뮭",
  		6,
  		"뮵뮶뮸",
  		7,
  		"믁믂믃믅믆믇믉",
  		6,
  		"믑믒믔",
  		35,
  		"믺믻믽믾밁"
  	],
  	[
  		"9341",
  		"밃",
  		4,
  		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
  	],
  	[
  		"9361",
  		"밶밷밹",
  		6,
  		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
  		8
  	],
  	[
  		"9381",
  		"뱚뱛뱜뱞",
  		37,
  		"벆벇벉벊벍벏",
  		4,
  		"벖벘벛",
  		4,
  		"벢벣벥벦벩",
  		6,
  		"벲벶",
  		5,
  		"벾벿볁볂볃볅",
  		7,
  		"볎볒볓볔볖볗볙볚볛볝",
  		22,
  		"볷볹볺볻볽"
  	],
  	[
  		"9441",
  		"볾",
  		5,
  		"봆봈봊",
  		5,
  		"봑봒봓봕",
  		8
  	],
  	[
  		"9461",
  		"봞",
  		5,
  		"봥",
  		6,
  		"봭",
  		12
  	],
  	[
  		"9481",
  		"봺",
  		5,
  		"뵁",
  		6,
  		"뵊뵋뵍뵎뵏뵑",
  		6,
  		"뵚",
  		9,
  		"뵥뵦뵧뵩",
  		22,
  		"붂붃붅붆붋",
  		4,
  		"붒붔붖붗붘붛붝",
  		6,
  		"붥",
  		10,
  		"붱",
  		6,
  		"붹",
  		24
  	],
  	[
  		"9541",
  		"뷒뷓뷖뷗뷙뷚뷛뷝",
  		11,
  		"뷪",
  		5,
  		"뷱"
  	],
  	[
  		"9561",
  		"뷲뷳뷵뷶뷷뷹",
  		6,
  		"븁븂븄븆",
  		5,
  		"븎븏븑븒븓"
  	],
  	[
  		"9581",
  		"븕",
  		6,
  		"븞븠",
  		35,
  		"빆빇빉빊빋빍빏",
  		4,
  		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
  		4,
  		"빲빶",
  		4,
  		"빾빿뺁뺂뺃뺅",
  		6,
  		"뺎뺒",
  		5,
  		"뺚",
  		13,
  		"뺩",
  		14
  	],
  	[
  		"9641",
  		"뺸",
  		23,
  		"뻒뻓"
  	],
  	[
  		"9661",
  		"뻕뻖뻙",
  		6,
  		"뻡뻢뻦",
  		5,
  		"뻭",
  		8
  	],
  	[
  		"9681",
  		"뻶",
  		10,
  		"뼂",
  		5,
  		"뼊",
  		13,
  		"뼚뼞",
  		33,
  		"뽂뽃뽅뽆뽇뽉",
  		6,
  		"뽒뽓뽔뽖",
  		44
  	],
  	[
  		"9741",
  		"뾃",
  		16,
  		"뾕",
  		8
  	],
  	[
  		"9761",
  		"뾞",
  		17,
  		"뾱",
  		7
  	],
  	[
  		"9781",
  		"뾹",
  		11,
  		"뿆",
  		5,
  		"뿎뿏뿑뿒뿓뿕",
  		6,
  		"뿝뿞뿠뿢",
  		89,
  		"쀽쀾쀿"
  	],
  	[
  		"9841",
  		"쁀",
  		16,
  		"쁒",
  		5,
  		"쁙쁚쁛"
  	],
  	[
  		"9861",
  		"쁝쁞쁟쁡",
  		6,
  		"쁪",
  		15
  	],
  	[
  		"9881",
  		"쁺",
  		21,
  		"삒삓삕삖삗삙",
  		6,
  		"삢삤삦",
  		5,
  		"삮삱삲삷",
  		4,
  		"삾샂샃샄샆샇샊샋샍샎샏샑",
  		6,
  		"샚샞",
  		5,
  		"샦샧샩샪샫샭",
  		6,
  		"샶샸샺",
  		5,
  		"섁섂섃섅섆섇섉",
  		6,
  		"섑섒섓섔섖",
  		5,
  		"섡섢섥섨섩섪섫섮"
  	],
  	[
  		"9941",
  		"섲섳섴섵섷섺섻섽섾섿셁",
  		6,
  		"셊셎",
  		5,
  		"셖셗"
  	],
  	[
  		"9961",
  		"셙셚셛셝",
  		6,
  		"셦셪",
  		5,
  		"셱셲셳셵셶셷셹셺셻"
  	],
  	[
  		"9981",
  		"셼",
  		8,
  		"솆",
  		5,
  		"솏솑솒솓솕솗",
  		4,
  		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
  		11,
  		"솾",
  		5,
  		"쇅쇆쇇쇉쇊쇋쇍",
  		6,
  		"쇕쇖쇙",
  		6,
  		"쇡쇢쇣쇥쇦쇧쇩",
  		6,
  		"쇲쇴",
  		7,
  		"쇾쇿숁숂숃숅",
  		6,
  		"숎숐숒",
  		5,
  		"숚숛숝숞숡숢숣"
  	],
  	[
  		"9a41",
  		"숤숥숦숧숪숬숮숰숳숵",
  		16
  	],
  	[
  		"9a61",
  		"쉆쉇쉉",
  		6,
  		"쉒쉓쉕쉖쉗쉙",
  		6,
  		"쉡쉢쉣쉤쉦"
  	],
  	[
  		"9a81",
  		"쉧",
  		4,
  		"쉮쉯쉱쉲쉳쉵",
  		6,
  		"쉾슀슂",
  		5,
  		"슊",
  		5,
  		"슑",
  		6,
  		"슙슚슜슞",
  		5,
  		"슦슧슩슪슫슮",
  		5,
  		"슶슸슺",
  		33,
  		"싞싟싡싢싥",
  		5,
  		"싮싰싲싳싴싵싷싺싽싾싿쌁",
  		6,
  		"쌊쌋쌎쌏"
  	],
  	[
  		"9b41",
  		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
  		6,
  		"쌦쌧쌪",
  		8
  	],
  	[
  		"9b61",
  		"쌳",
  		17,
  		"썆",
  		7
  	],
  	[
  		"9b81",
  		"썎",
  		25,
  		"썪썫썭썮썯썱썳",
  		4,
  		"썺썻썾",
  		5,
  		"쎅쎆쎇쎉쎊쎋쎍",
  		50,
  		"쏁",
  		22,
  		"쏚"
  	],
  	[
  		"9c41",
  		"쏛쏝쏞쏡쏣",
  		4,
  		"쏪쏫쏬쏮",
  		5,
  		"쏶쏷쏹",
  		5
  	],
  	[
  		"9c61",
  		"쏿",
  		8,
  		"쐉",
  		6,
  		"쐑",
  		9
  	],
  	[
  		"9c81",
  		"쐛",
  		8,
  		"쐥",
  		6,
  		"쐭쐮쐯쐱쐲쐳쐵",
  		6,
  		"쐾",
  		9,
  		"쑉",
  		26,
  		"쑦쑧쑩쑪쑫쑭",
  		6,
  		"쑶쑷쑸쑺",
  		5,
  		"쒁",
  		18,
  		"쒕",
  		6,
  		"쒝",
  		12
  	],
  	[
  		"9d41",
  		"쒪",
  		13,
  		"쒹쒺쒻쒽",
  		8
  	],
  	[
  		"9d61",
  		"쓆",
  		25
  	],
  	[
  		"9d81",
  		"쓠",
  		8,
  		"쓪",
  		5,
  		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
  		9,
  		"씍씎씏씑씒씓씕",
  		6,
  		"씝",
  		10,
  		"씪씫씭씮씯씱",
  		6,
  		"씺씼씾",
  		5,
  		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
  		6,
  		"앲앶",
  		5,
  		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
  	],
  	[
  		"9e41",
  		"얖얙얚얛얝얞얟얡",
  		7,
  		"얪",
  		9,
  		"얶"
  	],
  	[
  		"9e61",
  		"얷얺얿",
  		4,
  		"엋엍엏엒엓엕엖엗엙",
  		6,
  		"엢엤엦엧"
  	],
  	[
  		"9e81",
  		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
  		6,
  		"옚옝",
  		6,
  		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
  		6,
  		"왒왖",
  		5,
  		"왞왟왡",
  		10,
  		"왭왮왰왲",
  		5,
  		"왺왻왽왾왿욁",
  		6,
  		"욊욌욎",
  		5,
  		"욖욗욙욚욛욝",
  		6,
  		"욦"
  	],
  	[
  		"9f41",
  		"욨욪",
  		5,
  		"욲욳욵욶욷욻",
  		4,
  		"웂웄웆",
  		5,
  		"웎"
  	],
  	[
  		"9f61",
  		"웏웑웒웓웕",
  		6,
  		"웞웟웢",
  		5,
  		"웪웫웭웮웯웱웲"
  	],
  	[
  		"9f81",
  		"웳",
  		4,
  		"웺웻웼웾",
  		5,
  		"윆윇윉윊윋윍",
  		6,
  		"윖윘윚",
  		5,
  		"윢윣윥윦윧윩",
  		6,
  		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
  		4,
  		"읋읎읐읙읚읛읝읞읟읡",
  		6,
  		"읩읪읬",
  		7,
  		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
  		4,
  		"잢잧",
  		4,
  		"잮잯잱잲잳잵잶잷"
  	],
  	[
  		"a041",
  		"잸잹잺잻잾쟂",
  		5,
  		"쟊쟋쟍쟏쟑",
  		6,
  		"쟙쟚쟛쟜"
  	],
  	[
  		"a061",
  		"쟞",
  		5,
  		"쟥쟦쟧쟩쟪쟫쟭",
  		13
  	],
  	[
  		"a081",
  		"쟻",
  		4,
  		"젂젃젅젆젇젉젋",
  		4,
  		"젒젔젗",
  		4,
  		"젞젟젡젢젣젥",
  		6,
  		"젮젰젲",
  		5,
  		"젹젺젻젽젾젿졁",
  		6,
  		"졊졋졎",
  		5,
  		"졕",
  		26,
  		"졲졳졵졶졷졹졻",
  		4,
  		"좂좄좈좉좊좎",
  		5,
  		"좕",
  		7,
  		"좞좠좢좣좤"
  	],
  	[
  		"a141",
  		"좥좦좧좩",
  		18,
  		"좾좿죀죁"
  	],
  	[
  		"a161",
  		"죂죃죅죆죇죉죊죋죍",
  		6,
  		"죖죘죚",
  		5,
  		"죢죣죥"
  	],
  	[
  		"a181",
  		"죦",
  		14,
  		"죶",
  		5,
  		"죾죿줁줂줃줇",
  		4,
  		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
  		9,
  		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
  	],
  	[
  		"a241",
  		"줐줒",
  		5,
  		"줙",
  		18
  	],
  	[
  		"a261",
  		"줭",
  		6,
  		"줵",
  		18
  	],
  	[
  		"a281",
  		"쥈",
  		7,
  		"쥒쥓쥕쥖쥗쥙",
  		6,
  		"쥢쥤",
  		7,
  		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
  	],
  	[
  		"a341",
  		"쥱쥲쥳쥵",
  		6,
  		"쥽",
  		10,
  		"즊즋즍즎즏"
  	],
  	[
  		"a361",
  		"즑",
  		6,
  		"즚즜즞",
  		16
  	],
  	[
  		"a381",
  		"즯",
  		16,
  		"짂짃짅짆짉짋",
  		4,
  		"짒짔짗짘짛！",
  		58,
  		"￦］",
  		32,
  		"￣"
  	],
  	[
  		"a441",
  		"짞짟짡짣짥짦짨짩짪짫짮짲",
  		5,
  		"짺짻짽짾짿쨁쨂쨃쨄"
  	],
  	[
  		"a461",
  		"쨅쨆쨇쨊쨎",
  		5,
  		"쨕쨖쨗쨙",
  		12
  	],
  	[
  		"a481",
  		"쨦쨧쨨쨪",
  		28,
  		"ㄱ",
  		93
  	],
  	[
  		"a541",
  		"쩇",
  		4,
  		"쩎쩏쩑쩒쩓쩕",
  		6,
  		"쩞쩢",
  		5,
  		"쩩쩪"
  	],
  	[
  		"a561",
  		"쩫",
  		17,
  		"쩾",
  		5,
  		"쪅쪆"
  	],
  	[
  		"a581",
  		"쪇",
  		16,
  		"쪙",
  		14,
  		"ⅰ",
  		9
  	],
  	[
  		"a5b0",
  		"Ⅰ",
  		9
  	],
  	[
  		"a5c1",
  		"Α",
  		16,
  		"Σ",
  		6
  	],
  	[
  		"a5e1",
  		"α",
  		16,
  		"σ",
  		6
  	],
  	[
  		"a641",
  		"쪨",
  		19,
  		"쪾쪿쫁쫂쫃쫅"
  	],
  	[
  		"a661",
  		"쫆",
  		5,
  		"쫎쫐쫒쫔쫕쫖쫗쫚",
  		5,
  		"쫡",
  		6
  	],
  	[
  		"a681",
  		"쫨쫩쫪쫫쫭",
  		6,
  		"쫵",
  		18,
  		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
  		7
  	],
  	[
  		"a741",
  		"쬋",
  		4,
  		"쬑쬒쬓쬕쬖쬗쬙",
  		6,
  		"쬢",
  		7
  	],
  	[
  		"a761",
  		"쬪",
  		22,
  		"쭂쭃쭄"
  	],
  	[
  		"a781",
  		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
  		6,
  		"쭚쭛쭜쭞",
  		5,
  		"쭥",
  		7,
  		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
  		9,
  		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
  		9,
  		"㎀",
  		4,
  		"㎺",
  		5,
  		"㎐",
  		4,
  		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
  	],
  	[
  		"a841",
  		"쭭",
  		10,
  		"쭺",
  		14
  	],
  	[
  		"a861",
  		"쮉",
  		18,
  		"쮝",
  		6
  	],
  	[
  		"a881",
  		"쮤",
  		19,
  		"쮹",
  		11,
  		"ÆÐªĦ"
  	],
  	[
  		"a8a6",
  		"Ĳ"
  	],
  	[
  		"a8a8",
  		"ĿŁØŒºÞŦŊ"
  	],
  	[
  		"a8b1",
  		"㉠",
  		27,
  		"ⓐ",
  		25,
  		"①",
  		14,
  		"½⅓⅔¼¾⅛⅜⅝⅞"
  	],
  	[
  		"a941",
  		"쯅",
  		14,
  		"쯕",
  		10
  	],
  	[
  		"a961",
  		"쯠쯡쯢쯣쯥쯦쯨쯪",
  		18
  	],
  	[
  		"a981",
  		"쯽",
  		14,
  		"찎찏찑찒찓찕",
  		6,
  		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
  		27,
  		"⒜",
  		25,
  		"⑴",
  		14,
  		"¹²³⁴ⁿ₁₂₃₄"
  	],
  	[
  		"aa41",
  		"찥찦찪찫찭찯찱",
  		6,
  		"찺찿",
  		4,
  		"챆챇챉챊챋챍챎"
  	],
  	[
  		"aa61",
  		"챏",
  		4,
  		"챖챚",
  		5,
  		"챡챢챣챥챧챩",
  		6,
  		"챱챲"
  	],
  	[
  		"aa81",
  		"챳챴챶",
  		29,
  		"ぁ",
  		82
  	],
  	[
  		"ab41",
  		"첔첕첖첗첚첛첝첞첟첡",
  		6,
  		"첪첮",
  		5,
  		"첶첷첹"
  	],
  	[
  		"ab61",
  		"첺첻첽",
  		6,
  		"쳆쳈쳊",
  		5,
  		"쳑쳒쳓쳕",
  		5
  	],
  	[
  		"ab81",
  		"쳛",
  		8,
  		"쳥",
  		6,
  		"쳭쳮쳯쳱",
  		12,
  		"ァ",
  		85
  	],
  	[
  		"ac41",
  		"쳾쳿촀촂",
  		5,
  		"촊촋촍촎촏촑",
  		6,
  		"촚촜촞촟촠"
  	],
  	[
  		"ac61",
  		"촡촢촣촥촦촧촩촪촫촭",
  		11,
  		"촺",
  		4
  	],
  	[
  		"ac81",
  		"촿",
  		28,
  		"쵝쵞쵟А",
  		5,
  		"ЁЖ",
  		25
  	],
  	[
  		"acd1",
  		"а",
  		5,
  		"ёж",
  		25
  	],
  	[
  		"ad41",
  		"쵡쵢쵣쵥",
  		6,
  		"쵮쵰쵲",
  		5,
  		"쵹",
  		7
  	],
  	[
  		"ad61",
  		"춁",
  		6,
  		"춉",
  		10,
  		"춖춗춙춚춛춝춞춟"
  	],
  	[
  		"ad81",
  		"춠춡춢춣춦춨춪",
  		5,
  		"춱",
  		18,
  		"췅"
  	],
  	[
  		"ae41",
  		"췆",
  		5,
  		"췍췎췏췑",
  		16
  	],
  	[
  		"ae61",
  		"췢",
  		5,
  		"췩췪췫췭췮췯췱",
  		6,
  		"췺췼췾",
  		4
  	],
  	[
  		"ae81",
  		"츃츅츆츇츉츊츋츍",
  		6,
  		"츕츖츗츘츚",
  		5,
  		"츢츣츥츦츧츩츪츫"
  	],
  	[
  		"af41",
  		"츬츭츮츯츲츴츶",
  		19
  	],
  	[
  		"af61",
  		"칊",
  		13,
  		"칚칛칝칞칢",
  		5,
  		"칪칬"
  	],
  	[
  		"af81",
  		"칮",
  		5,
  		"칶칷칹칺칻칽",
  		6,
  		"캆캈캊",
  		5,
  		"캒캓캕캖캗캙"
  	],
  	[
  		"b041",
  		"캚",
  		5,
  		"캢캦",
  		5,
  		"캮",
  		12
  	],
  	[
  		"b061",
  		"캻",
  		5,
  		"컂",
  		19
  	],
  	[
  		"b081",
  		"컖",
  		13,
  		"컦컧컩컪컭",
  		6,
  		"컶컺",
  		5,
  		"가각간갇갈갉갊감",
  		7,
  		"같",
  		4,
  		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
  	],
  	[
  		"b141",
  		"켂켃켅켆켇켉",
  		6,
  		"켒켔켖",
  		5,
  		"켝켞켟켡켢켣"
  	],
  	[
  		"b161",
  		"켥",
  		6,
  		"켮켲",
  		5,
  		"켹",
  		11
  	],
  	[
  		"b181",
  		"콅",
  		14,
  		"콖콗콙콚콛콝",
  		6,
  		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
  	],
  	[
  		"b241",
  		"콭콮콯콲콳콵콶콷콹",
  		6,
  		"쾁쾂쾃쾄쾆",
  		5,
  		"쾍"
  	],
  	[
  		"b261",
  		"쾎",
  		18,
  		"쾢",
  		5,
  		"쾩"
  	],
  	[
  		"b281",
  		"쾪",
  		5,
  		"쾱",
  		18,
  		"쿅",
  		6,
  		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
  	],
  	[
  		"b341",
  		"쿌",
  		19,
  		"쿢쿣쿥쿦쿧쿩"
  	],
  	[
  		"b361",
  		"쿪",
  		5,
  		"쿲쿴쿶",
  		5,
  		"쿽쿾쿿퀁퀂퀃퀅",
  		5
  	],
  	[
  		"b381",
  		"퀋",
  		5,
  		"퀒",
  		5,
  		"퀙",
  		19,
  		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
  		4,
  		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
  	],
  	[
  		"b441",
  		"퀮",
  		5,
  		"퀶퀷퀹퀺퀻퀽",
  		6,
  		"큆큈큊",
  		5
  	],
  	[
  		"b461",
  		"큑큒큓큕큖큗큙",
  		6,
  		"큡",
  		10,
  		"큮큯"
  	],
  	[
  		"b481",
  		"큱큲큳큵",
  		6,
  		"큾큿킀킂",
  		18,
  		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
  		4,
  		"닳담답닷",
  		4,
  		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
  	],
  	[
  		"b541",
  		"킕",
  		14,
  		"킦킧킩킪킫킭",
  		5
  	],
  	[
  		"b561",
  		"킳킶킸킺",
  		5,
  		"탂탃탅탆탇탊",
  		5,
  		"탒탖",
  		4
  	],
  	[
  		"b581",
  		"탛탞탟탡탢탣탥",
  		6,
  		"탮탲",
  		5,
  		"탹",
  		11,
  		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
  	],
  	[
  		"b641",
  		"턅",
  		7,
  		"턎",
  		17
  	],
  	[
  		"b661",
  		"턠",
  		15,
  		"턲턳턵턶턷턹턻턼턽턾"
  	],
  	[
  		"b681",
  		"턿텂텆",
  		5,
  		"텎텏텑텒텓텕",
  		6,
  		"텞텠텢",
  		5,
  		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
  	],
  	[
  		"b741",
  		"텮",
  		13,
  		"텽",
  		6,
  		"톅톆톇톉톊"
  	],
  	[
  		"b761",
  		"톋",
  		20,
  		"톢톣톥톦톧"
  	],
  	[
  		"b781",
  		"톩",
  		6,
  		"톲톴톶톷톸톹톻톽톾톿퇁",
  		14,
  		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
  	],
  	[
  		"b841",
  		"퇐",
  		7,
  		"퇙",
  		17
  	],
  	[
  		"b861",
  		"퇫",
  		8,
  		"퇵퇶퇷퇹",
  		13
  	],
  	[
  		"b881",
  		"툈툊",
  		5,
  		"툑",
  		24,
  		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
  		4,
  		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
  	],
  	[
  		"b941",
  		"툪툫툮툯툱툲툳툵",
  		6,
  		"툾퉀퉂",
  		5,
  		"퉉퉊퉋퉌"
  	],
  	[
  		"b961",
  		"퉍",
  		14,
  		"퉝",
  		6,
  		"퉥퉦퉧퉨"
  	],
  	[
  		"b981",
  		"퉩",
  		22,
  		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
  		4,
  		"받",
  		4,
  		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
  	],
  	[
  		"ba41",
  		"튍튎튏튒튓튔튖",
  		5,
  		"튝튞튟튡튢튣튥",
  		6,
  		"튭"
  	],
  	[
  		"ba61",
  		"튮튯튰튲",
  		5,
  		"튺튻튽튾틁틃",
  		4,
  		"틊틌",
  		5
  	],
  	[
  		"ba81",
  		"틒틓틕틖틗틙틚틛틝",
  		6,
  		"틦",
  		9,
  		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
  	],
  	[
  		"bb41",
  		"틻",
  		4,
  		"팂팄팆",
  		5,
  		"팏팑팒팓팕팗",
  		4,
  		"팞팢팣"
  	],
  	[
  		"bb61",
  		"팤팦팧팪팫팭팮팯팱",
  		6,
  		"팺팾",
  		5,
  		"퍆퍇퍈퍉"
  	],
  	[
  		"bb81",
  		"퍊",
  		31,
  		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
  	],
  	[
  		"bc41",
  		"퍪",
  		17,
  		"퍾퍿펁펂펃펅펆펇"
  	],
  	[
  		"bc61",
  		"펈펉펊펋펎펒",
  		5,
  		"펚펛펝펞펟펡",
  		6,
  		"펪펬펮"
  	],
  	[
  		"bc81",
  		"펯",
  		4,
  		"펵펶펷펹펺펻펽",
  		6,
  		"폆폇폊",
  		5,
  		"폑",
  		5,
  		"샥샨샬샴샵샷샹섀섄섈섐섕서",
  		4,
  		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
  	],
  	[
  		"bd41",
  		"폗폙",
  		7,
  		"폢폤",
  		7,
  		"폮폯폱폲폳폵폶폷"
  	],
  	[
  		"bd61",
  		"폸폹폺폻폾퐀퐂",
  		5,
  		"퐉",
  		13
  	],
  	[
  		"bd81",
  		"퐗",
  		5,
  		"퐞",
  		25,
  		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
  	],
  	[
  		"be41",
  		"퐸",
  		7,
  		"푁푂푃푅",
  		14
  	],
  	[
  		"be61",
  		"푔",
  		7,
  		"푝푞푟푡푢푣푥",
  		7,
  		"푮푰푱푲"
  	],
  	[
  		"be81",
  		"푳",
  		4,
  		"푺푻푽푾풁풃",
  		4,
  		"풊풌풎",
  		5,
  		"풕",
  		8,
  		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
  		6,
  		"엌엎"
  	],
  	[
  		"bf41",
  		"풞",
  		10,
  		"풪",
  		14
  	],
  	[
  		"bf61",
  		"풹",
  		18,
  		"퓍퓎퓏퓑퓒퓓퓕"
  	],
  	[
  		"bf81",
  		"퓖",
  		5,
  		"퓝퓞퓠",
  		7,
  		"퓩퓪퓫퓭퓮퓯퓱",
  		6,
  		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
  		5,
  		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
  	],
  	[
  		"c041",
  		"퓾",
  		5,
  		"픅픆픇픉픊픋픍",
  		6,
  		"픖픘",
  		5
  	],
  	[
  		"c061",
  		"픞",
  		25
  	],
  	[
  		"c081",
  		"픸픹픺픻픾픿핁핂핃핅",
  		6,
  		"핎핐핒",
  		5,
  		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
  		7,
  		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
  	],
  	[
  		"c141",
  		"핤핦핧핪핬핮",
  		5,
  		"핶핷핹핺핻핽",
  		6,
  		"햆햊햋"
  	],
  	[
  		"c161",
  		"햌햍햎햏햑",
  		19,
  		"햦햧"
  	],
  	[
  		"c181",
  		"햨",
  		31,
  		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
  	],
  	[
  		"c241",
  		"헊헋헍헎헏헑헓",
  		4,
  		"헚헜헞",
  		5,
  		"헦헧헩헪헫헭헮"
  	],
  	[
  		"c261",
  		"헯",
  		4,
  		"헶헸헺",
  		5,
  		"혂혃혅혆혇혉",
  		6,
  		"혒"
  	],
  	[
  		"c281",
  		"혖",
  		5,
  		"혝혞혟혡혢혣혥",
  		7,
  		"혮",
  		9,
  		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
  	],
  	[
  		"c341",
  		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
  		4
  	],
  	[
  		"c361",
  		"홢",
  		4,
  		"홨홪",
  		5,
  		"홲홳홵",
  		11
  	],
  	[
  		"c381",
  		"횁횂횄횆",
  		5,
  		"횎횏횑횒횓횕",
  		7,
  		"횞횠횢",
  		5,
  		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
  	],
  	[
  		"c441",
  		"횫횭횮횯횱",
  		7,
  		"횺횼",
  		7,
  		"훆훇훉훊훋"
  	],
  	[
  		"c461",
  		"훍훎훏훐훒훓훕훖훘훚",
  		5,
  		"훡훢훣훥훦훧훩",
  		4
  	],
  	[
  		"c481",
  		"훮훯훱훲훳훴훶",
  		5,
  		"훾훿휁휂휃휅",
  		11,
  		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
  	],
  	[
  		"c541",
  		"휕휖휗휚휛휝휞휟휡",
  		6,
  		"휪휬휮",
  		5,
  		"휶휷휹"
  	],
  	[
  		"c561",
  		"휺휻휽",
  		6,
  		"흅흆흈흊",
  		5,
  		"흒흓흕흚",
  		4
  	],
  	[
  		"c581",
  		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
  		6,
  		"흾흿힀힂",
  		5,
  		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
  	],
  	[
  		"c641",
  		"힍힎힏힑",
  		6,
  		"힚힜힞",
  		5
  	],
  	[
  		"c6a1",
  		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
  	],
  	[
  		"c7a1",
  		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
  	],
  	[
  		"c8a1",
  		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
  	],
  	[
  		"caa1",
  		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
  	],
  	[
  		"cba1",
  		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
  	],
  	[
  		"cca1",
  		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
  	],
  	[
  		"cda1",
  		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
  	],
  	[
  		"cea1",
  		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
  	],
  	[
  		"cfa1",
  		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
  	],
  	[
  		"d0a1",
  		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
  	],
  	[
  		"d1a1",
  		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
  		5,
  		"那樂",
  		4,
  		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
  	],
  	[
  		"d2a1",
  		"納臘蠟衲囊娘廊",
  		4,
  		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
  		5,
  		"駑魯",
  		10,
  		"濃籠聾膿農惱牢磊腦賂雷尿壘",
  		7,
  		"嫩訥杻紐勒",
  		5,
  		"能菱陵尼泥匿溺多茶"
  	],
  	[
  		"d3a1",
  		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
  	],
  	[
  		"d4a1",
  		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
  	],
  	[
  		"d5a1",
  		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
  	],
  	[
  		"d6a1",
  		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
  	],
  	[
  		"d7a1",
  		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
  	],
  	[
  		"d8a1",
  		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
  	],
  	[
  		"d9a1",
  		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
  	],
  	[
  		"daa1",
  		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
  	],
  	[
  		"dba1",
  		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
  	],
  	[
  		"dca1",
  		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
  	],
  	[
  		"dda1",
  		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
  	],
  	[
  		"dea1",
  		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
  	],
  	[
  		"dfa1",
  		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
  	],
  	[
  		"e0a1",
  		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
  	],
  	[
  		"e1a1",
  		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
  	],
  	[
  		"e2a1",
  		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
  	],
  	[
  		"e3a1",
  		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
  	],
  	[
  		"e4a1",
  		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
  	],
  	[
  		"e5a1",
  		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
  	],
  	[
  		"e6a1",
  		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
  	],
  	[
  		"e7a1",
  		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
  	],
  	[
  		"e8a1",
  		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
  	],
  	[
  		"e9a1",
  		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
  	],
  	[
  		"eaa1",
  		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
  	],
  	[
  		"eba1",
  		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
  	],
  	[
  		"eca1",
  		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
  	],
  	[
  		"eda1",
  		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
  	],
  	[
  		"eea1",
  		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
  	],
  	[
  		"efa1",
  		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
  	],
  	[
  		"f0a1",
  		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
  	],
  	[
  		"f1a1",
  		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
  	],
  	[
  		"f2a1",
  		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
  	],
  	[
  		"f3a1",
  		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
  	],
  	[
  		"f4a1",
  		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
  	],
  	[
  		"f5a1",
  		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
  	],
  	[
  		"f6a1",
  		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
  	],
  	[
  		"f7a1",
  		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
  	],
  	[
  		"f8a1",
  		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
  	],
  	[
  		"f9a1",
  		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
  	],
  	[
  		"faa1",
  		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
  	],
  	[
  		"fba1",
  		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
  	],
  	[
  		"fca1",
  		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
  	],
  	[
  		"fda1",
  		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
  	]
  ];

  var cp949$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': cp949
  });

  var cp950 = [
  	[
  		"0",
  		"\u0000",
  		127
  	],
  	[
  		"a140",
  		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
  	],
  	[
  		"a1a1",
  		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
  		4,
  		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
  	],
  	[
  		"a240",
  		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
  		7,
  		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
  	],
  	[
  		"a2a1",
  		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
  		9,
  		"Ⅰ",
  		9,
  		"〡",
  		8,
  		"十卄卅Ａ",
  		25,
  		"ａ",
  		21
  	],
  	[
  		"a340",
  		"ｗｘｙｚΑ",
  		16,
  		"Σ",
  		6,
  		"α",
  		16,
  		"σ",
  		6,
  		"ㄅ",
  		10
  	],
  	[
  		"a3a1",
  		"ㄐ",
  		25,
  		"˙ˉˊˇˋ"
  	],
  	[
  		"a3e1",
  		"€"
  	],
  	[
  		"a440",
  		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
  	],
  	[
  		"a4a1",
  		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
  	],
  	[
  		"a540",
  		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
  	],
  	[
  		"a5a1",
  		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
  	],
  	[
  		"a640",
  		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
  	],
  	[
  		"a6a1",
  		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
  	],
  	[
  		"a740",
  		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
  	],
  	[
  		"a7a1",
  		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
  	],
  	[
  		"a840",
  		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
  	],
  	[
  		"a8a1",
  		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
  	],
  	[
  		"a940",
  		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
  	],
  	[
  		"a9a1",
  		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
  	],
  	[
  		"aa40",
  		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
  	],
  	[
  		"aaa1",
  		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
  	],
  	[
  		"ab40",
  		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
  	],
  	[
  		"aba1",
  		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
  	],
  	[
  		"ac40",
  		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
  	],
  	[
  		"aca1",
  		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
  	],
  	[
  		"ad40",
  		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
  	],
  	[
  		"ada1",
  		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
  	],
  	[
  		"ae40",
  		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
  	],
  	[
  		"aea1",
  		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
  	],
  	[
  		"af40",
  		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
  	],
  	[
  		"afa1",
  		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
  	],
  	[
  		"b040",
  		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
  	],
  	[
  		"b0a1",
  		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
  	],
  	[
  		"b140",
  		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
  	],
  	[
  		"b1a1",
  		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
  	],
  	[
  		"b240",
  		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
  	],
  	[
  		"b2a1",
  		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
  	],
  	[
  		"b340",
  		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
  	],
  	[
  		"b3a1",
  		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
  	],
  	[
  		"b440",
  		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
  	],
  	[
  		"b4a1",
  		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
  	],
  	[
  		"b540",
  		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
  	],
  	[
  		"b5a1",
  		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
  	],
  	[
  		"b640",
  		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
  	],
  	[
  		"b6a1",
  		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
  	],
  	[
  		"b740",
  		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
  	],
  	[
  		"b7a1",
  		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
  	],
  	[
  		"b840",
  		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
  	],
  	[
  		"b8a1",
  		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
  	],
  	[
  		"b940",
  		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
  	],
  	[
  		"b9a1",
  		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
  	],
  	[
  		"ba40",
  		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
  	],
  	[
  		"baa1",
  		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
  	],
  	[
  		"bb40",
  		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
  	],
  	[
  		"bba1",
  		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
  	],
  	[
  		"bc40",
  		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
  	],
  	[
  		"bca1",
  		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
  	],
  	[
  		"bd40",
  		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
  	],
  	[
  		"bda1",
  		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
  	],
  	[
  		"be40",
  		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
  	],
  	[
  		"bea1",
  		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
  	],
  	[
  		"bf40",
  		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
  	],
  	[
  		"bfa1",
  		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
  	],
  	[
  		"c040",
  		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
  	],
  	[
  		"c0a1",
  		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
  	],
  	[
  		"c140",
  		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
  	],
  	[
  		"c1a1",
  		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
  	],
  	[
  		"c240",
  		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
  	],
  	[
  		"c2a1",
  		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
  	],
  	[
  		"c340",
  		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
  	],
  	[
  		"c3a1",
  		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
  	],
  	[
  		"c440",
  		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
  	],
  	[
  		"c4a1",
  		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
  	],
  	[
  		"c540",
  		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
  	],
  	[
  		"c5a1",
  		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
  	],
  	[
  		"c640",
  		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
  	],
  	[
  		"c940",
  		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
  	],
  	[
  		"c9a1",
  		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
  	],
  	[
  		"ca40",
  		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
  	],
  	[
  		"caa1",
  		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
  	],
  	[
  		"cb40",
  		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
  	],
  	[
  		"cba1",
  		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
  	],
  	[
  		"cc40",
  		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
  	],
  	[
  		"cca1",
  		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
  	],
  	[
  		"cd40",
  		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
  	],
  	[
  		"cda1",
  		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
  	],
  	[
  		"ce40",
  		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
  	],
  	[
  		"cea1",
  		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
  	],
  	[
  		"cf40",
  		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
  	],
  	[
  		"cfa1",
  		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
  	],
  	[
  		"d040",
  		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
  	],
  	[
  		"d0a1",
  		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
  	],
  	[
  		"d140",
  		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
  	],
  	[
  		"d1a1",
  		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
  	],
  	[
  		"d240",
  		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
  	],
  	[
  		"d2a1",
  		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
  	],
  	[
  		"d340",
  		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
  	],
  	[
  		"d3a1",
  		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
  	],
  	[
  		"d440",
  		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
  	],
  	[
  		"d4a1",
  		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
  	],
  	[
  		"d540",
  		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
  	],
  	[
  		"d5a1",
  		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
  	],
  	[
  		"d640",
  		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
  	],
  	[
  		"d6a1",
  		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
  	],
  	[
  		"d740",
  		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
  	],
  	[
  		"d7a1",
  		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
  	],
  	[
  		"d840",
  		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
  	],
  	[
  		"d8a1",
  		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
  	],
  	[
  		"d940",
  		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
  	],
  	[
  		"d9a1",
  		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
  	],
  	[
  		"da40",
  		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
  	],
  	[
  		"daa1",
  		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
  	],
  	[
  		"db40",
  		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
  	],
  	[
  		"dba1",
  		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
  	],
  	[
  		"dc40",
  		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
  	],
  	[
  		"dca1",
  		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
  	],
  	[
  		"dd40",
  		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
  	],
  	[
  		"dda1",
  		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
  	],
  	[
  		"de40",
  		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
  	],
  	[
  		"dea1",
  		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
  	],
  	[
  		"df40",
  		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
  	],
  	[
  		"dfa1",
  		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
  	],
  	[
  		"e040",
  		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
  	],
  	[
  		"e0a1",
  		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
  	],
  	[
  		"e140",
  		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
  	],
  	[
  		"e1a1",
  		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
  	],
  	[
  		"e240",
  		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
  	],
  	[
  		"e2a1",
  		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
  	],
  	[
  		"e340",
  		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
  	],
  	[
  		"e3a1",
  		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
  	],
  	[
  		"e440",
  		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
  	],
  	[
  		"e4a1",
  		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
  	],
  	[
  		"e540",
  		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
  	],
  	[
  		"e5a1",
  		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
  	],
  	[
  		"e640",
  		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
  	],
  	[
  		"e6a1",
  		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
  	],
  	[
  		"e740",
  		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
  	],
  	[
  		"e7a1",
  		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
  	],
  	[
  		"e840",
  		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
  	],
  	[
  		"e8a1",
  		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
  	],
  	[
  		"e940",
  		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
  	],
  	[
  		"e9a1",
  		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
  	],
  	[
  		"ea40",
  		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
  	],
  	[
  		"eaa1",
  		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
  	],
  	[
  		"eb40",
  		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
  	],
  	[
  		"eba1",
  		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
  	],
  	[
  		"ec40",
  		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
  	],
  	[
  		"eca1",
  		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
  	],
  	[
  		"ed40",
  		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
  	],
  	[
  		"eda1",
  		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
  	],
  	[
  		"ee40",
  		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
  	],
  	[
  		"eea1",
  		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
  	],
  	[
  		"ef40",
  		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
  	],
  	[
  		"efa1",
  		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
  	],
  	[
  		"f040",
  		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
  	],
  	[
  		"f0a1",
  		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
  	],
  	[
  		"f140",
  		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
  	],
  	[
  		"f1a1",
  		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
  	],
  	[
  		"f240",
  		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
  	],
  	[
  		"f2a1",
  		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
  	],
  	[
  		"f340",
  		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
  	],
  	[
  		"f3a1",
  		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
  	],
  	[
  		"f440",
  		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
  	],
  	[
  		"f4a1",
  		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
  	],
  	[
  		"f540",
  		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
  	],
  	[
  		"f5a1",
  		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
  	],
  	[
  		"f640",
  		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
  	],
  	[
  		"f6a1",
  		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
  	],
  	[
  		"f740",
  		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
  	],
  	[
  		"f7a1",
  		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
  	],
  	[
  		"f840",
  		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
  	],
  	[
  		"f8a1",
  		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
  	],
  	[
  		"f940",
  		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
  	],
  	[
  		"f9a1",
  		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
  	]
  ];

  var cp950$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': cp950
  });

  var big5Added = [
  	[
  		"8740",
  		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
  	],
  	[
  		"8767",
  		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
  	],
  	[
  		"87a1",
  		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
  	],
  	[
  		"8840",
  		"㇀",
  		4,
  		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
  	],
  	[
  		"88a1",
  		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
  	],
  	[
  		"8940",
  		"𪎩𡅅"
  	],
  	[
  		"8943",
  		"攊"
  	],
  	[
  		"8946",
  		"丽滝鵎釟"
  	],
  	[
  		"894c",
  		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
  	],
  	[
  		"89a1",
  		"琑糼緍楆竉刧"
  	],
  	[
  		"89ab",
  		"醌碸酞肼"
  	],
  	[
  		"89b0",
  		"贋胶𠧧"
  	],
  	[
  		"89b5",
  		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
  	],
  	[
  		"89c1",
  		"溚舾甙"
  	],
  	[
  		"89c5",
  		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
  	],
  	[
  		"8a40",
  		"𧶄唥"
  	],
  	[
  		"8a43",
  		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
  	],
  	[
  		"8a64",
  		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
  	],
  	[
  		"8a76",
  		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
  	],
  	[
  		"8aa1",
  		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
  	],
  	[
  		"8aac",
  		"䠋𠆩㿺塳𢶍"
  	],
  	[
  		"8ab2",
  		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
  	],
  	[
  		"8abb",
  		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
  	],
  	[
  		"8ac9",
  		"𪘁𠸉𢫏𢳉"
  	],
  	[
  		"8ace",
  		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
  	],
  	[
  		"8adf",
  		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
  	],
  	[
  		"8af6",
  		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
  	],
  	[
  		"8b40",
  		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
  	],
  	[
  		"8b55",
  		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
  	],
  	[
  		"8ba1",
  		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
  	],
  	[
  		"8bde",
  		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
  	],
  	[
  		"8c40",
  		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
  	],
  	[
  		"8ca1",
  		"𣏹椙橃𣱣泿"
  	],
  	[
  		"8ca7",
  		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
  	],
  	[
  		"8cc9",
  		"顨杫䉶圽"
  	],
  	[
  		"8cce",
  		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
  	],
  	[
  		"8ce6",
  		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
  	],
  	[
  		"8d40",
  		"𠮟"
  	],
  	[
  		"8d42",
  		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
  	],
  	[
  		"8da1",
  		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
  	],
  	[
  		"8e40",
  		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
  	],
  	[
  		"8ea1",
  		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
  	],
  	[
  		"8f40",
  		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
  	],
  	[
  		"8fa1",
  		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
  	],
  	[
  		"9040",
  		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
  	],
  	[
  		"90a1",
  		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
  	],
  	[
  		"9140",
  		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
  	],
  	[
  		"91a1",
  		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
  	],
  	[
  		"9240",
  		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
  	],
  	[
  		"92a1",
  		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
  	],
  	[
  		"9340",
  		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
  	],
  	[
  		"93a1",
  		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
  	],
  	[
  		"9440",
  		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
  	],
  	[
  		"94a1",
  		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
  	],
  	[
  		"9540",
  		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
  	],
  	[
  		"95a1",
  		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
  	],
  	[
  		"9640",
  		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
  	],
  	[
  		"96a1",
  		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
  	],
  	[
  		"9740",
  		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
  	],
  	[
  		"97a1",
  		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
  	],
  	[
  		"9840",
  		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
  	],
  	[
  		"98a1",
  		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
  	],
  	[
  		"9940",
  		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
  	],
  	[
  		"99a1",
  		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
  	],
  	[
  		"9a40",
  		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
  	],
  	[
  		"9aa1",
  		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
  	],
  	[
  		"9b40",
  		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
  	],
  	[
  		"9b62",
  		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
  	],
  	[
  		"9ba1",
  		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
  	],
  	[
  		"9c40",
  		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
  	],
  	[
  		"9ca1",
  		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
  	],
  	[
  		"9d40",
  		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
  	],
  	[
  		"9da1",
  		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
  	],
  	[
  		"9e40",
  		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
  	],
  	[
  		"9ea1",
  		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
  	],
  	[
  		"9ead",
  		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
  	],
  	[
  		"9ec5",
  		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
  	],
  	[
  		"9ef5",
  		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
  	],
  	[
  		"9f40",
  		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
  	],
  	[
  		"9f4f",
  		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
  	],
  	[
  		"9fa1",
  		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
  	],
  	[
  		"9fae",
  		"酙隁酜"
  	],
  	[
  		"9fb2",
  		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
  	],
  	[
  		"9fc1",
  		"𤤙盖鮝个𠳔莾衂"
  	],
  	[
  		"9fc9",
  		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
  	],
  	[
  		"9fdb",
  		"歒酼龥鮗頮颴骺麨麄煺笔"
  	],
  	[
  		"9fe7",
  		"毺蠘罸"
  	],
  	[
  		"9feb",
  		"嘠𪙊蹷齓"
  	],
  	[
  		"9ff0",
  		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
  	],
  	[
  		"a040",
  		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
  	],
  	[
  		"a055",
  		"𡠻𦸅"
  	],
  	[
  		"a058",
  		"詾𢔛"
  	],
  	[
  		"a05b",
  		"惽癧髗鵄鍮鮏蟵"
  	],
  	[
  		"a063",
  		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
  	],
  	[
  		"a073",
  		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
  	],
  	[
  		"a0a1",
  		"嵗𨯂迚𨸹"
  	],
  	[
  		"a0a6",
  		"僙𡵆礆匲阸𠼻䁥"
  	],
  	[
  		"a0ae",
  		"矾"
  	],
  	[
  		"a0b0",
  		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
  	],
  	[
  		"a0d4",
  		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
  	],
  	[
  		"a0e2",
  		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
  	],
  	[
  		"a3c0",
  		"␀",
  		31,
  		"␡"
  	],
  	[
  		"c6a1",
  		"①",
  		9,
  		"⑴",
  		9,
  		"ⅰ",
  		9,
  		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
  		23
  	],
  	[
  		"c740",
  		"す",
  		58,
  		"ァアィイ"
  	],
  	[
  		"c7a1",
  		"ゥ",
  		81,
  		"А",
  		5,
  		"ЁЖ",
  		4
  	],
  	[
  		"c840",
  		"Л",
  		26,
  		"ёж",
  		25,
  		"⇧↸↹㇏𠃌乚𠂊刂䒑"
  	],
  	[
  		"c8a1",
  		"龰冈龱𧘇"
  	],
  	[
  		"c8cd",
  		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
  	],
  	[
  		"c8f5",
  		"ʃɐɛɔɵœøŋʊɪ"
  	],
  	[
  		"f9fe",
  		"￭"
  	],
  	[
  		"fa40",
  		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
  	],
  	[
  		"faa1",
  		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
  	],
  	[
  		"fb40",
  		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
  	],
  	[
  		"fba1",
  		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
  	],
  	[
  		"fc40",
  		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
  	],
  	[
  		"fca1",
  		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
  	],
  	[
  		"fd40",
  		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
  	],
  	[
  		"fda1",
  		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
  	],
  	[
  		"fe40",
  		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
  	],
  	[
  		"fea1",
  		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
  	]
  ];

  var big5Added$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': big5Added
  });

  var require$$0 = getCjsExportFromNamespace(shiftjis$1);

  var require$$1 = getCjsExportFromNamespace(eucjp$1);

  var require$$2 = getCjsExportFromNamespace(cp936$1);

  var require$$3 = getCjsExportFromNamespace(gbkAdded$1);

  var require$$4 = getCjsExportFromNamespace(gb18030Ranges$1);

  var require$$5 = getCjsExportFromNamespace(cp949$1);

  var require$$6 = getCjsExportFromNamespace(cp950$1);

  var require$$7 = getCjsExportFromNamespace(big5Added$1);

  // Description of supported double byte encodings and aliases.
  // Tables are not require()-d until they are needed to speed up library load.
  // require()-s are direct to support Browserify.

  var dbcsData = {
      
      // == Japanese/ShiftJIS ====================================================
      // All japanese encodings are based on JIS X set of standards:
      // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
      // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
      //              Has several variations in 1978, 1983, 1990 and 1997.
      // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
      // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
      //              2 planes, first is superset of 0208, second - revised 0212.
      //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

      // Byte encodings are:
      //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
      //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
      //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
      //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
      //               0x00-0x7F       - lower part of 0201
      //               0x8E, 0xA1-0xDF - upper part of 0201
      //               (0xA1-0xFE)x2   - 0208 plane (94x94).
      //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
      //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
      //               Used as-is in ISO2022 family.
      //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
      //                0201-1976 Roman, 0208-1978, 0208-1983.
      //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
      //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
      //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
      //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
      //
      // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
      //
      // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

      'shiftjis': {
          type: '_dbcs',
          table: function() { return require$$0 },
          encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
          encodeSkipVals: [{from: 0xED40, to: 0xF940}],
      },
      'csshiftjis': 'shiftjis',
      'mskanji': 'shiftjis',
      'sjis': 'shiftjis',
      'windows31j': 'shiftjis',
      'ms31j': 'shiftjis',
      'xsjis': 'shiftjis',
      'windows932': 'shiftjis',
      'ms932': 'shiftjis',
      '932': 'shiftjis',
      'cp932': 'shiftjis',

      'eucjp': {
          type: '_dbcs',
          table: function() { return require$$1 },
          encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
      },

      // TODO: KDDI extension to Shift_JIS
      // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
      // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


      // == Chinese/GBK ==========================================================
      // http://en.wikipedia.org/wiki/GBK
      // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

      // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
      'gb2312': 'cp936',
      'gb231280': 'cp936',
      'gb23121980': 'cp936',
      'csgb2312': 'cp936',
      'csiso58gb231280': 'cp936',
      'euccn': 'cp936',

      // Microsoft's CP936 is a subset and approximation of GBK.
      'windows936': 'cp936',
      'ms936': 'cp936',
      '936': 'cp936',
      'cp936': {
          type: '_dbcs',
          table: function() { return require$$2 },
      },

      // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
      'gbk': {
          type: '_dbcs',
          table: function() { return require$$2.concat(require$$3) },
      },
      'xgbk': 'gbk',
      'isoir58': 'gbk',

      // GB18030 is an algorithmic extension of GBK.
      // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
      // http://icu-project.org/docs/papers/gb18030.html
      // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
      // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
      'gb18030': {
          type: '_dbcs',
          table: function() { return require$$2.concat(require$$3) },
          gb18030: function() { return require$$4 },
          encodeSkipVals: [0x80],
          encodeAdd: {'€': 0xA2E3},
      },

      'chinese': 'gb18030',


      // == Korean ===============================================================
      // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
      'windows949': 'cp949',
      'ms949': 'cp949',
      '949': 'cp949',
      'cp949': {
          type: '_dbcs',
          table: function() { return require$$5 },
      },

      'cseuckr': 'cp949',
      'csksc56011987': 'cp949',
      'euckr': 'cp949',
      'isoir149': 'cp949',
      'korean': 'cp949',
      'ksc56011987': 'cp949',
      'ksc56011989': 'cp949',
      'ksc5601': 'cp949',


      // == Big5/Taiwan/Hong Kong ================================================
      // There are lots of tables for Big5 and cp950. Please see the following links for history:
      // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
      // Variations, in roughly number of defined chars:
      //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
      //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
      //  * Big5-2003 (Taiwan standard) almost superset of cp950.
      //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
      //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
      //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
      //    Plus, it has 4 combining sequences.
      //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
      //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
      //    Implementations are not consistent within browsers; sometimes labeled as just big5.
      //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
      //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
      //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
      //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
      //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
      // 
      // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
      // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

      'windows950': 'cp950',
      'ms950': 'cp950',
      '950': 'cp950',
      'cp950': {
          type: '_dbcs',
          table: function() { return require$$6 },
      },

      // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
      'big5': 'big5hkscs',
      'big5hkscs': {
          type: '_dbcs',
          table: function() { return require$$6.concat(require$$7) },
          encodeSkipVals: [0xa2cc],
      },

      'cnbig5': 'big5hkscs',
      'csbig5': 'big5hkscs',
      'xxbig5': 'big5hkscs',
  };

  var encodings = createCommonjsModule(function (module, exports) {

  // Update this array if you add/rename/remove files in this directory.
  // We support Browserify by skipping automatic module discovery and requiring modules directly.
  var modules = [
      internal,
      utf16,
      utf7,
      sbcsCodec,
      sbcsData,
      sbcsDataGenerated,
      dbcsCodec,
      dbcsData,
  ];

  // Put all encoding/alias/codec definitions to single object and export it. 
  for (var i = 0; i < modules.length; i++) {
      var module = modules[i];
      for (var enc in module)
          if (Object.prototype.hasOwnProperty.call(module, enc))
              exports[enc] = module[enc];
  }
  });

  var Buffer$7 = buffer.Buffer,
      Transform = stream$1.Transform;


  // == Exports ==================================================================
  var streams = function(iconv) {
      
      // Additional Public API.
      iconv.encodeStream = function encodeStream(encoding, options) {
          return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
      };

      iconv.decodeStream = function decodeStream(encoding, options) {
          return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
      };

      iconv.supportsStreams = true;


      // Not published yet.
      iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
      iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
      iconv._collect = IconvLiteDecoderStream.prototype.collect;
  };


  // == Encoder stream =======================================================
  function IconvLiteEncoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
      Transform.call(this, options);
  }

  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteEncoderStream }
  });

  IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
      if (typeof chunk != 'string')
          return done(new Error("Iconv encoding stream needs strings as its input."));
      try {
          var res = this.conv.write(chunk);
          if (res && res.length) this.push(res);
          done();
      }
      catch (e) {
          done(e);
      }
  };

  IconvLiteEncoderStream.prototype._flush = function(done) {
      try {
          var res = this.conv.end();
          if (res && res.length) this.push(res);
          done();
      }
      catch (e) {
          done(e);
      }
  };

  IconvLiteEncoderStream.prototype.collect = function(cb) {
      var chunks = [];
      this.on('error', cb);
      this.on('data', function(chunk) { chunks.push(chunk); });
      this.on('end', function() {
          cb(null, Buffer$7.concat(chunks));
      });
      return this;
  };


  // == Decoder stream =======================================================
  function IconvLiteDecoderStream(conv, options) {
      this.conv = conv;
      options = options || {};
      options.encoding = this.encoding = 'utf8'; // We output strings.
      Transform.call(this, options);
  }

  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
      constructor: { value: IconvLiteDecoderStream }
  });

  IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
      if (!Buffer$7.isBuffer(chunk))
          return done(new Error("Iconv decoding stream needs buffers as its input."));
      try {
          var res = this.conv.write(chunk);
          if (res && res.length) this.push(res, this.encoding);
          done();
      }
      catch (e) {
          done(e);
      }
  };

  IconvLiteDecoderStream.prototype._flush = function(done) {
      try {
          var res = this.conv.end();
          if (res && res.length) this.push(res, this.encoding);                
          done();
      }
      catch (e) {
          done(e);
      }
  };

  IconvLiteDecoderStream.prototype.collect = function(cb) {
      var res = '';
      this.on('error', cb);
      this.on('data', function(chunk) { res += chunk; });
      this.on('end', function() {
          cb(null, res);
      });
      return this;
  };

  var Buffer$8 = buffer.Buffer;
  // Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer

  // == Extend Node primitives to use iconv-lite =================================

  var extendNode = function (iconv) {
      var original = undefined; // Place to keep original methods.

      // Node authors rewrote Buffer internals to make it compatible with
      // Uint8Array and we cannot patch key functions since then.
      // Note: this does use older Buffer API on a purpose
      iconv.supportsNodeEncodingsExtension = !(Buffer$8.from || new Buffer$8(0) instanceof Uint8Array);

      iconv.extendNodeEncodings = function extendNodeEncodings() {
          if (original) return;
          original = {};

          if (!iconv.supportsNodeEncodingsExtension) {
              console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
              console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
              return;
          }

          var nodeNativeEncodings = {
              'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
              'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
          };

          Buffer$8.isNativeEncoding = function(enc) {
              return enc && nodeNativeEncodings[enc.toLowerCase()];
          };

          // -- SlowBuffer -----------------------------------------------------------
          var SlowBuffer = buffer.SlowBuffer;

          original.SlowBufferToString = SlowBuffer.prototype.toString;
          SlowBuffer.prototype.toString = function(encoding, start, end) {
              encoding = String(encoding || 'utf8').toLowerCase();

              // Use native conversion when possible
              if (Buffer$8.isNativeEncoding(encoding))
                  return original.SlowBufferToString.call(this, encoding, start, end);

              // Otherwise, use our decoding method.
              if (typeof start == 'undefined') start = 0;
              if (typeof end == 'undefined') end = this.length;
              return iconv.decode(this.slice(start, end), encoding);
          };

          original.SlowBufferWrite = SlowBuffer.prototype.write;
          SlowBuffer.prototype.write = function(string, offset, length, encoding) {
              // Support both (string, offset, length, encoding)
              // and the legacy (string, encoding, offset, length)
              if (isFinite(offset)) {
                  if (!isFinite(length)) {
                      encoding = length;
                      length = undefined;
                  }
              } else {  // legacy
                  var swap = encoding;
                  encoding = offset;
                  offset = length;
                  length = swap;
              }

              offset = +offset || 0;
              var remaining = this.length - offset;
              if (!length) {
                  length = remaining;
              } else {
                  length = +length;
                  if (length > remaining) {
                      length = remaining;
                  }
              }
              encoding = String(encoding || 'utf8').toLowerCase();

              // Use native conversion when possible
              if (Buffer$8.isNativeEncoding(encoding))
                  return original.SlowBufferWrite.call(this, string, offset, length, encoding);

              if (string.length > 0 && (length < 0 || offset < 0))
                  throw new RangeError('attempt to write beyond buffer bounds');

              // Otherwise, use our encoding method.
              var buf = iconv.encode(string, encoding);
              if (buf.length < length) length = buf.length;
              buf.copy(this, offset, 0, length);
              return length;
          };

          // -- Buffer ---------------------------------------------------------------

          original.BufferIsEncoding = Buffer$8.isEncoding;
          Buffer$8.isEncoding = function(encoding) {
              return Buffer$8.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
          };

          original.BufferByteLength = Buffer$8.byteLength;
          Buffer$8.byteLength = SlowBuffer.byteLength = function(str, encoding) {
              encoding = String(encoding || 'utf8').toLowerCase();

              // Use native conversion when possible
              if (Buffer$8.isNativeEncoding(encoding))
                  return original.BufferByteLength.call(this, str, encoding);

              // Slow, I know, but we don't have a better way yet.
              return iconv.encode(str, encoding).length;
          };

          original.BufferToString = Buffer$8.prototype.toString;
          Buffer$8.prototype.toString = function(encoding, start, end) {
              encoding = String(encoding || 'utf8').toLowerCase();

              // Use native conversion when possible
              if (Buffer$8.isNativeEncoding(encoding))
                  return original.BufferToString.call(this, encoding, start, end);

              // Otherwise, use our decoding method.
              if (typeof start == 'undefined') start = 0;
              if (typeof end == 'undefined') end = this.length;
              return iconv.decode(this.slice(start, end), encoding);
          };

          original.BufferWrite = Buffer$8.prototype.write;
          Buffer$8.prototype.write = function(string, offset, length, encoding) {
              var _offset = offset, _length = length, _encoding = encoding;
              // Support both (string, offset, length, encoding)
              // and the legacy (string, encoding, offset, length)
              if (isFinite(offset)) {
                  if (!isFinite(length)) {
                      encoding = length;
                      length = undefined;
                  }
              } else {  // legacy
                  var swap = encoding;
                  encoding = offset;
                  offset = length;
                  length = swap;
              }

              encoding = String(encoding || 'utf8').toLowerCase();

              // Use native conversion when possible
              if (Buffer$8.isNativeEncoding(encoding))
                  return original.BufferWrite.call(this, string, _offset, _length, _encoding);

              offset = +offset || 0;
              var remaining = this.length - offset;
              if (!length) {
                  length = remaining;
              } else {
                  length = +length;
                  if (length > remaining) {
                      length = remaining;
                  }
              }

              if (string.length > 0 && (length < 0 || offset < 0))
                  throw new RangeError('attempt to write beyond buffer bounds');

              // Otherwise, use our encoding method.
              var buf = iconv.encode(string, encoding);
              if (buf.length < length) length = buf.length;
              buf.copy(this, offset, 0, length);
              return length;

              // TODO: Set _charsWritten.
          };


          // -- Readable -------------------------------------------------------------
          if (iconv.supportsStreams) {
              var Readable = stream$1.Readable;

              original.ReadableSetEncoding = Readable.prototype.setEncoding;
              Readable.prototype.setEncoding = function setEncoding(enc, options) {
                  // Use our own decoder, it has the same interface.
                  // We cannot use original function as it doesn't handle BOM-s.
                  this._readableState.decoder = iconv.getDecoder(enc, options);
                  this._readableState.encoding = enc;
              };

              Readable.prototype.collect = iconv._collect;
          }
      };

      // Remove iconv-lite Node primitive extensions.
      iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
          if (!iconv.supportsNodeEncodingsExtension)
              return;
          if (!original)
              throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

          delete Buffer$8.isNativeEncoding;

          var SlowBuffer = buffer.SlowBuffer;

          SlowBuffer.prototype.toString = original.SlowBufferToString;
          SlowBuffer.prototype.write = original.SlowBufferWrite;

          Buffer$8.isEncoding = original.BufferIsEncoding;
          Buffer$8.byteLength = original.BufferByteLength;
          Buffer$8.prototype.toString = original.BufferToString;
          Buffer$8.prototype.write = original.BufferWrite;

          if (iconv.supportsStreams) {
              var Readable = stream$1.Readable;

              Readable.prototype.setEncoding = original.ReadableSetEncoding;
              delete Readable.prototype.collect;
          }

          original = undefined;
      };
  };

  var lib$7 = createCommonjsModule(function (module) {

  // Some environments don't have global Buffer (e.g. React Native).
  // Solution would be installing npm modules "buffer" and "stream" explicitly.
  var Buffer = safer_1.Buffer;

  var iconv = module.exports;

  // All codecs and aliases are kept here, keyed by encoding name/alias.
  // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
  iconv.encodings = null;

  // Characters emitted in case of error.
  iconv.defaultCharUnicode = '�';
  iconv.defaultCharSingleByte = '?';

  // Public API.
  iconv.encode = function encode(str, encoding, options) {
      str = "" + (str || ""); // Ensure string.

      var encoder = iconv.getEncoder(encoding, options);

      var res = encoder.write(str);
      var trail = encoder.end();
      
      return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
  };

  iconv.decode = function decode(buf, encoding, options) {
      if (typeof buf === 'string') {
          if (!iconv.skipDecodeWarning) {
              console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
              iconv.skipDecodeWarning = true;
          }

          buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
      }

      var decoder = iconv.getDecoder(encoding, options);

      var res = decoder.write(buf);
      var trail = decoder.end();

      return trail ? (res + trail) : res;
  };

  iconv.encodingExists = function encodingExists(enc) {
      try {
          iconv.getCodec(enc);
          return true;
      } catch (e) {
          return false;
      }
  };

  // Legacy aliases to convert functions
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;

  // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
      if (!iconv.encodings)
          iconv.encodings = encodings; // Lazy load all encoding definitions.
      
      // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
      var enc = iconv._canonicalizeEncoding(encoding);

      // Traverse iconv.encodings to find actual codec.
      var codecOptions = {};
      while (true) {
          var codec = iconv._codecDataCache[enc];
          if (codec)
              return codec;

          var codecDef = iconv.encodings[enc];

          switch (typeof codecDef) {
              case "string": // Direct alias to other encoding.
                  enc = codecDef;
                  break;

              case "object": // Alias with options. Can be layered.
                  for (var key in codecDef)
                      codecOptions[key] = codecDef[key];

                  if (!codecOptions.encodingName)
                      codecOptions.encodingName = enc;
                  
                  enc = codecDef.type;
                  break;

              case "function": // Codec itself.
                  if (!codecOptions.encodingName)
                      codecOptions.encodingName = enc;

                  // The codec function must load all tables and return object with .encoder and .decoder methods.
                  // It'll be called only once (for each different options object).
                  codec = new codecDef(codecOptions, iconv);

                  iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                  return codec;

              default:
                  throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
          }
      }
  };

  iconv._canonicalizeEncoding = function(encoding) {
      // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
      return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };

  iconv.getEncoder = function getEncoder(encoding, options) {
      var codec = iconv.getCodec(encoding),
          encoder = new codec.encoder(options, codec);

      if (codec.bomAware && options && options.addBOM)
          encoder = new bomHandling.PrependBOM(encoder, options);

      return encoder;
  };

  iconv.getDecoder = function getDecoder(encoding, options) {
      var codec = iconv.getCodec(encoding),
          decoder = new codec.decoder(options, codec);

      if (codec.bomAware && !(options && options.stripBOM === false))
          decoder = new bomHandling.StripBOM(decoder, options);

      return decoder;
  };


  // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
  var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
  if (nodeVer) {

      // Load streaming support in Node v0.10+
      var nodeVerArr = nodeVer.split(".").map(Number);
      if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
          streams(iconv);
      }

      // Load Node primitive extensions.
      extendNode(iconv);
  }
  });

  /*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var unpipe_1 = unpipe;

  /**
   * Determine if there are Node.js pipe-like data listeners.
   * @private
   */

  function hasPipeDataListeners(stream) {
    var listeners = stream.listeners('data');

    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i].name === 'ondata') {
        return true
      }
    }

    return false
  }

  /**
   * Unpipe a stream from all destinations.
   *
   * @param {object} stream
   * @public
   */

  function unpipe(stream) {
    if (!stream) {
      throw new TypeError('argument stream is required')
    }

    if (typeof stream.unpipe === 'function') {
      // new-style
      stream.unpipe();
      return
    }

    // Node.js 0.8 hack
    if (!hasPipeDataListeners(stream)) {
      return
    }

    var listener;
    var listeners = stream.listeners('close');

    for (var i = 0; i < listeners.length; i++) {
      listener = listeners[i];

      if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
        continue
      }

      // invoke the listener
      listener.call(stream);
    }
  }

  /**
   * Module dependencies.
   * @private
   */






  /**
   * Module exports.
   * @public
   */

  var rawBody = getRawBody;

  /**
   * Module variables.
   * @private
   */

  var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;

  /**
   * Get the decoder for a given encoding.
   *
   * @param {string} encoding
   * @private
   */

  function getDecoder (encoding) {
    if (!encoding) return null

    try {
      return lib$7.getDecoder(encoding)
    } catch (e) {
      // error getting decoder
      if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e

      // the encoding was not found
      throw httpErrors(415, 'specified encoding unsupported', {
        encoding: encoding,
        type: 'encoding.unsupported'
      })
    }
  }

  /**
   * Get the raw body of a stream (typically HTTP).
   *
   * @param {object} stream
   * @param {object|string|function} [options]
   * @param {function} [callback]
   * @public
   */

  function getRawBody (stream, options, callback) {
    var done = callback;
    var opts = options || {};

    if (options === true || typeof options === 'string') {
      // short cut for encoding
      opts = {
        encoding: options
      };
    }

    if (typeof options === 'function') {
      done = options;
      opts = {};
    }

    // validate callback is a function, if provided
    if (done !== undefined && typeof done !== 'function') {
      throw new TypeError('argument callback must be a function')
    }

    // require the callback without promises
    if (!done && !commonjsGlobal.Promise) {
      throw new TypeError('argument callback is required')
    }

    // get encoding
    var encoding = opts.encoding !== true
      ? opts.encoding
      : 'utf-8';

    // convert the limit to an integer
    var limit = bytes_1.parse(opts.limit);

    // convert the expected length to an integer
    var length = opts.length != null && !isNaN(opts.length)
      ? parseInt(opts.length, 10)
      : null;

    if (done) {
      // classic callback style
      return readStream(stream, encoding, length, limit, done)
    }

    return new Promise(function executor (resolve, reject) {
      readStream(stream, encoding, length, limit, function onRead (err, buf) {
        if (err) return reject(err)
        resolve(buf);
      });
    })
  }

  /**
   * Halt a stream.
   *
   * @param {Object} stream
   * @private
   */

  function halt (stream) {
    // unpipe everything from the stream
    unpipe_1(stream);

    // pause stream
    if (typeof stream.pause === 'function') {
      stream.pause();
    }
  }

  /**
   * Read the data from the stream.
   *
   * @param {object} stream
   * @param {string} encoding
   * @param {number} length
   * @param {number} limit
   * @param {function} callback
   * @public
   */

  function readStream (stream, encoding, length, limit, callback) {
    var complete = false;
    var sync = true;

    // check the length and limit options.
    // note: we intentionally leave the stream paused,
    // so users should handle the stream themselves.
    if (limit !== null && length !== null && length > limit) {
      return done(httpErrors(413, 'request entity too large', {
        expected: length,
        length: length,
        limit: limit,
        type: 'entity.too.large'
      }))
    }

    // streams1: assert request encoding is buffer.
    // streams2+: assert the stream encoding is buffer.
    //   stream._decoder: streams1
    //   state.encoding: streams2
    //   state.decoder: streams2, specifically < 0.10.6
    var state = stream._readableState;
    if (stream._decoder || (state && (state.encoding || state.decoder))) {
      // developer error
      return done(httpErrors(500, 'stream encoding should not be set', {
        type: 'stream.encoding.set'
      }))
    }

    var received = 0;
    var decoder;

    try {
      decoder = getDecoder(encoding);
    } catch (err) {
      return done(err)
    }

    var buffer = decoder
      ? ''
      : [];

    // attach listeners
    stream.on('aborted', onAborted);
    stream.on('close', cleanup);
    stream.on('data', onData);
    stream.on('end', onEnd);
    stream.on('error', onEnd);

    // mark sync section complete
    sync = false;

    function done () {
      var args = new Array(arguments.length);

      // copy arguments
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      // mark complete
      complete = true;

      if (sync) {
        process.nextTick(invokeCallback);
      } else {
        invokeCallback();
      }

      function invokeCallback () {
        cleanup();

        if (args[0]) {
          // halt the stream on error
          halt(stream);
        }

        callback.apply(null, args);
      }
    }

    function onAborted () {
      if (complete) return

      done(httpErrors(400, 'request aborted', {
        code: 'ECONNABORTED',
        expected: length,
        length: length,
        received: received,
        type: 'request.aborted'
      }));
    }

    function onData (chunk) {
      if (complete) return

      received += chunk.length;

      if (limit !== null && received > limit) {
        done(httpErrors(413, 'request entity too large', {
          limit: limit,
          received: received,
          type: 'entity.too.large'
        }));
      } else if (decoder) {
        buffer += decoder.write(chunk);
      } else {
        buffer.push(chunk);
      }
    }

    function onEnd (err) {
      if (complete) return
      if (err) return done(err)

      if (length !== null && received !== length) {
        done(httpErrors(400, 'request size did not match content length', {
          expected: length,
          length: length,
          received: received,
          type: 'request.size.invalid'
        }));
      } else {
        var string = decoder
          ? buffer + (decoder.end() || '')
          : Buffer.concat(buffer);
        done(null, string);
      }
    }

    function cleanup () {
      buffer = null;

      stream.removeListener('aborted', onAborted);
      stream.removeListener('data', onData);
      stream.removeListener('end', onEnd);
      stream.removeListener('error', onEnd);
      stream.removeListener('close', cleanup);
    }
  }

  /*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var eeFirst = first;

  /**
   * Get the first event in a set of event emitters and event pairs.
   *
   * @param {array} stuff
   * @param {function} done
   * @public
   */

  function first(stuff, done) {
    if (!Array.isArray(stuff))
      throw new TypeError('arg must be an array of [ee, events...] arrays')

    var cleanups = [];

    for (var i = 0; i < stuff.length; i++) {
      var arr = stuff[i];

      if (!Array.isArray(arr) || arr.length < 2)
        throw new TypeError('each array member must be [ee, events...]')

      var ee = arr[0];

      for (var j = 1; j < arr.length; j++) {
        var event = arr[j];
        var fn = listener(event, callback);

        // listen to the event
        ee.on(event, fn);
        // push this listener to the list of cleanups
        cleanups.push({
          ee: ee,
          event: event,
          fn: fn,
        });
      }
    }

    function callback() {
      cleanup();
      done.apply(null, arguments);
    }

    function cleanup() {
      var x;
      for (var i = 0; i < cleanups.length; i++) {
        x = cleanups[i];
        x.ee.removeListener(x.event, x.fn);
      }
    }

    function thunk(fn) {
      done = fn;
    }

    thunk.cancel = cleanup;

    return thunk
  }

  /**
   * Create the event listener.
   * @private
   */

  function listener(event, done) {
    return function onevent(arg1) {
      var args = new Array(arguments.length);
      var ee = this;
      var err = event === 'error'
        ? arg1
        : null;

      // copy args to prevent arguments escaping scope
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      done(err, ee, event, args);
    }
  }

  /**
   * Module exports.
   * @public
   */

  var onFinished_1 = onFinished;
  var isFinished_1 = isFinished;

  /**
   * Module dependencies.
   * @private
   */



  /**
   * Variables.
   * @private
   */

  /* istanbul ignore next */
  var defer = typeof setImmediate === 'function'
    ? setImmediate
    : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)); };

  /**
   * Invoke callback when the response has finished, useful for
   * cleaning up resources afterwards.
   *
   * @param {object} msg
   * @param {function} listener
   * @return {object}
   * @public
   */

  function onFinished(msg, listener) {
    if (isFinished(msg) !== false) {
      defer(listener, null, msg);
      return msg
    }

    // attach the listener to the message
    attachListener(msg, listener);

    return msg
  }

  /**
   * Determine if message is already finished.
   *
   * @param {object} msg
   * @return {boolean}
   * @public
   */

  function isFinished(msg) {
    var socket = msg.socket;

    if (typeof msg.finished === 'boolean') {
      // OutgoingMessage
      return Boolean(msg.finished || (socket && !socket.writable))
    }

    if (typeof msg.complete === 'boolean') {
      // IncomingMessage
      return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
    }

    // don't know
    return undefined
  }

  /**
   * Attach a finished listener to the message.
   *
   * @param {object} msg
   * @param {function} callback
   * @private
   */

  function attachFinishedListener(msg, callback) {
    var eeMsg;
    var eeSocket;
    var finished = false;

    function onFinish(error) {
      eeMsg.cancel();
      eeSocket.cancel();

      finished = true;
      callback(error);
    }

    // finished on first message event
    eeMsg = eeSocket = eeFirst([[msg, 'end', 'finish']], onFinish);

    function onSocket(socket) {
      // remove listener
      msg.removeListener('socket', onSocket);

      if (finished) return
      if (eeMsg !== eeSocket) return

      // finished on first socket event
      eeSocket = eeFirst([[socket, 'error', 'close']], onFinish);
    }

    if (msg.socket) {
      // socket already assigned
      onSocket(msg.socket);
      return
    }

    // wait for socket to be assigned
    msg.on('socket', onSocket);

    if (msg.socket === undefined) {
      // node.js 0.8 patch
      patchAssignSocket(msg, onSocket);
    }
  }

  /**
   * Attach the listener to the message.
   *
   * @param {object} msg
   * @return {function}
   * @private
   */

  function attachListener(msg, listener) {
    var attached = msg.__onFinished;

    // create a private single listener with queue
    if (!attached || !attached.queue) {
      attached = msg.__onFinished = createListener(msg);
      attachFinishedListener(msg, attached);
    }

    attached.queue.push(listener);
  }

  /**
   * Create listener on message.
   *
   * @param {object} msg
   * @return {function}
   * @private
   */

  function createListener(msg) {
    function listener(err) {
      if (msg.__onFinished === listener) msg.__onFinished = null;
      if (!listener.queue) return

      var queue = listener.queue;
      listener.queue = null;

      for (var i = 0; i < queue.length; i++) {
        queue[i](err, msg);
      }
    }

    listener.queue = [];

    return listener
  }

  /**
   * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
   *
   * @param {ServerResponse} res
   * @param {function} callback
   * @private
   */

  function patchAssignSocket(res, callback) {
    var assignSocket = res.assignSocket;

    if (typeof assignSocket !== 'function') return

    // res.on('socket', callback) is broken in 0.8
    res.assignSocket = function _assignSocket(socket) {
      assignSocket.call(this, socket);
      callback(socket);
    };
  }
  onFinished_1.isFinished = isFinished_1;

  /**
   * Module dependencies.
   * @private
   */







  /**
   * Module exports.
   */

  var read_1 = read;

  /**
   * Read a request into a buffer and parse.
   *
   * @param {object} req
   * @param {object} res
   * @param {function} next
   * @param {function} parse
   * @param {function} debug
   * @param {object} options
   * @private
   */

  function read (req, res, next, parse, debug, options) {
    var length;
    var opts = options;
    var stream;

    // flag as parsed
    req._body = true;

    // read options
    var encoding = opts.encoding !== null
      ? opts.encoding
      : null;
    var verify = opts.verify;

    try {
      // get the content stream
      stream = contentstream(req, debug, opts.inflate);
      length = stream.length;
      stream.length = undefined;
    } catch (err) {
      return next(err)
    }

    // set raw-body options
    opts.length = length;
    opts.encoding = verify
      ? null
      : encoding;

    // assert charset is supported
    if (opts.encoding === null && encoding !== null && !lib$7.encodingExists(encoding)) {
      return next(httpErrors(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
        charset: encoding.toLowerCase(),
        type: 'charset.unsupported'
      }))
    }

    // read body
    debug('read body');
    rawBody(stream, opts, function (error, body) {
      if (error) {
        var _error;

        if (error.type === 'encoding.unsupported') {
          // echo back charset
          _error = httpErrors(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
            charset: encoding.toLowerCase(),
            type: 'charset.unsupported'
          });
        } else {
          // set status code on error
          _error = httpErrors(400, error);
        }

        // read off entire request
        stream.resume();
        onFinished_1(req, function onfinished () {
          next(httpErrors(400, _error));
        });
        return
      }

      // verify
      if (verify) {
        try {
          debug('verify body');
          verify(req, res, body, encoding);
        } catch (err) {
          next(httpErrors(403, err, {
            body: body,
            type: err.type || 'entity.verify.failed'
          }));
          return
        }
      }

      // parse
      var str = body;
      try {
        debug('parse body');
        str = typeof body !== 'string' && encoding !== null
          ? lib$7.decode(body, encoding)
          : body;
        req.body = parse(str);
      } catch (err) {
        next(httpErrors(400, err, {
          body: str,
          type: err.type || 'entity.parse.failed'
        }));
        return
      }

      next();
    });
  }

  /**
   * Get the content stream of the request.
   *
   * @param {object} req
   * @param {function} debug
   * @param {boolean} [inflate=true]
   * @return {object}
   * @api private
   */

  function contentstream (req, debug, inflate) {
    var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();
    var length = req.headers['content-length'];
    var stream;

    debug('content-encoding "%s"', encoding);

    if (inflate === false && encoding !== 'identity') {
      throw httpErrors(415, 'content encoding unsupported', {
        encoding: encoding,
        type: 'encoding.unsupported'
      })
    }

    switch (encoding) {
      case 'deflate':
        stream = zlib.createInflate();
        debug('inflate body');
        req.pipe(stream);
        break
      case 'gzip':
        stream = zlib.createGunzip();
        debug('gunzip body');
        req.pipe(stream);
        break
      case 'identity':
        stream = req;
        stream.length = length;
        break
      default:
        throw httpErrors(415, 'unsupported content encoding "' + encoding + '"', {
          encoding: encoding,
          type: 'encoding.unsupported'
        })
    }

    return stream
  }

  /*!
   * media-typer
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
   *
   * parameter     = token "=" ( token | quoted-string )
   * token         = 1*<any CHAR except CTLs or separators>
   * separators    = "(" | ")" | "<" | ">" | "@"
   *               | "," | ";" | ":" | "\" | <">
   *               | "/" | "[" | "]" | "?" | "="
   *               | "{" | "}" | SP | HT
   * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
   * qdtext        = <any TEXT except <">>
   * quoted-pair   = "\" CHAR
   * CHAR          = <any US-ASCII character (octets 0 - 127)>
   * TEXT          = <any OCTET except CTLs, but including LWS>
   * LWS           = [CRLF] 1*( SP | HT )
   * CRLF          = CR LF
   * CR            = <US-ASCII CR, carriage return (13)>
   * LF            = <US-ASCII LF, linefeed (10)>
   * SP            = <US-ASCII SP, space (32)>
   * SHT           = <US-ASCII HT, horizontal-tab (9)>
   * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
   * OCTET         = <any 8-bit sequence of data>
   */
  var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
  var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;

  /**
   * RegExp to match quoted-pair in RFC 2616
   *
   * quoted-pair = "\" CHAR
   * CHAR        = <any US-ASCII character (octets 0 - 127)>
   */
  var qescRegExp = /\\([\u0000-\u007f])/g;

  /**
   * RegExp to match chars that must be quoted-pair in RFC 2616
   */
  var quoteRegExp = /([\\"])/g;

  /**
   * RegExp to match type in RFC 6838
   *
   * type-name = restricted-name
   * subtype-name = restricted-name
   * restricted-name = restricted-name-first *126restricted-name-chars
   * restricted-name-first  = ALPHA / DIGIT
   * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
   *                          "$" / "&" / "-" / "^" / "_"
   * restricted-name-chars =/ "." ; Characters before first dot always
   *                              ; specify a facet name
   * restricted-name-chars =/ "+" ; Characters after last plus always
   *                              ; specify a structured syntax suffix
   * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
   * DIGIT =  %x30-39             ; 0-9
   */
  var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
  var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
  var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

  /**
   * Module exports.
   */

  var format_1$2 = format$4;
  var parse_1$2 = parse$8;

  /**
   * Format object to media type.
   *
   * @param {object} obj
   * @return {string}
   * @api public
   */

  function format$4(obj) {
    if (!obj || typeof obj !== 'object') {
      throw new TypeError('argument obj is required')
    }

    var parameters = obj.parameters;
    var subtype = obj.subtype;
    var suffix = obj.suffix;
    var type = obj.type;

    if (!type || !typeNameRegExp.test(type)) {
      throw new TypeError('invalid type')
    }

    if (!subtype || !subtypeNameRegExp.test(subtype)) {
      throw new TypeError('invalid subtype')
    }

    // format as type/subtype
    var string = type + '/' + subtype;

    // append +suffix
    if (suffix) {
      if (!typeNameRegExp.test(suffix)) {
        throw new TypeError('invalid suffix')
      }

      string += '+' + suffix;
    }

    // append parameters
    if (parameters && typeof parameters === 'object') {
      var param;
      var params = Object.keys(parameters).sort();

      for (var i = 0; i < params.length; i++) {
        param = params[i];

        if (!tokenRegExp.test(param)) {
          throw new TypeError('invalid parameter name')
        }

        string += '; ' + param + '=' + qstring$1(parameters[param]);
      }
    }

    return string
  }

  /**
   * Parse media type to object.
   *
   * @param {string|object} string
   * @return {Object}
   * @api public
   */

  function parse$8(string) {
    if (!string) {
      throw new TypeError('argument string is required')
    }

    // support req/res-like objects as argument
    if (typeof string === 'object') {
      string = getcontenttype$1(string);
    }

    if (typeof string !== 'string') {
      throw new TypeError('argument string is required to be a string')
    }

    var index = string.indexOf(';');
    var type = index !== -1
      ? string.substr(0, index)
      : string;

    var key;
    var match;
    var obj = splitType(type);
    var params = {};
    var value;

    paramRegExp.lastIndex = index;

    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (value[0] === '"') {
        // remove quotes and escapes
        value = value
          .substr(1, value.length - 2)
          .replace(qescRegExp, '$1');
      }

      params[key] = value;
    }

    if (index !== -1 && index !== string.length) {
      throw new TypeError('invalid parameter format')
    }

    obj.parameters = params;

    return obj
  }

  /**
   * Get content-type from req/res objects.
   *
   * @param {object}
   * @return {Object}
   * @api private
   */

  function getcontenttype$1(obj) {
    if (typeof obj.getHeader === 'function') {
      // res-like
      return obj.getHeader('content-type')
    }

    if (typeof obj.headers === 'object') {
      // req-like
      return obj.headers && obj.headers['content-type']
    }
  }

  /**
   * Quote a string if necessary.
   *
   * @param {string} val
   * @return {string}
   * @api private
   */

  function qstring$1(val) {
    var str = String(val);

    // no need to quote tokens
    if (tokenRegExp.test(str)) {
      return str
    }

    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError('invalid parameter value')
    }

    return '"' + str.replace(quoteRegExp, '\\$1') + '"'
  }

  /**
   * Simply "type/subtype+siffx" into parts.
   *
   * @param {string} string
   * @return {Object}
   * @api private
   */

  function splitType(string) {
    var match = typeRegExp.exec(string.toLowerCase());

    if (!match) {
      throw new TypeError('invalid media type')
    }

    var type = match[1];
    var subtype = match[2];
    var suffix;

    // suffix after last +
    var index = subtype.lastIndexOf('+');
    if (index !== -1) {
      suffix = subtype.substr(index + 1);
      subtype = subtype.substr(0, index);
    }

    var obj = {
      type: type,
      subtype: subtype,
      suffix: suffix
    };

    return obj
  }

  var mediaTyper = {
  	format: format_1$2,
  	parse: parse_1$2
  };

  var db = {
  	"application/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"application/3gpdash-qoe-report+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/3gpp-ims+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/a2l": {
  	source: "iana"
  },
  	"application/activemessage": {
  	source: "iana"
  },
  	"application/activity+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-costmap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-costmapfilter+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-directory+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointcost+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointcostparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointprop+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-endpointpropparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-error+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-networkmap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-networkmapfilter+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-updatestreamcontrol+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/alto-updatestreamparams+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/aml": {
  	source: "iana"
  },
  	"application/andrew-inset": {
  	source: "iana",
  	extensions: [
  		"ez"
  	]
  },
  	"application/applefile": {
  	source: "iana"
  },
  	"application/applixware": {
  	source: "apache",
  	extensions: [
  		"aw"
  	]
  },
  	"application/atf": {
  	source: "iana"
  },
  	"application/atfx": {
  	source: "iana"
  },
  	"application/atom+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atom"
  	]
  },
  	"application/atomcat+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomcat"
  	]
  },
  	"application/atomdeleted+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomdeleted"
  	]
  },
  	"application/atomicmail": {
  	source: "iana"
  },
  	"application/atomsvc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"atomsvc"
  	]
  },
  	"application/atsc-dwd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dwd"
  	]
  },
  	"application/atsc-dynamic-event-message": {
  	source: "iana"
  },
  	"application/atsc-held+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"held"
  	]
  },
  	"application/atsc-rdt+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/atsc-rsat+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rsat"
  	]
  },
  	"application/atxml": {
  	source: "iana"
  },
  	"application/auth-policy+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/bacnet-xdd+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/batch-smtp": {
  	source: "iana"
  },
  	"application/bdoc": {
  	compressible: false,
  	extensions: [
  		"bdoc"
  	]
  },
  	"application/beep+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/calendar+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/calendar+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xcs"
  	]
  },
  	"application/call-completion": {
  	source: "iana"
  },
  	"application/cals-1840": {
  	source: "iana"
  },
  	"application/cap+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/cbor": {
  	source: "iana"
  },
  	"application/cbor-seq": {
  	source: "iana"
  },
  	"application/cccex": {
  	source: "iana"
  },
  	"application/ccmp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ccxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ccxml"
  	]
  },
  	"application/cdfx+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"cdfx"
  	]
  },
  	"application/cdmi-capability": {
  	source: "iana",
  	extensions: [
  		"cdmia"
  	]
  },
  	"application/cdmi-container": {
  	source: "iana",
  	extensions: [
  		"cdmic"
  	]
  },
  	"application/cdmi-domain": {
  	source: "iana",
  	extensions: [
  		"cdmid"
  	]
  },
  	"application/cdmi-object": {
  	source: "iana",
  	extensions: [
  		"cdmio"
  	]
  },
  	"application/cdmi-queue": {
  	source: "iana",
  	extensions: [
  		"cdmiq"
  	]
  },
  	"application/cdni": {
  	source: "iana"
  },
  	"application/cea": {
  	source: "iana"
  },
  	"application/cea-2018+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cellml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cfw": {
  	source: "iana"
  },
  	"application/clue+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/clue_info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cms": {
  	source: "iana"
  },
  	"application/cnrp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/coap-group+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/coap-payload": {
  	source: "iana"
  },
  	"application/commonground": {
  	source: "iana"
  },
  	"application/conference-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cose": {
  	source: "iana"
  },
  	"application/cose-key": {
  	source: "iana"
  },
  	"application/cose-key-set": {
  	source: "iana"
  },
  	"application/cpl+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/csrattrs": {
  	source: "iana"
  },
  	"application/csta+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/cstadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/csvm+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/cu-seeme": {
  	source: "apache",
  	extensions: [
  		"cu"
  	]
  },
  	"application/cwt": {
  	source: "iana"
  },
  	"application/cybercash": {
  	source: "iana"
  },
  	"application/dart": {
  	compressible: true
  },
  	"application/dash+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpd"
  	]
  },
  	"application/dashdelta": {
  	source: "iana"
  },
  	"application/davmount+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"davmount"
  	]
  },
  	"application/dca-rft": {
  	source: "iana"
  },
  	"application/dcd": {
  	source: "iana"
  },
  	"application/dec-dx": {
  	source: "iana"
  },
  	"application/dialog-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dicom": {
  	source: "iana"
  },
  	"application/dicom+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/dicom+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dii": {
  	source: "iana"
  },
  	"application/dit": {
  	source: "iana"
  },
  	"application/dns": {
  	source: "iana"
  },
  	"application/dns+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/dns-message": {
  	source: "iana"
  },
  	"application/docbook+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"dbk"
  	]
  },
  	"application/dots+cbor": {
  	source: "iana"
  },
  	"application/dskpp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/dssc+der": {
  	source: "iana",
  	extensions: [
  		"dssc"
  	]
  },
  	"application/dssc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdssc"
  	]
  },
  	"application/dvcs": {
  	source: "iana"
  },
  	"application/ecmascript": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ecma",
  		"es"
  	]
  },
  	"application/edi-consent": {
  	source: "iana"
  },
  	"application/edi-x12": {
  	source: "iana",
  	compressible: false
  },
  	"application/edifact": {
  	source: "iana",
  	compressible: false
  },
  	"application/efi": {
  	source: "iana"
  },
  	"application/emergencycalldata.comment+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.deviceinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.ecall.msd": {
  	source: "iana"
  },
  	"application/emergencycalldata.providerinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.serviceinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.subscriberinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emergencycalldata.veds+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/emma+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"emma"
  	]
  },
  	"application/emotionml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"emotionml"
  	]
  },
  	"application/encaprtp": {
  	source: "iana"
  },
  	"application/epp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/epub+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"epub"
  	]
  },
  	"application/eshop": {
  	source: "iana"
  },
  	"application/exi": {
  	source: "iana",
  	extensions: [
  		"exi"
  	]
  },
  	"application/expect-ct-report+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/fastinfoset": {
  	source: "iana"
  },
  	"application/fastsoap": {
  	source: "iana"
  },
  	"application/fdt+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"fdt"
  	]
  },
  	"application/fhir+json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/fhir+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/fido.trusted-apps+json": {
  	compressible: true
  },
  	"application/fits": {
  	source: "iana"
  },
  	"application/flexfec": {
  	source: "iana"
  },
  	"application/font-sfnt": {
  	source: "iana"
  },
  	"application/font-tdpfr": {
  	source: "iana",
  	extensions: [
  		"pfr"
  	]
  },
  	"application/font-woff": {
  	source: "iana",
  	compressible: false
  },
  	"application/framework-attributes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/geo+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"geojson"
  	]
  },
  	"application/geo+json-seq": {
  	source: "iana"
  },
  	"application/geopackage+sqlite3": {
  	source: "iana"
  },
  	"application/geoxacml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/gltf-buffer": {
  	source: "iana"
  },
  	"application/gml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"gml"
  	]
  },
  	"application/gpx+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"gpx"
  	]
  },
  	"application/gxf": {
  	source: "apache",
  	extensions: [
  		"gxf"
  	]
  },
  	"application/gzip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"gz"
  	]
  },
  	"application/h224": {
  	source: "iana"
  },
  	"application/held+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/hjson": {
  	extensions: [
  		"hjson"
  	]
  },
  	"application/http": {
  	source: "iana"
  },
  	"application/hyperstudio": {
  	source: "iana",
  	extensions: [
  		"stk"
  	]
  },
  	"application/ibe-key-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ibe-pkg-reply+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ibe-pp-data": {
  	source: "iana"
  },
  	"application/iges": {
  	source: "iana"
  },
  	"application/im-iscomposing+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/index": {
  	source: "iana"
  },
  	"application/index.cmd": {
  	source: "iana"
  },
  	"application/index.obj": {
  	source: "iana"
  },
  	"application/index.response": {
  	source: "iana"
  },
  	"application/index.vnd": {
  	source: "iana"
  },
  	"application/inkml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ink",
  		"inkml"
  	]
  },
  	"application/iotp": {
  	source: "iana"
  },
  	"application/ipfix": {
  	source: "iana",
  	extensions: [
  		"ipfix"
  	]
  },
  	"application/ipp": {
  	source: "iana"
  },
  	"application/isup": {
  	source: "iana"
  },
  	"application/its+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"its"
  	]
  },
  	"application/java-archive": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"jar",
  		"war",
  		"ear"
  	]
  },
  	"application/java-serialized-object": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"ser"
  	]
  },
  	"application/java-vm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"class"
  	]
  },
  	"application/javascript": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"js",
  		"mjs"
  	]
  },
  	"application/jf2feed+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jose": {
  	source: "iana"
  },
  	"application/jose+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jrd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/json": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"json",
  		"map"
  	]
  },
  	"application/json-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/json-seq": {
  	source: "iana"
  },
  	"application/json5": {
  	extensions: [
  		"json5"
  	]
  },
  	"application/jsonml+json": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"jsonml"
  	]
  },
  	"application/jwk+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jwk-set+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/jwt": {
  	source: "iana"
  },
  	"application/kpml-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/kpml-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/ld+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"jsonld"
  	]
  },
  	"application/lgr+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lgr"
  	]
  },
  	"application/link-format": {
  	source: "iana"
  },
  	"application/load-control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/lost+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lostxml"
  	]
  },
  	"application/lostsync+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/lpf+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/lxf": {
  	source: "iana"
  },
  	"application/mac-binhex40": {
  	source: "iana",
  	extensions: [
  		"hqx"
  	]
  },
  	"application/mac-compactpro": {
  	source: "apache",
  	extensions: [
  		"cpt"
  	]
  },
  	"application/macwriteii": {
  	source: "iana"
  },
  	"application/mads+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mads"
  	]
  },
  	"application/manifest+json": {
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"webmanifest"
  	]
  },
  	"application/marc": {
  	source: "iana",
  	extensions: [
  		"mrc"
  	]
  },
  	"application/marcxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mrcx"
  	]
  },
  	"application/mathematica": {
  	source: "iana",
  	extensions: [
  		"ma",
  		"nb",
  		"mb"
  	]
  },
  	"application/mathml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mathml"
  	]
  },
  	"application/mathml-content+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mathml-presentation+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-associated-procedure-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-deregister+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-envelope+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-msk+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-msk-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-protection-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-reception-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-register+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-register-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-schedule+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbms-user-service-description+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mbox": {
  	source: "iana",
  	extensions: [
  		"mbox"
  	]
  },
  	"application/media-policy-dataset+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/media_control+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/mediaservercontrol+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mscml"
  	]
  },
  	"application/merge-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/metalink+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"metalink"
  	]
  },
  	"application/metalink4+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"meta4"
  	]
  },
  	"application/mets+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mets"
  	]
  },
  	"application/mf4": {
  	source: "iana"
  },
  	"application/mikey": {
  	source: "iana"
  },
  	"application/mipc": {
  	source: "iana"
  },
  	"application/mmt-aei+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"maei"
  	]
  },
  	"application/mmt-usd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"musd"
  	]
  },
  	"application/mods+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mods"
  	]
  },
  	"application/moss-keys": {
  	source: "iana"
  },
  	"application/moss-signature": {
  	source: "iana"
  },
  	"application/mosskey-data": {
  	source: "iana"
  },
  	"application/mosskey-request": {
  	source: "iana"
  },
  	"application/mp21": {
  	source: "iana",
  	extensions: [
  		"m21",
  		"mp21"
  	]
  },
  	"application/mp4": {
  	source: "iana",
  	extensions: [
  		"mp4s",
  		"m4p"
  	]
  },
  	"application/mpeg4-generic": {
  	source: "iana"
  },
  	"application/mpeg4-iod": {
  	source: "iana"
  },
  	"application/mpeg4-iod-xmt": {
  	source: "iana"
  },
  	"application/mrb-consumer+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdf"
  	]
  },
  	"application/mrb-publish+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdf"
  	]
  },
  	"application/msc-ivr+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/msc-mixer+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/msword": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"doc",
  		"dot"
  	]
  },
  	"application/mud+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/multipart-core": {
  	source: "iana"
  },
  	"application/mxf": {
  	source: "iana",
  	extensions: [
  		"mxf"
  	]
  },
  	"application/n-quads": {
  	source: "iana",
  	extensions: [
  		"nq"
  	]
  },
  	"application/n-triples": {
  	source: "iana",
  	extensions: [
  		"nt"
  	]
  },
  	"application/nasdata": {
  	source: "iana"
  },
  	"application/news-checkgroups": {
  	source: "iana",
  	charset: "US-ASCII"
  },
  	"application/news-groupinfo": {
  	source: "iana",
  	charset: "US-ASCII"
  },
  	"application/news-transmission": {
  	source: "iana"
  },
  	"application/nlsml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/node": {
  	source: "iana",
  	extensions: [
  		"cjs"
  	]
  },
  	"application/nss": {
  	source: "iana"
  },
  	"application/ocsp-request": {
  	source: "iana"
  },
  	"application/ocsp-response": {
  	source: "iana"
  },
  	"application/octet-stream": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"bin",
  		"dms",
  		"lrf",
  		"mar",
  		"so",
  		"dist",
  		"distz",
  		"pkg",
  		"bpk",
  		"dump",
  		"elc",
  		"deploy",
  		"exe",
  		"dll",
  		"deb",
  		"dmg",
  		"iso",
  		"img",
  		"msi",
  		"msp",
  		"msm",
  		"buffer"
  	]
  },
  	"application/oda": {
  	source: "iana",
  	extensions: [
  		"oda"
  	]
  },
  	"application/odm+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/odx": {
  	source: "iana"
  },
  	"application/oebps-package+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"opf"
  	]
  },
  	"application/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ogx"
  	]
  },
  	"application/omdoc+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"omdoc"
  	]
  },
  	"application/onenote": {
  	source: "apache",
  	extensions: [
  		"onetoc",
  		"onetoc2",
  		"onetmp",
  		"onepkg"
  	]
  },
  	"application/oscore": {
  	source: "iana"
  },
  	"application/oxps": {
  	source: "iana",
  	extensions: [
  		"oxps"
  	]
  },
  	"application/p2p-overlay+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"relo"
  	]
  },
  	"application/parityfec": {
  	source: "iana"
  },
  	"application/passport": {
  	source: "iana"
  },
  	"application/patch-ops-error+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xer"
  	]
  },
  	"application/pdf": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pdf"
  	]
  },
  	"application/pdx": {
  	source: "iana"
  },
  	"application/pem-certificate-chain": {
  	source: "iana"
  },
  	"application/pgp-encrypted": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pgp"
  	]
  },
  	"application/pgp-keys": {
  	source: "iana"
  },
  	"application/pgp-signature": {
  	source: "iana",
  	extensions: [
  		"asc",
  		"sig"
  	]
  },
  	"application/pics-rules": {
  	source: "apache",
  	extensions: [
  		"prf"
  	]
  },
  	"application/pidf+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/pidf-diff+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/pkcs10": {
  	source: "iana",
  	extensions: [
  		"p10"
  	]
  },
  	"application/pkcs12": {
  	source: "iana"
  },
  	"application/pkcs7-mime": {
  	source: "iana",
  	extensions: [
  		"p7m",
  		"p7c"
  	]
  },
  	"application/pkcs7-signature": {
  	source: "iana",
  	extensions: [
  		"p7s"
  	]
  },
  	"application/pkcs8": {
  	source: "iana",
  	extensions: [
  		"p8"
  	]
  },
  	"application/pkcs8-encrypted": {
  	source: "iana"
  },
  	"application/pkix-attr-cert": {
  	source: "iana",
  	extensions: [
  		"ac"
  	]
  },
  	"application/pkix-cert": {
  	source: "iana",
  	extensions: [
  		"cer"
  	]
  },
  	"application/pkix-crl": {
  	source: "iana",
  	extensions: [
  		"crl"
  	]
  },
  	"application/pkix-pkipath": {
  	source: "iana",
  	extensions: [
  		"pkipath"
  	]
  },
  	"application/pkixcmp": {
  	source: "iana",
  	extensions: [
  		"pki"
  	]
  },
  	"application/pls+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"pls"
  	]
  },
  	"application/poc-settings+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/postscript": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ai",
  		"eps",
  		"ps"
  	]
  },
  	"application/ppsp-tracker+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/problem+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/problem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/provenance+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"provx"
  	]
  },
  	"application/prs.alvestrand.titrax-sheet": {
  	source: "iana"
  },
  	"application/prs.cww": {
  	source: "iana",
  	extensions: [
  		"cww"
  	]
  },
  	"application/prs.hpub+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/prs.nprend": {
  	source: "iana"
  },
  	"application/prs.plucker": {
  	source: "iana"
  },
  	"application/prs.rdf-xml-crypt": {
  	source: "iana"
  },
  	"application/prs.xsf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/pskc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"pskcxml"
  	]
  },
  	"application/pvd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/qsig": {
  	source: "iana"
  },
  	"application/raml+yaml": {
  	compressible: true,
  	extensions: [
  		"raml"
  	]
  },
  	"application/raptorfec": {
  	source: "iana"
  },
  	"application/rdap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/rdf+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rdf",
  		"owl"
  	]
  },
  	"application/reginfo+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rif"
  	]
  },
  	"application/relax-ng-compact-syntax": {
  	source: "iana",
  	extensions: [
  		"rnc"
  	]
  },
  	"application/remote-printing": {
  	source: "iana"
  },
  	"application/reputon+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/resource-lists+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rl"
  	]
  },
  	"application/resource-lists-diff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rld"
  	]
  },
  	"application/rfc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/riscos": {
  	source: "iana"
  },
  	"application/rlmi+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/rls-services+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rs"
  	]
  },
  	"application/route-apd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rapd"
  	]
  },
  	"application/route-s-tsid+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sls"
  	]
  },
  	"application/route-usd+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rusd"
  	]
  },
  	"application/rpki-ghostbusters": {
  	source: "iana",
  	extensions: [
  		"gbr"
  	]
  },
  	"application/rpki-manifest": {
  	source: "iana",
  	extensions: [
  		"mft"
  	]
  },
  	"application/rpki-publication": {
  	source: "iana"
  },
  	"application/rpki-roa": {
  	source: "iana",
  	extensions: [
  		"roa"
  	]
  },
  	"application/rpki-updown": {
  	source: "iana"
  },
  	"application/rsd+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"rsd"
  	]
  },
  	"application/rss+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"rss"
  	]
  },
  	"application/rtf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtf"
  	]
  },
  	"application/rtploopback": {
  	source: "iana"
  },
  	"application/rtx": {
  	source: "iana"
  },
  	"application/samlassertion+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/samlmetadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sbe": {
  	source: "iana"
  },
  	"application/sbml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sbml"
  	]
  },
  	"application/scaip+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/scim+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/scvp-cv-request": {
  	source: "iana",
  	extensions: [
  		"scq"
  	]
  },
  	"application/scvp-cv-response": {
  	source: "iana",
  	extensions: [
  		"scs"
  	]
  },
  	"application/scvp-vp-request": {
  	source: "iana",
  	extensions: [
  		"spq"
  	]
  },
  	"application/scvp-vp-response": {
  	source: "iana",
  	extensions: [
  		"spp"
  	]
  },
  	"application/sdp": {
  	source: "iana",
  	extensions: [
  		"sdp"
  	]
  },
  	"application/secevent+jwt": {
  	source: "iana"
  },
  	"application/senml+cbor": {
  	source: "iana"
  },
  	"application/senml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/senml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"senmlx"
  	]
  },
  	"application/senml-etch+cbor": {
  	source: "iana"
  },
  	"application/senml-etch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/senml-exi": {
  	source: "iana"
  },
  	"application/sensml+cbor": {
  	source: "iana"
  },
  	"application/sensml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/sensml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sensmlx"
  	]
  },
  	"application/sensml-exi": {
  	source: "iana"
  },
  	"application/sep+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sep-exi": {
  	source: "iana"
  },
  	"application/session-info": {
  	source: "iana"
  },
  	"application/set-payment": {
  	source: "iana"
  },
  	"application/set-payment-initiation": {
  	source: "iana",
  	extensions: [
  		"setpay"
  	]
  },
  	"application/set-registration": {
  	source: "iana"
  },
  	"application/set-registration-initiation": {
  	source: "iana",
  	extensions: [
  		"setreg"
  	]
  },
  	"application/sgml": {
  	source: "iana"
  },
  	"application/sgml-open-catalog": {
  	source: "iana"
  },
  	"application/shf+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"shf"
  	]
  },
  	"application/sieve": {
  	source: "iana",
  	extensions: [
  		"siv",
  		"sieve"
  	]
  },
  	"application/simple-filter+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/simple-message-summary": {
  	source: "iana"
  },
  	"application/simplesymbolcontainer": {
  	source: "iana"
  },
  	"application/sipc": {
  	source: "iana"
  },
  	"application/slate": {
  	source: "iana"
  },
  	"application/smil": {
  	source: "iana"
  },
  	"application/smil+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"smi",
  		"smil"
  	]
  },
  	"application/smpte336m": {
  	source: "iana"
  },
  	"application/soap+fastinfoset": {
  	source: "iana"
  },
  	"application/soap+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sparql-query": {
  	source: "iana",
  	extensions: [
  		"rq"
  	]
  },
  	"application/sparql-results+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"srx"
  	]
  },
  	"application/spirits-event+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/sql": {
  	source: "iana"
  },
  	"application/srgs": {
  	source: "iana",
  	extensions: [
  		"gram"
  	]
  },
  	"application/srgs+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"grxml"
  	]
  },
  	"application/sru+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sru"
  	]
  },
  	"application/ssdl+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ssdl"
  	]
  },
  	"application/ssml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ssml"
  	]
  },
  	"application/stix+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/swid+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"swidtag"
  	]
  },
  	"application/tamp-apex-update": {
  	source: "iana"
  },
  	"application/tamp-apex-update-confirm": {
  	source: "iana"
  },
  	"application/tamp-community-update": {
  	source: "iana"
  },
  	"application/tamp-community-update-confirm": {
  	source: "iana"
  },
  	"application/tamp-error": {
  	source: "iana"
  },
  	"application/tamp-sequence-adjust": {
  	source: "iana"
  },
  	"application/tamp-sequence-adjust-confirm": {
  	source: "iana"
  },
  	"application/tamp-status-query": {
  	source: "iana"
  },
  	"application/tamp-status-response": {
  	source: "iana"
  },
  	"application/tamp-update": {
  	source: "iana"
  },
  	"application/tamp-update-confirm": {
  	source: "iana"
  },
  	"application/tar": {
  	compressible: true
  },
  	"application/taxii+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/td+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/tei+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tei",
  		"teicorpus"
  	]
  },
  	"application/tetra_isi": {
  	source: "iana"
  },
  	"application/thraud+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tfi"
  	]
  },
  	"application/timestamp-query": {
  	source: "iana"
  },
  	"application/timestamp-reply": {
  	source: "iana"
  },
  	"application/timestamped-data": {
  	source: "iana",
  	extensions: [
  		"tsd"
  	]
  },
  	"application/tlsrpt+gzip": {
  	source: "iana"
  },
  	"application/tlsrpt+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/tnauthlist": {
  	source: "iana"
  },
  	"application/toml": {
  	compressible: true,
  	extensions: [
  		"toml"
  	]
  },
  	"application/trickle-ice-sdpfrag": {
  	source: "iana"
  },
  	"application/trig": {
  	source: "iana"
  },
  	"application/ttml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ttml"
  	]
  },
  	"application/tve-trigger": {
  	source: "iana"
  },
  	"application/tzif": {
  	source: "iana"
  },
  	"application/tzif-leap": {
  	source: "iana"
  },
  	"application/ulpfec": {
  	source: "iana"
  },
  	"application/urc-grpsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/urc-ressheet+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rsheet"
  	]
  },
  	"application/urc-targetdesc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/urc-uisocketdesc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vcard+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vcard+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vemmi": {
  	source: "iana"
  },
  	"application/vividence.scriptfile": {
  	source: "apache"
  },
  	"application/vnd.1000minds.decision-model+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"1km"
  	]
  },
  	"application/vnd.3gpp-prose+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp-prose-pc3ch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp-v2x-local-service-information": {
  	source: "iana"
  },
  	"application/vnd.3gpp.access-transfer-events+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.bsf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.gmop+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mc-signalling-ear": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-payload": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-signalling": {
  	source: "iana"
  },
  	"application/vnd.3gpp.mcdata-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcdata-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-floor-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-location-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-signed+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-ue-init-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcptt-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-location-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-service-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-transmission-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-ue-config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mcvideo-user-profile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.mid-call+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.pic-bw-large": {
  	source: "iana",
  	extensions: [
  		"plb"
  	]
  },
  	"application/vnd.3gpp.pic-bw-small": {
  	source: "iana",
  	extensions: [
  		"psb"
  	]
  },
  	"application/vnd.3gpp.pic-bw-var": {
  	source: "iana",
  	extensions: [
  		"pvb"
  	]
  },
  	"application/vnd.3gpp.sms": {
  	source: "iana"
  },
  	"application/vnd.3gpp.sms+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.srvcc-ext+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.srvcc-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.state-and-event-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp.ussd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp2.bcmcsinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.3gpp2.sms": {
  	source: "iana"
  },
  	"application/vnd.3gpp2.tcap": {
  	source: "iana",
  	extensions: [
  		"tcap"
  	]
  },
  	"application/vnd.3lightssoftware.imagescal": {
  	source: "iana"
  },
  	"application/vnd.3m.post-it-notes": {
  	source: "iana",
  	extensions: [
  		"pwn"
  	]
  },
  	"application/vnd.accpac.simply.aso": {
  	source: "iana",
  	extensions: [
  		"aso"
  	]
  },
  	"application/vnd.accpac.simply.imp": {
  	source: "iana",
  	extensions: [
  		"imp"
  	]
  },
  	"application/vnd.acucobol": {
  	source: "iana",
  	extensions: [
  		"acu"
  	]
  },
  	"application/vnd.acucorp": {
  	source: "iana",
  	extensions: [
  		"atc",
  		"acutc"
  	]
  },
  	"application/vnd.adobe.air-application-installer-package+zip": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"air"
  	]
  },
  	"application/vnd.adobe.flash.movie": {
  	source: "iana"
  },
  	"application/vnd.adobe.formscentral.fcdt": {
  	source: "iana",
  	extensions: [
  		"fcdt"
  	]
  },
  	"application/vnd.adobe.fxp": {
  	source: "iana",
  	extensions: [
  		"fxp",
  		"fxpl"
  	]
  },
  	"application/vnd.adobe.partial-upload": {
  	source: "iana"
  },
  	"application/vnd.adobe.xdp+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdp"
  	]
  },
  	"application/vnd.adobe.xfdf": {
  	source: "iana",
  	extensions: [
  		"xfdf"
  	]
  },
  	"application/vnd.aether.imp": {
  	source: "iana"
  },
  	"application/vnd.afpc.afplinedata": {
  	source: "iana"
  },
  	"application/vnd.afpc.afplinedata-pagedef": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-charset": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-codedfont": {
  	source: "iana"
  },
  	"application/vnd.afpc.foca-codepage": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-formdef": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-mediummap": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-objectcontainer": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-overlay": {
  	source: "iana"
  },
  	"application/vnd.afpc.modca-pagesegment": {
  	source: "iana"
  },
  	"application/vnd.ah-barcode": {
  	source: "iana"
  },
  	"application/vnd.ahead.space": {
  	source: "iana",
  	extensions: [
  		"ahead"
  	]
  },
  	"application/vnd.airzip.filesecure.azf": {
  	source: "iana",
  	extensions: [
  		"azf"
  	]
  },
  	"application/vnd.airzip.filesecure.azs": {
  	source: "iana",
  	extensions: [
  		"azs"
  	]
  },
  	"application/vnd.amadeus+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.amazon.ebook": {
  	source: "apache",
  	extensions: [
  		"azw"
  	]
  },
  	"application/vnd.amazon.mobi8-ebook": {
  	source: "iana"
  },
  	"application/vnd.americandynamics.acc": {
  	source: "iana",
  	extensions: [
  		"acc"
  	]
  },
  	"application/vnd.amiga.ami": {
  	source: "iana",
  	extensions: [
  		"ami"
  	]
  },
  	"application/vnd.amundsen.maze+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.android.ota": {
  	source: "iana"
  },
  	"application/vnd.android.package-archive": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"apk"
  	]
  },
  	"application/vnd.anki": {
  	source: "iana"
  },
  	"application/vnd.anser-web-certificate-issue-initiation": {
  	source: "iana",
  	extensions: [
  		"cii"
  	]
  },
  	"application/vnd.anser-web-funds-transfer-initiation": {
  	source: "apache",
  	extensions: [
  		"fti"
  	]
  },
  	"application/vnd.antix.game-component": {
  	source: "iana",
  	extensions: [
  		"atx"
  	]
  },
  	"application/vnd.apache.thrift.binary": {
  	source: "iana"
  },
  	"application/vnd.apache.thrift.compact": {
  	source: "iana"
  },
  	"application/vnd.apache.thrift.json": {
  	source: "iana"
  },
  	"application/vnd.api+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.aplextor.warrp+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.apothekende.reservation+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.apple.installer+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mpkg"
  	]
  },
  	"application/vnd.apple.keynote": {
  	source: "iana",
  	extensions: [
  		"keynote"
  	]
  },
  	"application/vnd.apple.mpegurl": {
  	source: "iana",
  	extensions: [
  		"m3u8"
  	]
  },
  	"application/vnd.apple.numbers": {
  	source: "iana",
  	extensions: [
  		"numbers"
  	]
  },
  	"application/vnd.apple.pages": {
  	source: "iana",
  	extensions: [
  		"pages"
  	]
  },
  	"application/vnd.apple.pkpass": {
  	compressible: false,
  	extensions: [
  		"pkpass"
  	]
  },
  	"application/vnd.arastra.swi": {
  	source: "iana"
  },
  	"application/vnd.aristanetworks.swi": {
  	source: "iana",
  	extensions: [
  		"swi"
  	]
  },
  	"application/vnd.artisan+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.artsquare": {
  	source: "iana"
  },
  	"application/vnd.astraea-software.iota": {
  	source: "iana",
  	extensions: [
  		"iota"
  	]
  },
  	"application/vnd.audiograph": {
  	source: "iana",
  	extensions: [
  		"aep"
  	]
  },
  	"application/vnd.autopackage": {
  	source: "iana"
  },
  	"application/vnd.avalon+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.avistar+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.balsamiq.bmml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"bmml"
  	]
  },
  	"application/vnd.balsamiq.bmpr": {
  	source: "iana"
  },
  	"application/vnd.banana-accounting": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.error": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.msg": {
  	source: "iana"
  },
  	"application/vnd.bbf.usp.msg+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.bekitzur-stech+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.bint.med-content": {
  	source: "iana"
  },
  	"application/vnd.biopax.rdf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.blink-idb-value-wrapper": {
  	source: "iana"
  },
  	"application/vnd.blueice.multipass": {
  	source: "iana",
  	extensions: [
  		"mpm"
  	]
  },
  	"application/vnd.bluetooth.ep.oob": {
  	source: "iana"
  },
  	"application/vnd.bluetooth.le.oob": {
  	source: "iana"
  },
  	"application/vnd.bmi": {
  	source: "iana",
  	extensions: [
  		"bmi"
  	]
  },
  	"application/vnd.bpf": {
  	source: "iana"
  },
  	"application/vnd.bpf3": {
  	source: "iana"
  },
  	"application/vnd.businessobjects": {
  	source: "iana",
  	extensions: [
  		"rep"
  	]
  },
  	"application/vnd.byu.uapi+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cab-jscript": {
  	source: "iana"
  },
  	"application/vnd.canon-cpdl": {
  	source: "iana"
  },
  	"application/vnd.canon-lips": {
  	source: "iana"
  },
  	"application/vnd.capasystems-pg+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cendio.thinlinc.clientconf": {
  	source: "iana"
  },
  	"application/vnd.century-systems.tcp_stream": {
  	source: "iana"
  },
  	"application/vnd.chemdraw+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"cdxml"
  	]
  },
  	"application/vnd.chess-pgn": {
  	source: "iana"
  },
  	"application/vnd.chipnuts.karaoke-mmd": {
  	source: "iana",
  	extensions: [
  		"mmd"
  	]
  },
  	"application/vnd.ciedi": {
  	source: "iana"
  },
  	"application/vnd.cinderella": {
  	source: "iana",
  	extensions: [
  		"cdy"
  	]
  },
  	"application/vnd.cirpack.isdn-ext": {
  	source: "iana"
  },
  	"application/vnd.citationstyles.style+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"csl"
  	]
  },
  	"application/vnd.claymore": {
  	source: "iana",
  	extensions: [
  		"cla"
  	]
  },
  	"application/vnd.cloanto.rp9": {
  	source: "iana",
  	extensions: [
  		"rp9"
  	]
  },
  	"application/vnd.clonk.c4group": {
  	source: "iana",
  	extensions: [
  		"c4g",
  		"c4d",
  		"c4f",
  		"c4p",
  		"c4u"
  	]
  },
  	"application/vnd.cluetrust.cartomobile-config": {
  	source: "iana",
  	extensions: [
  		"c11amc"
  	]
  },
  	"application/vnd.cluetrust.cartomobile-config-pkg": {
  	source: "iana",
  	extensions: [
  		"c11amz"
  	]
  },
  	"application/vnd.coffeescript": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.document": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.document-template": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.presentation": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.presentation-template": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.spreadsheet": {
  	source: "iana"
  },
  	"application/vnd.collabio.xodocuments.spreadsheet-template": {
  	source: "iana"
  },
  	"application/vnd.collection+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.collection.doc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.collection.next+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.comicbook+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.comicbook-rar": {
  	source: "iana"
  },
  	"application/vnd.commerce-battelle": {
  	source: "iana"
  },
  	"application/vnd.commonspace": {
  	source: "iana",
  	extensions: [
  		"csp"
  	]
  },
  	"application/vnd.contact.cmsg": {
  	source: "iana",
  	extensions: [
  		"cdbcmsg"
  	]
  },
  	"application/vnd.coreos.ignition+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cosmocaller": {
  	source: "iana",
  	extensions: [
  		"cmc"
  	]
  },
  	"application/vnd.crick.clicker": {
  	source: "iana",
  	extensions: [
  		"clkx"
  	]
  },
  	"application/vnd.crick.clicker.keyboard": {
  	source: "iana",
  	extensions: [
  		"clkk"
  	]
  },
  	"application/vnd.crick.clicker.palette": {
  	source: "iana",
  	extensions: [
  		"clkp"
  	]
  },
  	"application/vnd.crick.clicker.template": {
  	source: "iana",
  	extensions: [
  		"clkt"
  	]
  },
  	"application/vnd.crick.clicker.wordbank": {
  	source: "iana",
  	extensions: [
  		"clkw"
  	]
  },
  	"application/vnd.criticaltools.wbs+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wbs"
  	]
  },
  	"application/vnd.cryptii.pipe+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.crypto-shade-file": {
  	source: "iana"
  },
  	"application/vnd.ctc-posml": {
  	source: "iana",
  	extensions: [
  		"pml"
  	]
  },
  	"application/vnd.ctct.ws+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cups-pdf": {
  	source: "iana"
  },
  	"application/vnd.cups-postscript": {
  	source: "iana"
  },
  	"application/vnd.cups-ppd": {
  	source: "iana",
  	extensions: [
  		"ppd"
  	]
  },
  	"application/vnd.cups-raster": {
  	source: "iana"
  },
  	"application/vnd.cups-raw": {
  	source: "iana"
  },
  	"application/vnd.curl": {
  	source: "iana"
  },
  	"application/vnd.curl.car": {
  	source: "apache",
  	extensions: [
  		"car"
  	]
  },
  	"application/vnd.curl.pcurl": {
  	source: "apache",
  	extensions: [
  		"pcurl"
  	]
  },
  	"application/vnd.cyan.dean.root+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.cybank": {
  	source: "iana"
  },
  	"application/vnd.d2l.coursepackage1p0+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.dart": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dart"
  	]
  },
  	"application/vnd.data-vision.rdz": {
  	source: "iana",
  	extensions: [
  		"rdz"
  	]
  },
  	"application/vnd.datapackage+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dataresource+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dbf": {
  	source: "iana"
  },
  	"application/vnd.debian.binary-package": {
  	source: "iana"
  },
  	"application/vnd.dece.data": {
  	source: "iana",
  	extensions: [
  		"uvf",
  		"uvvf",
  		"uvd",
  		"uvvd"
  	]
  },
  	"application/vnd.dece.ttml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uvt",
  		"uvvt"
  	]
  },
  	"application/vnd.dece.unspecified": {
  	source: "iana",
  	extensions: [
  		"uvx",
  		"uvvx"
  	]
  },
  	"application/vnd.dece.zip": {
  	source: "iana",
  	extensions: [
  		"uvz",
  		"uvvz"
  	]
  },
  	"application/vnd.denovo.fcselayout-link": {
  	source: "iana",
  	extensions: [
  		"fe_launch"
  	]
  },
  	"application/vnd.desmume.movie": {
  	source: "iana"
  },
  	"application/vnd.dir-bi.plate-dl-nosuffix": {
  	source: "iana"
  },
  	"application/vnd.dm.delegation+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dna": {
  	source: "iana",
  	extensions: [
  		"dna"
  	]
  },
  	"application/vnd.document+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dolby.mlp": {
  	source: "apache",
  	extensions: [
  		"mlp"
  	]
  },
  	"application/vnd.dolby.mobile.1": {
  	source: "iana"
  },
  	"application/vnd.dolby.mobile.2": {
  	source: "iana"
  },
  	"application/vnd.doremir.scorecloud-binary-document": {
  	source: "iana"
  },
  	"application/vnd.dpgraph": {
  	source: "iana",
  	extensions: [
  		"dpg"
  	]
  },
  	"application/vnd.dreamfactory": {
  	source: "iana",
  	extensions: [
  		"dfac"
  	]
  },
  	"application/vnd.drive+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ds-keypoint": {
  	source: "apache",
  	extensions: [
  		"kpxx"
  	]
  },
  	"application/vnd.dtg.local": {
  	source: "iana"
  },
  	"application/vnd.dtg.local.flash": {
  	source: "iana"
  },
  	"application/vnd.dtg.local.html": {
  	source: "iana"
  },
  	"application/vnd.dvb.ait": {
  	source: "iana",
  	extensions: [
  		"ait"
  	]
  },
  	"application/vnd.dvb.dvbisl+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.dvbj": {
  	source: "iana"
  },
  	"application/vnd.dvb.esgcontainer": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcdftnotifaccess": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgaccess": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgaccess2": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcesgpdd": {
  	source: "iana"
  },
  	"application/vnd.dvb.ipdcroaming": {
  	source: "iana"
  },
  	"application/vnd.dvb.iptv.alfec-base": {
  	source: "iana"
  },
  	"application/vnd.dvb.iptv.alfec-enhancement": {
  	source: "iana"
  },
  	"application/vnd.dvb.notif-aggregate-root+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-container+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-generic+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-msglist+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-registration-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-ia-registration-response+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.notif-init+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.dvb.pfr": {
  	source: "iana"
  },
  	"application/vnd.dvb.service": {
  	source: "iana",
  	extensions: [
  		"svc"
  	]
  },
  	"application/vnd.dxr": {
  	source: "iana"
  },
  	"application/vnd.dynageo": {
  	source: "iana",
  	extensions: [
  		"geo"
  	]
  },
  	"application/vnd.dzr": {
  	source: "iana"
  },
  	"application/vnd.easykaraoke.cdgdownload": {
  	source: "iana"
  },
  	"application/vnd.ecdis-update": {
  	source: "iana"
  },
  	"application/vnd.ecip.rlp": {
  	source: "iana"
  },
  	"application/vnd.ecowin.chart": {
  	source: "iana",
  	extensions: [
  		"mag"
  	]
  },
  	"application/vnd.ecowin.filerequest": {
  	source: "iana"
  },
  	"application/vnd.ecowin.fileupdate": {
  	source: "iana"
  },
  	"application/vnd.ecowin.series": {
  	source: "iana"
  },
  	"application/vnd.ecowin.seriesrequest": {
  	source: "iana"
  },
  	"application/vnd.ecowin.seriesupdate": {
  	source: "iana"
  },
  	"application/vnd.efi.img": {
  	source: "iana"
  },
  	"application/vnd.efi.iso": {
  	source: "iana"
  },
  	"application/vnd.emclient.accessrequest+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.enliven": {
  	source: "iana",
  	extensions: [
  		"nml"
  	]
  },
  	"application/vnd.enphase.envoy": {
  	source: "iana"
  },
  	"application/vnd.eprints.data+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.epson.esf": {
  	source: "iana",
  	extensions: [
  		"esf"
  	]
  },
  	"application/vnd.epson.msf": {
  	source: "iana",
  	extensions: [
  		"msf"
  	]
  },
  	"application/vnd.epson.quickanime": {
  	source: "iana",
  	extensions: [
  		"qam"
  	]
  },
  	"application/vnd.epson.salt": {
  	source: "iana",
  	extensions: [
  		"slt"
  	]
  },
  	"application/vnd.epson.ssf": {
  	source: "iana",
  	extensions: [
  		"ssf"
  	]
  },
  	"application/vnd.ericsson.quickcall": {
  	source: "iana"
  },
  	"application/vnd.espass-espass+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.eszigno3+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"es3",
  		"et3"
  	]
  },
  	"application/vnd.etsi.aoc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.asic-e+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.etsi.asic-s+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.etsi.cug+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvcommand+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvdiscovery+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-bc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-cod+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsad-npvr+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvservice+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvsync+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.iptvueprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.mcid+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.mheg5": {
  	source: "iana"
  },
  	"application/vnd.etsi.overload-control-policy-dataset+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.pstn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.sci+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.simservs+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.timestamp-token": {
  	source: "iana"
  },
  	"application/vnd.etsi.tsl+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.etsi.tsl.der": {
  	source: "iana"
  },
  	"application/vnd.eudora.data": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.profile": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.settings": {
  	source: "iana"
  },
  	"application/vnd.evolv.ecig.theme": {
  	source: "iana"
  },
  	"application/vnd.exstream-empower+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.exstream-package": {
  	source: "iana"
  },
  	"application/vnd.ezpix-album": {
  	source: "iana",
  	extensions: [
  		"ez2"
  	]
  },
  	"application/vnd.ezpix-package": {
  	source: "iana",
  	extensions: [
  		"ez3"
  	]
  },
  	"application/vnd.f-secure.mobile": {
  	source: "iana"
  },
  	"application/vnd.fastcopy-disk-image": {
  	source: "iana"
  },
  	"application/vnd.fdf": {
  	source: "iana",
  	extensions: [
  		"fdf"
  	]
  },
  	"application/vnd.fdsn.mseed": {
  	source: "iana",
  	extensions: [
  		"mseed"
  	]
  },
  	"application/vnd.fdsn.seed": {
  	source: "iana",
  	extensions: [
  		"seed",
  		"dataless"
  	]
  },
  	"application/vnd.ffsns": {
  	source: "iana"
  },
  	"application/vnd.ficlab.flb+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.filmit.zfc": {
  	source: "iana"
  },
  	"application/vnd.fints": {
  	source: "iana"
  },
  	"application/vnd.firemonkeys.cloudcell": {
  	source: "iana"
  },
  	"application/vnd.flographit": {
  	source: "iana",
  	extensions: [
  		"gph"
  	]
  },
  	"application/vnd.fluxtime.clip": {
  	source: "iana",
  	extensions: [
  		"ftc"
  	]
  },
  	"application/vnd.font-fontforge-sfd": {
  	source: "iana"
  },
  	"application/vnd.framemaker": {
  	source: "iana",
  	extensions: [
  		"fm",
  		"frame",
  		"maker",
  		"book"
  	]
  },
  	"application/vnd.frogans.fnc": {
  	source: "iana",
  	extensions: [
  		"fnc"
  	]
  },
  	"application/vnd.frogans.ltf": {
  	source: "iana",
  	extensions: [
  		"ltf"
  	]
  },
  	"application/vnd.fsc.weblaunch": {
  	source: "iana",
  	extensions: [
  		"fsc"
  	]
  },
  	"application/vnd.fujitsu.oasys": {
  	source: "iana",
  	extensions: [
  		"oas"
  	]
  },
  	"application/vnd.fujitsu.oasys2": {
  	source: "iana",
  	extensions: [
  		"oa2"
  	]
  },
  	"application/vnd.fujitsu.oasys3": {
  	source: "iana",
  	extensions: [
  		"oa3"
  	]
  },
  	"application/vnd.fujitsu.oasysgp": {
  	source: "iana",
  	extensions: [
  		"fg5"
  	]
  },
  	"application/vnd.fujitsu.oasysprs": {
  	source: "iana",
  	extensions: [
  		"bh2"
  	]
  },
  	"application/vnd.fujixerox.art-ex": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.art4": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.ddd": {
  	source: "iana",
  	extensions: [
  		"ddd"
  	]
  },
  	"application/vnd.fujixerox.docuworks": {
  	source: "iana",
  	extensions: [
  		"xdw"
  	]
  },
  	"application/vnd.fujixerox.docuworks.binder": {
  	source: "iana",
  	extensions: [
  		"xbd"
  	]
  },
  	"application/vnd.fujixerox.docuworks.container": {
  	source: "iana"
  },
  	"application/vnd.fujixerox.hbpl": {
  	source: "iana"
  },
  	"application/vnd.fut-misnet": {
  	source: "iana"
  },
  	"application/vnd.futoin+cbor": {
  	source: "iana"
  },
  	"application/vnd.futoin+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.fuzzysheet": {
  	source: "iana",
  	extensions: [
  		"fzs"
  	]
  },
  	"application/vnd.genomatix.tuxedo": {
  	source: "iana",
  	extensions: [
  		"txd"
  	]
  },
  	"application/vnd.gentics.grd+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geo+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geocube+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.geogebra.file": {
  	source: "iana",
  	extensions: [
  		"ggb"
  	]
  },
  	"application/vnd.geogebra.tool": {
  	source: "iana",
  	extensions: [
  		"ggt"
  	]
  },
  	"application/vnd.geometry-explorer": {
  	source: "iana",
  	extensions: [
  		"gex",
  		"gre"
  	]
  },
  	"application/vnd.geonext": {
  	source: "iana",
  	extensions: [
  		"gxt"
  	]
  },
  	"application/vnd.geoplan": {
  	source: "iana",
  	extensions: [
  		"g2w"
  	]
  },
  	"application/vnd.geospace": {
  	source: "iana",
  	extensions: [
  		"g3w"
  	]
  },
  	"application/vnd.gerber": {
  	source: "iana"
  },
  	"application/vnd.globalplatform.card-content-mgt": {
  	source: "iana"
  },
  	"application/vnd.globalplatform.card-content-mgt-response": {
  	source: "iana"
  },
  	"application/vnd.gmx": {
  	source: "iana",
  	extensions: [
  		"gmx"
  	]
  },
  	"application/vnd.google-apps.document": {
  	compressible: false,
  	extensions: [
  		"gdoc"
  	]
  },
  	"application/vnd.google-apps.presentation": {
  	compressible: false,
  	extensions: [
  		"gslides"
  	]
  },
  	"application/vnd.google-apps.spreadsheet": {
  	compressible: false,
  	extensions: [
  		"gsheet"
  	]
  },
  	"application/vnd.google-earth.kml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"kml"
  	]
  },
  	"application/vnd.google-earth.kmz": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"kmz"
  	]
  },
  	"application/vnd.gov.sk.e-form+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.gov.sk.e-form+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.gov.sk.xmldatacontainer+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.grafeq": {
  	source: "iana",
  	extensions: [
  		"gqf",
  		"gqs"
  	]
  },
  	"application/vnd.gridmp": {
  	source: "iana"
  },
  	"application/vnd.groove-account": {
  	source: "iana",
  	extensions: [
  		"gac"
  	]
  },
  	"application/vnd.groove-help": {
  	source: "iana",
  	extensions: [
  		"ghf"
  	]
  },
  	"application/vnd.groove-identity-message": {
  	source: "iana",
  	extensions: [
  		"gim"
  	]
  },
  	"application/vnd.groove-injector": {
  	source: "iana",
  	extensions: [
  		"grv"
  	]
  },
  	"application/vnd.groove-tool-message": {
  	source: "iana",
  	extensions: [
  		"gtm"
  	]
  },
  	"application/vnd.groove-tool-template": {
  	source: "iana",
  	extensions: [
  		"tpl"
  	]
  },
  	"application/vnd.groove-vcard": {
  	source: "iana",
  	extensions: [
  		"vcg"
  	]
  },
  	"application/vnd.hal+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hal+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"hal"
  	]
  },
  	"application/vnd.handheld-entertainment+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"zmm"
  	]
  },
  	"application/vnd.hbci": {
  	source: "iana",
  	extensions: [
  		"hbci"
  	]
  },
  	"application/vnd.hc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hcl-bireports": {
  	source: "iana"
  },
  	"application/vnd.hdt": {
  	source: "iana"
  },
  	"application/vnd.heroku+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hhe.lesson-player": {
  	source: "iana",
  	extensions: [
  		"les"
  	]
  },
  	"application/vnd.hp-hpgl": {
  	source: "iana",
  	extensions: [
  		"hpgl"
  	]
  },
  	"application/vnd.hp-hpid": {
  	source: "iana",
  	extensions: [
  		"hpid"
  	]
  },
  	"application/vnd.hp-hps": {
  	source: "iana",
  	extensions: [
  		"hps"
  	]
  },
  	"application/vnd.hp-jlyt": {
  	source: "iana",
  	extensions: [
  		"jlt"
  	]
  },
  	"application/vnd.hp-pcl": {
  	source: "iana",
  	extensions: [
  		"pcl"
  	]
  },
  	"application/vnd.hp-pclxl": {
  	source: "iana",
  	extensions: [
  		"pclxl"
  	]
  },
  	"application/vnd.httphone": {
  	source: "iana"
  },
  	"application/vnd.hydrostatix.sof-data": {
  	source: "iana",
  	extensions: [
  		"sfd-hdstx"
  	]
  },
  	"application/vnd.hyper+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hyper-item+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hyperdrive+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.hzn-3d-crossword": {
  	source: "iana"
  },
  	"application/vnd.ibm.afplinedata": {
  	source: "iana"
  },
  	"application/vnd.ibm.electronic-media": {
  	source: "iana"
  },
  	"application/vnd.ibm.minipay": {
  	source: "iana",
  	extensions: [
  		"mpy"
  	]
  },
  	"application/vnd.ibm.modcap": {
  	source: "iana",
  	extensions: [
  		"afp",
  		"listafp",
  		"list3820"
  	]
  },
  	"application/vnd.ibm.rights-management": {
  	source: "iana",
  	extensions: [
  		"irm"
  	]
  },
  	"application/vnd.ibm.secure-container": {
  	source: "iana",
  	extensions: [
  		"sc"
  	]
  },
  	"application/vnd.iccprofile": {
  	source: "iana",
  	extensions: [
  		"icc",
  		"icm"
  	]
  },
  	"application/vnd.ieee.1905": {
  	source: "iana"
  },
  	"application/vnd.igloader": {
  	source: "iana",
  	extensions: [
  		"igl"
  	]
  },
  	"application/vnd.imagemeter.folder+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.imagemeter.image+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.immervision-ivp": {
  	source: "iana",
  	extensions: [
  		"ivp"
  	]
  },
  	"application/vnd.immervision-ivu": {
  	source: "iana",
  	extensions: [
  		"ivu"
  	]
  },
  	"application/vnd.ims.imsccv1p1": {
  	source: "iana"
  },
  	"application/vnd.ims.imsccv1p2": {
  	source: "iana"
  },
  	"application/vnd.ims.imsccv1p3": {
  	source: "iana"
  },
  	"application/vnd.ims.lis.v2.result+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolproxy+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolproxy.id+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolsettings+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.informedcontrol.rms+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.informix-visionary": {
  	source: "iana"
  },
  	"application/vnd.infotech.project": {
  	source: "iana"
  },
  	"application/vnd.infotech.project+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.innopath.wamp.notification": {
  	source: "iana"
  },
  	"application/vnd.insors.igm": {
  	source: "iana",
  	extensions: [
  		"igm"
  	]
  },
  	"application/vnd.intercon.formnet": {
  	source: "iana",
  	extensions: [
  		"xpw",
  		"xpx"
  	]
  },
  	"application/vnd.intergeo": {
  	source: "iana",
  	extensions: [
  		"i2g"
  	]
  },
  	"application/vnd.intertrust.digibox": {
  	source: "iana"
  },
  	"application/vnd.intertrust.nncp": {
  	source: "iana"
  },
  	"application/vnd.intu.qbo": {
  	source: "iana",
  	extensions: [
  		"qbo"
  	]
  },
  	"application/vnd.intu.qfx": {
  	source: "iana",
  	extensions: [
  		"qfx"
  	]
  },
  	"application/vnd.iptc.g2.catalogitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.conceptitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.knowledgeitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.newsitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.newsmessage+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.packageitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.iptc.g2.planningitem+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ipunplugged.rcprofile": {
  	source: "iana",
  	extensions: [
  		"rcprofile"
  	]
  },
  	"application/vnd.irepository.package+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"irp"
  	]
  },
  	"application/vnd.is-xpr": {
  	source: "iana",
  	extensions: [
  		"xpr"
  	]
  },
  	"application/vnd.isac.fcs": {
  	source: "iana",
  	extensions: [
  		"fcs"
  	]
  },
  	"application/vnd.iso11783-10+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.jam": {
  	source: "iana",
  	extensions: [
  		"jam"
  	]
  },
  	"application/vnd.japannet-directory-service": {
  	source: "iana"
  },
  	"application/vnd.japannet-jpnstore-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-payment-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-registration": {
  	source: "iana"
  },
  	"application/vnd.japannet-registration-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-setstore-wakeup": {
  	source: "iana"
  },
  	"application/vnd.japannet-verification": {
  	source: "iana"
  },
  	"application/vnd.japannet-verification-wakeup": {
  	source: "iana"
  },
  	"application/vnd.jcp.javame.midlet-rms": {
  	source: "iana",
  	extensions: [
  		"rms"
  	]
  },
  	"application/vnd.jisp": {
  	source: "iana",
  	extensions: [
  		"jisp"
  	]
  },
  	"application/vnd.joost.joda-archive": {
  	source: "iana",
  	extensions: [
  		"joda"
  	]
  },
  	"application/vnd.jsk.isdn-ngn": {
  	source: "iana"
  },
  	"application/vnd.kahootz": {
  	source: "iana",
  	extensions: [
  		"ktz",
  		"ktr"
  	]
  },
  	"application/vnd.kde.karbon": {
  	source: "iana",
  	extensions: [
  		"karbon"
  	]
  },
  	"application/vnd.kde.kchart": {
  	source: "iana",
  	extensions: [
  		"chrt"
  	]
  },
  	"application/vnd.kde.kformula": {
  	source: "iana",
  	extensions: [
  		"kfo"
  	]
  },
  	"application/vnd.kde.kivio": {
  	source: "iana",
  	extensions: [
  		"flw"
  	]
  },
  	"application/vnd.kde.kontour": {
  	source: "iana",
  	extensions: [
  		"kon"
  	]
  },
  	"application/vnd.kde.kpresenter": {
  	source: "iana",
  	extensions: [
  		"kpr",
  		"kpt"
  	]
  },
  	"application/vnd.kde.kspread": {
  	source: "iana",
  	extensions: [
  		"ksp"
  	]
  },
  	"application/vnd.kde.kword": {
  	source: "iana",
  	extensions: [
  		"kwd",
  		"kwt"
  	]
  },
  	"application/vnd.kenameaapp": {
  	source: "iana",
  	extensions: [
  		"htke"
  	]
  },
  	"application/vnd.kidspiration": {
  	source: "iana",
  	extensions: [
  		"kia"
  	]
  },
  	"application/vnd.kinar": {
  	source: "iana",
  	extensions: [
  		"kne",
  		"knp"
  	]
  },
  	"application/vnd.koan": {
  	source: "iana",
  	extensions: [
  		"skp",
  		"skd",
  		"skt",
  		"skm"
  	]
  },
  	"application/vnd.kodak-descriptor": {
  	source: "iana",
  	extensions: [
  		"sse"
  	]
  },
  	"application/vnd.las": {
  	source: "iana"
  },
  	"application/vnd.las.las+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.las.las+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lasxml"
  	]
  },
  	"application/vnd.laszip": {
  	source: "iana"
  },
  	"application/vnd.leap+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.liberty-request+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.llamagraphics.life-balance.desktop": {
  	source: "iana",
  	extensions: [
  		"lbd"
  	]
  },
  	"application/vnd.llamagraphics.life-balance.exchange+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"lbe"
  	]
  },
  	"application/vnd.logipipe.circuit+zip": {
  	source: "iana",
  	compressible: false
  },
  	"application/vnd.loom": {
  	source: "iana"
  },
  	"application/vnd.lotus-1-2-3": {
  	source: "iana",
  	extensions: [
  		"123"
  	]
  },
  	"application/vnd.lotus-approach": {
  	source: "iana",
  	extensions: [
  		"apr"
  	]
  },
  	"application/vnd.lotus-freelance": {
  	source: "iana",
  	extensions: [
  		"pre"
  	]
  },
  	"application/vnd.lotus-notes": {
  	source: "iana",
  	extensions: [
  		"nsf"
  	]
  },
  	"application/vnd.lotus-organizer": {
  	source: "iana",
  	extensions: [
  		"org"
  	]
  },
  	"application/vnd.lotus-screencam": {
  	source: "iana",
  	extensions: [
  		"scm"
  	]
  },
  	"application/vnd.lotus-wordpro": {
  	source: "iana",
  	extensions: [
  		"lwp"
  	]
  },
  	"application/vnd.macports.portpkg": {
  	source: "iana",
  	extensions: [
  		"portpkg"
  	]
  },
  	"application/vnd.mapbox-vector-tile": {
  	source: "iana"
  },
  	"application/vnd.marlin.drm.actiontoken+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.conftoken+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.license+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.marlin.drm.mdcf": {
  	source: "iana"
  },
  	"application/vnd.mason+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.maxmind.maxmind-db": {
  	source: "iana"
  },
  	"application/vnd.mcd": {
  	source: "iana",
  	extensions: [
  		"mcd"
  	]
  },
  	"application/vnd.medcalcdata": {
  	source: "iana",
  	extensions: [
  		"mc1"
  	]
  },
  	"application/vnd.mediastation.cdkey": {
  	source: "iana",
  	extensions: [
  		"cdkey"
  	]
  },
  	"application/vnd.meridian-slingshot": {
  	source: "iana"
  },
  	"application/vnd.mfer": {
  	source: "iana",
  	extensions: [
  		"mwf"
  	]
  },
  	"application/vnd.mfmp": {
  	source: "iana",
  	extensions: [
  		"mfm"
  	]
  },
  	"application/vnd.micro+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.micrografx.flo": {
  	source: "iana",
  	extensions: [
  		"flo"
  	]
  },
  	"application/vnd.micrografx.igx": {
  	source: "iana",
  	extensions: [
  		"igx"
  	]
  },
  	"application/vnd.microsoft.portable-executable": {
  	source: "iana"
  },
  	"application/vnd.microsoft.windows.thumbnail-cache": {
  	source: "iana"
  },
  	"application/vnd.miele+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.mif": {
  	source: "iana",
  	extensions: [
  		"mif"
  	]
  },
  	"application/vnd.minisoft-hp3000-save": {
  	source: "iana"
  },
  	"application/vnd.mitsubishi.misty-guard.trustweb": {
  	source: "iana"
  },
  	"application/vnd.mobius.daf": {
  	source: "iana",
  	extensions: [
  		"daf"
  	]
  },
  	"application/vnd.mobius.dis": {
  	source: "iana",
  	extensions: [
  		"dis"
  	]
  },
  	"application/vnd.mobius.mbk": {
  	source: "iana",
  	extensions: [
  		"mbk"
  	]
  },
  	"application/vnd.mobius.mqy": {
  	source: "iana",
  	extensions: [
  		"mqy"
  	]
  },
  	"application/vnd.mobius.msl": {
  	source: "iana",
  	extensions: [
  		"msl"
  	]
  },
  	"application/vnd.mobius.plc": {
  	source: "iana",
  	extensions: [
  		"plc"
  	]
  },
  	"application/vnd.mobius.txf": {
  	source: "iana",
  	extensions: [
  		"txf"
  	]
  },
  	"application/vnd.mophun.application": {
  	source: "iana",
  	extensions: [
  		"mpn"
  	]
  },
  	"application/vnd.mophun.certificate": {
  	source: "iana",
  	extensions: [
  		"mpc"
  	]
  },
  	"application/vnd.motorola.flexsuite": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.adsi": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.fis": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.gotap": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.kmr": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.ttc": {
  	source: "iana"
  },
  	"application/vnd.motorola.flexsuite.wem": {
  	source: "iana"
  },
  	"application/vnd.motorola.iprm": {
  	source: "iana"
  },
  	"application/vnd.mozilla.xul+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xul"
  	]
  },
  	"application/vnd.ms-3mfdocument": {
  	source: "iana"
  },
  	"application/vnd.ms-artgalry": {
  	source: "iana",
  	extensions: [
  		"cil"
  	]
  },
  	"application/vnd.ms-asf": {
  	source: "iana"
  },
  	"application/vnd.ms-cab-compressed": {
  	source: "iana",
  	extensions: [
  		"cab"
  	]
  },
  	"application/vnd.ms-color.iccprofile": {
  	source: "apache"
  },
  	"application/vnd.ms-excel": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xls",
  		"xlm",
  		"xla",
  		"xlc",
  		"xlt",
  		"xlw"
  	]
  },
  	"application/vnd.ms-excel.addin.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlam"
  	]
  },
  	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlsb"
  	]
  },
  	"application/vnd.ms-excel.sheet.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xlsm"
  	]
  },
  	"application/vnd.ms-excel.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"xltm"
  	]
  },
  	"application/vnd.ms-fontobject": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"eot"
  	]
  },
  	"application/vnd.ms-htmlhelp": {
  	source: "iana",
  	extensions: [
  		"chm"
  	]
  },
  	"application/vnd.ms-ims": {
  	source: "iana",
  	extensions: [
  		"ims"
  	]
  },
  	"application/vnd.ms-lrm": {
  	source: "iana",
  	extensions: [
  		"lrm"
  	]
  },
  	"application/vnd.ms-office.activex+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-officetheme": {
  	source: "iana",
  	extensions: [
  		"thmx"
  	]
  },
  	"application/vnd.ms-opentype": {
  	source: "apache",
  	compressible: true
  },
  	"application/vnd.ms-outlook": {
  	compressible: false,
  	extensions: [
  		"msg"
  	]
  },
  	"application/vnd.ms-package.obfuscated-opentype": {
  	source: "apache"
  },
  	"application/vnd.ms-pki.seccat": {
  	source: "apache",
  	extensions: [
  		"cat"
  	]
  },
  	"application/vnd.ms-pki.stl": {
  	source: "apache",
  	extensions: [
  		"stl"
  	]
  },
  	"application/vnd.ms-playready.initiator+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-powerpoint": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ppt",
  		"pps",
  		"pot"
  	]
  },
  	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"ppam"
  	]
  },
  	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"pptm"
  	]
  },
  	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"sldm"
  	]
  },
  	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"ppsm"
  	]
  },
  	"application/vnd.ms-powerpoint.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"potm"
  	]
  },
  	"application/vnd.ms-printdevicecapabilities+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-printing.printticket+xml": {
  	source: "apache",
  	compressible: true
  },
  	"application/vnd.ms-printschematicket+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.ms-project": {
  	source: "iana",
  	extensions: [
  		"mpp",
  		"mpt"
  	]
  },
  	"application/vnd.ms-tnef": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.devicepairing": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.nwprinting.oob": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.printerpairing": {
  	source: "iana"
  },
  	"application/vnd.ms-windows.wsd.oob": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.lic-chlg-req": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.lic-resp": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.meter-chlg-req": {
  	source: "iana"
  },
  	"application/vnd.ms-wmdrm.meter-resp": {
  	source: "iana"
  },
  	"application/vnd.ms-word.document.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"docm"
  	]
  },
  	"application/vnd.ms-word.template.macroenabled.12": {
  	source: "iana",
  	extensions: [
  		"dotm"
  	]
  },
  	"application/vnd.ms-works": {
  	source: "iana",
  	extensions: [
  		"wps",
  		"wks",
  		"wcm",
  		"wdb"
  	]
  },
  	"application/vnd.ms-wpl": {
  	source: "iana",
  	extensions: [
  		"wpl"
  	]
  },
  	"application/vnd.ms-xpsdocument": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xps"
  	]
  },
  	"application/vnd.msa-disk-image": {
  	source: "iana"
  },
  	"application/vnd.mseq": {
  	source: "iana",
  	extensions: [
  		"mseq"
  	]
  },
  	"application/vnd.msign": {
  	source: "iana"
  },
  	"application/vnd.multiad.creator": {
  	source: "iana"
  },
  	"application/vnd.multiad.creator.cif": {
  	source: "iana"
  },
  	"application/vnd.music-niff": {
  	source: "iana"
  },
  	"application/vnd.musician": {
  	source: "iana",
  	extensions: [
  		"mus"
  	]
  },
  	"application/vnd.muvee.style": {
  	source: "iana",
  	extensions: [
  		"msty"
  	]
  },
  	"application/vnd.mynfc": {
  	source: "iana",
  	extensions: [
  		"taglet"
  	]
  },
  	"application/vnd.ncd.control": {
  	source: "iana"
  },
  	"application/vnd.ncd.reference": {
  	source: "iana"
  },
  	"application/vnd.nearst.inv+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nervana": {
  	source: "iana"
  },
  	"application/vnd.netfpx": {
  	source: "iana"
  },
  	"application/vnd.neurolanguage.nlu": {
  	source: "iana",
  	extensions: [
  		"nlu"
  	]
  },
  	"application/vnd.nimn": {
  	source: "iana"
  },
  	"application/vnd.nintendo.nitro.rom": {
  	source: "iana"
  },
  	"application/vnd.nintendo.snes.rom": {
  	source: "iana"
  },
  	"application/vnd.nitf": {
  	source: "iana",
  	extensions: [
  		"ntf",
  		"nitf"
  	]
  },
  	"application/vnd.noblenet-directory": {
  	source: "iana",
  	extensions: [
  		"nnd"
  	]
  },
  	"application/vnd.noblenet-sealer": {
  	source: "iana",
  	extensions: [
  		"nns"
  	]
  },
  	"application/vnd.noblenet-web": {
  	source: "iana",
  	extensions: [
  		"nnw"
  	]
  },
  	"application/vnd.nokia.catalogs": {
  	source: "iana"
  },
  	"application/vnd.nokia.conml+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.conml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.iptv.config+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.isds-radio-presets": {
  	source: "iana"
  },
  	"application/vnd.nokia.landmark+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.landmark+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.landmarkcollection+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.n-gage.ac+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ac"
  	]
  },
  	"application/vnd.nokia.n-gage.data": {
  	source: "iana",
  	extensions: [
  		"ngdat"
  	]
  },
  	"application/vnd.nokia.n-gage.symbian.install": {
  	source: "iana",
  	extensions: [
  		"n-gage"
  	]
  },
  	"application/vnd.nokia.ncd": {
  	source: "iana"
  },
  	"application/vnd.nokia.pcd+wbxml": {
  	source: "iana"
  },
  	"application/vnd.nokia.pcd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.nokia.radio-preset": {
  	source: "iana",
  	extensions: [
  		"rpst"
  	]
  },
  	"application/vnd.nokia.radio-presets": {
  	source: "iana",
  	extensions: [
  		"rpss"
  	]
  },
  	"application/vnd.novadigm.edm": {
  	source: "iana",
  	extensions: [
  		"edm"
  	]
  },
  	"application/vnd.novadigm.edx": {
  	source: "iana",
  	extensions: [
  		"edx"
  	]
  },
  	"application/vnd.novadigm.ext": {
  	source: "iana",
  	extensions: [
  		"ext"
  	]
  },
  	"application/vnd.ntt-local.content-share": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.file-transfer": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.ogw_remote-access": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.sip-ta_remote": {
  	source: "iana"
  },
  	"application/vnd.ntt-local.sip-ta_tcp_stream": {
  	source: "iana"
  },
  	"application/vnd.oasis.opendocument.chart": {
  	source: "iana",
  	extensions: [
  		"odc"
  	]
  },
  	"application/vnd.oasis.opendocument.chart-template": {
  	source: "iana",
  	extensions: [
  		"otc"
  	]
  },
  	"application/vnd.oasis.opendocument.database": {
  	source: "iana",
  	extensions: [
  		"odb"
  	]
  },
  	"application/vnd.oasis.opendocument.formula": {
  	source: "iana",
  	extensions: [
  		"odf"
  	]
  },
  	"application/vnd.oasis.opendocument.formula-template": {
  	source: "iana",
  	extensions: [
  		"odft"
  	]
  },
  	"application/vnd.oasis.opendocument.graphics": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odg"
  	]
  },
  	"application/vnd.oasis.opendocument.graphics-template": {
  	source: "iana",
  	extensions: [
  		"otg"
  	]
  },
  	"application/vnd.oasis.opendocument.image": {
  	source: "iana",
  	extensions: [
  		"odi"
  	]
  },
  	"application/vnd.oasis.opendocument.image-template": {
  	source: "iana",
  	extensions: [
  		"oti"
  	]
  },
  	"application/vnd.oasis.opendocument.presentation": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odp"
  	]
  },
  	"application/vnd.oasis.opendocument.presentation-template": {
  	source: "iana",
  	extensions: [
  		"otp"
  	]
  },
  	"application/vnd.oasis.opendocument.spreadsheet": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ods"
  	]
  },
  	"application/vnd.oasis.opendocument.spreadsheet-template": {
  	source: "iana",
  	extensions: [
  		"ots"
  	]
  },
  	"application/vnd.oasis.opendocument.text": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"odt"
  	]
  },
  	"application/vnd.oasis.opendocument.text-master": {
  	source: "iana",
  	extensions: [
  		"odm"
  	]
  },
  	"application/vnd.oasis.opendocument.text-template": {
  	source: "iana",
  	extensions: [
  		"ott"
  	]
  },
  	"application/vnd.oasis.opendocument.text-web": {
  	source: "iana",
  	extensions: [
  		"oth"
  	]
  },
  	"application/vnd.obn": {
  	source: "iana"
  },
  	"application/vnd.ocf+cbor": {
  	source: "iana"
  },
  	"application/vnd.oci.image.manifest.v1+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oftn.l10n+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.contentaccessdownload+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.contentaccessstreaming+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.cspg-hexbinary": {
  	source: "iana"
  },
  	"application/vnd.oipf.dae.svg+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.dae.xhtml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.mippvcontrolmessage+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.pae.gem": {
  	source: "iana"
  },
  	"application/vnd.oipf.spdiscovery+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.spdlist+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.ueprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oipf.userprofile+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.olpc-sugar": {
  	source: "iana",
  	extensions: [
  		"xo"
  	]
  },
  	"application/vnd.oma-scws-config": {
  	source: "iana"
  },
  	"application/vnd.oma-scws-http-request": {
  	source: "iana"
  },
  	"application/vnd.oma-scws-http-response": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.drm-trigger+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.imd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.ltkm": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.notification+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.provisioningtrigger": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.sgboot": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.sgdd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.sgdu": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.simple-symbol-container": {
  	source: "iana"
  },
  	"application/vnd.oma.bcast.smartcard-trigger+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.sprov+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.bcast.stkm": {
  	source: "iana"
  },
  	"application/vnd.oma.cab-address-book+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-feature-handler+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-pcc+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-subs-invite+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.cab-user-prefs+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.dcd": {
  	source: "iana"
  },
  	"application/vnd.oma.dcdc": {
  	source: "iana"
  },
  	"application/vnd.oma.dd2+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dd2"
  	]
  },
  	"application/vnd.oma.drm.risd+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.group-usage-list+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.lwm2m+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.lwm2m+tlv": {
  	source: "iana"
  },
  	"application/vnd.oma.pal+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.detailed-progress-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.final-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.groups+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.invocation-descriptor+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.poc.optimized-progress-report+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.push": {
  	source: "iana"
  },
  	"application/vnd.oma.scidm.messages+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oma.xcap-directory+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.omads-email+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omads-file+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omads-folder+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.omaloc-supl-init": {
  	source: "iana"
  },
  	"application/vnd.onepager": {
  	source: "iana"
  },
  	"application/vnd.onepagertamp": {
  	source: "iana"
  },
  	"application/vnd.onepagertamx": {
  	source: "iana"
  },
  	"application/vnd.onepagertat": {
  	source: "iana"
  },
  	"application/vnd.onepagertatp": {
  	source: "iana"
  },
  	"application/vnd.onepagertatx": {
  	source: "iana"
  },
  	"application/vnd.openblox.game+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"obgx"
  	]
  },
  	"application/vnd.openblox.game-binary": {
  	source: "iana"
  },
  	"application/vnd.openeye.oeb": {
  	source: "iana"
  },
  	"application/vnd.openofficeorg.extension": {
  	source: "apache",
  	extensions: [
  		"oxt"
  	]
  },
  	"application/vnd.openstreetmap.data+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"osm"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawing+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"pptx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
  	source: "iana",
  	extensions: [
  		"sldx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
  	source: "iana",
  	extensions: [
  		"ppsx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.template": {
  	source: "iana",
  	extensions: [
  		"potx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"xlsx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
  	source: "iana",
  	extensions: [
  		"xltx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.theme+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.vmldrawing": {
  	source: "iana"
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"docx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
  	source: "iana",
  	extensions: [
  		"dotx"
  	]
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.core-properties+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.openxmlformats-package.relationships+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oracle.resource+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.orange.indata": {
  	source: "iana"
  },
  	"application/vnd.osa.netdeploy": {
  	source: "iana"
  },
  	"application/vnd.osgeo.mapguide.package": {
  	source: "iana",
  	extensions: [
  		"mgp"
  	]
  },
  	"application/vnd.osgi.bundle": {
  	source: "iana"
  },
  	"application/vnd.osgi.dp": {
  	source: "iana",
  	extensions: [
  		"dp"
  	]
  },
  	"application/vnd.osgi.subsystem": {
  	source: "iana",
  	extensions: [
  		"esa"
  	]
  },
  	"application/vnd.otps.ct-kip+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.oxli.countgraph": {
  	source: "iana"
  },
  	"application/vnd.pagerduty+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.palm": {
  	source: "iana",
  	extensions: [
  		"pdb",
  		"pqa",
  		"oprc"
  	]
  },
  	"application/vnd.panoply": {
  	source: "iana"
  },
  	"application/vnd.paos.xml": {
  	source: "iana"
  },
  	"application/vnd.patentdive": {
  	source: "iana"
  },
  	"application/vnd.patientecommsdoc": {
  	source: "iana"
  },
  	"application/vnd.pawaafile": {
  	source: "iana",
  	extensions: [
  		"paw"
  	]
  },
  	"application/vnd.pcos": {
  	source: "iana"
  },
  	"application/vnd.pg.format": {
  	source: "iana",
  	extensions: [
  		"str"
  	]
  },
  	"application/vnd.pg.osasli": {
  	source: "iana",
  	extensions: [
  		"ei6"
  	]
  },
  	"application/vnd.piaccess.application-licence": {
  	source: "iana"
  },
  	"application/vnd.picsel": {
  	source: "iana",
  	extensions: [
  		"efif"
  	]
  },
  	"application/vnd.pmi.widget": {
  	source: "iana",
  	extensions: [
  		"wg"
  	]
  },
  	"application/vnd.poc.group-advertisement+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.pocketlearn": {
  	source: "iana",
  	extensions: [
  		"plf"
  	]
  },
  	"application/vnd.powerbuilder6": {
  	source: "iana",
  	extensions: [
  		"pbd"
  	]
  },
  	"application/vnd.powerbuilder6-s": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder7": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder7-s": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder75": {
  	source: "iana"
  },
  	"application/vnd.powerbuilder75-s": {
  	source: "iana"
  },
  	"application/vnd.preminet": {
  	source: "iana"
  },
  	"application/vnd.previewsystems.box": {
  	source: "iana",
  	extensions: [
  		"box"
  	]
  },
  	"application/vnd.proteus.magazine": {
  	source: "iana",
  	extensions: [
  		"mgz"
  	]
  },
  	"application/vnd.psfs": {
  	source: "iana"
  },
  	"application/vnd.publishare-delta-tree": {
  	source: "iana",
  	extensions: [
  		"qps"
  	]
  },
  	"application/vnd.pvi.ptid1": {
  	source: "iana",
  	extensions: [
  		"ptid"
  	]
  },
  	"application/vnd.pwg-multiplexed": {
  	source: "iana"
  },
  	"application/vnd.pwg-xhtml-print+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.qualcomm.brew-app-res": {
  	source: "iana"
  },
  	"application/vnd.quarantainenet": {
  	source: "iana"
  },
  	"application/vnd.quark.quarkxpress": {
  	source: "iana",
  	extensions: [
  		"qxd",
  		"qxt",
  		"qwd",
  		"qwt",
  		"qxl",
  		"qxb"
  	]
  },
  	"application/vnd.quobject-quoxdocument": {
  	source: "iana"
  },
  	"application/vnd.radisys.moml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-conf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-conn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-dialog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-audit-stream+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-conf+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-base+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-group+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-speech+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.radisys.msml-dialog-transform+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.rainstor.data": {
  	source: "iana"
  },
  	"application/vnd.rapid": {
  	source: "iana"
  },
  	"application/vnd.rar": {
  	source: "iana"
  },
  	"application/vnd.realvnc.bed": {
  	source: "iana",
  	extensions: [
  		"bed"
  	]
  },
  	"application/vnd.recordare.musicxml": {
  	source: "iana",
  	extensions: [
  		"mxl"
  	]
  },
  	"application/vnd.recordare.musicxml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"musicxml"
  	]
  },
  	"application/vnd.renlearn.rlprint": {
  	source: "iana"
  },
  	"application/vnd.restful+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.rig.cryptonote": {
  	source: "iana",
  	extensions: [
  		"cryptonote"
  	]
  },
  	"application/vnd.rim.cod": {
  	source: "apache",
  	extensions: [
  		"cod"
  	]
  },
  	"application/vnd.rn-realmedia": {
  	source: "apache",
  	extensions: [
  		"rm"
  	]
  },
  	"application/vnd.rn-realmedia-vbr": {
  	source: "apache",
  	extensions: [
  		"rmvb"
  	]
  },
  	"application/vnd.route66.link66+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"link66"
  	]
  },
  	"application/vnd.rs-274x": {
  	source: "iana"
  },
  	"application/vnd.ruckus.download": {
  	source: "iana"
  },
  	"application/vnd.s3sms": {
  	source: "iana"
  },
  	"application/vnd.sailingtracker.track": {
  	source: "iana",
  	extensions: [
  		"st"
  	]
  },
  	"application/vnd.sar": {
  	source: "iana"
  },
  	"application/vnd.sbm.cid": {
  	source: "iana"
  },
  	"application/vnd.sbm.mid2": {
  	source: "iana"
  },
  	"application/vnd.scribus": {
  	source: "iana"
  },
  	"application/vnd.sealed.3df": {
  	source: "iana"
  },
  	"application/vnd.sealed.csf": {
  	source: "iana"
  },
  	"application/vnd.sealed.doc": {
  	source: "iana"
  },
  	"application/vnd.sealed.eml": {
  	source: "iana"
  },
  	"application/vnd.sealed.mht": {
  	source: "iana"
  },
  	"application/vnd.sealed.net": {
  	source: "iana"
  },
  	"application/vnd.sealed.ppt": {
  	source: "iana"
  },
  	"application/vnd.sealed.tiff": {
  	source: "iana"
  },
  	"application/vnd.sealed.xls": {
  	source: "iana"
  },
  	"application/vnd.sealedmedia.softseal.html": {
  	source: "iana"
  },
  	"application/vnd.sealedmedia.softseal.pdf": {
  	source: "iana"
  },
  	"application/vnd.seemail": {
  	source: "iana",
  	extensions: [
  		"see"
  	]
  },
  	"application/vnd.sema": {
  	source: "iana",
  	extensions: [
  		"sema"
  	]
  },
  	"application/vnd.semd": {
  	source: "iana",
  	extensions: [
  		"semd"
  	]
  },
  	"application/vnd.semf": {
  	source: "iana",
  	extensions: [
  		"semf"
  	]
  },
  	"application/vnd.shade-save-file": {
  	source: "iana"
  },
  	"application/vnd.shana.informed.formdata": {
  	source: "iana",
  	extensions: [
  		"ifm"
  	]
  },
  	"application/vnd.shana.informed.formtemplate": {
  	source: "iana",
  	extensions: [
  		"itp"
  	]
  },
  	"application/vnd.shana.informed.interchange": {
  	source: "iana",
  	extensions: [
  		"iif"
  	]
  },
  	"application/vnd.shana.informed.package": {
  	source: "iana",
  	extensions: [
  		"ipk"
  	]
  },
  	"application/vnd.shootproof+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.shopkick+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.shp": {
  	source: "iana"
  },
  	"application/vnd.shx": {
  	source: "iana"
  },
  	"application/vnd.sigrok.session": {
  	source: "iana"
  },
  	"application/vnd.simtech-mindmapper": {
  	source: "iana",
  	extensions: [
  		"twd",
  		"twds"
  	]
  },
  	"application/vnd.siren+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.smaf": {
  	source: "iana",
  	extensions: [
  		"mmf"
  	]
  },
  	"application/vnd.smart.notebook": {
  	source: "iana"
  },
  	"application/vnd.smart.teacher": {
  	source: "iana",
  	extensions: [
  		"teacher"
  	]
  },
  	"application/vnd.snesdev-page-table": {
  	source: "iana"
  },
  	"application/vnd.software602.filler.form+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"fo"
  	]
  },
  	"application/vnd.software602.filler.form-xml-zip": {
  	source: "iana"
  },
  	"application/vnd.solent.sdkm+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"sdkm",
  		"sdkd"
  	]
  },
  	"application/vnd.spotfire.dxp": {
  	source: "iana",
  	extensions: [
  		"dxp"
  	]
  },
  	"application/vnd.spotfire.sfs": {
  	source: "iana",
  	extensions: [
  		"sfs"
  	]
  },
  	"application/vnd.sqlite3": {
  	source: "iana"
  },
  	"application/vnd.sss-cod": {
  	source: "iana"
  },
  	"application/vnd.sss-dtf": {
  	source: "iana"
  },
  	"application/vnd.sss-ntf": {
  	source: "iana"
  },
  	"application/vnd.stardivision.calc": {
  	source: "apache",
  	extensions: [
  		"sdc"
  	]
  },
  	"application/vnd.stardivision.draw": {
  	source: "apache",
  	extensions: [
  		"sda"
  	]
  },
  	"application/vnd.stardivision.impress": {
  	source: "apache",
  	extensions: [
  		"sdd"
  	]
  },
  	"application/vnd.stardivision.math": {
  	source: "apache",
  	extensions: [
  		"smf"
  	]
  },
  	"application/vnd.stardivision.writer": {
  	source: "apache",
  	extensions: [
  		"sdw",
  		"vor"
  	]
  },
  	"application/vnd.stardivision.writer-global": {
  	source: "apache",
  	extensions: [
  		"sgl"
  	]
  },
  	"application/vnd.stepmania.package": {
  	source: "iana",
  	extensions: [
  		"smzip"
  	]
  },
  	"application/vnd.stepmania.stepchart": {
  	source: "iana",
  	extensions: [
  		"sm"
  	]
  },
  	"application/vnd.street-stream": {
  	source: "iana"
  },
  	"application/vnd.sun.wadl+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wadl"
  	]
  },
  	"application/vnd.sun.xml.calc": {
  	source: "apache",
  	extensions: [
  		"sxc"
  	]
  },
  	"application/vnd.sun.xml.calc.template": {
  	source: "apache",
  	extensions: [
  		"stc"
  	]
  },
  	"application/vnd.sun.xml.draw": {
  	source: "apache",
  	extensions: [
  		"sxd"
  	]
  },
  	"application/vnd.sun.xml.draw.template": {
  	source: "apache",
  	extensions: [
  		"std"
  	]
  },
  	"application/vnd.sun.xml.impress": {
  	source: "apache",
  	extensions: [
  		"sxi"
  	]
  },
  	"application/vnd.sun.xml.impress.template": {
  	source: "apache",
  	extensions: [
  		"sti"
  	]
  },
  	"application/vnd.sun.xml.math": {
  	source: "apache",
  	extensions: [
  		"sxm"
  	]
  },
  	"application/vnd.sun.xml.writer": {
  	source: "apache",
  	extensions: [
  		"sxw"
  	]
  },
  	"application/vnd.sun.xml.writer.global": {
  	source: "apache",
  	extensions: [
  		"sxg"
  	]
  },
  	"application/vnd.sun.xml.writer.template": {
  	source: "apache",
  	extensions: [
  		"stw"
  	]
  },
  	"application/vnd.sus-calendar": {
  	source: "iana",
  	extensions: [
  		"sus",
  		"susp"
  	]
  },
  	"application/vnd.svd": {
  	source: "iana",
  	extensions: [
  		"svd"
  	]
  },
  	"application/vnd.swiftview-ics": {
  	source: "iana"
  },
  	"application/vnd.symbian.install": {
  	source: "apache",
  	extensions: [
  		"sis",
  		"sisx"
  	]
  },
  	"application/vnd.syncml+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"xsm"
  	]
  },
  	"application/vnd.syncml.dm+wbxml": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"bdm"
  	]
  },
  	"application/vnd.syncml.dm+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"xdm"
  	]
  },
  	"application/vnd.syncml.dm.notification": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmddf+wbxml": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmddf+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"ddf"
  	]
  },
  	"application/vnd.syncml.dmtnds+wbxml": {
  	source: "iana"
  },
  	"application/vnd.syncml.dmtnds+xml": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true
  },
  	"application/vnd.syncml.ds.notification": {
  	source: "iana"
  },
  	"application/vnd.tableschema+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tao.intent-module-archive": {
  	source: "iana",
  	extensions: [
  		"tao"
  	]
  },
  	"application/vnd.tcpdump.pcap": {
  	source: "iana",
  	extensions: [
  		"pcap",
  		"cap",
  		"dmp"
  	]
  },
  	"application/vnd.think-cell.ppttc+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tmd.mediaflex.api+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.tml": {
  	source: "iana"
  },
  	"application/vnd.tmobile-livetv": {
  	source: "iana",
  	extensions: [
  		"tmo"
  	]
  },
  	"application/vnd.tri.onesource": {
  	source: "iana"
  },
  	"application/vnd.trid.tpt": {
  	source: "iana",
  	extensions: [
  		"tpt"
  	]
  },
  	"application/vnd.triscape.mxs": {
  	source: "iana",
  	extensions: [
  		"mxs"
  	]
  },
  	"application/vnd.trueapp": {
  	source: "iana",
  	extensions: [
  		"tra"
  	]
  },
  	"application/vnd.truedoc": {
  	source: "iana"
  },
  	"application/vnd.ubisoft.webplayer": {
  	source: "iana"
  },
  	"application/vnd.ufdl": {
  	source: "iana",
  	extensions: [
  		"ufd",
  		"ufdl"
  	]
  },
  	"application/vnd.uiq.theme": {
  	source: "iana",
  	extensions: [
  		"utz"
  	]
  },
  	"application/vnd.umajin": {
  	source: "iana",
  	extensions: [
  		"umj"
  	]
  },
  	"application/vnd.unity": {
  	source: "iana",
  	extensions: [
  		"unityweb"
  	]
  },
  	"application/vnd.uoml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uoml"
  	]
  },
  	"application/vnd.uplanet.alert": {
  	source: "iana"
  },
  	"application/vnd.uplanet.alert-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.bearer-choice": {
  	source: "iana"
  },
  	"application/vnd.uplanet.bearer-choice-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.cacheop": {
  	source: "iana"
  },
  	"application/vnd.uplanet.cacheop-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.channel": {
  	source: "iana"
  },
  	"application/vnd.uplanet.channel-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.list": {
  	source: "iana"
  },
  	"application/vnd.uplanet.list-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.listcmd": {
  	source: "iana"
  },
  	"application/vnd.uplanet.listcmd-wbxml": {
  	source: "iana"
  },
  	"application/vnd.uplanet.signal": {
  	source: "iana"
  },
  	"application/vnd.uri-map": {
  	source: "iana"
  },
  	"application/vnd.valve.source.material": {
  	source: "iana"
  },
  	"application/vnd.vcx": {
  	source: "iana",
  	extensions: [
  		"vcx"
  	]
  },
  	"application/vnd.vd-study": {
  	source: "iana"
  },
  	"application/vnd.vectorworks": {
  	source: "iana"
  },
  	"application/vnd.vel+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.verimatrix.vcas": {
  	source: "iana"
  },
  	"application/vnd.veryant.thin": {
  	source: "iana"
  },
  	"application/vnd.ves.encrypted": {
  	source: "iana"
  },
  	"application/vnd.vidsoft.vidconference": {
  	source: "iana"
  },
  	"application/vnd.visio": {
  	source: "iana",
  	extensions: [
  		"vsd",
  		"vst",
  		"vss",
  		"vsw"
  	]
  },
  	"application/vnd.visionary": {
  	source: "iana",
  	extensions: [
  		"vis"
  	]
  },
  	"application/vnd.vividence.scriptfile": {
  	source: "iana"
  },
  	"application/vnd.vsf": {
  	source: "iana",
  	extensions: [
  		"vsf"
  	]
  },
  	"application/vnd.wap.sic": {
  	source: "iana"
  },
  	"application/vnd.wap.slc": {
  	source: "iana"
  },
  	"application/vnd.wap.wbxml": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"wbxml"
  	]
  },
  	"application/vnd.wap.wmlc": {
  	source: "iana",
  	extensions: [
  		"wmlc"
  	]
  },
  	"application/vnd.wap.wmlscriptc": {
  	source: "iana",
  	extensions: [
  		"wmlsc"
  	]
  },
  	"application/vnd.webturbo": {
  	source: "iana",
  	extensions: [
  		"wtb"
  	]
  },
  	"application/vnd.wfa.p2p": {
  	source: "iana"
  },
  	"application/vnd.wfa.wsc": {
  	source: "iana"
  },
  	"application/vnd.windows.devicepairing": {
  	source: "iana"
  },
  	"application/vnd.wmc": {
  	source: "iana"
  },
  	"application/vnd.wmf.bootstrap": {
  	source: "iana"
  },
  	"application/vnd.wolfram.mathematica": {
  	source: "iana"
  },
  	"application/vnd.wolfram.mathematica.package": {
  	source: "iana"
  },
  	"application/vnd.wolfram.player": {
  	source: "iana",
  	extensions: [
  		"nbp"
  	]
  },
  	"application/vnd.wordperfect": {
  	source: "iana",
  	extensions: [
  		"wpd"
  	]
  },
  	"application/vnd.wqd": {
  	source: "iana",
  	extensions: [
  		"wqd"
  	]
  },
  	"application/vnd.wrq-hp3000-labelled": {
  	source: "iana"
  },
  	"application/vnd.wt.stf": {
  	source: "iana",
  	extensions: [
  		"stf"
  	]
  },
  	"application/vnd.wv.csp+wbxml": {
  	source: "iana"
  },
  	"application/vnd.wv.csp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.wv.ssp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xacml+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xara": {
  	source: "iana",
  	extensions: [
  		"xar"
  	]
  },
  	"application/vnd.xfdl": {
  	source: "iana",
  	extensions: [
  		"xfdl"
  	]
  },
  	"application/vnd.xfdl.webform": {
  	source: "iana"
  },
  	"application/vnd.xmi+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/vnd.xmpie.cpkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.dpkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.plan": {
  	source: "iana"
  },
  	"application/vnd.xmpie.ppkg": {
  	source: "iana"
  },
  	"application/vnd.xmpie.xlim": {
  	source: "iana"
  },
  	"application/vnd.yamaha.hv-dic": {
  	source: "iana",
  	extensions: [
  		"hvd"
  	]
  },
  	"application/vnd.yamaha.hv-script": {
  	source: "iana",
  	extensions: [
  		"hvs"
  	]
  },
  	"application/vnd.yamaha.hv-voice": {
  	source: "iana",
  	extensions: [
  		"hvp"
  	]
  },
  	"application/vnd.yamaha.openscoreformat": {
  	source: "iana",
  	extensions: [
  		"osf"
  	]
  },
  	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"osfpvg"
  	]
  },
  	"application/vnd.yamaha.remote-setup": {
  	source: "iana"
  },
  	"application/vnd.yamaha.smaf-audio": {
  	source: "iana",
  	extensions: [
  		"saf"
  	]
  },
  	"application/vnd.yamaha.smaf-phrase": {
  	source: "iana",
  	extensions: [
  		"spf"
  	]
  },
  	"application/vnd.yamaha.through-ngn": {
  	source: "iana"
  },
  	"application/vnd.yamaha.tunnel-udpencap": {
  	source: "iana"
  },
  	"application/vnd.yaoweme": {
  	source: "iana"
  },
  	"application/vnd.yellowriver-custom-menu": {
  	source: "iana",
  	extensions: [
  		"cmp"
  	]
  },
  	"application/vnd.youtube.yt": {
  	source: "iana"
  },
  	"application/vnd.zul": {
  	source: "iana",
  	extensions: [
  		"zir",
  		"zirz"
  	]
  },
  	"application/vnd.zzazz.deck+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"zaz"
  	]
  },
  	"application/voicexml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"vxml"
  	]
  },
  	"application/voucher-cms+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/vq-rtcpxr": {
  	source: "iana"
  },
  	"application/wasm": {
  	compressible: true,
  	extensions: [
  		"wasm"
  	]
  },
  	"application/watcherinfo+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/webpush-options+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/whoispp-query": {
  	source: "iana"
  },
  	"application/whoispp-response": {
  	source: "iana"
  },
  	"application/widget": {
  	source: "iana",
  	extensions: [
  		"wgt"
  	]
  },
  	"application/winhlp": {
  	source: "apache",
  	extensions: [
  		"hlp"
  	]
  },
  	"application/wita": {
  	source: "iana"
  },
  	"application/wordperfect5.1": {
  	source: "iana"
  },
  	"application/wsdl+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wsdl"
  	]
  },
  	"application/wspolicy+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"wspolicy"
  	]
  },
  	"application/x-7z-compressed": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"7z"
  	]
  },
  	"application/x-abiword": {
  	source: "apache",
  	extensions: [
  		"abw"
  	]
  },
  	"application/x-ace-compressed": {
  	source: "apache",
  	extensions: [
  		"ace"
  	]
  },
  	"application/x-amf": {
  	source: "apache"
  },
  	"application/x-apple-diskimage": {
  	source: "apache",
  	extensions: [
  		"dmg"
  	]
  },
  	"application/x-arj": {
  	compressible: false,
  	extensions: [
  		"arj"
  	]
  },
  	"application/x-authorware-bin": {
  	source: "apache",
  	extensions: [
  		"aab",
  		"x32",
  		"u32",
  		"vox"
  	]
  },
  	"application/x-authorware-map": {
  	source: "apache",
  	extensions: [
  		"aam"
  	]
  },
  	"application/x-authorware-seg": {
  	source: "apache",
  	extensions: [
  		"aas"
  	]
  },
  	"application/x-bcpio": {
  	source: "apache",
  	extensions: [
  		"bcpio"
  	]
  },
  	"application/x-bdoc": {
  	compressible: false,
  	extensions: [
  		"bdoc"
  	]
  },
  	"application/x-bittorrent": {
  	source: "apache",
  	extensions: [
  		"torrent"
  	]
  },
  	"application/x-blorb": {
  	source: "apache",
  	extensions: [
  		"blb",
  		"blorb"
  	]
  },
  	"application/x-bzip": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"bz"
  	]
  },
  	"application/x-bzip2": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"bz2",
  		"boz"
  	]
  },
  	"application/x-cbr": {
  	source: "apache",
  	extensions: [
  		"cbr",
  		"cba",
  		"cbt",
  		"cbz",
  		"cb7"
  	]
  },
  	"application/x-cdlink": {
  	source: "apache",
  	extensions: [
  		"vcd"
  	]
  },
  	"application/x-cfs-compressed": {
  	source: "apache",
  	extensions: [
  		"cfs"
  	]
  },
  	"application/x-chat": {
  	source: "apache",
  	extensions: [
  		"chat"
  	]
  },
  	"application/x-chess-pgn": {
  	source: "apache",
  	extensions: [
  		"pgn"
  	]
  },
  	"application/x-chrome-extension": {
  	extensions: [
  		"crx"
  	]
  },
  	"application/x-cocoa": {
  	source: "nginx",
  	extensions: [
  		"cco"
  	]
  },
  	"application/x-compress": {
  	source: "apache"
  },
  	"application/x-conference": {
  	source: "apache",
  	extensions: [
  		"nsc"
  	]
  },
  	"application/x-cpio": {
  	source: "apache",
  	extensions: [
  		"cpio"
  	]
  },
  	"application/x-csh": {
  	source: "apache",
  	extensions: [
  		"csh"
  	]
  },
  	"application/x-deb": {
  	compressible: false
  },
  	"application/x-debian-package": {
  	source: "apache",
  	extensions: [
  		"deb",
  		"udeb"
  	]
  },
  	"application/x-dgc-compressed": {
  	source: "apache",
  	extensions: [
  		"dgc"
  	]
  },
  	"application/x-director": {
  	source: "apache",
  	extensions: [
  		"dir",
  		"dcr",
  		"dxr",
  		"cst",
  		"cct",
  		"cxt",
  		"w3d",
  		"fgd",
  		"swa"
  	]
  },
  	"application/x-doom": {
  	source: "apache",
  	extensions: [
  		"wad"
  	]
  },
  	"application/x-dtbncx+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ncx"
  	]
  },
  	"application/x-dtbook+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"dtb"
  	]
  },
  	"application/x-dtbresource+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"res"
  	]
  },
  	"application/x-dvi": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"dvi"
  	]
  },
  	"application/x-envoy": {
  	source: "apache",
  	extensions: [
  		"evy"
  	]
  },
  	"application/x-eva": {
  	source: "apache",
  	extensions: [
  		"eva"
  	]
  },
  	"application/x-font-bdf": {
  	source: "apache",
  	extensions: [
  		"bdf"
  	]
  },
  	"application/x-font-dos": {
  	source: "apache"
  },
  	"application/x-font-framemaker": {
  	source: "apache"
  },
  	"application/x-font-ghostscript": {
  	source: "apache",
  	extensions: [
  		"gsf"
  	]
  },
  	"application/x-font-libgrx": {
  	source: "apache"
  },
  	"application/x-font-linux-psf": {
  	source: "apache",
  	extensions: [
  		"psf"
  	]
  },
  	"application/x-font-pcf": {
  	source: "apache",
  	extensions: [
  		"pcf"
  	]
  },
  	"application/x-font-snf": {
  	source: "apache",
  	extensions: [
  		"snf"
  	]
  },
  	"application/x-font-speedo": {
  	source: "apache"
  },
  	"application/x-font-sunos-news": {
  	source: "apache"
  },
  	"application/x-font-type1": {
  	source: "apache",
  	extensions: [
  		"pfa",
  		"pfb",
  		"pfm",
  		"afm"
  	]
  },
  	"application/x-font-vfont": {
  	source: "apache"
  },
  	"application/x-freearc": {
  	source: "apache",
  	extensions: [
  		"arc"
  	]
  },
  	"application/x-futuresplash": {
  	source: "apache",
  	extensions: [
  		"spl"
  	]
  },
  	"application/x-gca-compressed": {
  	source: "apache",
  	extensions: [
  		"gca"
  	]
  },
  	"application/x-glulx": {
  	source: "apache",
  	extensions: [
  		"ulx"
  	]
  },
  	"application/x-gnumeric": {
  	source: "apache",
  	extensions: [
  		"gnumeric"
  	]
  },
  	"application/x-gramps-xml": {
  	source: "apache",
  	extensions: [
  		"gramps"
  	]
  },
  	"application/x-gtar": {
  	source: "apache",
  	extensions: [
  		"gtar"
  	]
  },
  	"application/x-gzip": {
  	source: "apache"
  },
  	"application/x-hdf": {
  	source: "apache",
  	extensions: [
  		"hdf"
  	]
  },
  	"application/x-httpd-php": {
  	compressible: true,
  	extensions: [
  		"php"
  	]
  },
  	"application/x-install-instructions": {
  	source: "apache",
  	extensions: [
  		"install"
  	]
  },
  	"application/x-iso9660-image": {
  	source: "apache",
  	extensions: [
  		"iso"
  	]
  },
  	"application/x-java-archive-diff": {
  	source: "nginx",
  	extensions: [
  		"jardiff"
  	]
  },
  	"application/x-java-jnlp-file": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"jnlp"
  	]
  },
  	"application/x-javascript": {
  	compressible: true
  },
  	"application/x-keepass2": {
  	extensions: [
  		"kdbx"
  	]
  },
  	"application/x-latex": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"latex"
  	]
  },
  	"application/x-lua-bytecode": {
  	extensions: [
  		"luac"
  	]
  },
  	"application/x-lzh-compressed": {
  	source: "apache",
  	extensions: [
  		"lzh",
  		"lha"
  	]
  },
  	"application/x-makeself": {
  	source: "nginx",
  	extensions: [
  		"run"
  	]
  },
  	"application/x-mie": {
  	source: "apache",
  	extensions: [
  		"mie"
  	]
  },
  	"application/x-mobipocket-ebook": {
  	source: "apache",
  	extensions: [
  		"prc",
  		"mobi"
  	]
  },
  	"application/x-mpegurl": {
  	compressible: false
  },
  	"application/x-ms-application": {
  	source: "apache",
  	extensions: [
  		"application"
  	]
  },
  	"application/x-ms-shortcut": {
  	source: "apache",
  	extensions: [
  		"lnk"
  	]
  },
  	"application/x-ms-wmd": {
  	source: "apache",
  	extensions: [
  		"wmd"
  	]
  },
  	"application/x-ms-wmz": {
  	source: "apache",
  	extensions: [
  		"wmz"
  	]
  },
  	"application/x-ms-xbap": {
  	source: "apache",
  	extensions: [
  		"xbap"
  	]
  },
  	"application/x-msaccess": {
  	source: "apache",
  	extensions: [
  		"mdb"
  	]
  },
  	"application/x-msbinder": {
  	source: "apache",
  	extensions: [
  		"obd"
  	]
  },
  	"application/x-mscardfile": {
  	source: "apache",
  	extensions: [
  		"crd"
  	]
  },
  	"application/x-msclip": {
  	source: "apache",
  	extensions: [
  		"clp"
  	]
  },
  	"application/x-msdos-program": {
  	extensions: [
  		"exe"
  	]
  },
  	"application/x-msdownload": {
  	source: "apache",
  	extensions: [
  		"exe",
  		"dll",
  		"com",
  		"bat",
  		"msi"
  	]
  },
  	"application/x-msmediaview": {
  	source: "apache",
  	extensions: [
  		"mvb",
  		"m13",
  		"m14"
  	]
  },
  	"application/x-msmetafile": {
  	source: "apache",
  	extensions: [
  		"wmf",
  		"wmz",
  		"emf",
  		"emz"
  	]
  },
  	"application/x-msmoney": {
  	source: "apache",
  	extensions: [
  		"mny"
  	]
  },
  	"application/x-mspublisher": {
  	source: "apache",
  	extensions: [
  		"pub"
  	]
  },
  	"application/x-msschedule": {
  	source: "apache",
  	extensions: [
  		"scd"
  	]
  },
  	"application/x-msterminal": {
  	source: "apache",
  	extensions: [
  		"trm"
  	]
  },
  	"application/x-mswrite": {
  	source: "apache",
  	extensions: [
  		"wri"
  	]
  },
  	"application/x-netcdf": {
  	source: "apache",
  	extensions: [
  		"nc",
  		"cdf"
  	]
  },
  	"application/x-ns-proxy-autoconfig": {
  	compressible: true,
  	extensions: [
  		"pac"
  	]
  },
  	"application/x-nzb": {
  	source: "apache",
  	extensions: [
  		"nzb"
  	]
  },
  	"application/x-perl": {
  	source: "nginx",
  	extensions: [
  		"pl",
  		"pm"
  	]
  },
  	"application/x-pilot": {
  	source: "nginx",
  	extensions: [
  		"prc",
  		"pdb"
  	]
  },
  	"application/x-pkcs12": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"p12",
  		"pfx"
  	]
  },
  	"application/x-pkcs7-certificates": {
  	source: "apache",
  	extensions: [
  		"p7b",
  		"spc"
  	]
  },
  	"application/x-pkcs7-certreqresp": {
  	source: "apache",
  	extensions: [
  		"p7r"
  	]
  },
  	"application/x-pki-message": {
  	source: "iana"
  },
  	"application/x-rar-compressed": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"rar"
  	]
  },
  	"application/x-redhat-package-manager": {
  	source: "nginx",
  	extensions: [
  		"rpm"
  	]
  },
  	"application/x-research-info-systems": {
  	source: "apache",
  	extensions: [
  		"ris"
  	]
  },
  	"application/x-sea": {
  	source: "nginx",
  	extensions: [
  		"sea"
  	]
  },
  	"application/x-sh": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"sh"
  	]
  },
  	"application/x-shar": {
  	source: "apache",
  	extensions: [
  		"shar"
  	]
  },
  	"application/x-shockwave-flash": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"swf"
  	]
  },
  	"application/x-silverlight-app": {
  	source: "apache",
  	extensions: [
  		"xap"
  	]
  },
  	"application/x-sql": {
  	source: "apache",
  	extensions: [
  		"sql"
  	]
  },
  	"application/x-stuffit": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"sit"
  	]
  },
  	"application/x-stuffitx": {
  	source: "apache",
  	extensions: [
  		"sitx"
  	]
  },
  	"application/x-subrip": {
  	source: "apache",
  	extensions: [
  		"srt"
  	]
  },
  	"application/x-sv4cpio": {
  	source: "apache",
  	extensions: [
  		"sv4cpio"
  	]
  },
  	"application/x-sv4crc": {
  	source: "apache",
  	extensions: [
  		"sv4crc"
  	]
  },
  	"application/x-t3vm-image": {
  	source: "apache",
  	extensions: [
  		"t3"
  	]
  },
  	"application/x-tads": {
  	source: "apache",
  	extensions: [
  		"gam"
  	]
  },
  	"application/x-tar": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"tar"
  	]
  },
  	"application/x-tcl": {
  	source: "apache",
  	extensions: [
  		"tcl",
  		"tk"
  	]
  },
  	"application/x-tex": {
  	source: "apache",
  	extensions: [
  		"tex"
  	]
  },
  	"application/x-tex-tfm": {
  	source: "apache",
  	extensions: [
  		"tfm"
  	]
  },
  	"application/x-texinfo": {
  	source: "apache",
  	extensions: [
  		"texinfo",
  		"texi"
  	]
  },
  	"application/x-tgif": {
  	source: "apache",
  	extensions: [
  		"obj"
  	]
  },
  	"application/x-ustar": {
  	source: "apache",
  	extensions: [
  		"ustar"
  	]
  },
  	"application/x-virtualbox-hdd": {
  	compressible: true,
  	extensions: [
  		"hdd"
  	]
  },
  	"application/x-virtualbox-ova": {
  	compressible: true,
  	extensions: [
  		"ova"
  	]
  },
  	"application/x-virtualbox-ovf": {
  	compressible: true,
  	extensions: [
  		"ovf"
  	]
  },
  	"application/x-virtualbox-vbox": {
  	compressible: true,
  	extensions: [
  		"vbox"
  	]
  },
  	"application/x-virtualbox-vbox-extpack": {
  	compressible: false,
  	extensions: [
  		"vbox-extpack"
  	]
  },
  	"application/x-virtualbox-vdi": {
  	compressible: true,
  	extensions: [
  		"vdi"
  	]
  },
  	"application/x-virtualbox-vhd": {
  	compressible: true,
  	extensions: [
  		"vhd"
  	]
  },
  	"application/x-virtualbox-vmdk": {
  	compressible: true,
  	extensions: [
  		"vmdk"
  	]
  },
  	"application/x-wais-source": {
  	source: "apache",
  	extensions: [
  		"src"
  	]
  },
  	"application/x-web-app-manifest+json": {
  	compressible: true,
  	extensions: [
  		"webapp"
  	]
  },
  	"application/x-www-form-urlencoded": {
  	source: "iana",
  	compressible: true
  },
  	"application/x-x509-ca-cert": {
  	source: "iana",
  	extensions: [
  		"der",
  		"crt",
  		"pem"
  	]
  },
  	"application/x-x509-ca-ra-cert": {
  	source: "iana"
  },
  	"application/x-x509-next-ca-cert": {
  	source: "iana"
  },
  	"application/x-xfig": {
  	source: "apache",
  	extensions: [
  		"fig"
  	]
  },
  	"application/x-xliff+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xlf"
  	]
  },
  	"application/x-xpinstall": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"xpi"
  	]
  },
  	"application/x-xz": {
  	source: "apache",
  	extensions: [
  		"xz"
  	]
  },
  	"application/x-zmachine": {
  	source: "apache",
  	extensions: [
  		"z1",
  		"z2",
  		"z3",
  		"z4",
  		"z5",
  		"z6",
  		"z7",
  		"z8"
  	]
  },
  	"application/x400-bp": {
  	source: "iana"
  },
  	"application/xacml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xaml+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xaml"
  	]
  },
  	"application/xcap-att+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xav"
  	]
  },
  	"application/xcap-caps+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xca"
  	]
  },
  	"application/xcap-diff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xdf"
  	]
  },
  	"application/xcap-el+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xel"
  	]
  },
  	"application/xcap-error+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xer"
  	]
  },
  	"application/xcap-ns+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xns"
  	]
  },
  	"application/xcon-conference-info+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xcon-conference-info-diff+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xenc+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xenc"
  	]
  },
  	"application/xhtml+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xhtml",
  		"xht"
  	]
  },
  	"application/xhtml-voice+xml": {
  	source: "apache",
  	compressible: true
  },
  	"application/xliff+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xlf"
  	]
  },
  	"application/xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xml",
  		"xsl",
  		"xsd",
  		"rng"
  	]
  },
  	"application/xml-dtd": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dtd"
  	]
  },
  	"application/xml-external-parsed-entity": {
  	source: "iana"
  },
  	"application/xml-patch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xmpp+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/xop+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xop"
  	]
  },
  	"application/xproc+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xpl"
  	]
  },
  	"application/xslt+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xslt"
  	]
  },
  	"application/xspf+xml": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"xspf"
  	]
  },
  	"application/xv+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"mxml",
  		"xhvml",
  		"xvml",
  		"xvm"
  	]
  },
  	"application/yang": {
  	source: "iana",
  	extensions: [
  		"yang"
  	]
  },
  	"application/yang-data+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-data+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-patch+json": {
  	source: "iana",
  	compressible: true
  },
  	"application/yang-patch+xml": {
  	source: "iana",
  	compressible: true
  },
  	"application/yin+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"yin"
  	]
  },
  	"application/zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"zip"
  	]
  },
  	"application/zlib": {
  	source: "iana"
  },
  	"application/zstd": {
  	source: "iana"
  },
  	"audio/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"audio/32kadpcm": {
  	source: "iana"
  },
  	"audio/3gpp": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"3gpp"
  	]
  },
  	"audio/3gpp2": {
  	source: "iana"
  },
  	"audio/aac": {
  	source: "iana"
  },
  	"audio/ac3": {
  	source: "iana"
  },
  	"audio/adpcm": {
  	source: "apache",
  	extensions: [
  		"adp"
  	]
  },
  	"audio/amr": {
  	source: "iana"
  },
  	"audio/amr-wb": {
  	source: "iana"
  },
  	"audio/amr-wb+": {
  	source: "iana"
  },
  	"audio/aptx": {
  	source: "iana"
  },
  	"audio/asc": {
  	source: "iana"
  },
  	"audio/atrac-advanced-lossless": {
  	source: "iana"
  },
  	"audio/atrac-x": {
  	source: "iana"
  },
  	"audio/atrac3": {
  	source: "iana"
  },
  	"audio/basic": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"au",
  		"snd"
  	]
  },
  	"audio/bv16": {
  	source: "iana"
  },
  	"audio/bv32": {
  	source: "iana"
  },
  	"audio/clearmode": {
  	source: "iana"
  },
  	"audio/cn": {
  	source: "iana"
  },
  	"audio/dat12": {
  	source: "iana"
  },
  	"audio/dls": {
  	source: "iana"
  },
  	"audio/dsr-es201108": {
  	source: "iana"
  },
  	"audio/dsr-es202050": {
  	source: "iana"
  },
  	"audio/dsr-es202211": {
  	source: "iana"
  },
  	"audio/dsr-es202212": {
  	source: "iana"
  },
  	"audio/dv": {
  	source: "iana"
  },
  	"audio/dvi4": {
  	source: "iana"
  },
  	"audio/eac3": {
  	source: "iana"
  },
  	"audio/encaprtp": {
  	source: "iana"
  },
  	"audio/evrc": {
  	source: "iana"
  },
  	"audio/evrc-qcp": {
  	source: "iana"
  },
  	"audio/evrc0": {
  	source: "iana"
  },
  	"audio/evrc1": {
  	source: "iana"
  },
  	"audio/evrcb": {
  	source: "iana"
  },
  	"audio/evrcb0": {
  	source: "iana"
  },
  	"audio/evrcb1": {
  	source: "iana"
  },
  	"audio/evrcnw": {
  	source: "iana"
  },
  	"audio/evrcnw0": {
  	source: "iana"
  },
  	"audio/evrcnw1": {
  	source: "iana"
  },
  	"audio/evrcwb": {
  	source: "iana"
  },
  	"audio/evrcwb0": {
  	source: "iana"
  },
  	"audio/evrcwb1": {
  	source: "iana"
  },
  	"audio/evs": {
  	source: "iana"
  },
  	"audio/flexfec": {
  	source: "iana"
  },
  	"audio/fwdred": {
  	source: "iana"
  },
  	"audio/g711-0": {
  	source: "iana"
  },
  	"audio/g719": {
  	source: "iana"
  },
  	"audio/g722": {
  	source: "iana"
  },
  	"audio/g7221": {
  	source: "iana"
  },
  	"audio/g723": {
  	source: "iana"
  },
  	"audio/g726-16": {
  	source: "iana"
  },
  	"audio/g726-24": {
  	source: "iana"
  },
  	"audio/g726-32": {
  	source: "iana"
  },
  	"audio/g726-40": {
  	source: "iana"
  },
  	"audio/g728": {
  	source: "iana"
  },
  	"audio/g729": {
  	source: "iana"
  },
  	"audio/g7291": {
  	source: "iana"
  },
  	"audio/g729d": {
  	source: "iana"
  },
  	"audio/g729e": {
  	source: "iana"
  },
  	"audio/gsm": {
  	source: "iana"
  },
  	"audio/gsm-efr": {
  	source: "iana"
  },
  	"audio/gsm-hr-08": {
  	source: "iana"
  },
  	"audio/ilbc": {
  	source: "iana"
  },
  	"audio/ip-mr_v2.5": {
  	source: "iana"
  },
  	"audio/isac": {
  	source: "apache"
  },
  	"audio/l16": {
  	source: "iana"
  },
  	"audio/l20": {
  	source: "iana"
  },
  	"audio/l24": {
  	source: "iana",
  	compressible: false
  },
  	"audio/l8": {
  	source: "iana"
  },
  	"audio/lpc": {
  	source: "iana"
  },
  	"audio/melp": {
  	source: "iana"
  },
  	"audio/melp1200": {
  	source: "iana"
  },
  	"audio/melp2400": {
  	source: "iana"
  },
  	"audio/melp600": {
  	source: "iana"
  },
  	"audio/mhas": {
  	source: "iana"
  },
  	"audio/midi": {
  	source: "apache",
  	extensions: [
  		"mid",
  		"midi",
  		"kar",
  		"rmi"
  	]
  },
  	"audio/mobile-xmf": {
  	source: "iana",
  	extensions: [
  		"mxmf"
  	]
  },
  	"audio/mp3": {
  	compressible: false,
  	extensions: [
  		"mp3"
  	]
  },
  	"audio/mp4": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"m4a",
  		"mp4a"
  	]
  },
  	"audio/mp4a-latm": {
  	source: "iana"
  },
  	"audio/mpa": {
  	source: "iana"
  },
  	"audio/mpa-robust": {
  	source: "iana"
  },
  	"audio/mpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mpga",
  		"mp2",
  		"mp2a",
  		"mp3",
  		"m2a",
  		"m3a"
  	]
  },
  	"audio/mpeg4-generic": {
  	source: "iana"
  },
  	"audio/musepack": {
  	source: "apache"
  },
  	"audio/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"oga",
  		"ogg",
  		"spx"
  	]
  },
  	"audio/opus": {
  	source: "iana"
  },
  	"audio/parityfec": {
  	source: "iana"
  },
  	"audio/pcma": {
  	source: "iana"
  },
  	"audio/pcma-wb": {
  	source: "iana"
  },
  	"audio/pcmu": {
  	source: "iana"
  },
  	"audio/pcmu-wb": {
  	source: "iana"
  },
  	"audio/prs.sid": {
  	source: "iana"
  },
  	"audio/qcelp": {
  	source: "iana"
  },
  	"audio/raptorfec": {
  	source: "iana"
  },
  	"audio/red": {
  	source: "iana"
  },
  	"audio/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"audio/rtp-midi": {
  	source: "iana"
  },
  	"audio/rtploopback": {
  	source: "iana"
  },
  	"audio/rtx": {
  	source: "iana"
  },
  	"audio/s3m": {
  	source: "apache",
  	extensions: [
  		"s3m"
  	]
  },
  	"audio/silk": {
  	source: "apache",
  	extensions: [
  		"sil"
  	]
  },
  	"audio/smv": {
  	source: "iana"
  },
  	"audio/smv-qcp": {
  	source: "iana"
  },
  	"audio/smv0": {
  	source: "iana"
  },
  	"audio/sp-midi": {
  	source: "iana"
  },
  	"audio/speex": {
  	source: "iana"
  },
  	"audio/t140c": {
  	source: "iana"
  },
  	"audio/t38": {
  	source: "iana"
  },
  	"audio/telephone-event": {
  	source: "iana"
  },
  	"audio/tetra_acelp": {
  	source: "iana"
  },
  	"audio/tetra_acelp_bb": {
  	source: "iana"
  },
  	"audio/tone": {
  	source: "iana"
  },
  	"audio/uemclip": {
  	source: "iana"
  },
  	"audio/ulpfec": {
  	source: "iana"
  },
  	"audio/usac": {
  	source: "iana"
  },
  	"audio/vdvi": {
  	source: "iana"
  },
  	"audio/vmr-wb": {
  	source: "iana"
  },
  	"audio/vnd.3gpp.iufp": {
  	source: "iana"
  },
  	"audio/vnd.4sb": {
  	source: "iana"
  },
  	"audio/vnd.audiokoz": {
  	source: "iana"
  },
  	"audio/vnd.celp": {
  	source: "iana"
  },
  	"audio/vnd.cisco.nse": {
  	source: "iana"
  },
  	"audio/vnd.cmles.radio-events": {
  	source: "iana"
  },
  	"audio/vnd.cns.anp1": {
  	source: "iana"
  },
  	"audio/vnd.cns.inf1": {
  	source: "iana"
  },
  	"audio/vnd.dece.audio": {
  	source: "iana",
  	extensions: [
  		"uva",
  		"uvva"
  	]
  },
  	"audio/vnd.digital-winds": {
  	source: "iana",
  	extensions: [
  		"eol"
  	]
  },
  	"audio/vnd.dlna.adts": {
  	source: "iana"
  },
  	"audio/vnd.dolby.heaac.1": {
  	source: "iana"
  },
  	"audio/vnd.dolby.heaac.2": {
  	source: "iana"
  },
  	"audio/vnd.dolby.mlp": {
  	source: "iana"
  },
  	"audio/vnd.dolby.mps": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2x": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pl2z": {
  	source: "iana"
  },
  	"audio/vnd.dolby.pulse.1": {
  	source: "iana"
  },
  	"audio/vnd.dra": {
  	source: "iana",
  	extensions: [
  		"dra"
  	]
  },
  	"audio/vnd.dts": {
  	source: "iana",
  	extensions: [
  		"dts"
  	]
  },
  	"audio/vnd.dts.hd": {
  	source: "iana",
  	extensions: [
  		"dtshd"
  	]
  },
  	"audio/vnd.dts.uhd": {
  	source: "iana"
  },
  	"audio/vnd.dvb.file": {
  	source: "iana"
  },
  	"audio/vnd.everad.plj": {
  	source: "iana"
  },
  	"audio/vnd.hns.audio": {
  	source: "iana"
  },
  	"audio/vnd.lucent.voice": {
  	source: "iana",
  	extensions: [
  		"lvp"
  	]
  },
  	"audio/vnd.ms-playready.media.pya": {
  	source: "iana",
  	extensions: [
  		"pya"
  	]
  },
  	"audio/vnd.nokia.mobile-xmf": {
  	source: "iana"
  },
  	"audio/vnd.nortel.vbk": {
  	source: "iana"
  },
  	"audio/vnd.nuera.ecelp4800": {
  	source: "iana",
  	extensions: [
  		"ecelp4800"
  	]
  },
  	"audio/vnd.nuera.ecelp7470": {
  	source: "iana",
  	extensions: [
  		"ecelp7470"
  	]
  },
  	"audio/vnd.nuera.ecelp9600": {
  	source: "iana",
  	extensions: [
  		"ecelp9600"
  	]
  },
  	"audio/vnd.octel.sbc": {
  	source: "iana"
  },
  	"audio/vnd.presonus.multitrack": {
  	source: "iana"
  },
  	"audio/vnd.qcelp": {
  	source: "iana"
  },
  	"audio/vnd.rhetorex.32kadpcm": {
  	source: "iana"
  },
  	"audio/vnd.rip": {
  	source: "iana",
  	extensions: [
  		"rip"
  	]
  },
  	"audio/vnd.rn-realaudio": {
  	compressible: false
  },
  	"audio/vnd.sealedmedia.softseal.mpeg": {
  	source: "iana"
  },
  	"audio/vnd.vmx.cvsd": {
  	source: "iana"
  },
  	"audio/vnd.wave": {
  	compressible: false
  },
  	"audio/vorbis": {
  	source: "iana",
  	compressible: false
  },
  	"audio/vorbis-config": {
  	source: "iana"
  },
  	"audio/wav": {
  	compressible: false,
  	extensions: [
  		"wav"
  	]
  },
  	"audio/wave": {
  	compressible: false,
  	extensions: [
  		"wav"
  	]
  },
  	"audio/webm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"weba"
  	]
  },
  	"audio/x-aac": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"aac"
  	]
  },
  	"audio/x-aiff": {
  	source: "apache",
  	extensions: [
  		"aif",
  		"aiff",
  		"aifc"
  	]
  },
  	"audio/x-caf": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"caf"
  	]
  },
  	"audio/x-flac": {
  	source: "apache",
  	extensions: [
  		"flac"
  	]
  },
  	"audio/x-m4a": {
  	source: "nginx",
  	extensions: [
  		"m4a"
  	]
  },
  	"audio/x-matroska": {
  	source: "apache",
  	extensions: [
  		"mka"
  	]
  },
  	"audio/x-mpegurl": {
  	source: "apache",
  	extensions: [
  		"m3u"
  	]
  },
  	"audio/x-ms-wax": {
  	source: "apache",
  	extensions: [
  		"wax"
  	]
  },
  	"audio/x-ms-wma": {
  	source: "apache",
  	extensions: [
  		"wma"
  	]
  },
  	"audio/x-pn-realaudio": {
  	source: "apache",
  	extensions: [
  		"ram",
  		"ra"
  	]
  },
  	"audio/x-pn-realaudio-plugin": {
  	source: "apache",
  	extensions: [
  		"rmp"
  	]
  },
  	"audio/x-realaudio": {
  	source: "nginx",
  	extensions: [
  		"ra"
  	]
  },
  	"audio/x-tta": {
  	source: "apache"
  },
  	"audio/x-wav": {
  	source: "apache",
  	extensions: [
  		"wav"
  	]
  },
  	"audio/xm": {
  	source: "apache",
  	extensions: [
  		"xm"
  	]
  },
  	"chemical/x-cdx": {
  	source: "apache",
  	extensions: [
  		"cdx"
  	]
  },
  	"chemical/x-cif": {
  	source: "apache",
  	extensions: [
  		"cif"
  	]
  },
  	"chemical/x-cmdf": {
  	source: "apache",
  	extensions: [
  		"cmdf"
  	]
  },
  	"chemical/x-cml": {
  	source: "apache",
  	extensions: [
  		"cml"
  	]
  },
  	"chemical/x-csml": {
  	source: "apache",
  	extensions: [
  		"csml"
  	]
  },
  	"chemical/x-pdb": {
  	source: "apache"
  },
  	"chemical/x-xyz": {
  	source: "apache",
  	extensions: [
  		"xyz"
  	]
  },
  	"font/collection": {
  	source: "iana",
  	extensions: [
  		"ttc"
  	]
  },
  	"font/otf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"otf"
  	]
  },
  	"font/sfnt": {
  	source: "iana"
  },
  	"font/ttf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"ttf"
  	]
  },
  	"font/woff": {
  	source: "iana",
  	extensions: [
  		"woff"
  	]
  },
  	"font/woff2": {
  	source: "iana",
  	extensions: [
  		"woff2"
  	]
  },
  	"image/aces": {
  	source: "iana",
  	extensions: [
  		"exr"
  	]
  },
  	"image/apng": {
  	compressible: false,
  	extensions: [
  		"apng"
  	]
  },
  	"image/avci": {
  	source: "iana"
  },
  	"image/avcs": {
  	source: "iana"
  },
  	"image/bmp": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"bmp"
  	]
  },
  	"image/cgm": {
  	source: "iana",
  	extensions: [
  		"cgm"
  	]
  },
  	"image/dicom-rle": {
  	source: "iana",
  	extensions: [
  		"drle"
  	]
  },
  	"image/emf": {
  	source: "iana",
  	extensions: [
  		"emf"
  	]
  },
  	"image/fits": {
  	source: "iana",
  	extensions: [
  		"fits"
  	]
  },
  	"image/g3fax": {
  	source: "iana",
  	extensions: [
  		"g3"
  	]
  },
  	"image/gif": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"gif"
  	]
  },
  	"image/heic": {
  	source: "iana",
  	extensions: [
  		"heic"
  	]
  },
  	"image/heic-sequence": {
  	source: "iana",
  	extensions: [
  		"heics"
  	]
  },
  	"image/heif": {
  	source: "iana",
  	extensions: [
  		"heif"
  	]
  },
  	"image/heif-sequence": {
  	source: "iana",
  	extensions: [
  		"heifs"
  	]
  },
  	"image/hej2k": {
  	source: "iana",
  	extensions: [
  		"hej2"
  	]
  },
  	"image/hsj2": {
  	source: "iana",
  	extensions: [
  		"hsj2"
  	]
  },
  	"image/ief": {
  	source: "iana",
  	extensions: [
  		"ief"
  	]
  },
  	"image/jls": {
  	source: "iana",
  	extensions: [
  		"jls"
  	]
  },
  	"image/jp2": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jp2",
  		"jpg2"
  	]
  },
  	"image/jpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpeg",
  		"jpg",
  		"jpe"
  	]
  },
  	"image/jph": {
  	source: "iana",
  	extensions: [
  		"jph"
  	]
  },
  	"image/jphc": {
  	source: "iana",
  	extensions: [
  		"jhc"
  	]
  },
  	"image/jpm": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpm"
  	]
  },
  	"image/jpx": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"jpx",
  		"jpf"
  	]
  },
  	"image/jxr": {
  	source: "iana",
  	extensions: [
  		"jxr"
  	]
  },
  	"image/jxra": {
  	source: "iana",
  	extensions: [
  		"jxra"
  	]
  },
  	"image/jxrs": {
  	source: "iana",
  	extensions: [
  		"jxrs"
  	]
  },
  	"image/jxs": {
  	source: "iana",
  	extensions: [
  		"jxs"
  	]
  },
  	"image/jxsc": {
  	source: "iana",
  	extensions: [
  		"jxsc"
  	]
  },
  	"image/jxsi": {
  	source: "iana",
  	extensions: [
  		"jxsi"
  	]
  },
  	"image/jxss": {
  	source: "iana",
  	extensions: [
  		"jxss"
  	]
  },
  	"image/ktx": {
  	source: "iana",
  	extensions: [
  		"ktx"
  	]
  },
  	"image/naplps": {
  	source: "iana"
  },
  	"image/pjpeg": {
  	compressible: false
  },
  	"image/png": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"png"
  	]
  },
  	"image/prs.btif": {
  	source: "iana",
  	extensions: [
  		"btif"
  	]
  },
  	"image/prs.pti": {
  	source: "iana",
  	extensions: [
  		"pti"
  	]
  },
  	"image/pwg-raster": {
  	source: "iana"
  },
  	"image/sgi": {
  	source: "apache",
  	extensions: [
  		"sgi"
  	]
  },
  	"image/svg+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"svg",
  		"svgz"
  	]
  },
  	"image/t38": {
  	source: "iana",
  	extensions: [
  		"t38"
  	]
  },
  	"image/tiff": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"tif",
  		"tiff"
  	]
  },
  	"image/tiff-fx": {
  	source: "iana",
  	extensions: [
  		"tfx"
  	]
  },
  	"image/vnd.adobe.photoshop": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"psd"
  	]
  },
  	"image/vnd.airzip.accelerator.azv": {
  	source: "iana",
  	extensions: [
  		"azv"
  	]
  },
  	"image/vnd.cns.inf2": {
  	source: "iana"
  },
  	"image/vnd.dece.graphic": {
  	source: "iana",
  	extensions: [
  		"uvi",
  		"uvvi",
  		"uvg",
  		"uvvg"
  	]
  },
  	"image/vnd.djvu": {
  	source: "iana",
  	extensions: [
  		"djvu",
  		"djv"
  	]
  },
  	"image/vnd.dvb.subtitle": {
  	source: "iana",
  	extensions: [
  		"sub"
  	]
  },
  	"image/vnd.dwg": {
  	source: "iana",
  	extensions: [
  		"dwg"
  	]
  },
  	"image/vnd.dxf": {
  	source: "iana",
  	extensions: [
  		"dxf"
  	]
  },
  	"image/vnd.fastbidsheet": {
  	source: "iana",
  	extensions: [
  		"fbs"
  	]
  },
  	"image/vnd.fpx": {
  	source: "iana",
  	extensions: [
  		"fpx"
  	]
  },
  	"image/vnd.fst": {
  	source: "iana",
  	extensions: [
  		"fst"
  	]
  },
  	"image/vnd.fujixerox.edmics-mmr": {
  	source: "iana",
  	extensions: [
  		"mmr"
  	]
  },
  	"image/vnd.fujixerox.edmics-rlc": {
  	source: "iana",
  	extensions: [
  		"rlc"
  	]
  },
  	"image/vnd.globalgraphics.pgb": {
  	source: "iana"
  },
  	"image/vnd.microsoft.icon": {
  	source: "iana",
  	extensions: [
  		"ico"
  	]
  },
  	"image/vnd.mix": {
  	source: "iana"
  },
  	"image/vnd.mozilla.apng": {
  	source: "iana"
  },
  	"image/vnd.ms-dds": {
  	extensions: [
  		"dds"
  	]
  },
  	"image/vnd.ms-modi": {
  	source: "iana",
  	extensions: [
  		"mdi"
  	]
  },
  	"image/vnd.ms-photo": {
  	source: "apache",
  	extensions: [
  		"wdp"
  	]
  },
  	"image/vnd.net-fpx": {
  	source: "iana",
  	extensions: [
  		"npx"
  	]
  },
  	"image/vnd.radiance": {
  	source: "iana"
  },
  	"image/vnd.sealed.png": {
  	source: "iana"
  },
  	"image/vnd.sealedmedia.softseal.gif": {
  	source: "iana"
  },
  	"image/vnd.sealedmedia.softseal.jpg": {
  	source: "iana"
  },
  	"image/vnd.svf": {
  	source: "iana"
  },
  	"image/vnd.tencent.tap": {
  	source: "iana",
  	extensions: [
  		"tap"
  	]
  },
  	"image/vnd.valve.source.texture": {
  	source: "iana",
  	extensions: [
  		"vtf"
  	]
  },
  	"image/vnd.wap.wbmp": {
  	source: "iana",
  	extensions: [
  		"wbmp"
  	]
  },
  	"image/vnd.xiff": {
  	source: "iana",
  	extensions: [
  		"xif"
  	]
  },
  	"image/vnd.zbrush.pcx": {
  	source: "iana",
  	extensions: [
  		"pcx"
  	]
  },
  	"image/webp": {
  	source: "apache",
  	extensions: [
  		"webp"
  	]
  },
  	"image/wmf": {
  	source: "iana",
  	extensions: [
  		"wmf"
  	]
  },
  	"image/x-3ds": {
  	source: "apache",
  	extensions: [
  		"3ds"
  	]
  },
  	"image/x-cmu-raster": {
  	source: "apache",
  	extensions: [
  		"ras"
  	]
  },
  	"image/x-cmx": {
  	source: "apache",
  	extensions: [
  		"cmx"
  	]
  },
  	"image/x-freehand": {
  	source: "apache",
  	extensions: [
  		"fh",
  		"fhc",
  		"fh4",
  		"fh5",
  		"fh7"
  	]
  },
  	"image/x-icon": {
  	source: "apache",
  	compressible: true,
  	extensions: [
  		"ico"
  	]
  },
  	"image/x-jng": {
  	source: "nginx",
  	extensions: [
  		"jng"
  	]
  },
  	"image/x-mrsid-image": {
  	source: "apache",
  	extensions: [
  		"sid"
  	]
  },
  	"image/x-ms-bmp": {
  	source: "nginx",
  	compressible: true,
  	extensions: [
  		"bmp"
  	]
  },
  	"image/x-pcx": {
  	source: "apache",
  	extensions: [
  		"pcx"
  	]
  },
  	"image/x-pict": {
  	source: "apache",
  	extensions: [
  		"pic",
  		"pct"
  	]
  },
  	"image/x-portable-anymap": {
  	source: "apache",
  	extensions: [
  		"pnm"
  	]
  },
  	"image/x-portable-bitmap": {
  	source: "apache",
  	extensions: [
  		"pbm"
  	]
  },
  	"image/x-portable-graymap": {
  	source: "apache",
  	extensions: [
  		"pgm"
  	]
  },
  	"image/x-portable-pixmap": {
  	source: "apache",
  	extensions: [
  		"ppm"
  	]
  },
  	"image/x-rgb": {
  	source: "apache",
  	extensions: [
  		"rgb"
  	]
  },
  	"image/x-tga": {
  	source: "apache",
  	extensions: [
  		"tga"
  	]
  },
  	"image/x-xbitmap": {
  	source: "apache",
  	extensions: [
  		"xbm"
  	]
  },
  	"image/x-xcf": {
  	compressible: false
  },
  	"image/x-xpixmap": {
  	source: "apache",
  	extensions: [
  		"xpm"
  	]
  },
  	"image/x-xwindowdump": {
  	source: "apache",
  	extensions: [
  		"xwd"
  	]
  },
  	"message/cpim": {
  	source: "iana"
  },
  	"message/delivery-status": {
  	source: "iana"
  },
  	"message/disposition-notification": {
  	source: "iana",
  	extensions: [
  		"disposition-notification"
  	]
  },
  	"message/external-body": {
  	source: "iana"
  },
  	"message/feedback-report": {
  	source: "iana"
  },
  	"message/global": {
  	source: "iana",
  	extensions: [
  		"u8msg"
  	]
  },
  	"message/global-delivery-status": {
  	source: "iana",
  	extensions: [
  		"u8dsn"
  	]
  },
  	"message/global-disposition-notification": {
  	source: "iana",
  	extensions: [
  		"u8mdn"
  	]
  },
  	"message/global-headers": {
  	source: "iana",
  	extensions: [
  		"u8hdr"
  	]
  },
  	"message/http": {
  	source: "iana",
  	compressible: false
  },
  	"message/imdn+xml": {
  	source: "iana",
  	compressible: true
  },
  	"message/news": {
  	source: "iana"
  },
  	"message/partial": {
  	source: "iana",
  	compressible: false
  },
  	"message/rfc822": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"eml",
  		"mime"
  	]
  },
  	"message/s-http": {
  	source: "iana"
  },
  	"message/sip": {
  	source: "iana"
  },
  	"message/sipfrag": {
  	source: "iana"
  },
  	"message/tracking-status": {
  	source: "iana"
  },
  	"message/vnd.si.simp": {
  	source: "iana"
  },
  	"message/vnd.wfa.wsc": {
  	source: "iana",
  	extensions: [
  		"wsc"
  	]
  },
  	"model/3mf": {
  	source: "iana",
  	extensions: [
  		"3mf"
  	]
  },
  	"model/gltf+json": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"gltf"
  	]
  },
  	"model/gltf-binary": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"glb"
  	]
  },
  	"model/iges": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"igs",
  		"iges"
  	]
  },
  	"model/mesh": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"msh",
  		"mesh",
  		"silo"
  	]
  },
  	"model/mtl": {
  	source: "iana",
  	extensions: [
  		"mtl"
  	]
  },
  	"model/obj": {
  	source: "iana",
  	extensions: [
  		"obj"
  	]
  },
  	"model/stl": {
  	source: "iana",
  	extensions: [
  		"stl"
  	]
  },
  	"model/vnd.collada+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"dae"
  	]
  },
  	"model/vnd.dwf": {
  	source: "iana",
  	extensions: [
  		"dwf"
  	]
  },
  	"model/vnd.flatland.3dml": {
  	source: "iana"
  },
  	"model/vnd.gdl": {
  	source: "iana",
  	extensions: [
  		"gdl"
  	]
  },
  	"model/vnd.gs-gdl": {
  	source: "apache"
  },
  	"model/vnd.gs.gdl": {
  	source: "iana"
  },
  	"model/vnd.gtw": {
  	source: "iana",
  	extensions: [
  		"gtw"
  	]
  },
  	"model/vnd.moml+xml": {
  	source: "iana",
  	compressible: true
  },
  	"model/vnd.mts": {
  	source: "iana",
  	extensions: [
  		"mts"
  	]
  },
  	"model/vnd.opengex": {
  	source: "iana",
  	extensions: [
  		"ogex"
  	]
  },
  	"model/vnd.parasolid.transmit.binary": {
  	source: "iana",
  	extensions: [
  		"x_b"
  	]
  },
  	"model/vnd.parasolid.transmit.text": {
  	source: "iana",
  	extensions: [
  		"x_t"
  	]
  },
  	"model/vnd.rosette.annotated-data-model": {
  	source: "iana"
  },
  	"model/vnd.usdz+zip": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"usdz"
  	]
  },
  	"model/vnd.valve.source.compiled-map": {
  	source: "iana",
  	extensions: [
  		"bsp"
  	]
  },
  	"model/vnd.vtu": {
  	source: "iana",
  	extensions: [
  		"vtu"
  	]
  },
  	"model/vrml": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"wrl",
  		"vrml"
  	]
  },
  	"model/x3d+binary": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"x3db",
  		"x3dbz"
  	]
  },
  	"model/x3d+fastinfoset": {
  	source: "iana",
  	extensions: [
  		"x3db"
  	]
  },
  	"model/x3d+vrml": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"x3dv",
  		"x3dvz"
  	]
  },
  	"model/x3d+xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"x3d",
  		"x3dz"
  	]
  },
  	"model/x3d-vrml": {
  	source: "iana",
  	extensions: [
  		"x3dv"
  	]
  },
  	"multipart/alternative": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/appledouble": {
  	source: "iana"
  },
  	"multipart/byteranges": {
  	source: "iana"
  },
  	"multipart/digest": {
  	source: "iana"
  },
  	"multipart/encrypted": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/form-data": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/header-set": {
  	source: "iana"
  },
  	"multipart/mixed": {
  	source: "iana"
  },
  	"multipart/multilingual": {
  	source: "iana"
  },
  	"multipart/parallel": {
  	source: "iana"
  },
  	"multipart/related": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/report": {
  	source: "iana"
  },
  	"multipart/signed": {
  	source: "iana",
  	compressible: false
  },
  	"multipart/vnd.bint.med-plus": {
  	source: "iana"
  },
  	"multipart/voice-message": {
  	source: "iana"
  },
  	"multipart/x-mixed-replace": {
  	source: "iana"
  },
  	"text/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"text/cache-manifest": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"appcache",
  		"manifest"
  	]
  },
  	"text/calendar": {
  	source: "iana",
  	extensions: [
  		"ics",
  		"ifb"
  	]
  },
  	"text/calender": {
  	compressible: true
  },
  	"text/cmd": {
  	compressible: true
  },
  	"text/coffeescript": {
  	extensions: [
  		"coffee",
  		"litcoffee"
  	]
  },
  	"text/css": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"css"
  	]
  },
  	"text/csv": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"csv"
  	]
  },
  	"text/csv-schema": {
  	source: "iana"
  },
  	"text/directory": {
  	source: "iana"
  },
  	"text/dns": {
  	source: "iana"
  },
  	"text/ecmascript": {
  	source: "iana"
  },
  	"text/encaprtp": {
  	source: "iana"
  },
  	"text/enriched": {
  	source: "iana"
  },
  	"text/flexfec": {
  	source: "iana"
  },
  	"text/fwdred": {
  	source: "iana"
  },
  	"text/grammar-ref-list": {
  	source: "iana"
  },
  	"text/html": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"html",
  		"htm",
  		"shtml"
  	]
  },
  	"text/jade": {
  	extensions: [
  		"jade"
  	]
  },
  	"text/javascript": {
  	source: "iana",
  	compressible: true
  },
  	"text/jcr-cnd": {
  	source: "iana"
  },
  	"text/jsx": {
  	compressible: true,
  	extensions: [
  		"jsx"
  	]
  },
  	"text/less": {
  	compressible: true,
  	extensions: [
  		"less"
  	]
  },
  	"text/markdown": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"markdown",
  		"md"
  	]
  },
  	"text/mathml": {
  	source: "nginx",
  	extensions: [
  		"mml"
  	]
  },
  	"text/mdx": {
  	compressible: true,
  	extensions: [
  		"mdx"
  	]
  },
  	"text/mizar": {
  	source: "iana"
  },
  	"text/n3": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"n3"
  	]
  },
  	"text/parameters": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/parityfec": {
  	source: "iana"
  },
  	"text/plain": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"txt",
  		"text",
  		"conf",
  		"def",
  		"list",
  		"log",
  		"in",
  		"ini"
  	]
  },
  	"text/provenance-notation": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/prs.fallenstein.rst": {
  	source: "iana"
  },
  	"text/prs.lines.tag": {
  	source: "iana",
  	extensions: [
  		"dsc"
  	]
  },
  	"text/prs.prop.logic": {
  	source: "iana"
  },
  	"text/raptorfec": {
  	source: "iana"
  },
  	"text/red": {
  	source: "iana"
  },
  	"text/rfc822-headers": {
  	source: "iana"
  },
  	"text/richtext": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtx"
  	]
  },
  	"text/rtf": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"rtf"
  	]
  },
  	"text/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"text/rtploopback": {
  	source: "iana"
  },
  	"text/rtx": {
  	source: "iana"
  },
  	"text/sgml": {
  	source: "iana",
  	extensions: [
  		"sgml",
  		"sgm"
  	]
  },
  	"text/shex": {
  	extensions: [
  		"shex"
  	]
  },
  	"text/slim": {
  	extensions: [
  		"slim",
  		"slm"
  	]
  },
  	"text/strings": {
  	source: "iana"
  },
  	"text/stylus": {
  	extensions: [
  		"stylus",
  		"styl"
  	]
  },
  	"text/t140": {
  	source: "iana"
  },
  	"text/tab-separated-values": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"tsv"
  	]
  },
  	"text/troff": {
  	source: "iana",
  	extensions: [
  		"t",
  		"tr",
  		"roff",
  		"man",
  		"me",
  		"ms"
  	]
  },
  	"text/turtle": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"ttl"
  	]
  },
  	"text/ulpfec": {
  	source: "iana"
  },
  	"text/uri-list": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"uri",
  		"uris",
  		"urls"
  	]
  },
  	"text/vcard": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"vcard"
  	]
  },
  	"text/vnd.a": {
  	source: "iana"
  },
  	"text/vnd.abc": {
  	source: "iana"
  },
  	"text/vnd.ascii-art": {
  	source: "iana"
  },
  	"text/vnd.curl": {
  	source: "iana",
  	extensions: [
  		"curl"
  	]
  },
  	"text/vnd.curl.dcurl": {
  	source: "apache",
  	extensions: [
  		"dcurl"
  	]
  },
  	"text/vnd.curl.mcurl": {
  	source: "apache",
  	extensions: [
  		"mcurl"
  	]
  },
  	"text/vnd.curl.scurl": {
  	source: "apache",
  	extensions: [
  		"scurl"
  	]
  },
  	"text/vnd.debian.copyright": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.dmclientscript": {
  	source: "iana"
  },
  	"text/vnd.dvb.subtitle": {
  	source: "iana",
  	extensions: [
  		"sub"
  	]
  },
  	"text/vnd.esmertec.theme-descriptor": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.ficlab.flt": {
  	source: "iana"
  },
  	"text/vnd.fly": {
  	source: "iana",
  	extensions: [
  		"fly"
  	]
  },
  	"text/vnd.fmi.flexstor": {
  	source: "iana",
  	extensions: [
  		"flx"
  	]
  },
  	"text/vnd.gml": {
  	source: "iana"
  },
  	"text/vnd.graphviz": {
  	source: "iana",
  	extensions: [
  		"gv"
  	]
  },
  	"text/vnd.hgl": {
  	source: "iana"
  },
  	"text/vnd.in3d.3dml": {
  	source: "iana",
  	extensions: [
  		"3dml"
  	]
  },
  	"text/vnd.in3d.spot": {
  	source: "iana",
  	extensions: [
  		"spot"
  	]
  },
  	"text/vnd.iptc.newsml": {
  	source: "iana"
  },
  	"text/vnd.iptc.nitf": {
  	source: "iana"
  },
  	"text/vnd.latex-z": {
  	source: "iana"
  },
  	"text/vnd.motorola.reflex": {
  	source: "iana"
  },
  	"text/vnd.ms-mediapackage": {
  	source: "iana"
  },
  	"text/vnd.net2phone.commcenter.command": {
  	source: "iana"
  },
  	"text/vnd.radisys.msml-basic-layout": {
  	source: "iana"
  },
  	"text/vnd.senx.warpscript": {
  	source: "iana"
  },
  	"text/vnd.si.uricatalogue": {
  	source: "iana"
  },
  	"text/vnd.sosi": {
  	source: "iana"
  },
  	"text/vnd.sun.j2me.app-descriptor": {
  	source: "iana",
  	charset: "UTF-8",
  	extensions: [
  		"jad"
  	]
  },
  	"text/vnd.trolltech.linguist": {
  	source: "iana",
  	charset: "UTF-8"
  },
  	"text/vnd.wap.si": {
  	source: "iana"
  },
  	"text/vnd.wap.sl": {
  	source: "iana"
  },
  	"text/vnd.wap.wml": {
  	source: "iana",
  	extensions: [
  		"wml"
  	]
  },
  	"text/vnd.wap.wmlscript": {
  	source: "iana",
  	extensions: [
  		"wmls"
  	]
  },
  	"text/vtt": {
  	source: "iana",
  	charset: "UTF-8",
  	compressible: true,
  	extensions: [
  		"vtt"
  	]
  },
  	"text/x-asm": {
  	source: "apache",
  	extensions: [
  		"s",
  		"asm"
  	]
  },
  	"text/x-c": {
  	source: "apache",
  	extensions: [
  		"c",
  		"cc",
  		"cxx",
  		"cpp",
  		"h",
  		"hh",
  		"dic"
  	]
  },
  	"text/x-component": {
  	source: "nginx",
  	extensions: [
  		"htc"
  	]
  },
  	"text/x-fortran": {
  	source: "apache",
  	extensions: [
  		"f",
  		"for",
  		"f77",
  		"f90"
  	]
  },
  	"text/x-gwt-rpc": {
  	compressible: true
  },
  	"text/x-handlebars-template": {
  	extensions: [
  		"hbs"
  	]
  },
  	"text/x-java-source": {
  	source: "apache",
  	extensions: [
  		"java"
  	]
  },
  	"text/x-jquery-tmpl": {
  	compressible: true
  },
  	"text/x-lua": {
  	extensions: [
  		"lua"
  	]
  },
  	"text/x-markdown": {
  	compressible: true,
  	extensions: [
  		"mkd"
  	]
  },
  	"text/x-nfo": {
  	source: "apache",
  	extensions: [
  		"nfo"
  	]
  },
  	"text/x-opml": {
  	source: "apache",
  	extensions: [
  		"opml"
  	]
  },
  	"text/x-org": {
  	compressible: true,
  	extensions: [
  		"org"
  	]
  },
  	"text/x-pascal": {
  	source: "apache",
  	extensions: [
  		"p",
  		"pas"
  	]
  },
  	"text/x-processing": {
  	compressible: true,
  	extensions: [
  		"pde"
  	]
  },
  	"text/x-sass": {
  	extensions: [
  		"sass"
  	]
  },
  	"text/x-scss": {
  	extensions: [
  		"scss"
  	]
  },
  	"text/x-setext": {
  	source: "apache",
  	extensions: [
  		"etx"
  	]
  },
  	"text/x-sfv": {
  	source: "apache",
  	extensions: [
  		"sfv"
  	]
  },
  	"text/x-suse-ymp": {
  	compressible: true,
  	extensions: [
  		"ymp"
  	]
  },
  	"text/x-uuencode": {
  	source: "apache",
  	extensions: [
  		"uu"
  	]
  },
  	"text/x-vcalendar": {
  	source: "apache",
  	extensions: [
  		"vcs"
  	]
  },
  	"text/x-vcard": {
  	source: "apache",
  	extensions: [
  		"vcf"
  	]
  },
  	"text/xml": {
  	source: "iana",
  	compressible: true,
  	extensions: [
  		"xml"
  	]
  },
  	"text/xml-external-parsed-entity": {
  	source: "iana"
  },
  	"text/yaml": {
  	extensions: [
  		"yaml",
  		"yml"
  	]
  },
  	"video/1d-interleaved-parityfec": {
  	source: "iana"
  },
  	"video/3gpp": {
  	source: "iana",
  	extensions: [
  		"3gp",
  		"3gpp"
  	]
  },
  	"video/3gpp-tt": {
  	source: "iana"
  },
  	"video/3gpp2": {
  	source: "iana",
  	extensions: [
  		"3g2"
  	]
  },
  	"video/bmpeg": {
  	source: "iana"
  },
  	"video/bt656": {
  	source: "iana"
  },
  	"video/celb": {
  	source: "iana"
  },
  	"video/dv": {
  	source: "iana"
  },
  	"video/encaprtp": {
  	source: "iana"
  },
  	"video/flexfec": {
  	source: "iana"
  },
  	"video/h261": {
  	source: "iana",
  	extensions: [
  		"h261"
  	]
  },
  	"video/h263": {
  	source: "iana",
  	extensions: [
  		"h263"
  	]
  },
  	"video/h263-1998": {
  	source: "iana"
  },
  	"video/h263-2000": {
  	source: "iana"
  },
  	"video/h264": {
  	source: "iana",
  	extensions: [
  		"h264"
  	]
  },
  	"video/h264-rcdo": {
  	source: "iana"
  },
  	"video/h264-svc": {
  	source: "iana"
  },
  	"video/h265": {
  	source: "iana"
  },
  	"video/iso.segment": {
  	source: "iana"
  },
  	"video/jpeg": {
  	source: "iana",
  	extensions: [
  		"jpgv"
  	]
  },
  	"video/jpeg2000": {
  	source: "iana"
  },
  	"video/jpm": {
  	source: "apache",
  	extensions: [
  		"jpm",
  		"jpgm"
  	]
  },
  	"video/mj2": {
  	source: "iana",
  	extensions: [
  		"mj2",
  		"mjp2"
  	]
  },
  	"video/mp1s": {
  	source: "iana"
  },
  	"video/mp2p": {
  	source: "iana"
  },
  	"video/mp2t": {
  	source: "iana",
  	extensions: [
  		"ts"
  	]
  },
  	"video/mp4": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mp4",
  		"mp4v",
  		"mpg4"
  	]
  },
  	"video/mp4v-es": {
  	source: "iana"
  },
  	"video/mpeg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"mpeg",
  		"mpg",
  		"mpe",
  		"m1v",
  		"m2v"
  	]
  },
  	"video/mpeg4-generic": {
  	source: "iana"
  },
  	"video/mpv": {
  	source: "iana"
  },
  	"video/nv": {
  	source: "iana"
  },
  	"video/ogg": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"ogv"
  	]
  },
  	"video/parityfec": {
  	source: "iana"
  },
  	"video/pointer": {
  	source: "iana"
  },
  	"video/quicktime": {
  	source: "iana",
  	compressible: false,
  	extensions: [
  		"qt",
  		"mov"
  	]
  },
  	"video/raptorfec": {
  	source: "iana"
  },
  	"video/raw": {
  	source: "iana"
  },
  	"video/rtp-enc-aescm128": {
  	source: "iana"
  },
  	"video/rtploopback": {
  	source: "iana"
  },
  	"video/rtx": {
  	source: "iana"
  },
  	"video/smpte291": {
  	source: "iana"
  },
  	"video/smpte292m": {
  	source: "iana"
  },
  	"video/ulpfec": {
  	source: "iana"
  },
  	"video/vc1": {
  	source: "iana"
  },
  	"video/vc2": {
  	source: "iana"
  },
  	"video/vnd.cctv": {
  	source: "iana"
  },
  	"video/vnd.dece.hd": {
  	source: "iana",
  	extensions: [
  		"uvh",
  		"uvvh"
  	]
  },
  	"video/vnd.dece.mobile": {
  	source: "iana",
  	extensions: [
  		"uvm",
  		"uvvm"
  	]
  },
  	"video/vnd.dece.mp4": {
  	source: "iana"
  },
  	"video/vnd.dece.pd": {
  	source: "iana",
  	extensions: [
  		"uvp",
  		"uvvp"
  	]
  },
  	"video/vnd.dece.sd": {
  	source: "iana",
  	extensions: [
  		"uvs",
  		"uvvs"
  	]
  },
  	"video/vnd.dece.video": {
  	source: "iana",
  	extensions: [
  		"uvv",
  		"uvvv"
  	]
  },
  	"video/vnd.directv.mpeg": {
  	source: "iana"
  },
  	"video/vnd.directv.mpeg-tts": {
  	source: "iana"
  },
  	"video/vnd.dlna.mpeg-tts": {
  	source: "iana"
  },
  	"video/vnd.dvb.file": {
  	source: "iana",
  	extensions: [
  		"dvb"
  	]
  },
  	"video/vnd.fvt": {
  	source: "iana",
  	extensions: [
  		"fvt"
  	]
  },
  	"video/vnd.hns.video": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.1dparityfec-1010": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.1dparityfec-2005": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.2dparityfec-1010": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.2dparityfec-2005": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.ttsavc": {
  	source: "iana"
  },
  	"video/vnd.iptvforum.ttsmpeg2": {
  	source: "iana"
  },
  	"video/vnd.motorola.video": {
  	source: "iana"
  },
  	"video/vnd.motorola.videop": {
  	source: "iana"
  },
  	"video/vnd.mpegurl": {
  	source: "iana",
  	extensions: [
  		"mxu",
  		"m4u"
  	]
  },
  	"video/vnd.ms-playready.media.pyv": {
  	source: "iana",
  	extensions: [
  		"pyv"
  	]
  },
  	"video/vnd.nokia.interleaved-multimedia": {
  	source: "iana"
  },
  	"video/vnd.nokia.mp4vr": {
  	source: "iana"
  },
  	"video/vnd.nokia.videovoip": {
  	source: "iana"
  },
  	"video/vnd.objectvideo": {
  	source: "iana"
  },
  	"video/vnd.radgamettools.bink": {
  	source: "iana"
  },
  	"video/vnd.radgamettools.smacker": {
  	source: "iana"
  },
  	"video/vnd.sealed.mpeg1": {
  	source: "iana"
  },
  	"video/vnd.sealed.mpeg4": {
  	source: "iana"
  },
  	"video/vnd.sealed.swf": {
  	source: "iana"
  },
  	"video/vnd.sealedmedia.softseal.mov": {
  	source: "iana"
  },
  	"video/vnd.uvvu.mp4": {
  	source: "iana",
  	extensions: [
  		"uvu",
  		"uvvu"
  	]
  },
  	"video/vnd.vivo": {
  	source: "iana",
  	extensions: [
  		"viv"
  	]
  },
  	"video/vnd.youtube.yt": {
  	source: "iana"
  },
  	"video/vp8": {
  	source: "iana"
  },
  	"video/webm": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"webm"
  	]
  },
  	"video/x-f4v": {
  	source: "apache",
  	extensions: [
  		"f4v"
  	]
  },
  	"video/x-fli": {
  	source: "apache",
  	extensions: [
  		"fli"
  	]
  },
  	"video/x-flv": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"flv"
  	]
  },
  	"video/x-m4v": {
  	source: "apache",
  	extensions: [
  		"m4v"
  	]
  },
  	"video/x-matroska": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"mkv",
  		"mk3d",
  		"mks"
  	]
  },
  	"video/x-mng": {
  	source: "apache",
  	extensions: [
  		"mng"
  	]
  },
  	"video/x-ms-asf": {
  	source: "apache",
  	extensions: [
  		"asf",
  		"asx"
  	]
  },
  	"video/x-ms-vob": {
  	source: "apache",
  	extensions: [
  		"vob"
  	]
  },
  	"video/x-ms-wm": {
  	source: "apache",
  	extensions: [
  		"wm"
  	]
  },
  	"video/x-ms-wmv": {
  	source: "apache",
  	compressible: false,
  	extensions: [
  		"wmv"
  	]
  },
  	"video/x-ms-wmx": {
  	source: "apache",
  	extensions: [
  		"wmx"
  	]
  },
  	"video/x-ms-wvx": {
  	source: "apache",
  	extensions: [
  		"wvx"
  	]
  },
  	"video/x-msvideo": {
  	source: "apache",
  	extensions: [
  		"avi"
  	]
  },
  	"video/x-sgi-movie": {
  	source: "apache",
  	extensions: [
  		"movie"
  	]
  },
  	"video/x-smv": {
  	source: "apache",
  	extensions: [
  		"smv"
  	]
  },
  	"x-conference/x-cooltalk": {
  	source: "apache",
  	extensions: [
  		"ice"
  	]
  },
  	"x-shader/x-fragment": {
  	compressible: true
  },
  	"x-shader/x-vertex": {
  	compressible: true
  }
  };

  var db$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': db
  });

  var require$$0$1 = getCjsExportFromNamespace(db$1);

  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var mimeDb = require$$0$1;

  var mimeTypes = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @private
   */


  var extname = path$3.extname;

  /**
   * Module variables.
   * @private
   */

  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;

  /**
   * Module exports.
   * @public
   */

  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);

  // Populate the extensions/types maps
  populateMaps(exports.extensions, exports.types);

  /**
   * Get the default charset for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function charset (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && mimeDb[match[1].toLowerCase()];

    if (mime && mime.charset) {
      return mime.charset
    }

    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return 'UTF-8'
    }

    return false
  }

  /**
   * Create a full Content-Type header given a MIME type or extension.
   *
   * @param {string} str
   * @return {boolean|string}
   */

  function contentType (str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== 'string') {
      return false
    }

    var mime = str.indexOf('/') === -1
      ? exports.lookup(str)
      : str;

    if (!mime) {
      return false
    }

    // TODO: use content-type or other module
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset) mime += '; charset=' + charset.toLowerCase();
    }

    return mime
  }

  /**
   * Get the default extension for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function extension (type) {
    if (!type || typeof type !== 'string') {
      return false
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);

    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];

    if (!exts || !exts.length) {
      return false
    }

    return exts[0]
  }

  /**
   * Lookup the MIME type for a file path/extension.
   *
   * @param {string} path
   * @return {boolean|string}
   */

  function lookup (path) {
    if (!path || typeof path !== 'string') {
      return false
    }

    // get the extension ("ext" or ".ext" or full path)
    var extension = extname('x.' + path)
      .toLowerCase()
      .substr(1);

    if (!extension) {
      return false
    }

    return exports.types[extension] || false
  }

  /**
   * Populate the extensions and types maps.
   * @private
   */

  function populateMaps (extensions, types) {
    // source preference (least -> most)
    var preference = ['nginx', 'apache', undefined, 'iana'];

    Object.keys(mimeDb).forEach(function forEachMimeType (type) {
      var mime = mimeDb[type];
      var exts = mime.extensions;

      if (!exts || !exts.length) {
        return
      }

      // mime -> extensions
      extensions[type] = exts;

      // extension -> mime
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];

        if (types[extension]) {
          var from = preference.indexOf(mimeDb[types[extension]].source);
          var to = preference.indexOf(mime.source);

          if (types[extension] !== 'application/octet-stream' &&
            (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
            // skip the remapping
            continue
          }
        }

        // set the extension -> mime
        types[extension] = type;
      }
    });
  }
  });
  var mimeTypes_1 = mimeTypes.charset;
  var mimeTypes_2 = mimeTypes.charsets;
  var mimeTypes_3 = mimeTypes.contentType;
  var mimeTypes_4 = mimeTypes.extension;
  var mimeTypes_5 = mimeTypes.extensions;
  var mimeTypes_6 = mimeTypes.lookup;
  var mimeTypes_7 = mimeTypes.types;

  /**
   * Module dependencies.
   * @private
   */




  /**
   * Module exports.
   * @public
   */

  var typeIs = typeofrequest;
  var is = typeis;
  var hasBody = hasbody;
  var normalize_1 = normalize$3;
  var match = mimeMatch;

  /**
   * Compare a `value` content-type with `types`.
   * Each `type` can be an extension like `html`,
   * a special shortcut like `multipart` or `urlencoded`,
   * or a mime type.
   *
   * If no types match, `false` is returned.
   * Otherwise, the first `type` that matches is returned.
   *
   * @param {String} value
   * @param {Array} types
   * @public
   */

  function typeis (value, types_) {
    var i;
    var types = types_;

    // remove parameters and normalize
    var val = tryNormalizeType(value);

    // no type or invalid
    if (!val) {
      return false
    }

    // support flattened arguments
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length - 1);
      for (i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }

    // no types, return the content type
    if (!types || !types.length) {
      return val
    }

    var type;
    for (i = 0; i < types.length; i++) {
      if (mimeMatch(normalize$3(type = types[i]), val)) {
        return type[0] === '+' || type.indexOf('*') !== -1
          ? val
          : type
      }
    }

    // no matches
    return false
  }

  /**
   * Check if a request has a request body.
   * A request with a body __must__ either have `transfer-encoding`
   * or `content-length` headers set.
   * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
   *
   * @param {Object} request
   * @return {Boolean}
   * @public
   */

  function hasbody (req) {
    return req.headers['transfer-encoding'] !== undefined ||
      !isNaN(req.headers['content-length'])
  }

  /**
   * Check if the incoming request contains the "Content-Type"
   * header field, and it contains any of the give mime `type`s.
   * If there is no request body, `null` is returned.
   * If there is no content type, `false` is returned.
   * Otherwise, it returns the first `type` that matches.
   *
   * Examples:
   *
   *     // With Content-Type: text/html; charset=utf-8
   *     this.is('html'); // => 'html'
   *     this.is('text/html'); // => 'text/html'
   *     this.is('text/*', 'application/json'); // => 'text/html'
   *
   *     // When Content-Type is application/json
   *     this.is('json', 'urlencoded'); // => 'json'
   *     this.is('application/json'); // => 'application/json'
   *     this.is('html', 'application/*'); // => 'application/json'
   *
   *     this.is('html'); // => false
   *
   * @param {String|Array} types...
   * @return {String|false|null}
   * @public
   */

  function typeofrequest (req, types_) {
    var types = types_;

    // no body
    if (!hasbody(req)) {
      return null
    }

    // support flattened arguments
    if (arguments.length > 2) {
      types = new Array(arguments.length - 1);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }

    // request content type
    var value = req.headers['content-type'];

    return typeis(value, types)
  }

  /**
   * Normalize a mime type.
   * If it's a shorthand, expand it to a valid mime type.
   *
   * In general, you probably want:
   *
   *   var type = is(req, ['urlencoded', 'json', 'multipart']);
   *
   * Then use the appropriate body parsers.
   * These three are the most common request body types
   * and are thus ensured to work.
   *
   * @param {String} type
   * @private
   */

  function normalize$3 (type) {
    if (typeof type !== 'string') {
      // invalid type
      return false
    }

    switch (type) {
      case 'urlencoded':
        return 'application/x-www-form-urlencoded'
      case 'multipart':
        return 'multipart/*'
    }

    if (type[0] === '+') {
      // "+json" -> "*/*+json" expando
      return '*/*' + type
    }

    return type.indexOf('/') === -1
      ? mimeTypes.lookup(type)
      : type
  }

  /**
   * Check if `expected` mime type
   * matches `actual` mime type with
   * wildcard and +suffix support.
   *
   * @param {String} expected
   * @param {String} actual
   * @return {Boolean}
   * @private
   */

  function mimeMatch (expected, actual) {
    // invalid type
    if (expected === false) {
      return false
    }

    // split types
    var actualParts = actual.split('/');
    var expectedParts = expected.split('/');

    // invalid format
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
      return false
    }

    // validate type
    if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
      return false
    }

    // validate suffix wildcard
    if (expectedParts[1].substr(0, 2) === '*+') {
      return expectedParts[1].length <= actualParts[1].length + 1 &&
        expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length)
    }

    // validate subtype
    if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
      return false
    }

    return true
  }

  /**
   * Normalize a type and remove parameters.
   *
   * @param {string} value
   * @return {string}
   * @private
   */

  function normalizeType (value) {
    // parse the type
    var type = mediaTyper.parse(value);

    // remove the parameters
    type.parameters = undefined;

    // reformat it
    return mediaTyper.format(type)
  }

  /**
   * Try to normalize a type and remove parameters.
   *
   * @param {string} value
   * @return {string}
   * @private
   */

  function tryNormalizeType (value) {
    if (!value) {
      return null
    }

    try {
      return normalizeType(value)
    } catch (err) {
      return null
    }
  }
  typeIs.is = is;
  typeIs.hasBody = hasBody;
  typeIs.normalize = normalize_1;
  typeIs.match = match;

  /**
   * Module dependencies.
   * @private
   */




  var debug$8 = src$2('body-parser:json');



  /**
   * Module exports.
   */

  var json_1 = json;

  /**
   * RegExp to match the first non-space in a string.
   *
   * Allowed whitespace is defined in RFC 7159:
   *
   *    ws = *(
   *            %x20 /              ; Space
   *            %x09 /              ; Horizontal tab
   *            %x0A /              ; Line feed or New line
   *            %x0D )              ; Carriage return
   */

  var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*(.)/; // eslint-disable-line no-control-regex

  /**
   * Create a middleware to parse JSON bodies.
   *
   * @param {object} [options]
   * @return {function}
   * @public
   */

  function json (options) {
    var opts = options || {};

    var limit = typeof opts.limit !== 'number'
      ? bytes_1.parse(opts.limit || '100kb')
      : opts.limit;
    var inflate = opts.inflate !== false;
    var reviver = opts.reviver;
    var strict = opts.strict !== false;
    var type = opts.type || 'application/json';
    var verify = opts.verify || false;

    if (verify !== false && typeof verify !== 'function') {
      throw new TypeError('option verify must be function')
    }

    // create the appropriate type checking function
    var shouldParse = typeof type !== 'function'
      ? typeChecker(type)
      : type;

    function parse (body) {
      if (body.length === 0) {
        // special-case empty json body, as it's a common client-side mistake
        // TODO: maybe make this configurable or part of "strict" option
        return {}
      }

      if (strict) {
        var first = firstchar(body);

        if (first !== '{' && first !== '[') {
          debug$8('strict violation');
          throw createStrictSyntaxError(body, first)
        }
      }

      try {
        debug$8('parse json');
        return JSON.parse(body, reviver)
      } catch (e) {
        throw normalizeJsonSyntaxError(e, {
          message: e.message,
          stack: e.stack
        })
      }
    }

    return function jsonParser (req, res, next) {
      if (req._body) {
        debug$8('body already parsed');
        next();
        return
      }

      req.body = req.body || {};

      // skip requests without bodies
      if (!typeIs.hasBody(req)) {
        debug$8('skip empty body');
        next();
        return
      }

      debug$8('content-type %j', req.headers['content-type']);

      // determine if request should be parsed
      if (!shouldParse(req)) {
        debug$8('skip parsing');
        next();
        return
      }

      // assert charset per RFC 7159 sec 8.1
      var charset = getCharset(req) || 'utf-8';
      if (charset.substr(0, 4) !== 'utf-') {
        debug$8('invalid charset');
        next(httpErrors(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset: charset,
          type: 'charset.unsupported'
        }));
        return
      }

      // read
      read_1(req, res, next, parse, debug$8, {
        encoding: charset,
        inflate: inflate,
        limit: limit,
        verify: verify
      });
    }
  }

  /**
   * Create strict violation syntax error matching native error.
   *
   * @param {string} str
   * @param {string} char
   * @return {Error}
   * @private
   */

  function createStrictSyntaxError (str, char) {
    var index = str.indexOf(char);
    var partial = str.substring(0, index) + '#';

    try {
      JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')
    } catch (e) {
      return normalizeJsonSyntaxError(e, {
        message: e.message.replace('#', char),
        stack: e.stack
      })
    }
  }

  /**
   * Get the first non-whitespace character in a string.
   *
   * @param {string} str
   * @return {function}
   * @private
   */

  function firstchar (str) {
    return FIRST_CHAR_REGEXP.exec(str)[1]
  }

  /**
   * Get the charset of a request.
   *
   * @param {object} req
   * @api private
   */

  function getCharset (req) {
    try {
      return (contentType.parse(req).parameters.charset || '').toLowerCase()
    } catch (e) {
      return undefined
    }
  }

  /**
   * Normalize a SyntaxError for JSON.parse.
   *
   * @param {SyntaxError} error
   * @param {object} obj
   * @return {SyntaxError}
   */

  function normalizeJsonSyntaxError (error, obj) {
    var keys = Object.getOwnPropertyNames(error);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key !== 'stack' && key !== 'message') {
        delete error[key];
      }
    }

    // replace stack before message for Node.js 0.10 and below
    error.stack = obj.stack.replace(error.message, obj.message);
    error.message = obj.message;

    return error
  }

  /**
   * Get the simple type checker.
   *
   * @param {string} type
   * @return {function}
   */

  function typeChecker (type) {
    return function checkType (req) {
      return Boolean(typeIs(req, type))
    }
  }

  /**
   * Module dependencies.
   */


  var debug$9 = src$2('body-parser:raw');



  /**
   * Module exports.
   */

  var raw_1 = raw;

  /**
   * Create a middleware to parse raw bodies.
   *
   * @param {object} [options]
   * @return {function}
   * @api public
   */

  function raw (options) {
    var opts = options || {};

    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== 'number'
      ? bytes_1.parse(opts.limit || '100kb')
      : opts.limit;
    var type = opts.type || 'application/octet-stream';
    var verify = opts.verify || false;

    if (verify !== false && typeof verify !== 'function') {
      throw new TypeError('option verify must be function')
    }

    // create the appropriate type checking function
    var shouldParse = typeof type !== 'function'
      ? typeChecker$1(type)
      : type;

    function parse (buf) {
      return buf
    }

    return function rawParser (req, res, next) {
      if (req._body) {
        debug$9('body already parsed');
        next();
        return
      }

      req.body = req.body || {};

      // skip requests without bodies
      if (!typeIs.hasBody(req)) {
        debug$9('skip empty body');
        next();
        return
      }

      debug$9('content-type %j', req.headers['content-type']);

      // determine if request should be parsed
      if (!shouldParse(req)) {
        debug$9('skip parsing');
        next();
        return
      }

      // read
      read_1(req, res, next, parse, debug$9, {
        encoding: null,
        inflate: inflate,
        limit: limit,
        verify: verify
      });
    }
  }

  /**
   * Get the simple type checker.
   *
   * @param {string} type
   * @return {function}
   */

  function typeChecker$1 (type) {
    return function checkType (req) {
      return Boolean(typeIs(req, type))
    }
  }

  /**
   * Module dependencies.
   */



  var debug$a = src$2('body-parser:text');



  /**
   * Module exports.
   */

  var text_1 = text;

  /**
   * Create a middleware to parse text bodies.
   *
   * @param {object} [options]
   * @return {function}
   * @api public
   */

  function text (options) {
    var opts = options || {};

    var defaultCharset = opts.defaultCharset || 'utf-8';
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== 'number'
      ? bytes_1.parse(opts.limit || '100kb')
      : opts.limit;
    var type = opts.type || 'text/plain';
    var verify = opts.verify || false;

    if (verify !== false && typeof verify !== 'function') {
      throw new TypeError('option verify must be function')
    }

    // create the appropriate type checking function
    var shouldParse = typeof type !== 'function'
      ? typeChecker$2(type)
      : type;

    function parse (buf) {
      return buf
    }

    return function textParser (req, res, next) {
      if (req._body) {
        debug$a('body already parsed');
        next();
        return
      }

      req.body = req.body || {};

      // skip requests without bodies
      if (!typeIs.hasBody(req)) {
        debug$a('skip empty body');
        next();
        return
      }

      debug$a('content-type %j', req.headers['content-type']);

      // determine if request should be parsed
      if (!shouldParse(req)) {
        debug$a('skip parsing');
        next();
        return
      }

      // get charset
      var charset = getCharset$1(req) || defaultCharset;

      // read
      read_1(req, res, next, parse, debug$a, {
        encoding: charset,
        inflate: inflate,
        limit: limit,
        verify: verify
      });
    }
  }

  /**
   * Get the charset of a request.
   *
   * @param {object} req
   * @api private
   */

  function getCharset$1 (req) {
    try {
      return (contentType.parse(req).parameters.charset || '').toLowerCase()
    } catch (e) {
      return undefined
    }
  }

  /**
   * Get the simple type checker.
   *
   * @param {string} type
   * @return {function}
   */

  function typeChecker$2 (type) {
    return function checkType (req) {
      return Boolean(typeIs(req, type))
    }
  }

  var has$1 = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;

  var hexTable = (function () {
      var array = [];
      for (var i = 0; i < 256; ++i) {
          array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
      }

      return array;
  }());

  var compactQueue = function compactQueue(queue) {
      while (queue.length > 1) {
          var item = queue.pop();
          var obj = item.obj[item.prop];

          if (isArray(obj)) {
              var compacted = [];

              for (var j = 0; j < obj.length; ++j) {
                  if (typeof obj[j] !== 'undefined') {
                      compacted.push(obj[j]);
                  }
              }

              item.obj[item.prop] = compacted;
          }
      }
  };

  var arrayToObject = function arrayToObject(source, options) {
      var obj = options && options.plainObjects ? Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
          if (typeof source[i] !== 'undefined') {
              obj[i] = source[i];
          }
      }

      return obj;
  };

  var merge = function merge(target, source, options) {
      if (!source) {
          return target;
      }

      if (typeof source !== 'object') {
          if (isArray(target)) {
              target.push(source);
          } else if (target && typeof target === 'object') {
              if ((options && (options.plainObjects || options.allowPrototypes)) || !has$1.call(Object.prototype, source)) {
                  target[source] = true;
              }
          } else {
              return [target, source];
          }

          return target;
      }

      if (!target || typeof target !== 'object') {
          return [target].concat(source);
      }

      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
          mergeTarget = arrayToObject(target, options);
      }

      if (isArray(target) && isArray(source)) {
          source.forEach(function (item, i) {
              if (has$1.call(target, i)) {
                  var targetItem = target[i];
                  if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                      target[i] = merge(targetItem, item, options);
                  } else {
                      target.push(item);
                  }
              } else {
                  target[i] = item;
              }
          });
          return target;
      }

      return Object.keys(source).reduce(function (acc, key) {
          var value = source[key];

          if (has$1.call(acc, key)) {
              acc[key] = merge(acc[key], value, options);
          } else {
              acc[key] = value;
          }
          return acc;
      }, mergeTarget);
  };

  var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function (acc, key) {
          acc[key] = source[key];
          return acc;
      }, target);
  };

  var decode$2 = function (str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, ' ');
      if (charset === 'iso-8859-1') {
          // unescape never throws, no try...catch needed:
          return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      // utf-8
      try {
          return decodeURIComponent(strWithoutPlus);
      } catch (e) {
          return strWithoutPlus;
      }
  };

  var encode$2 = function encode(str, defaultEncoder, charset) {
      // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
      // It has been adapted here for stricter adherence to RFC 3986
      if (str.length === 0) {
          return str;
      }

      var string = typeof str === 'string' ? str : String(str);

      if (charset === 'iso-8859-1') {
          return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
              return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
          });
      }

      var out = '';
      for (var i = 0; i < string.length; ++i) {
          var c = string.charCodeAt(i);

          if (
              c === 0x2D // -
              || c === 0x2E // .
              || c === 0x5F // _
              || c === 0x7E // ~
              || (c >= 0x30 && c <= 0x39) // 0-9
              || (c >= 0x41 && c <= 0x5A) // a-z
              || (c >= 0x61 && c <= 0x7A) // A-Z
          ) {
              out += string.charAt(i);
              continue;
          }

          if (c < 0x80) {
              out = out + hexTable[c];
              continue;
          }

          if (c < 0x800) {
              out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          if (c < 0xD800 || c >= 0xE000) {
              out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
              continue;
          }

          i += 1;
          c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
          out += hexTable[0xF0 | (c >> 18)]
              + hexTable[0x80 | ((c >> 12) & 0x3F)]
              + hexTable[0x80 | ((c >> 6) & 0x3F)]
              + hexTable[0x80 | (c & 0x3F)];
      }

      return out;
  };

  var compact = function compact(value) {
      var queue = [{ obj: { o: value }, prop: 'o' }];
      var refs = [];

      for (var i = 0; i < queue.length; ++i) {
          var item = queue[i];
          var obj = item.obj[item.prop];

          var keys = Object.keys(obj);
          for (var j = 0; j < keys.length; ++j) {
              var key = keys[j];
              var val = obj[key];
              if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                  queue.push({ obj: obj, prop: key });
                  refs.push(val);
              }
          }
      }

      compactQueue(queue);

      return value;
  };

  var isRegExp = function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  var isBuffer$1 = function isBuffer(obj) {
      if (!obj || typeof obj !== 'object') {
          return false;
      }

      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };

  var combine = function combine(a, b) {
      return [].concat(a, b);
  };

  var utils$2 = {
      arrayToObject: arrayToObject,
      assign: assign,
      combine: combine,
      compact: compact,
      decode: decode$2,
      encode: encode$2,
      isBuffer: isBuffer$1,
      isRegExp: isRegExp,
      merge: merge
  };

  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;

  var formats = {
      'default': 'RFC3986',
      formatters: {
          RFC1738: function (value) {
              return replace.call(value, percentTwenties, '+');
          },
          RFC3986: function (value) {
              return value;
          }
      },
      RFC1738: 'RFC1738',
      RFC3986: 'RFC3986'
  };

  var has$2 = Object.prototype.hasOwnProperty;

  var arrayPrefixGenerators = {
      brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
          return prefix + '[]';
      },
      comma: 'comma',
      indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
          return prefix + '[' + key + ']';
      },
      repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
          return prefix;
      }
  };

  var isArray$1 = Array.isArray;
  var push$1 = Array.prototype.push;
  var pushToArray = function (arr, valueOrArray) {
      push$1.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
  };

  var toISO = Date.prototype.toISOString;

  var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: 'utf-8',
      charsetSentinel: false,
      delimiter: '&',
      encode: true,
      encoder: utils$2.encode,
      encodeValuesOnly: false,
      formatter: formats.formatters[formats['default']],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
          return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
  };

  var stringify$1 = function stringify( // eslint-disable-line func-name-matching
      object,
      prefix,
      generateArrayPrefix,
      strictNullHandling,
      skipNulls,
      encoder,
      filter,
      sort,
      allowDots,
      serializeDate,
      formatter,
      encodeValuesOnly,
      charset
  ) {
      var obj = object;
      if (typeof filter === 'function') {
          obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
          obj = serializeDate(obj);
      } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
          obj = obj.join(',');
      }

      if (obj === null) {
          if (strictNullHandling) {
              return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
          }

          obj = '';
      }

      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils$2.isBuffer(obj)) {
          if (encoder) {
              var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
              return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
          }
          return [formatter(prefix) + '=' + formatter(String(obj))];
      }

      var values = [];

      if (typeof obj === 'undefined') {
          return values;
      }

      var objKeys;
      if (isArray$1(filter)) {
          objKeys = filter;
      } else {
          var keys = Object.keys(obj);
          objKeys = sort ? keys.sort(sort) : keys;
      }

      for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];

          if (skipNulls && obj[key] === null) {
              continue;
          }

          if (isArray$1(obj)) {
              pushToArray(values, stringify(
                  obj[key],
                  typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix,
                  generateArrayPrefix,
                  strictNullHandling,
                  skipNulls,
                  encoder,
                  filter,
                  sort,
                  allowDots,
                  serializeDate,
                  formatter,
                  encodeValuesOnly,
                  charset
              ));
          } else {
              pushToArray(values, stringify(
                  obj[key],
                  prefix + (allowDots ? '.' + key : '[' + key + ']'),
                  generateArrayPrefix,
                  strictNullHandling,
                  skipNulls,
                  encoder,
                  filter,
                  sort,
                  allowDots,
                  serializeDate,
                  formatter,
                  encodeValuesOnly,
                  charset
              ));
          }
      }

      return values;
  };

  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
      if (!opts) {
          return defaults;
      }

      if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
          throw new TypeError('Encoder has to be a function.');
      }

      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
          throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
      }

      var format = formats['default'];
      if (typeof opts.format !== 'undefined') {
          if (!has$2.call(formats.formatters, opts.format)) {
              throw new TypeError('Unknown format option provided.');
          }
          format = opts.format;
      }
      var formatter = formats.formatters[format];

      var filter = defaults.filter;
      if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
          filter = opts.filter;
      }

      return {
          addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
          allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
          charset: charset,
          charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
          delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
          encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
          encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
          encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
          filter: filter,
          formatter: formatter,
          serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
          skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
          sort: typeof opts.sort === 'function' ? opts.sort : null,
          strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
      };
  };

  var stringify_1 = function (object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);

      var objKeys;
      var filter;

      if (typeof options.filter === 'function') {
          filter = options.filter;
          obj = filter('', obj);
      } else if (isArray$1(options.filter)) {
          filter = options.filter;
          objKeys = filter;
      }

      var keys = [];

      if (typeof obj !== 'object' || obj === null) {
          return '';
      }

      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
          arrayFormat = opts.arrayFormat;
      } else if (opts && 'indices' in opts) {
          arrayFormat = opts.indices ? 'indices' : 'repeat';
      } else {
          arrayFormat = 'indices';
      }

      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

      if (!objKeys) {
          objKeys = Object.keys(obj);
      }

      if (options.sort) {
          objKeys.sort(options.sort);
      }

      for (var i = 0; i < objKeys.length; ++i) {
          var key = objKeys[i];

          if (options.skipNulls && obj[key] === null) {
              continue;
          }
          pushToArray(keys, stringify$1(
              obj[key],
              key,
              generateArrayPrefix,
              options.strictNullHandling,
              options.skipNulls,
              options.encode ? options.encoder : null,
              options.filter,
              options.sort,
              options.allowDots,
              options.serializeDate,
              options.formatter,
              options.encodeValuesOnly,
              options.charset
          ));
      }

      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? '?' : '';

      if (options.charsetSentinel) {
          if (options.charset === 'iso-8859-1') {
              // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
              prefix += 'utf8=%26%2310003%3B&';
          } else {
              // encodeURIComponent('✓')
              prefix += 'utf8=%E2%9C%93&';
          }
      }

      return joined.length > 0 ? prefix + joined : '';
  };

  var has$3 = Object.prototype.hasOwnProperty;

  var defaults$1 = {
      allowDots: false,
      allowPrototypes: false,
      arrayLimit: 20,
      charset: 'utf-8',
      charsetSentinel: false,
      comma: false,
      decoder: utils$2.decode,
      delimiter: '&',
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1000,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
  };

  var interpretNumericEntities = function (str) {
      return str.replace(/&#(\d+);/g, function ($0, numberStr) {
          return String.fromCharCode(parseInt(numberStr, 10));
      });
  };

  // This is what browsers will submit when the ✓ character occurs in an
  // application/x-www-form-urlencoded body and the encoding of the page containing
  // the form is iso-8859-1, or when the submitted form has an accept-charset
  // attribute of iso-8859-1. Presumably also with other charsets that do not contain
  // the ✓ character, such as us-ascii.
  var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

  // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
  var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

  var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
      var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1; // Keep track of where the utf8 sentinel was found
      var i;

      var charset = options.charset;
      if (options.charsetSentinel) {
          for (i = 0; i < parts.length; ++i) {
              if (parts[i].indexOf('utf8=') === 0) {
                  if (parts[i] === charsetSentinel) {
                      charset = 'utf-8';
                  } else if (parts[i] === isoSentinel) {
                      charset = 'iso-8859-1';
                  }
                  skipIndex = i;
                  i = parts.length; // The eslint settings do not allow break;
              }
          }
      }

      for (i = 0; i < parts.length; ++i) {
          if (i === skipIndex) {
              continue;
          }
          var part = parts[i];

          var bracketEqualsPos = part.indexOf(']=');
          var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

          var key, val;
          if (pos === -1) {
              key = options.decoder(part, defaults$1.decoder, charset);
              val = options.strictNullHandling ? null : '';
          } else {
              key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset);
              val = options.decoder(part.slice(pos + 1), defaults$1.decoder, charset);
          }

          if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
              val = interpretNumericEntities(val);
          }

          if (val && options.comma && val.indexOf(',') > -1) {
              val = val.split(',');
          }

          if (has$3.call(obj, key)) {
              obj[key] = utils$2.combine(obj[key], val);
          } else {
              obj[key] = val;
          }
      }

      return obj;
  };

  var parseObject = function (chain, val, options) {
      var leaf = val;

      for (var i = chain.length - 1; i >= 0; --i) {
          var obj;
          var root = chain[i];

          if (root === '[]' && options.parseArrays) {
              obj = [].concat(leaf);
          } else {
              obj = options.plainObjects ? Object.create(null) : {};
              var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
              var index = parseInt(cleanRoot, 10);
              if (!options.parseArrays && cleanRoot === '') {
                  obj = { 0: leaf };
              } else if (
                  !isNaN(index)
                  && root !== cleanRoot
                  && String(index) === cleanRoot
                  && index >= 0
                  && (options.parseArrays && index <= options.arrayLimit)
              ) {
                  obj = [];
                  obj[index] = leaf;
              } else {
                  obj[cleanRoot] = leaf;
              }
          }

          leaf = obj;
      }

      return leaf;
  };

  var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
      if (!givenKey) {
          return;
      }

      // Transform dot notation to bracket notation
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

      // The regex chunks

      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;

      // Get the parent

      var segment = brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;

      // Stash the parent if it exists

      var keys = [];
      if (parent) {
          // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
          if (!options.plainObjects && has$3.call(Object.prototype, parent)) {
              if (!options.allowPrototypes) {
                  return;
              }
          }

          keys.push(parent);
      }

      // Loop through children appending to the array until we hit depth

      var i = 0;
      while ((segment = child.exec(key)) !== null && i < options.depth) {
          i += 1;
          if (!options.plainObjects && has$3.call(Object.prototype, segment[1].slice(1, -1))) {
              if (!options.allowPrototypes) {
                  return;
              }
          }
          keys.push(segment[1]);
      }

      // If there's a remainder, just add whatever is left

      if (segment) {
          keys.push('[' + key.slice(segment.index) + ']');
      }

      return parseObject(keys, val, options);
  };

  var normalizeParseOptions = function normalizeParseOptions(opts) {
      if (!opts) {
          return defaults$1;
      }

      if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
          throw new TypeError('Decoder has to be a function.');
      }

      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
          throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
      }
      var charset = typeof opts.charset === 'undefined' ? defaults$1.charset : opts.charset;

      return {
          allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
          allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$1.allowPrototypes,
          arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$1.arrayLimit,
          charset: charset,
          charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
          comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$1.comma,
          decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$1.decoder,
          delimiter: typeof opts.delimiter === 'string' || utils$2.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
          depth: typeof opts.depth === 'number' ? opts.depth : defaults$1.depth,
          ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
          interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
          parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$1.parameterLimit,
          parseArrays: opts.parseArrays !== false,
          plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$1.plainObjects,
          strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
      };
  };

  var parse$9 = function (str, opts) {
      var options = normalizeParseOptions(opts);

      if (str === '' || str === null || typeof str === 'undefined') {
          return options.plainObjects ? Object.create(null) : {};
      }

      var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
      var obj = options.plainObjects ? Object.create(null) : {};

      // Iterate over the keys and setup the new object

      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var newObj = parseKeys(key, tempObj[key], options);
          obj = utils$2.merge(obj, newObj, options);
      }

      return utils$2.compact(obj);
  };

  var lib$8 = {
      formats: formats,
      parse: parse$9,
      stringify: stringify_1
  };

  /**
   * Module dependencies.
   * @private
   */




  var debug$b = src$2('body-parser:urlencoded');
  var deprecate = depd_1('body-parser');



  /**
   * Module exports.
   */

  var urlencoded_1 = urlencoded;

  /**
   * Cache of parser modules.
   */

  var parsers = Object.create(null);

  /**
   * Create a middleware to parse urlencoded bodies.
   *
   * @param {object} [options]
   * @return {function}
   * @public
   */

  function urlencoded (options) {
    var opts = options || {};

    // notice because option default will flip in next major
    if (opts.extended === undefined) {
      deprecate('undefined extended: provide extended option');
    }

    var extended = opts.extended !== false;
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== 'number'
      ? bytes_1.parse(opts.limit || '100kb')
      : opts.limit;
    var type = opts.type || 'application/x-www-form-urlencoded';
    var verify = opts.verify || false;

    if (verify !== false && typeof verify !== 'function') {
      throw new TypeError('option verify must be function')
    }

    // create the appropriate query parser
    var queryparse = extended
      ? extendedparser(opts)
      : simpleparser(opts);

    // create the appropriate type checking function
    var shouldParse = typeof type !== 'function'
      ? typeChecker$3(type)
      : type;

    function parse (body) {
      return body.length
        ? queryparse(body)
        : {}
    }

    return function urlencodedParser (req, res, next) {
      if (req._body) {
        debug$b('body already parsed');
        next();
        return
      }

      req.body = req.body || {};

      // skip requests without bodies
      if (!typeIs.hasBody(req)) {
        debug$b('skip empty body');
        next();
        return
      }

      debug$b('content-type %j', req.headers['content-type']);

      // determine if request should be parsed
      if (!shouldParse(req)) {
        debug$b('skip parsing');
        next();
        return
      }

      // assert charset
      var charset = getCharset$2(req) || 'utf-8';
      if (charset !== 'utf-8') {
        debug$b('invalid charset');
        next(httpErrors(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset: charset,
          type: 'charset.unsupported'
        }));
        return
      }

      // read
      read_1(req, res, next, parse, debug$b, {
        debug: debug$b,
        encoding: charset,
        inflate: inflate,
        limit: limit,
        verify: verify
      });
    }
  }

  /**
   * Get the extended query parser.
   *
   * @param {object} options
   */

  function extendedparser (options) {
    var parameterLimit = options.parameterLimit !== undefined
      ? options.parameterLimit
      : 1000;
    var parse = parser$2('qs');

    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError('option parameterLimit must be a positive number')
    }

    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }

    return function queryparse (body) {
      var paramCount = parameterCount(body, parameterLimit);

      if (paramCount === undefined) {
        debug$b('too many parameters');
        throw httpErrors(413, 'too many parameters', {
          type: 'parameters.too.many'
        })
      }

      var arrayLimit = Math.max(100, paramCount);

      debug$b('parse extended urlencoding');
      return parse(body, {
        allowPrototypes: true,
        arrayLimit: arrayLimit,
        depth: Infinity,
        parameterLimit: parameterLimit
      })
    }
  }

  /**
   * Get the charset of a request.
   *
   * @param {object} req
   * @api private
   */

  function getCharset$2 (req) {
    try {
      return (contentType.parse(req).parameters.charset || '').toLowerCase()
    } catch (e) {
      return undefined
    }
  }

  /**
   * Count the number of parameters, stopping once limit reached
   *
   * @param {string} body
   * @param {number} limit
   * @api private
   */

  function parameterCount (body, limit) {
    var count = 0;
    var index = 0;

    while ((index = body.indexOf('&', index)) !== -1) {
      count++;
      index++;

      if (count === limit) {
        return undefined
      }
    }

    return count
  }

  /**
   * Get parser for module name dynamically.
   *
   * @param {string} name
   * @return {function}
   * @api private
   */

  function parser$2 (name) {
    var mod = parsers[name];

    if (mod !== undefined) {
      return mod.parse
    }

    // this uses a switch for static require analysis
    switch (name) {
      case 'qs':
        mod = lib$8;
        break
      case 'querystring':
        mod = querystring;
        break
    }

    // store to prevent invoking require()
    parsers[name] = mod;

    return mod.parse
  }

  /**
   * Get the simple query parser.
   *
   * @param {object} options
   */

  function simpleparser (options) {
    var parameterLimit = options.parameterLimit !== undefined
      ? options.parameterLimit
      : 1000;
    var parse = parser$2('querystring');

    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError('option parameterLimit must be a positive number')
    }

    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }

    return function queryparse (body) {
      var paramCount = parameterCount(body, parameterLimit);

      if (paramCount === undefined) {
        debug$b('too many parameters');
        throw httpErrors(413, 'too many parameters', {
          type: 'parameters.too.many'
        })
      }

      debug$b('parse urlencoding');
      return parse(body, undefined, undefined, { maxKeys: parameterLimit })
    }
  }

  /**
   * Get the simple type checker.
   *
   * @param {string} type
   * @return {function}
   */

  function typeChecker$3 (type) {
    return function checkType (req) {
      return Boolean(typeIs(req, type))
    }
  }

  var bodyParser_1 = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @private
   */

  var deprecate = depd_1('body-parser');

  /**
   * Cache of loaded parsers.
   * @private
   */

  var parsers = Object.create(null);

  /**
   * @typedef Parsers
   * @type {function}
   * @property {function} json
   * @property {function} raw
   * @property {function} text
   * @property {function} urlencoded
   */

  /**
   * Module exports.
   * @type {Parsers}
   */

  exports = module.exports = deprecate.function(bodyParser,
    'bodyParser: use individual json/urlencoded middlewares');

  /**
   * JSON parser.
   * @public
   */

  Object.defineProperty(exports, 'json', {
    configurable: true,
    enumerable: true,
    get: createParserGetter('json')
  });

  /**
   * Raw parser.
   * @public
   */

  Object.defineProperty(exports, 'raw', {
    configurable: true,
    enumerable: true,
    get: createParserGetter('raw')
  });

  /**
   * Text parser.
   * @public
   */

  Object.defineProperty(exports, 'text', {
    configurable: true,
    enumerable: true,
    get: createParserGetter('text')
  });

  /**
   * URL-encoded parser.
   * @public
   */

  Object.defineProperty(exports, 'urlencoded', {
    configurable: true,
    enumerable: true,
    get: createParserGetter('urlencoded')
  });

  /**
   * Create a middleware to parse json and urlencoded bodies.
   *
   * @param {object} [options]
   * @return {function}
   * @deprecated
   * @public
   */

  function bodyParser (options) {
    var opts = {};

    // exclude type option
    if (options) {
      for (var prop in options) {
        if (prop !== 'type') {
          opts[prop] = options[prop];
        }
      }
    }

    var _urlencoded = exports.urlencoded(opts);
    var _json = exports.json(opts);

    return function bodyParser (req, res, next) {
      _json(req, res, function (err) {
        if (err) return next(err)
        _urlencoded(req, res, next);
      });
    }
  }

  /**
   * Create a getter for loading a parser.
   * @private
   */

  function createParserGetter (name) {
    return function get () {
      return loadParser(name)
    }
  }

  /**
   * Load a parser module.
   * @private
   */

  function loadParser (parserName) {
    var parser = parsers[parserName];

    if (parser !== undefined) {
      return parser
    }

    // this uses a switch for static require analysis
    switch (parserName) {
      case 'json':
        parser = json_1;
        break
      case 'raw':
        parser = raw_1;
        break
      case 'text':
        parser = text_1;
        break
      case 'urlencoded':
        parser = urlencoded_1;
        break
    }

    // store to prevent invoking require()
    return (parsers[parserName] = parser)
  }
  });

  /*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var mergeDescriptors = merge$1;

  /**
   * Module variables.
   * @private
   */

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /**
   * Merge the property descriptors of `src` into `dest`
   *
   * @param {object} dest Object to add descriptors to
   * @param {object} src Object to clone descriptors from
   * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
   * @returns {object} Reference to dest
   * @public
   */

  function merge$1(dest, src, redefine) {
    if (!dest) {
      throw new TypeError('argument dest is required')
    }

    if (!src) {
      throw new TypeError('argument src is required')
    }

    if (redefine === undefined) {
      // Default to true
      redefine = true;
    }

    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
      if (!redefine && hasOwnProperty.call(dest, name)) {
        // Skip desriptor
        return
      }

      // Copy descriptor
      var descriptor = Object.getOwnPropertyDescriptor(src, name);
      Object.defineProperty(dest, name, descriptor);
    });

    return dest
  }

  /**
   * Helpers.
   */

  var s$3 = 1000;
  var m$3 = s$3 * 60;
  var h$3 = m$3 * 60;
  var d$3 = h$3 * 24;
  var y$4 = d$3 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$3 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$a(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$3(val) : fmtShort$3(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$a(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$4;
      case 'days':
      case 'day':
      case 'd':
        return n * d$3;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$3;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$3;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$3;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$3(ms) {
    if (ms >= d$3) {
      return Math.round(ms / d$3) + 'd';
    }
    if (ms >= h$3) {
      return Math.round(ms / h$3) + 'h';
    }
    if (ms >= m$3) {
      return Math.round(ms / m$3) + 'm';
    }
    if (ms >= s$3) {
      return Math.round(ms / s$3) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$3(ms) {
    return plural$3(ms, d$3, 'day') ||
      plural$3(ms, h$3, 'hour') ||
      plural$3(ms, m$3, 'minute') ||
      plural$3(ms, s$3, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$3(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug$c = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$3;

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    return debug;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1$2 = debug$c.coerce;
  var debug_2$2 = debug$c.disable;
  var debug_3$2 = debug$c.enable;
  var debug_4$2 = debug$c.enabled;
  var debug_5$2 = debug$c.humanize;
  var debug_6$2 = debug$c.names;
  var debug_7$2 = debug$c.skips;
  var debug_8$2 = debug$c.formatters;

  var browser$3 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$c;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1$3 = browser$3.log;
  var browser_2$3 = browser$3.formatArgs;
  var browser_3$3 = browser$3.save;
  var browser_4$3 = browser$3.load;
  var browser_5$3 = browser$3.useColors;
  var browser_6$3 = browser$3.storage;
  var browser_7$3 = browser$3.colors;

  var node$3 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$c;
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // camel-case
    var prop = key
      .substring(6)
      .toLowerCase()
      .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === 'null') val = null;
    else val = Number(val);

    obj[prop] = val;
    return obj;
  }, {});

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

  if (1 !== fd && 2 !== fd) {
    util$2.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
  }

  var stream = 1 === fd ? process.stdout :
               2 === fd ? process.stderr :
               createWritableStdioStream(fd);

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty.isatty(fd);
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts)
      .split('\n').map(function(str) {
        return str.trim()
      }).join(' ');
  };

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts);
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = new Date().toUTCString()
        + ' ' + name + ' ' + args[0];
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to `stream`.
   */

  function log() {
    return stream.write(util$2.format.apply(util$2, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream (fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      case 'FILE':
        var fs$1 = fs;
        stream = new fs$1.SyncWriteStream(fd, { autoClose: false });
        stream._type = 'fs';
        break;

      case 'PIPE':
      case 'TCP':
        var net$1 = net;
        stream = new net$1.Socket({
          fd: fd,
          readable: false,
          writable: true
        });

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!');
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd;

    stream._isStdio = true;

    return stream;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init (debug) {
    debug.inspectOpts = {};

    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());
  });
  var node_1$3 = node$3.init;
  var node_2$3 = node$3.log;
  var node_3$3 = node$3.formatArgs;
  var node_4$3 = node$3.save;
  var node_5$3 = node$3.load;
  var node_6$3 = node$3.useColors;
  var node_7$3 = node$3.colors;
  var node_8$3 = node$3.inspectOpts;

  var src$3 = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process !== 'undefined' && process.type === 'renderer') {
    module.exports = browser$3;
  } else {
    module.exports = node$3;
  }
  });

  /*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var encodeurl = encodeUrl;

  /**
   * RegExp to match non-URL code points, *after* encoding (i.e. not including "%")
   * and including invalid escape sequences.
   * @private
   */

  var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;

  /**
   * RegExp to match unmatched surrogate pair.
   * @private
   */

  var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;

  /**
   * String to replace unmatched surrogate pair with.
   * @private
   */

  var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2';

  /**
   * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
   *
   * This function will take an already-encoded URL and encode all the non-URL
   * code points. This function will not encode the "%" character unless it is
   * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
   * be encoded as `%25foo`).
   *
   * This encode is meant to be "safe" and does not throw errors. It will try as
   * hard as it can to properly encode the given URL, including replacing any raw,
   * unpaired surrogate pairs with the Unicode replacement character prior to
   * encoding.
   *
   * @param {string} url
   * @return {string}
   * @public
   */

  function encodeUrl (url) {
    return String(url)
      .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)
      .replace(ENCODE_CHARS_REGEXP, encodeURI)
  }

  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */

  /**
   * Module variables.
   * @private
   */

  var matchHtmlRegExp = /["'&<>]/;

  /**
   * Module exports.
   * @public
   */

  var escapeHtml_1 = escapeHtml;

  /**
   * Escape special characters in the given string of html.
   *
   * @param  {string} string The string to escape for inserting into HTML
   * @return {string}
   * @public
   */

  function escapeHtml(string) {
    var str = '' + string;
    var match = matchHtmlRegExp.exec(str);

    if (!match) {
      return str;
    }

    var escape;
    var html = '';
    var index = 0;
    var lastIndex = 0;

    for (index = match.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34: // "
          escape = '&quot;';
          break;
        case 38: // &
          escape = '&amp;';
          break;
        case 39: // '
          escape = '&#39;';
          break;
        case 60: // <
          escape = '&lt;';
          break;
        case 62: // >
          escape = '&gt;';
          break;
        default:
          continue;
      }

      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }

      lastIndex = index + 1;
      html += escape;
    }

    return lastIndex !== index
      ? html + str.substring(lastIndex, index)
      : html;
  }

  /**
   * Module dependencies.
   * @private
   */


  var parse$b = url$1.parse;
  var Url = url$1.Url;

  /**
   * Module exports.
   * @public
   */

  var parseurl_1 = parseurl;
  var original = originalurl;

  /**
   * Parse the `req` url with memoization.
   *
   * @param {ServerRequest} req
   * @return {Object}
   * @public
   */

  function parseurl (req) {
    var url = req.url;

    if (url === undefined) {
      // URL is undefined
      return undefined
    }

    var parsed = req._parsedUrl;

    if (fresh(url, parsed)) {
      // Return cached URL parse
      return parsed
    }

    // Parse the URL
    parsed = fastparse(url);
    parsed._raw = url;

    return (req._parsedUrl = parsed)
  }
  /**
   * Parse the `req` original url with fallback and memoization.
   *
   * @param {ServerRequest} req
   * @return {Object}
   * @public
   */

  function originalurl (req) {
    var url = req.originalUrl;

    if (typeof url !== 'string') {
      // Fallback
      return parseurl(req)
    }

    var parsed = req._parsedOriginalUrl;

    if (fresh(url, parsed)) {
      // Return cached URL parse
      return parsed
    }

    // Parse the URL
    parsed = fastparse(url);
    parsed._raw = url;

    return (req._parsedOriginalUrl = parsed)
  }
  /**
   * Parse the `str` url with fast-path short-cut.
   *
   * @param {string} str
   * @return {Object}
   * @private
   */

  function fastparse (str) {
    if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {
      return parse$b(str)
    }

    var pathname = str;
    var query = null;
    var search = null;

    // This takes the regexp from https://github.com/joyent/node/pull/7878
    // Which is /^(\/[^?#\s]*)(\?[^#\s]*)?$/
    // And unrolls it into a for loop
    for (var i = 1; i < str.length; i++) {
      switch (str.charCodeAt(i)) {
        case 0x3f: /* ?  */
          if (search === null) {
            pathname = str.substring(0, i);
            query = str.substring(i + 1);
            search = str.substring(i);
          }
          break
        case 0x09: /* \t */
        case 0x0a: /* \n */
        case 0x0c: /* \f */
        case 0x0d: /* \r */
        case 0x20: /*    */
        case 0x23: /* #  */
        case 0xa0:
        case 0xfeff:
          return parse$b(str)
      }
    }

    var url = Url !== undefined
      ? new Url()
      : {};

    url.path = str;
    url.href = str;
    url.pathname = pathname;

    if (search !== null) {
      url.query = query;
      url.search = search;
    }

    return url
  }

  /**
   * Determine if parsed is still fresh for url.
   *
   * @param {string} url
   * @param {object} parsedUrl
   * @return {boolean}
   * @private
   */

  function fresh (url, parsedUrl) {
    return typeof parsedUrl === 'object' &&
      parsedUrl !== null &&
      (Url === undefined || parsedUrl instanceof Url) &&
      parsedUrl._raw === url
  }
  parseurl_1.original = original;

  /**
   * Module dependencies.
   * @private
   */

  var debug$d = src$3('finalhandler');







  /**
   * Module variables.
   * @private
   */

  var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
  var NEWLINE_REGEXP = /\n/g;

  /* istanbul ignore next */
  var defer$1 = typeof setImmediate === 'function'
    ? setImmediate
    : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)); };
  var isFinished$1 = onFinished_1.isFinished;

  /**
   * Create a minimal HTML document.
   *
   * @param {string} message
   * @private
   */

  function createHtmlDocument (message) {
    var body = escapeHtml_1(message)
      .replace(NEWLINE_REGEXP, '<br>')
      .replace(DOUBLE_SPACE_REGEXP, ' &nbsp;');

    return '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>' + body + '</pre>\n' +
      '</body>\n' +
      '</html>\n'
  }

  /**
   * Module exports.
   * @public
   */

  var finalhandler_1 = finalhandler;

  /**
   * Create a function to handle the final response.
   *
   * @param {Request} req
   * @param {Response} res
   * @param {Object} [options]
   * @return {Function}
   * @public
   */

  function finalhandler (req, res, options) {
    var opts = options || {};

    // get environment
    var env = opts.env || process.env.NODE_ENV || 'development';

    // get error callback
    var onerror = opts.onerror;

    return function (err) {
      var headers;
      var msg;
      var status;

      // ignore 404 on in-flight response
      if (!err && headersSent(res)) {
        debug$d('cannot 404 after headers sent');
        return
      }

      // unhandled error
      if (err) {
        // respect status code from error
        status = getErrorStatusCode(err);

        if (status === undefined) {
          // fallback to status code on response
          status = getResponseStatusCode(res);
        } else {
          // respect headers from error
          headers = getErrorHeaders(err);
        }

        // get error message
        msg = getErrorMessage(err, status, env);
      } else {
        // not found
        status = 404;
        msg = 'Cannot ' + req.method + ' ' + encodeurl(getResourceName(req));
      }

      debug$d('default %s', status);

      // schedule onerror callback
      if (err && onerror) {
        defer$1(onerror, err, req, res);
      }

      // cannot actually respond
      if (headersSent(res)) {
        debug$d('cannot %d after headers sent', status);
        req.socket.destroy();
        return
      }

      // send response
      send(req, res, status, headers, msg);
    }
  }

  /**
   * Get headers from Error object.
   *
   * @param {Error} err
   * @return {object}
   * @private
   */

  function getErrorHeaders (err) {
    if (!err.headers || typeof err.headers !== 'object') {
      return undefined
    }

    var headers = Object.create(null);
    var keys = Object.keys(err.headers);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      headers[key] = err.headers[key];
    }

    return headers
  }

  /**
   * Get message from Error object, fallback to status message.
   *
   * @param {Error} err
   * @param {number} status
   * @param {string} env
   * @return {string}
   * @private
   */

  function getErrorMessage (err, status, env) {
    var msg;

    if (env !== 'production') {
      // use err.stack, which typically includes err.message
      msg = err.stack;

      // fallback to err.toString() when possible
      if (!msg && typeof err.toString === 'function') {
        msg = err.toString();
      }
    }

    return msg || statuses[status]
  }

  /**
   * Get status code from Error object.
   *
   * @param {Error} err
   * @return {number}
   * @private
   */

  function getErrorStatusCode (err) {
    // check err.status
    if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {
      return err.status
    }

    // check err.statusCode
    if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {
      return err.statusCode
    }

    return undefined
  }

  /**
   * Get resource name for the request.
   *
   * This is typically just the original pathname of the request
   * but will fallback to "resource" is that cannot be determined.
   *
   * @param {IncomingMessage} req
   * @return {string}
   * @private
   */

  function getResourceName (req) {
    try {
      return parseurl_1.original(req).pathname
    } catch (e) {
      return 'resource'
    }
  }

  /**
   * Get status code from response.
   *
   * @param {OutgoingMessage} res
   * @return {number}
   * @private
   */

  function getResponseStatusCode (res) {
    var status = res.statusCode;

    // default status code to 500 if outside valid range
    if (typeof status !== 'number' || status < 400 || status > 599) {
      status = 500;
    }

    return status
  }

  /**
   * Determine if the response headers have been sent.
   *
   * @param {object} res
   * @returns {boolean}
   * @private
   */

  function headersSent (res) {
    return typeof res.headersSent !== 'boolean'
      ? Boolean(res._header)
      : res.headersSent
  }

  /**
   * Send response.
   *
   * @param {IncomingMessage} req
   * @param {OutgoingMessage} res
   * @param {number} status
   * @param {object} headers
   * @param {string} message
   * @private
   */

  function send (req, res, status, headers, message) {
    function write () {
      // response body
      var body = createHtmlDocument(message);

      // response status
      res.statusCode = status;
      res.statusMessage = statuses[status];

      // response headers
      setHeaders(res, headers);

      // security headers
      res.setHeader('Content-Security-Policy', "default-src 'none'");
      res.setHeader('X-Content-Type-Options', 'nosniff');

      // standard headers
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
      res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));

      if (req.method === 'HEAD') {
        res.end();
        return
      }

      res.end(body, 'utf8');
    }

    if (isFinished$1(req)) {
      write();
      return
    }

    // unpipe everything from the request
    unpipe_1(req);

    // flush the request
    onFinished_1(req, write);
    req.resume();
  }

  /**
   * Set response headers from an object.
   *
   * @param {OutgoingMessage} res
   * @param {object} headers
   * @private
   */

  function setHeaders (res, headers) {
    if (!headers) {
      return
    }

    var keys = Object.keys(headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  }

  /**
   * Helpers.
   */

  var s$4 = 1000;
  var m$4 = s$4 * 60;
  var h$4 = m$4 * 60;
  var d$4 = h$4 * 24;
  var y$5 = d$4 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$4 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$c(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$4(val) : fmtShort$4(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$c(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$5;
      case 'days':
      case 'day':
      case 'd':
        return n * d$4;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$4;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$4;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$4;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$4(ms) {
    if (ms >= d$4) {
      return Math.round(ms / d$4) + 'd';
    }
    if (ms >= h$4) {
      return Math.round(ms / h$4) + 'h';
    }
    if (ms >= m$4) {
      return Math.round(ms / m$4) + 'm';
    }
    if (ms >= s$4) {
      return Math.round(ms / s$4) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$4(ms) {
    return plural$4(ms, d$4, 'day') ||
      plural$4(ms, h$4, 'hour') ||
      plural$4(ms, m$4, 'minute') ||
      plural$4(ms, s$4, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$4(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug$e = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$4;

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    return debug;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1$3 = debug$e.coerce;
  var debug_2$3 = debug$e.disable;
  var debug_3$3 = debug$e.enable;
  var debug_4$3 = debug$e.enabled;
  var debug_5$3 = debug$e.humanize;
  var debug_6$3 = debug$e.names;
  var debug_7$3 = debug$e.skips;
  var debug_8$3 = debug$e.formatters;

  var browser$4 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$e;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1$4 = browser$4.log;
  var browser_2$4 = browser$4.formatArgs;
  var browser_3$4 = browser$4.save;
  var browser_4$4 = browser$4.load;
  var browser_5$4 = browser$4.useColors;
  var browser_6$4 = browser$4.storage;
  var browser_7$4 = browser$4.colors;

  var node$4 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$e;
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // camel-case
    var prop = key
      .substring(6)
      .toLowerCase()
      .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === 'null') val = null;
    else val = Number(val);

    obj[prop] = val;
    return obj;
  }, {});

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

  if (1 !== fd && 2 !== fd) {
    util$2.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
  }

  var stream = 1 === fd ? process.stdout :
               2 === fd ? process.stderr :
               createWritableStdioStream(fd);

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty.isatty(fd);
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts)
      .split('\n').map(function(str) {
        return str.trim()
      }).join(' ');
  };

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts);
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = new Date().toUTCString()
        + ' ' + name + ' ' + args[0];
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to `stream`.
   */

  function log() {
    return stream.write(util$2.format.apply(util$2, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream (fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      case 'FILE':
        var fs$1 = fs;
        stream = new fs$1.SyncWriteStream(fd, { autoClose: false });
        stream._type = 'fs';
        break;

      case 'PIPE':
      case 'TCP':
        var net$1 = net;
        stream = new net$1.Socket({
          fd: fd,
          readable: false,
          writable: true
        });

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!');
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd;

    stream._isStdio = true;

    return stream;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init (debug) {
    debug.inspectOpts = {};

    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());
  });
  var node_1$4 = node$4.init;
  var node_2$4 = node$4.log;
  var node_3$4 = node$4.formatArgs;
  var node_4$4 = node$4.save;
  var node_5$4 = node$4.load;
  var node_6$4 = node$4.useColors;
  var node_7$4 = node$4.colors;
  var node_8$4 = node$4.inspectOpts;

  var src$4 = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process !== 'undefined' && process.type === 'renderer') {
    module.exports = browser$4;
  } else {
    module.exports = node$4;
  }
  });

  /**
   * Expose `arrayFlatten`.
   */
  var arrayFlatten_1 = arrayFlatten;

  /**
   * Recursive flatten function with depth.
   *
   * @param  {Array}  array
   * @param  {Array}  result
   * @param  {Number} depth
   * @return {Array}
   */
  function flattenWithDepth (array, result, depth) {
    for (var i = 0; i < array.length; i++) {
      var value = array[i];

      if (depth > 0 && Array.isArray(value)) {
        flattenWithDepth(value, result, depth - 1);
      } else {
        result.push(value);
      }
    }

    return result
  }

  /**
   * Recursive flatten function. Omitting depth is slightly faster.
   *
   * @param  {Array} array
   * @param  {Array} result
   * @return {Array}
   */
  function flattenForever (array, result) {
    for (var i = 0; i < array.length; i++) {
      var value = array[i];

      if (Array.isArray(value)) {
        flattenForever(value, result);
      } else {
        result.push(value);
      }
    }

    return result
  }

  /**
   * Flatten an array, with the ability to define a depth.
   *
   * @param  {Array}  array
   * @param  {Number} depth
   * @return {Array}
   */
  function arrayFlatten (array, depth) {
    if (depth == null) {
      return flattenForever(array, [])
    }

    return flattenWithDepth(array, [], depth)
  }

  /**
   * Expose `pathtoRegexp`.
   */

  var pathToRegexp = pathtoRegexp;

  /**
   * Match matching groups in a regular expression.
   */
  var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

  /**
   * Normalize the given path string,
   * returning a regular expression.
   *
   * An empty array should be passed,
   * which will contain the placeholder
   * key names. For example "/user/:id" will
   * then contain ["id"].
   *
   * @param  {String|RegExp|Array} path
   * @param  {Array} keys
   * @param  {Object} options
   * @return {RegExp}
   * @api private
   */

  function pathtoRegexp(path, keys, options) {
    options = options || {};
    keys = keys || [];
    var strict = options.strict;
    var end = options.end !== false;
    var flags = options.sensitive ? '' : 'i';
    var extraOffset = 0;
    var keysOffset = keys.length;
    var i = 0;
    var name = 0;
    var m;

    if (path instanceof RegExp) {
      while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
        keys.push({
          name: name++,
          optional: false,
          offset: m.index
        });
      }

      return path;
    }

    if (Array.isArray(path)) {
      // Map array parts into regexps and return their source. We also pass
      // the same keys and options instance into every generation to get
      // consistent matching groups before we join the sources together.
      path = path.map(function (value) {
        return pathtoRegexp(value, keys, options).source;
      });

      return new RegExp('(?:' + path.join('|') + ')', flags);
    }

    path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
      .replace(/\/\(/g, '/(?:')
      .replace(/([\/\.])/g, '\\$1')
      .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
        slash = slash || '';
        format = format || '';
        capture = capture || '([^\\/' + format + ']+?)';
        optional = optional || '';

        keys.push({
          name: key,
          optional: !!optional,
          offset: offset + extraOffset
        });

        var result = ''
          + (optional ? '' : slash)
          + '(?:'
          + format + (optional ? slash : '') + capture
          + (star ? '((?:[\\/' + format + '].+?)?)' : '')
          + ')'
          + optional;

        extraOffset += result.length - match.length;

        return result;
      })
      .replace(/\*/g, function (star, index) {
        var len = keys.length;

        while (len-- > keysOffset && keys[len].offset > index) {
          keys[len].offset += 3; // Replacement length minus asterisk length.
        }

        return '(.*)';
      });

    // This is a workaround for handling unnamed matching groups.
    while (m = MATCHING_GROUP_REGEXP.exec(path)) {
      var escapeCount = 0;
      var index = m.index;

      while (path.charAt(--index) === '\\') {
        escapeCount++;
      }

      // It's possible to escape the bracket.
      if (escapeCount % 2 === 1) {
        continue;
      }

      if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
        keys.splice(keysOffset + i, 0, {
          name: name++, // Unnamed matching groups must be consistently linear.
          optional: false,
          offset: m.index
        });
      }

      i++;
    }

    // If the path is non-ending, match until the end or a slash.
    path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

    return new RegExp(path, flags);
  }

  /**
   * Module dependencies.
   * @private
   */


  var debug$f = src$4('express:router:layer');

  /**
   * Module variables.
   * @private
   */

  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

  /**
   * Module exports.
   * @public
   */

  var layer = Layer;

  function Layer(path, options, fn) {
    if (!(this instanceof Layer)) {
      return new Layer(path, options, fn);
    }

    debug$f('new %o', path);
    var opts = options || {};

    this.handle = fn;
    this.name = fn.name || '<anonymous>';
    this.params = undefined;
    this.path = undefined;
    this.regexp = pathToRegexp(path, this.keys = [], opts);

    // set fast path flags
    this.regexp.fast_star = path === '*';
    this.regexp.fast_slash = path === '/' && opts.end === false;
  }

  /**
   * Handle the error for the layer.
   *
   * @param {Error} error
   * @param {Request} req
   * @param {Response} res
   * @param {function} next
   * @api private
   */

  Layer.prototype.handle_error = function handle_error(error, req, res, next) {
    var fn = this.handle;

    if (fn.length !== 4) {
      // not a standard error handler
      return next(error);
    }

    try {
      fn(error, req, res, next);
    } catch (err) {
      next(err);
    }
  };

  /**
   * Handle the request for the layer.
   *
   * @param {Request} req
   * @param {Response} res
   * @param {function} next
   * @api private
   */

  Layer.prototype.handle_request = function handle(req, res, next) {
    var fn = this.handle;

    if (fn.length > 3) {
      // not a standard request handler
      return next();
    }

    try {
      fn(req, res, next);
    } catch (err) {
      next(err);
    }
  };

  /**
   * Check if this route matches `path`, if so
   * populate `.params`.
   *
   * @param {String} path
   * @return {Boolean}
   * @api private
   */

  Layer.prototype.match = function match(path) {
    var match;

    if (path != null) {
      // fast path non-ending match for / (any path matches)
      if (this.regexp.fast_slash) {
        this.params = {};
        this.path = '';
        return true
      }

      // fast path for * (everything matched in a param)
      if (this.regexp.fast_star) {
        this.params = {'0': decode_param(path)};
        this.path = path;
        return true
      }

      // match the path
      match = this.regexp.exec(path);
    }

    if (!match) {
      this.params = undefined;
      this.path = undefined;
      return false;
    }

    // store values
    this.params = {};
    this.path = match[0];

    var keys = this.keys;
    var params = this.params;

    for (var i = 1; i < match.length; i++) {
      var key = keys[i - 1];
      var prop = key.name;
      var val = decode_param(match[i]);

      if (val !== undefined || !(hasOwnProperty$1.call(params, prop))) {
        params[prop] = val;
      }
    }

    return true;
  };

  /**
   * Decode param value.
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function decode_param(val) {
    if (typeof val !== 'string' || val.length === 0) {
      return val;
    }

    try {
      return decodeURIComponent(val);
    } catch (err) {
      if (err instanceof URIError) {
        err.message = 'Failed to decode param \'' + val + '\'';
        err.status = err.statusCode = 400;
      }

      throw err;
    }
  }

  /**
   * Module dependencies.
   * @private
   */



  /**
   * Module exports.
   * @public
   */

  var methods = getCurrentNodeMethods() || getBasicNodeMethods();

  /**
   * Get the current Node.js methods.
   * @private
   */

  function getCurrentNodeMethods() {
    return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
      return method.toLowerCase();
    });
  }

  /**
   * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
   * @private
   */

  function getBasicNodeMethods() {
    return [
      'get',
      'post',
      'put',
      'head',
      'delete',
      'options',
      'trace',
      'copy',
      'lock',
      'mkcol',
      'move',
      'purge',
      'propfind',
      'proppatch',
      'unlock',
      'report',
      'mkactivity',
      'checkout',
      'merge',
      'm-search',
      'notify',
      'subscribe',
      'unsubscribe',
      'patch',
      'search',
      'connect'
    ];
  }

  /**
   * Module dependencies.
   * @private
   */

  var debug$g = src$4('express:router:route');




  /**
   * Module variables.
   * @private
   */

  var slice$1 = Array.prototype.slice;
  var toString$4 = Object.prototype.toString;

  /**
   * Module exports.
   * @public
   */

  var route = Route;

  /**
   * Initialize `Route` with the given `path`,
   *
   * @param {String} path
   * @public
   */

  function Route(path) {
    this.path = path;
    this.stack = [];

    debug$g('new %o', path);

    // route handlers for various http methods
    this.methods = {};
  }

  /**
   * Determine if the route handles a given method.
   * @private
   */

  Route.prototype._handles_method = function _handles_method(method) {
    if (this.methods._all) {
      return true;
    }

    var name = method.toLowerCase();

    if (name === 'head' && !this.methods['head']) {
      name = 'get';
    }

    return Boolean(this.methods[name]);
  };

  /**
   * @return {Array} supported HTTP methods
   * @private
   */

  Route.prototype._options = function _options() {
    var methods = Object.keys(this.methods);

    // append automatic head
    if (this.methods.get && !this.methods.head) {
      methods.push('head');
    }

    for (var i = 0; i < methods.length; i++) {
      // make upper case
      methods[i] = methods[i].toUpperCase();
    }

    return methods;
  };

  /**
   * dispatch req, res into this route
   * @private
   */

  Route.prototype.dispatch = function dispatch(req, res, done) {
    var idx = 0;
    var stack = this.stack;
    if (stack.length === 0) {
      return done();
    }

    var method = req.method.toLowerCase();
    if (method === 'head' && !this.methods['head']) {
      method = 'get';
    }

    req.route = this;

    next();

    function next(err) {
      // signal to exit route
      if (err && err === 'route') {
        return done();
      }

      // signal to exit router
      if (err && err === 'router') {
        return done(err)
      }

      var layer = stack[idx++];
      if (!layer) {
        return done(err);
      }

      if (layer.method && layer.method !== method) {
        return next(err);
      }

      if (err) {
        layer.handle_error(err, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };

  /**
   * Add a handler for all HTTP verbs to this route.
   *
   * Behaves just like middleware and can respond or call `next`
   * to continue processing.
   *
   * You can use multiple `.all` call to add multiple handlers.
   *
   *   function check_something(req, res, next){
   *     next();
   *   };
   *
   *   function validate_user(req, res, next){
   *     next();
   *   };
   *
   *   route
   *   .all(validate_user)
   *   .all(check_something)
   *   .get(function(req, res, next){
   *     res.send('hello world');
   *   });
   *
   * @param {function} handler
   * @return {Route} for chaining
   * @api public
   */

  Route.prototype.all = function all() {
    var handles = arrayFlatten_1(slice$1.call(arguments));

    for (var i = 0; i < handles.length; i++) {
      var handle = handles[i];

      if (typeof handle !== 'function') {
        var type = toString$4.call(handle);
        var msg = 'Route.all() requires a callback function but got a ' + type;
        throw new TypeError(msg);
      }

      var layer$1 = layer('/', {}, handle);
      layer$1.method = undefined;

      this.methods._all = true;
      this.stack.push(layer$1);
    }

    return this;
  };

  methods.forEach(function(method){
    Route.prototype[method] = function(){
      var handles = arrayFlatten_1(slice$1.call(arguments));

      for (var i = 0; i < handles.length; i++) {
        var handle = handles[i];

        if (typeof handle !== 'function') {
          var type = toString$4.call(handle);
          var msg = 'Route.' + method + '() requires a callback function but got a ' + type;
          throw new Error(msg);
        }

        debug$g('%s %o', method, this.path);

        var layer$1 = layer('/', {}, handle);
        layer$1.method = method;

        this.methods[method] = true;
        this.stack.push(layer$1);
      }

      return this;
    };
  });

  var utilsMerge = createCommonjsModule(function (module, exports) {
  /**
   * Merge object b with object a.
   *
   *     var a = { foo: 'bar' }
   *       , b = { bar: 'baz' };
   *
   *     merge(a, b);
   *     // => { foo: 'bar', bar: 'baz' }
   *
   * @param {Object} a
   * @param {Object} b
   * @return {Object}
   * @api public
   */

  exports = module.exports = function(a, b){
    if (a && b) {
      for (var key in b) {
        a[key] = b[key];
      }
    }
    return a;
  };
  });

  var router = createCommonjsModule(function (module) {

  /**
   * Module dependencies.
   * @private
   */





  var debug = src$4('express:router');
  var deprecate = depd_1('express');




  /**
   * Module variables.
   * @private
   */

  var objectRegExp = /^\[object (\S+)\]$/;
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;

  /**
   * Initialize a new `Router` with the given `options`.
   *
   * @param {Object} [options]
   * @return {Router} which is an callable function
   * @public
   */

  var proto = module.exports = function(options) {
    var opts = options || {};

    function router(req, res, next) {
      router.handle(req, res, next);
    }

    // mixin Router class functions
    setprototypeof(router, proto);

    router.params = {};
    router._params = [];
    router.caseSensitive = opts.caseSensitive;
    router.mergeParams = opts.mergeParams;
    router.strict = opts.strict;
    router.stack = [];

    return router;
  };

  /**
   * Map the given param placeholder `name`(s) to the given callback.
   *
   * Parameter mapping is used to provide pre-conditions to routes
   * which use normalized placeholders. For example a _:user_id_ parameter
   * could automatically load a user's information from the database without
   * any additional code,
   *
   * The callback uses the same signature as middleware, the only difference
   * being that the value of the placeholder is passed, in this case the _id_
   * of the user. Once the `next()` function is invoked, just like middleware
   * it will continue on to execute the route, or subsequent parameter functions.
   *
   * Just like in middleware, you must either respond to the request or call next
   * to avoid stalling the request.
   *
   *  app.param('user_id', function(req, res, next, id){
   *    User.find(id, function(err, user){
   *      if (err) {
   *        return next(err);
   *      } else if (!user) {
   *        return next(new Error('failed to load user'));
   *      }
   *      req.user = user;
   *      next();
   *    });
   *  });
   *
   * @param {String} name
   * @param {Function} fn
   * @return {app} for chaining
   * @public
   */

  proto.param = function param(name, fn) {
    // param logic
    if (typeof name === 'function') {
      deprecate('router.param(fn): Refactor to use path params');
      this._params.push(name);
      return;
    }

    // apply param functions
    var params = this._params;
    var len = params.length;
    var ret;

    if (name[0] === ':') {
      deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
      name = name.substr(1);
    }

    for (var i = 0; i < len; ++i) {
      if (ret = params[i](name, fn)) {
        fn = ret;
      }
    }

    // ensure we end up with a
    // middleware function
    if ('function' !== typeof fn) {
      throw new Error('invalid param() call for ' + name + ', got ' + fn);
    }

    (this.params[name] = this.params[name] || []).push(fn);
    return this;
  };

  /**
   * Dispatch a req, res into the router.
   * @private
   */

  proto.handle = function handle(req, res, out) {
    var self = this;

    debug('dispatching %s %s', req.method, req.url);

    var idx = 0;
    var protohost = getProtohost(req.url) || '';
    var removed = '';
    var slashAdded = false;
    var paramcalled = {};

    // store options for OPTIONS request
    // only used if OPTIONS request
    var options = [];

    // middleware and routes
    var stack = self.stack;

    // manage inter-router variables
    var parentParams = req.params;
    var parentUrl = req.baseUrl || '';
    var done = restore(out, req, 'baseUrl', 'next', 'params');

    // setup next layer
    req.next = next;

    // for options requests, respond with a default if nothing else responds
    if (req.method === 'OPTIONS') {
      done = wrap(done, function(old, err) {
        if (err || options.length === 0) return old(err);
        sendOptionsResponse(res, options, old);
      });
    }

    // setup basic req values
    req.baseUrl = parentUrl;
    req.originalUrl = req.originalUrl || req.url;

    next();

    function next(err) {
      var layerError = err === 'route'
        ? null
        : err;

      // remove added slash
      if (slashAdded) {
        req.url = req.url.substr(1);
        slashAdded = false;
      }

      // restore altered req.url
      if (removed.length !== 0) {
        req.baseUrl = parentUrl;
        req.url = protohost + removed + req.url.substr(protohost.length);
        removed = '';
      }

      // signal to exit router
      if (layerError === 'router') {
        setImmediate(done, null);
        return
      }

      // no more matching layers
      if (idx >= stack.length) {
        setImmediate(done, layerError);
        return;
      }

      // get pathname of request
      var path = getPathname(req);

      if (path == null) {
        return done(layerError);
      }

      // find next matching layer
      var layer;
      var match;
      var route;

      while (match !== true && idx < stack.length) {
        layer = stack[idx++];
        match = matchLayer(layer, path);
        route = layer.route;

        if (typeof match !== 'boolean') {
          // hold on to layerError
          layerError = layerError || match;
        }

        if (match !== true) {
          continue;
        }

        if (!route) {
          // process non-route handlers normally
          continue;
        }

        if (layerError) {
          // routes do not match with a pending error
          match = false;
          continue;
        }

        var method = req.method;
        var has_method = route._handles_method(method);

        // build up automatic options response
        if (!has_method && method === 'OPTIONS') {
          appendMethods(options, route._options());
        }

        // don't even bother matching route
        if (!has_method && method !== 'HEAD') {
          match = false;
          continue;
        }
      }

      // no match
      if (match !== true) {
        return done(layerError);
      }

      // store route for dispatch on change
      if (route) {
        req.route = route;
      }

      // Capture one-time layer values
      req.params = self.mergeParams
        ? mergeParams(layer.params, parentParams)
        : layer.params;
      var layerPath = layer.path;

      // this should be done for the layer
      self.process_params(layer, paramcalled, req, res, function (err) {
        if (err) {
          return next(layerError || err);
        }

        if (route) {
          return layer.handle_request(req, res, next);
        }

        trim_prefix(layer, layerError, layerPath, path);
      });
    }

    function trim_prefix(layer, layerError, layerPath, path) {
      if (layerPath.length !== 0) {
        // Validate path breaks on a path separator
        var c = path[layerPath.length];
        if (c && c !== '/' && c !== '.') return next(layerError)

        // Trim off the part of the url that matches the route
        // middleware (.use stuff) needs to have the path stripped
        debug('trim prefix (%s) from url %s', layerPath, req.url);
        removed = layerPath;
        req.url = protohost + req.url.substr(protohost.length + removed.length);

        // Ensure leading slash
        if (!protohost && req.url[0] !== '/') {
          req.url = '/' + req.url;
          slashAdded = true;
        }

        // Setup base URL (no trailing slash)
        req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'
          ? removed.substring(0, removed.length - 1)
          : removed);
      }

      debug('%s %s : %s', layer.name, layerPath, req.originalUrl);

      if (layerError) {
        layer.handle_error(layerError, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };

  /**
   * Process any parameters for the layer.
   * @private
   */

  proto.process_params = function process_params(layer, called, req, res, done) {
    var params = this.params;

    // captured parameters from the layer, keys and values
    var keys = layer.keys;

    // fast track
    if (!keys || keys.length === 0) {
      return done();
    }

    var i = 0;
    var name;
    var paramIndex = 0;
    var key;
    var paramVal;
    var paramCallbacks;
    var paramCalled;

    // process params in order
    // param callbacks can be async
    function param(err) {
      if (err) {
        return done(err);
      }

      if (i >= keys.length ) {
        return done();
      }

      paramIndex = 0;
      key = keys[i++];
      name = key.name;
      paramVal = req.params[name];
      paramCallbacks = params[name];
      paramCalled = called[name];

      if (paramVal === undefined || !paramCallbacks) {
        return param();
      }

      // param previously called with same value or error occurred
      if (paramCalled && (paramCalled.match === paramVal
        || (paramCalled.error && paramCalled.error !== 'route'))) {
        // restore value
        req.params[name] = paramCalled.value;

        // next param
        return param(paramCalled.error);
      }

      called[name] = paramCalled = {
        error: null,
        match: paramVal,
        value: paramVal
      };

      paramCallback();
    }

    // single param callbacks
    function paramCallback(err) {
      var fn = paramCallbacks[paramIndex++];

      // store updated value
      paramCalled.value = req.params[key.name];

      if (err) {
        // store error
        paramCalled.error = err;
        param(err);
        return;
      }

      if (!fn) return param();

      try {
        fn(req, res, paramCallback, paramVal, key.name);
      } catch (e) {
        paramCallback(e);
      }
    }

    param();
  };

  /**
   * Use the given middleware function, with optional path, defaulting to "/".
   *
   * Use (like `.all`) will run for any http METHOD, but it will not add
   * handlers for those methods so OPTIONS requests will not consider `.use`
   * functions even if they could respond.
   *
   * The other difference is that _route_ path is stripped and not visible
   * to the handler function. The main effect of this feature is that mounted
   * handlers can operate without any code changes regardless of the "prefix"
   * pathname.
   *
   * @public
   */

  proto.use = function use(fn) {
    var offset = 0;
    var path = '/';

    // default path to '/'
    // disambiguate router.use([fn])
    if (typeof fn !== 'function') {
      var arg = fn;

      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }

      // first arg is the path
      if (typeof arg !== 'function') {
        offset = 1;
        path = fn;
      }
    }

    var callbacks = arrayFlatten_1(slice.call(arguments, offset));

    if (callbacks.length === 0) {
      throw new TypeError('Router.use() requires a middleware function')
    }

    for (var i = 0; i < callbacks.length; i++) {
      var fn = callbacks[i];

      if (typeof fn !== 'function') {
        throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn))
      }

      // add the middleware
      debug('use %o %s', path, fn.name || '<anonymous>');

      var layer$1 = new layer(path, {
        sensitive: this.caseSensitive,
        strict: false,
        end: false
      }, fn);

      layer$1.route = undefined;

      this.stack.push(layer$1);
    }

    return this;
  };

  /**
   * Create a new Route for the given path.
   *
   * Each route contains a separate middleware stack and VERB handlers.
   *
   * See the Route api documentation for details on adding handlers
   * and middleware to routes.
   *
   * @param {String} path
   * @return {Route}
   * @public
   */

  proto.route = function route$1(path) {
    var route$1 = new route(path);

    var layer$1 = new layer(path, {
      sensitive: this.caseSensitive,
      strict: this.strict,
      end: true
    }, route$1.dispatch.bind(route$1));

    layer$1.route = route$1;

    this.stack.push(layer$1);
    return route$1;
  };

  // create Router#VERB functions
  methods.concat('all').forEach(function(method){
    proto[method] = function(path){
      var route = this.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });

  // append methods to a list of methods
  function appendMethods(list, addition) {
    for (var i = 0; i < addition.length; i++) {
      var method = addition[i];
      if (list.indexOf(method) === -1) {
        list.push(method);
      }
    }
  }

  // get pathname of request
  function getPathname(req) {
    try {
      return parseurl_1(req).pathname;
    } catch (err) {
      return undefined;
    }
  }

  // Get get protocol + host for a URL
  function getProtohost(url) {
    if (typeof url !== 'string' || url.length === 0 || url[0] === '/') {
      return undefined
    }

    var searchIndex = url.indexOf('?');
    var pathLength = searchIndex !== -1
      ? searchIndex
      : url.length;
    var fqdnIndex = url.substr(0, pathLength).indexOf('://');

    return fqdnIndex !== -1
      ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))
      : undefined
  }

  // get type for error message
  function gettype(obj) {
    var type = typeof obj;

    if (type !== 'object') {
      return type;
    }

    // inspect [[Class]] for objects
    return toString.call(obj)
      .replace(objectRegExp, '$1');
  }

  /**
   * Match path to a layer.
   *
   * @param {Layer} layer
   * @param {string} path
   * @private
   */

  function matchLayer(layer, path) {
    try {
      return layer.match(path);
    } catch (err) {
      return err;
    }
  }

  // merge params with parent params
  function mergeParams(params, parent) {
    if (typeof parent !== 'object' || !parent) {
      return params;
    }

    // make copy of parent for base
    var obj = utilsMerge({}, parent);

    // simple non-numeric merging
    if (!(0 in params) || !(0 in parent)) {
      return utilsMerge(obj, params);
    }

    var i = 0;
    var o = 0;

    // determine numeric gaps
    while (i in params) {
      i++;
    }

    while (o in parent) {
      o++;
    }

    // offset numeric indices in params before merge
    for (i--; i >= 0; i--) {
      params[i + o] = params[i];

      // create holes for the merge when necessary
      if (i < o) {
        delete params[i];
      }
    }

    return utilsMerge(obj, params);
  }

  // restore obj props after function
  function restore(fn, obj) {
    var props = new Array(arguments.length - 2);
    var vals = new Array(arguments.length - 2);

    for (var i = 0; i < props.length; i++) {
      props[i] = arguments[i + 2];
      vals[i] = obj[props[i]];
    }

    return function () {
      // restore vals
      for (var i = 0; i < props.length; i++) {
        obj[props[i]] = vals[i];
      }

      return fn.apply(this, arguments);
    };
  }

  // send an OPTIONS response
  function sendOptionsResponse(res, options, next) {
    try {
      var body = options.join(',');
      res.set('Allow', body);
      res.send(body);
    } catch (err) {
      next(err);
    }
  }

  // wrap a function
  function wrap(old, fn) {
    return function proxy() {
      var args = new Array(arguments.length + 1);

      args[0] = old;
      for (var i = 0, len = arguments.length; i < len; i++) {
        args[i + 1] = arguments[i];
      }

      fn.apply(this, args);
    };
  }
  });

  /**
   * Module dependencies.
   * @private
   */



  /**
   * Initialization middleware, exposing the
   * request and response to each other, as well
   * as defaulting the X-Powered-By header field.
   *
   * @param {Function} app
   * @return {Function}
   * @api private
   */

  var init_1 = function(app){
    return function expressInit(req, res, next){
      if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');
      req.res = res;
      res.req = req;
      req.next = next;

      setprototypeof(req, app.request);
      setprototypeof(res, app.response);

      res.locals = res.locals || Object.create(null);

      next();
    };
  };

  var init = {
  	init: init_1
  };

  /**
   * Module dependencies.
   */





  /**
   * @param {Object} options
   * @return {Function}
   * @api public
   */

  var query = function query(options) {
    var opts = utilsMerge({}, options);
    var queryparse = lib$8.parse;

    if (typeof options === 'function') {
      queryparse = options;
      opts = undefined;
    }

    if (opts !== undefined && opts.allowPrototypes === undefined) {
      // back-compat for qs module
      opts.allowPrototypes = true;
    }

    return function query(req, res, next){
      if (!req.query) {
        var val = parseurl_1(req).query;
        req.query = queryparse(val, opts);
      }

      next();
    };
  };

  /**
   * Module dependencies.
   * @private
   */

  var debug$h = src$4('express:view');
  var path = path$3;


  /**
   * Module variables.
   * @private
   */

  var dirname = path.dirname;
  var basename = path.basename;
  var extname = path.extname;
  var join = path.join;
  var resolve = path.resolve;

  /**
   * Module exports.
   * @public
   */

  var view = View;

  /**
   * Initialize a new `View` with the given `name`.
   *
   * Options:
   *
   *   - `defaultEngine` the default template engine name
   *   - `engines` template engine require() cache
   *   - `root` root path for view lookup
   *
   * @param {string} name
   * @param {object} options
   * @public
   */

  function View(name, options) {
    var opts = options || {};

    this.defaultEngine = opts.defaultEngine;
    this.ext = extname(name);
    this.name = name;
    this.root = opts.root;

    if (!this.ext && !this.defaultEngine) {
      throw new Error('No default engine was specified and no extension was provided.');
    }

    var fileName = name;

    if (!this.ext) {
      // get extension from default engine name
      this.ext = this.defaultEngine[0] !== '.'
        ? '.' + this.defaultEngine
        : this.defaultEngine;

      fileName += this.ext;
    }

    if (!opts.engines[this.ext]) {
      // load engine
      var mod = this.ext.substr(1);
      debug$h('require "%s"', mod);

      // default engine export
      var fn = require(mod).__express;

      if (typeof fn !== 'function') {
        throw new Error('Module "' + mod + '" does not provide a view engine.')
      }

      opts.engines[this.ext] = fn;
    }

    // store loaded engine
    this.engine = opts.engines[this.ext];

    // lookup path
    this.path = this.lookup(fileName);
  }

  /**
   * Lookup view by the given `name`
   *
   * @param {string} name
   * @private
   */

  View.prototype.lookup = function lookup(name) {
    var path;
    var roots = [].concat(this.root);

    debug$h('lookup "%s"', name);

    for (var i = 0; i < roots.length && !path; i++) {
      var root = roots[i];

      // resolve the path
      var loc = resolve(root, name);
      var dir = dirname(loc);
      var file = basename(loc);

      // resolve the file
      path = this.resolve(dir, file);
    }

    return path;
  };

  /**
   * Render with the given options.
   *
   * @param {object} options
   * @param {function} callback
   * @private
   */

  View.prototype.render = function render(options, callback) {
    debug$h('render "%s"', this.path);
    this.engine(this.path, options, callback);
  };

  /**
   * Resolve the file within the given directory.
   *
   * @param {string} dir
   * @param {string} file
   * @private
   */

  View.prototype.resolve = function resolve(dir, file) {
    var ext = this.ext;

    // <path>.<ext>
    var path = join(dir, file);
    var stat = tryStat(path);

    if (stat && stat.isFile()) {
      return path;
    }

    // <path>/index.<ext>
    path = join(dir, basename(file, ext), 'index' + ext);
    stat = tryStat(path);

    if (stat && stat.isFile()) {
      return path;
    }
  };

  /**
   * Return a stat, maybe.
   *
   * @param {string} path
   * @return {fs.Stats}
   * @private
   */

  function tryStat(path) {
    debug$h('stat "%s"', path);

    try {
      return fs.statSync(path);
    } catch (e) {
      return undefined;
    }
  }

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  /**
   * Module exports.
   * @public
   */

  var contentDisposition_1 = contentDisposition;
  var parse_1$3 = parse$d;

  /**
   * Module dependencies.
   * @private
   */

  var basename$1 = path$3.basename;
  var Buffer$9 = safeBuffer.Buffer;

  /**
   * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including "%")
   * @private
   */

  var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g; // eslint-disable-line no-control-regex

  /**
   * RegExp to match percent encoding escape.
   * @private
   */

  var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
  var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;

  /**
   * RegExp to match non-latin1 characters.
   * @private
   */

  var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;

  /**
   * RegExp to match quoted-pair in RFC 2616
   *
   * quoted-pair = "\" CHAR
   * CHAR        = <any US-ASCII character (octets 0 - 127)>
   * @private
   */

  var QESC_REGEXP$1 = /\\([\u0000-\u007f])/g; // eslint-disable-line no-control-regex

  /**
   * RegExp to match chars that must be quoted-pair in RFC 2616
   * @private
   */

  var QUOTE_REGEXP$1 = /([\\"])/g;

  /**
   * RegExp for various RFC 2616 grammar
   *
   * parameter     = token "=" ( token | quoted-string )
   * token         = 1*<any CHAR except CTLs or separators>
   * separators    = "(" | ")" | "<" | ">" | "@"
   *               | "," | ";" | ":" | "\" | <">
   *               | "/" | "[" | "]" | "?" | "="
   *               | "{" | "}" | SP | HT
   * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
   * qdtext        = <any TEXT except <">>
   * quoted-pair   = "\" CHAR
   * CHAR          = <any US-ASCII character (octets 0 - 127)>
   * TEXT          = <any OCTET except CTLs, but including LWS>
   * LWS           = [CRLF] 1*( SP | HT )
   * CRLF          = CR LF
   * CR            = <US-ASCII CR, carriage return (13)>
   * LF            = <US-ASCII LF, linefeed (10)>
   * SP            = <US-ASCII SP, space (32)>
   * HT            = <US-ASCII HT, horizontal-tab (9)>
   * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
   * OCTET         = <any 8-bit sequence of data>
   * @private
   */

  var PARAM_REGEXP$1 = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g; // eslint-disable-line no-control-regex
  var TEXT_REGEXP$1 = /^[\x20-\x7e\x80-\xff]+$/;
  var TOKEN_REGEXP$1 = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;

  /**
   * RegExp for various RFC 5987 grammar
   *
   * ext-value     = charset  "'" [ language ] "'" value-chars
   * charset       = "UTF-8" / "ISO-8859-1" / mime-charset
   * mime-charset  = 1*mime-charsetc
   * mime-charsetc = ALPHA / DIGIT
   *               / "!" / "#" / "$" / "%" / "&"
   *               / "+" / "-" / "^" / "_" / "`"
   *               / "{" / "}" / "~"
   * language      = ( 2*3ALPHA [ extlang ] )
   *               / 4ALPHA
   *               / 5*8ALPHA
   * extlang       = *3( "-" 3ALPHA )
   * value-chars   = *( pct-encoded / attr-char )
   * pct-encoded   = "%" HEXDIG HEXDIG
   * attr-char     = ALPHA / DIGIT
   *               / "!" / "#" / "$" / "&" / "+" / "-" / "."
   *               / "^" / "_" / "`" / "|" / "~"
   * @private
   */

  var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;

  /**
   * RegExp for various RFC 6266 grammar
   *
   * disposition-type = "inline" | "attachment" | disp-ext-type
   * disp-ext-type    = token
   * disposition-parm = filename-parm | disp-ext-parm
   * filename-parm    = "filename" "=" value
   *                  | "filename*" "=" ext-value
   * disp-ext-parm    = token "=" value
   *                  | ext-token "=" ext-value
   * ext-token        = <the characters in token, followed by "*">
   * @private
   */

  var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/; // eslint-disable-line no-control-regex

  /**
   * Create an attachment Content-Disposition header.
   *
   * @param {string} [filename]
   * @param {object} [options]
   * @param {string} [options.type=attachment]
   * @param {string|boolean} [options.fallback=true]
   * @return {string}
   * @public
   */

  function contentDisposition (filename, options) {
    var opts = options || {};

    // get type
    var type = opts.type || 'attachment';

    // get parameters
    var params = createparams(filename, opts.fallback);

    // format into string
    return format$5(new ContentDisposition(type, params))
  }

  /**
   * Create parameters object from filename and fallback.
   *
   * @param {string} [filename]
   * @param {string|boolean} [fallback=true]
   * @return {object}
   * @private
   */

  function createparams (filename, fallback) {
    if (filename === undefined) {
      return
    }

    var params = {};

    if (typeof filename !== 'string') {
      throw new TypeError('filename must be a string')
    }

    // fallback defaults to true
    if (fallback === undefined) {
      fallback = true;
    }

    if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
      throw new TypeError('fallback must be a string or boolean')
    }

    if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {
      throw new TypeError('fallback must be ISO-8859-1 string')
    }

    // restrict to file base name
    var name = basename$1(filename);

    // determine if name is suitable for quoted string
    var isQuotedString = TEXT_REGEXP$1.test(name);

    // generate fallback name
    var fallbackName = typeof fallback !== 'string'
      ? fallback && getlatin1(name)
      : basename$1(fallback);
    var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;

    // set extended filename parameter
    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
      params['filename*'] = name;
    }

    // set filename parameter
    if (isQuotedString || hasFallback) {
      params.filename = hasFallback
        ? fallbackName
        : name;
    }

    return params
  }

  /**
   * Format object to Content-Disposition header.
   *
   * @param {object} obj
   * @param {string} obj.type
   * @param {object} [obj.parameters]
   * @return {string}
   * @private
   */

  function format$5 (obj) {
    var parameters = obj.parameters;
    var type = obj.type;

    if (!type || typeof type !== 'string' || !TOKEN_REGEXP$1.test(type)) {
      throw new TypeError('invalid type')
    }

    // start with normalized type
    var string = String(type).toLowerCase();

    // append parameters
    if (parameters && typeof parameters === 'object') {
      var param;
      var params = Object.keys(parameters).sort();

      for (var i = 0; i < params.length; i++) {
        param = params[i];

        var val = param.substr(-1) === '*'
          ? ustring(parameters[param])
          : qstring$2(parameters[param]);

        string += '; ' + param + '=' + val;
      }
    }

    return string
  }

  /**
   * Decode a RFC 6987 field value (gracefully).
   *
   * @param {string} str
   * @return {string}
   * @private
   */

  function decodefield (str) {
    var match = EXT_VALUE_REGEXP.exec(str);

    if (!match) {
      throw new TypeError('invalid extended field value')
    }

    var charset = match[1].toLowerCase();
    var encoded = match[2];
    var value;

    // to binary string
    var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);

    switch (charset) {
      case 'iso-8859-1':
        value = getlatin1(binary);
        break
      case 'utf-8':
        value = Buffer$9.from(binary, 'binary').toString('utf8');
        break
      default:
        throw new TypeError('unsupported charset in extended field')
    }

    return value
  }

  /**
   * Get ISO-8859-1 version of string.
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function getlatin1 (val) {
    // simple Unicode -> ISO-8859-1 transformation
    return String(val).replace(NON_LATIN1_REGEXP, '?')
  }

  /**
   * Parse Content-Disposition header string.
   *
   * @param {string} string
   * @return {object}
   * @public
   */

  function parse$d (string) {
    if (!string || typeof string !== 'string') {
      throw new TypeError('argument string is required')
    }

    var match = DISPOSITION_TYPE_REGEXP.exec(string);

    if (!match) {
      throw new TypeError('invalid type format')
    }

    // normalize type
    var index = match[0].length;
    var type = match[1].toLowerCase();

    var key;
    var names = [];
    var params = {};
    var value;

    // calculate index to start at
    index = PARAM_REGEXP$1.lastIndex = match[0].substr(-1) === ';'
      ? index - 1
      : index;

    // match parameters
    while ((match = PARAM_REGEXP$1.exec(string))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (names.indexOf(key) !== -1) {
        throw new TypeError('invalid duplicate parameter')
      }

      names.push(key);

      if (key.indexOf('*') + 1 === key.length) {
        // decode extended value
        key = key.slice(0, -1);
        value = decodefield(value);

        // overwrite existing value
        params[key] = value;
        continue
      }

      if (typeof params[key] === 'string') {
        continue
      }

      if (value[0] === '"') {
        // remove quotes and escapes
        value = value
          .substr(1, value.length - 2)
          .replace(QESC_REGEXP$1, '$1');
      }

      params[key] = value;
    }

    if (index !== -1 && index !== string.length) {
      throw new TypeError('invalid parameter format')
    }

    return new ContentDisposition(type, params)
  }

  /**
   * Percent decode a single character.
   *
   * @param {string} str
   * @param {string} hex
   * @return {string}
   * @private
   */

  function pdecode (str, hex) {
    return String.fromCharCode(parseInt(hex, 16))
  }

  /**
   * Percent encode a single character.
   *
   * @param {string} char
   * @return {string}
   * @private
   */

  function pencode (char) {
    return '%' + String(char)
      .charCodeAt(0)
      .toString(16)
      .toUpperCase()
  }

  /**
   * Quote a string for HTTP.
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function qstring$2 (val) {
    var str = String(val);

    return '"' + str.replace(QUOTE_REGEXP$1, '\\$1') + '"'
  }

  /**
   * Encode a Unicode string for HTTP (RFC 5987).
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function ustring (val) {
    var str = String(val);

    // percent encode as UTF-8
    var encoded = encodeURIComponent(str)
      .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);

    return 'UTF-8\'\'' + encoded
  }

  /**
   * Class for parsed Content-Disposition header for v8 optimization
   *
   * @public
   * @param {string} type
   * @param {object} parameters
   * @constructor
   */

  function ContentDisposition (type, parameters) {
    this.type = type;
    this.parameters = parameters;
  }
  contentDisposition_1.parse = parse_1$3;

  /**
   * Helpers.
   */

  var s$5 = 1000;
  var m$5 = s$5 * 60;
  var h$5 = m$5 * 60;
  var d$5 = h$5 * 24;
  var y$6 = d$5 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$5 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$e(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$5(val) : fmtShort$5(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$e(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$6;
      case 'days':
      case 'day':
      case 'd':
        return n * d$5;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$5;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$5;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$5;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$5(ms) {
    if (ms >= d$5) {
      return Math.round(ms / d$5) + 'd';
    }
    if (ms >= h$5) {
      return Math.round(ms / h$5) + 'h';
    }
    if (ms >= m$5) {
      return Math.round(ms / m$5) + 'm';
    }
    if (ms >= s$5) {
      return Math.round(ms / s$5) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$5(ms) {
    return plural$5(ms, d$5, 'day') ||
      plural$5(ms, h$5, 'hour') ||
      plural$5(ms, m$5, 'minute') ||
      plural$5(ms, s$5, 'second') ||
      ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$5(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }
    return Math.ceil(ms / n) + ' ' + name + 's';
  }

  var debug$i = createCommonjsModule(function (module, exports) {
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = ms$5;

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */

  exports.formatters = {};

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   * @param {String} namespace
   * @return {Number}
   * @api private
   */

  function selectColor(namespace) {
    var hash = 0, i;

    for (i in namespace) {
      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function createDebug(namespace) {

    function debug() {
      // disabled?
      if (!debug.enabled) return;

      var self = debug;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // turn the `arguments` into a proper Array
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %O
        args.unshift('%O');
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // apply env-specific formatting (colors, etc.)
      exports.formatArgs.call(self, args);

      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);

    // env-specific initialization logic for debug instances
    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    return debug;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    exports.names = [];
    exports.skips = [];

    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
  });
  var debug_1$4 = debug$i.coerce;
  var debug_2$4 = debug$i.disable;
  var debug_3$4 = debug$i.enable;
  var debug_4$4 = debug$i.enabled;
  var debug_5$4 = debug$i.humanize;
  var debug_6$4 = debug$i.names;
  var debug_7$4 = debug$i.skips;
  var debug_8$4 = debug$i.formatters;

  var browser$5 = createCommonjsModule(function (module, exports) {
  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$i;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    // is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return;

    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
  });
  var browser_1$5 = browser$5.log;
  var browser_2$5 = browser$5.formatArgs;
  var browser_3$5 = browser$5.save;
  var browser_4$5 = browser$5.load;
  var browser_5$5 = browser$5.useColors;
  var browser_6$5 = browser$5.storage;
  var browser_7$5 = browser$5.colors;

  var node$5 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * This is the Node.js implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug$i;
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;

  /**
   * Colors.
   */

  exports.colors = [6, 2, 3, 4, 5, 1];

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    // camel-case
    var prop = key
      .substring(6)
      .toLowerCase()
      .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

    // coerce string value into JS value
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
    else if (val === 'null') val = null;
    else val = Number(val);

    obj[prop] = val;
    return obj;
  }, {});

  /**
   * The file descriptor to write the `debug()` calls to.
   * Set the `DEBUG_FD` env variable to override with another value. i.e.:
   *
   *   $ DEBUG_FD=3 node script.js 3>debug.log
   */

  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

  if (1 !== fd && 2 !== fd) {
    util$2.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
  }

  var stream = 1 === fd ? process.stdout :
               2 === fd ? process.stderr :
               createWritableStdioStream(fd);

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return 'colors' in exports.inspectOpts
      ? Boolean(exports.inspectOpts.colors)
      : tty.isatty(fd);
  }

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts)
      .split('\n').map(function(str) {
        return str.trim()
      }).join(' ');
  };

  /**
   * Map %o to `util.inspect()`, allowing multiple lines if needed.
   */

  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util$2.inspect(v, this.inspectOpts);
  };

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = new Date().toUTCString()
        + ' ' + name + ' ' + args[0];
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to `stream`.
   */

  function log() {
    return stream.write(util$2.format.apply(util$2, arguments) + '\n');
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    if (null == namespaces) {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Copied from `node/src/node.js`.
   *
   * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
   * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
   */

  function createWritableStdioStream (fd) {
    var stream;
    var tty_wrap = process.binding('tty_wrap');

    // Note stream._type is used for test-module-load-list.js

    switch (tty_wrap.guessHandleType(fd)) {
      case 'TTY':
        stream = new tty.WriteStream(fd);
        stream._type = 'tty';

        // Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      case 'FILE':
        var fs$1 = fs;
        stream = new fs$1.SyncWriteStream(fd, { autoClose: false });
        stream._type = 'fs';
        break;

      case 'PIPE':
      case 'TCP':
        var net$1 = net;
        stream = new net$1.Socket({
          fd: fd,
          readable: false,
          writable: true
        });

        // FIXME Should probably have an option in net.Socket to create a
        // stream from an existing fd which is writable only. But for now
        // we'll just add this hack and set the `readable` member to false.
        // Test: ./node test/fixtures/echo.js < /etc/passwd
        stream.readable = false;
        stream.read = null;
        stream._type = 'pipe';

        // FIXME Hack to have stream not keep the event loop alive.
        // See https://github.com/joyent/node/issues/1726
        if (stream._handle && stream._handle.unref) {
          stream._handle.unref();
        }
        break;

      default:
        // Probably an error on in uv_guess_handle()
        throw new Error('Implement me. Unknown stream file type!');
    }

    // For supporting legacy API we put the FD here.
    stream.fd = fd;

    stream._isStdio = true;

    return stream;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init (debug) {
    debug.inspectOpts = {};

    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  /**
   * Enable namespaces listed in `process.env.DEBUG` initially.
   */

  exports.enable(load());
  });
  var node_1$5 = node$5.init;
  var node_2$5 = node$5.log;
  var node_3$5 = node$5.formatArgs;
  var node_4$5 = node$5.save;
  var node_5$5 = node$5.load;
  var node_6$5 = node$5.useColors;
  var node_7$5 = node$5.colors;
  var node_8$5 = node$5.inspectOpts;

  var src$5 = createCommonjsModule(function (module) {
  /**
   * Detect Electron renderer process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process !== 'undefined' && process.type === 'renderer') {
    module.exports = browser$5;
  } else {
    module.exports = node$5;
  }
  });

  /**
   * Module dependencies.
   * @private
   */

  var ReadStream = fs.ReadStream;


  /**
   * Module exports.
   * @public
   */

  var destroy_1 = destroy;

  /**
   * Destroy a stream.
   *
   * @param {object} stream
   * @public
   */

  function destroy(stream) {
    if (stream instanceof ReadStream) {
      return destroyReadStream(stream)
    }

    if (!(stream instanceof stream$1)) {
      return stream
    }

    if (typeof stream.destroy === 'function') {
      stream.destroy();
    }

    return stream
  }

  /**
   * Destroy a ReadStream.
   *
   * @param {object} stream
   * @private
   */

  function destroyReadStream(stream) {
    stream.destroy();

    if (typeof stream.close === 'function') {
      // node.js core bug work-around
      stream.on('open', onOpenClose);
    }

    return stream
  }

  /**
   * On open handler to close stream.
   * @private
   */

  function onOpenClose() {
    if (typeof this.fd === 'number') {
      // actually close down the fd
      this.close();
    }
  }

  /**
   * Module exports.
   * @public
   */

  var etag_1 = etag;

  /**
   * Module dependencies.
   * @private
   */


  var Stats = fs.Stats;

  /**
   * Module variables.
   * @private
   */

  var toString$5 = Object.prototype.toString;

  /**
   * Generate an entity tag.
   *
   * @param {Buffer|string} entity
   * @return {string}
   * @private
   */

  function entitytag (entity) {
    if (entity.length === 0) {
      // fast-path empty
      return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"'
    }

    // compute hash of entity
    var hash = crypto
      .createHash('sha1')
      .update(entity, 'utf8')
      .digest('base64')
      .substring(0, 27);

    // compute length of entity
    var len = typeof entity === 'string'
      ? Buffer.byteLength(entity, 'utf8')
      : entity.length;

    return '"' + len.toString(16) + '-' + hash + '"'
  }

  /**
   * Create a simple ETag.
   *
   * @param {string|Buffer|Stats} entity
   * @param {object} [options]
   * @param {boolean} [options.weak]
   * @return {String}
   * @public
   */

  function etag (entity, options) {
    if (entity == null) {
      throw new TypeError('argument entity is required')
    }

    // support fs.Stats object
    var isStats = isstats(entity);
    var weak = options && typeof options.weak === 'boolean'
      ? options.weak
      : isStats;

    // validate argument
    if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
      throw new TypeError('argument entity must be string, Buffer, or fs.Stats')
    }

    // generate entity tag
    var tag = isStats
      ? stattag(entity)
      : entitytag(entity);

    return weak
      ? 'W/' + tag
      : tag
  }

  /**
   * Determine if object is a Stats object.
   *
   * @param {object} obj
   * @return {boolean}
   * @api private
   */

  function isstats (obj) {
    // genuine fs.Stats
    if (typeof Stats === 'function' && obj instanceof Stats) {
      return true
    }

    // quack quack
    return obj && typeof obj === 'object' &&
      'ctime' in obj && toString$5.call(obj.ctime) === '[object Date]' &&
      'mtime' in obj && toString$5.call(obj.mtime) === '[object Date]' &&
      'ino' in obj && typeof obj.ino === 'number' &&
      'size' in obj && typeof obj.size === 'number'
  }

  /**
   * Generate a tag for a stat.
   *
   * @param {object} stat
   * @return {string}
   * @private
   */

  function stattag (stat) {
    var mtime = stat.mtime.getTime().toString(16);
    var size = stat.size.toString(16);

    return '"' + size + '-' + mtime + '"'
  }

  /*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * RegExp to check for no-cache token in Cache-Control.
   * @private
   */

  var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;

  /**
   * Module exports.
   * @public
   */

  var fresh_1 = fresh$1;

  /**
   * Check freshness of the response using request and response headers.
   *
   * @param {Object} reqHeaders
   * @param {Object} resHeaders
   * @return {Boolean}
   * @public
   */

  function fresh$1 (reqHeaders, resHeaders) {
    // fields
    var modifiedSince = reqHeaders['if-modified-since'];
    var noneMatch = reqHeaders['if-none-match'];

    // unconditional request
    if (!modifiedSince && !noneMatch) {
      return false
    }

    // Always return stale when Cache-Control: no-cache
    // to support end-to-end reload requests
    // https://tools.ietf.org/html/rfc2616#section-14.9.4
    var cacheControl = reqHeaders['cache-control'];
    if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
      return false
    }

    // if-none-match
    if (noneMatch && noneMatch !== '*') {
      var etag = resHeaders['etag'];

      if (!etag) {
        return false
      }

      var etagStale = true;
      var matches = parseTokenList(noneMatch);
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (match === etag || match === 'W/' + etag || 'W/' + match === etag) {
          etagStale = false;
          break
        }
      }

      if (etagStale) {
        return false
      }
    }

    // if-modified-since
    if (modifiedSince) {
      var lastModified = resHeaders['last-modified'];
      var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));

      if (modifiedStale) {
        return false
      }
    }

    return true
  }

  /**
   * Parse an HTTP Date into a number.
   *
   * @param {string} date
   * @private
   */

  function parseHttpDate (date) {
    var timestamp = date && Date.parse(date);

    // istanbul ignore next: guard against date.js Date.parse patching
    return typeof timestamp === 'number'
      ? timestamp
      : NaN
  }

  /**
   * Parse a HTTP token list.
   *
   * @param {string} str
   * @private
   */

  function parseTokenList (str) {
    var end = 0;
    var list = [];
    var start = 0;

    // gather tokens
    for (var i = 0, len = str.length; i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 0x20: /*   */
          if (start === end) {
            start = end = i + 1;
          }
          break
        case 0x2c: /* , */
          list.push(str.substring(start, end));
          start = end = i + 1;
          break
        default:
          end = i + 1;
          break
      }
    }

    // final token
    list.push(str.substring(start, end));

    return list
  }

  var types$2 = {
  	"application/andrew-inset": [
  	"ez"
  ],
  	"application/applixware": [
  	"aw"
  ],
  	"application/atom+xml": [
  	"atom"
  ],
  	"application/atomcat+xml": [
  	"atomcat"
  ],
  	"application/atomsvc+xml": [
  	"atomsvc"
  ],
  	"application/bdoc": [
  	"bdoc"
  ],
  	"application/ccxml+xml": [
  	"ccxml"
  ],
  	"application/cdmi-capability": [
  	"cdmia"
  ],
  	"application/cdmi-container": [
  	"cdmic"
  ],
  	"application/cdmi-domain": [
  	"cdmid"
  ],
  	"application/cdmi-object": [
  	"cdmio"
  ],
  	"application/cdmi-queue": [
  	"cdmiq"
  ],
  	"application/cu-seeme": [
  	"cu"
  ],
  	"application/dash+xml": [
  	"mpd"
  ],
  	"application/davmount+xml": [
  	"davmount"
  ],
  	"application/docbook+xml": [
  	"dbk"
  ],
  	"application/dssc+der": [
  	"dssc"
  ],
  	"application/dssc+xml": [
  	"xdssc"
  ],
  	"application/ecmascript": [
  	"ecma"
  ],
  	"application/emma+xml": [
  	"emma"
  ],
  	"application/epub+zip": [
  	"epub"
  ],
  	"application/exi": [
  	"exi"
  ],
  	"application/font-tdpfr": [
  	"pfr"
  ],
  	"application/font-woff": [
  ],
  	"application/font-woff2": [
  ],
  	"application/geo+json": [
  	"geojson"
  ],
  	"application/gml+xml": [
  	"gml"
  ],
  	"application/gpx+xml": [
  	"gpx"
  ],
  	"application/gxf": [
  	"gxf"
  ],
  	"application/gzip": [
  	"gz"
  ],
  	"application/hyperstudio": [
  	"stk"
  ],
  	"application/inkml+xml": [
  	"ink",
  	"inkml"
  ],
  	"application/ipfix": [
  	"ipfix"
  ],
  	"application/java-archive": [
  	"jar",
  	"war",
  	"ear"
  ],
  	"application/java-serialized-object": [
  	"ser"
  ],
  	"application/java-vm": [
  	"class"
  ],
  	"application/javascript": [
  	"js",
  	"mjs"
  ],
  	"application/json": [
  	"json",
  	"map"
  ],
  	"application/json5": [
  	"json5"
  ],
  	"application/jsonml+json": [
  	"jsonml"
  ],
  	"application/ld+json": [
  	"jsonld"
  ],
  	"application/lost+xml": [
  	"lostxml"
  ],
  	"application/mac-binhex40": [
  	"hqx"
  ],
  	"application/mac-compactpro": [
  	"cpt"
  ],
  	"application/mads+xml": [
  	"mads"
  ],
  	"application/manifest+json": [
  	"webmanifest"
  ],
  	"application/marc": [
  	"mrc"
  ],
  	"application/marcxml+xml": [
  	"mrcx"
  ],
  	"application/mathematica": [
  	"ma",
  	"nb",
  	"mb"
  ],
  	"application/mathml+xml": [
  	"mathml"
  ],
  	"application/mbox": [
  	"mbox"
  ],
  	"application/mediaservercontrol+xml": [
  	"mscml"
  ],
  	"application/metalink+xml": [
  	"metalink"
  ],
  	"application/metalink4+xml": [
  	"meta4"
  ],
  	"application/mets+xml": [
  	"mets"
  ],
  	"application/mods+xml": [
  	"mods"
  ],
  	"application/mp21": [
  	"m21",
  	"mp21"
  ],
  	"application/mp4": [
  	"mp4s",
  	"m4p"
  ],
  	"application/msword": [
  	"doc",
  	"dot"
  ],
  	"application/mxf": [
  	"mxf"
  ],
  	"application/octet-stream": [
  	"bin",
  	"dms",
  	"lrf",
  	"mar",
  	"so",
  	"dist",
  	"distz",
  	"pkg",
  	"bpk",
  	"dump",
  	"elc",
  	"deploy",
  	"exe",
  	"dll",
  	"deb",
  	"dmg",
  	"iso",
  	"img",
  	"msi",
  	"msp",
  	"msm",
  	"buffer"
  ],
  	"application/oda": [
  	"oda"
  ],
  	"application/oebps-package+xml": [
  	"opf"
  ],
  	"application/ogg": [
  	"ogx"
  ],
  	"application/omdoc+xml": [
  	"omdoc"
  ],
  	"application/onenote": [
  	"onetoc",
  	"onetoc2",
  	"onetmp",
  	"onepkg"
  ],
  	"application/oxps": [
  	"oxps"
  ],
  	"application/patch-ops-error+xml": [
  	"xer"
  ],
  	"application/pdf": [
  	"pdf"
  ],
  	"application/pgp-encrypted": [
  	"pgp"
  ],
  	"application/pgp-signature": [
  	"asc",
  	"sig"
  ],
  	"application/pics-rules": [
  	"prf"
  ],
  	"application/pkcs10": [
  	"p10"
  ],
  	"application/pkcs7-mime": [
  	"p7m",
  	"p7c"
  ],
  	"application/pkcs7-signature": [
  	"p7s"
  ],
  	"application/pkcs8": [
  	"p8"
  ],
  	"application/pkix-attr-cert": [
  	"ac"
  ],
  	"application/pkix-cert": [
  	"cer"
  ],
  	"application/pkix-crl": [
  	"crl"
  ],
  	"application/pkix-pkipath": [
  	"pkipath"
  ],
  	"application/pkixcmp": [
  	"pki"
  ],
  	"application/pls+xml": [
  	"pls"
  ],
  	"application/postscript": [
  	"ai",
  	"eps",
  	"ps"
  ],
  	"application/prs.cww": [
  	"cww"
  ],
  	"application/pskc+xml": [
  	"pskcxml"
  ],
  	"application/raml+yaml": [
  	"raml"
  ],
  	"application/rdf+xml": [
  	"rdf"
  ],
  	"application/reginfo+xml": [
  	"rif"
  ],
  	"application/relax-ng-compact-syntax": [
  	"rnc"
  ],
  	"application/resource-lists+xml": [
  	"rl"
  ],
  	"application/resource-lists-diff+xml": [
  	"rld"
  ],
  	"application/rls-services+xml": [
  	"rs"
  ],
  	"application/rpki-ghostbusters": [
  	"gbr"
  ],
  	"application/rpki-manifest": [
  	"mft"
  ],
  	"application/rpki-roa": [
  	"roa"
  ],
  	"application/rsd+xml": [
  	"rsd"
  ],
  	"application/rss+xml": [
  	"rss"
  ],
  	"application/rtf": [
  	"rtf"
  ],
  	"application/sbml+xml": [
  	"sbml"
  ],
  	"application/scvp-cv-request": [
  	"scq"
  ],
  	"application/scvp-cv-response": [
  	"scs"
  ],
  	"application/scvp-vp-request": [
  	"spq"
  ],
  	"application/scvp-vp-response": [
  	"spp"
  ],
  	"application/sdp": [
  	"sdp"
  ],
  	"application/set-payment-initiation": [
  	"setpay"
  ],
  	"application/set-registration-initiation": [
  	"setreg"
  ],
  	"application/shf+xml": [
  	"shf"
  ],
  	"application/smil+xml": [
  	"smi",
  	"smil"
  ],
  	"application/sparql-query": [
  	"rq"
  ],
  	"application/sparql-results+xml": [
  	"srx"
  ],
  	"application/srgs": [
  	"gram"
  ],
  	"application/srgs+xml": [
  	"grxml"
  ],
  	"application/sru+xml": [
  	"sru"
  ],
  	"application/ssdl+xml": [
  	"ssdl"
  ],
  	"application/ssml+xml": [
  	"ssml"
  ],
  	"application/tei+xml": [
  	"tei",
  	"teicorpus"
  ],
  	"application/thraud+xml": [
  	"tfi"
  ],
  	"application/timestamped-data": [
  	"tsd"
  ],
  	"application/vnd.3gpp.pic-bw-large": [
  	"plb"
  ],
  	"application/vnd.3gpp.pic-bw-small": [
  	"psb"
  ],
  	"application/vnd.3gpp.pic-bw-var": [
  	"pvb"
  ],
  	"application/vnd.3gpp2.tcap": [
  	"tcap"
  ],
  	"application/vnd.3m.post-it-notes": [
  	"pwn"
  ],
  	"application/vnd.accpac.simply.aso": [
  	"aso"
  ],
  	"application/vnd.accpac.simply.imp": [
  	"imp"
  ],
  	"application/vnd.acucobol": [
  	"acu"
  ],
  	"application/vnd.acucorp": [
  	"atc",
  	"acutc"
  ],
  	"application/vnd.adobe.air-application-installer-package+zip": [
  	"air"
  ],
  	"application/vnd.adobe.formscentral.fcdt": [
  	"fcdt"
  ],
  	"application/vnd.adobe.fxp": [
  	"fxp",
  	"fxpl"
  ],
  	"application/vnd.adobe.xdp+xml": [
  	"xdp"
  ],
  	"application/vnd.adobe.xfdf": [
  	"xfdf"
  ],
  	"application/vnd.ahead.space": [
  	"ahead"
  ],
  	"application/vnd.airzip.filesecure.azf": [
  	"azf"
  ],
  	"application/vnd.airzip.filesecure.azs": [
  	"azs"
  ],
  	"application/vnd.amazon.ebook": [
  	"azw"
  ],
  	"application/vnd.americandynamics.acc": [
  	"acc"
  ],
  	"application/vnd.amiga.ami": [
  	"ami"
  ],
  	"application/vnd.android.package-archive": [
  	"apk"
  ],
  	"application/vnd.anser-web-certificate-issue-initiation": [
  	"cii"
  ],
  	"application/vnd.anser-web-funds-transfer-initiation": [
  	"fti"
  ],
  	"application/vnd.antix.game-component": [
  	"atx"
  ],
  	"application/vnd.apple.installer+xml": [
  	"mpkg"
  ],
  	"application/vnd.apple.mpegurl": [
  	"m3u8"
  ],
  	"application/vnd.apple.pkpass": [
  	"pkpass"
  ],
  	"application/vnd.aristanetworks.swi": [
  	"swi"
  ],
  	"application/vnd.astraea-software.iota": [
  	"iota"
  ],
  	"application/vnd.audiograph": [
  	"aep"
  ],
  	"application/vnd.blueice.multipass": [
  	"mpm"
  ],
  	"application/vnd.bmi": [
  	"bmi"
  ],
  	"application/vnd.businessobjects": [
  	"rep"
  ],
  	"application/vnd.chemdraw+xml": [
  	"cdxml"
  ],
  	"application/vnd.chipnuts.karaoke-mmd": [
  	"mmd"
  ],
  	"application/vnd.cinderella": [
  	"cdy"
  ],
  	"application/vnd.claymore": [
  	"cla"
  ],
  	"application/vnd.cloanto.rp9": [
  	"rp9"
  ],
  	"application/vnd.clonk.c4group": [
  	"c4g",
  	"c4d",
  	"c4f",
  	"c4p",
  	"c4u"
  ],
  	"application/vnd.cluetrust.cartomobile-config": [
  	"c11amc"
  ],
  	"application/vnd.cluetrust.cartomobile-config-pkg": [
  	"c11amz"
  ],
  	"application/vnd.commonspace": [
  	"csp"
  ],
  	"application/vnd.contact.cmsg": [
  	"cdbcmsg"
  ],
  	"application/vnd.cosmocaller": [
  	"cmc"
  ],
  	"application/vnd.crick.clicker": [
  	"clkx"
  ],
  	"application/vnd.crick.clicker.keyboard": [
  	"clkk"
  ],
  	"application/vnd.crick.clicker.palette": [
  	"clkp"
  ],
  	"application/vnd.crick.clicker.template": [
  	"clkt"
  ],
  	"application/vnd.crick.clicker.wordbank": [
  	"clkw"
  ],
  	"application/vnd.criticaltools.wbs+xml": [
  	"wbs"
  ],
  	"application/vnd.ctc-posml": [
  	"pml"
  ],
  	"application/vnd.cups-ppd": [
  	"ppd"
  ],
  	"application/vnd.curl.car": [
  	"car"
  ],
  	"application/vnd.curl.pcurl": [
  	"pcurl"
  ],
  	"application/vnd.dart": [
  	"dart"
  ],
  	"application/vnd.data-vision.rdz": [
  	"rdz"
  ],
  	"application/vnd.dece.data": [
  	"uvf",
  	"uvvf",
  	"uvd",
  	"uvvd"
  ],
  	"application/vnd.dece.ttml+xml": [
  	"uvt",
  	"uvvt"
  ],
  	"application/vnd.dece.unspecified": [
  	"uvx",
  	"uvvx"
  ],
  	"application/vnd.dece.zip": [
  	"uvz",
  	"uvvz"
  ],
  	"application/vnd.denovo.fcselayout-link": [
  	"fe_launch"
  ],
  	"application/vnd.dna": [
  	"dna"
  ],
  	"application/vnd.dolby.mlp": [
  	"mlp"
  ],
  	"application/vnd.dpgraph": [
  	"dpg"
  ],
  	"application/vnd.dreamfactory": [
  	"dfac"
  ],
  	"application/vnd.ds-keypoint": [
  	"kpxx"
  ],
  	"application/vnd.dvb.ait": [
  	"ait"
  ],
  	"application/vnd.dvb.service": [
  	"svc"
  ],
  	"application/vnd.dynageo": [
  	"geo"
  ],
  	"application/vnd.ecowin.chart": [
  	"mag"
  ],
  	"application/vnd.enliven": [
  	"nml"
  ],
  	"application/vnd.epson.esf": [
  	"esf"
  ],
  	"application/vnd.epson.msf": [
  	"msf"
  ],
  	"application/vnd.epson.quickanime": [
  	"qam"
  ],
  	"application/vnd.epson.salt": [
  	"slt"
  ],
  	"application/vnd.epson.ssf": [
  	"ssf"
  ],
  	"application/vnd.eszigno3+xml": [
  	"es3",
  	"et3"
  ],
  	"application/vnd.ezpix-album": [
  	"ez2"
  ],
  	"application/vnd.ezpix-package": [
  	"ez3"
  ],
  	"application/vnd.fdf": [
  	"fdf"
  ],
  	"application/vnd.fdsn.mseed": [
  	"mseed"
  ],
  	"application/vnd.fdsn.seed": [
  	"seed",
  	"dataless"
  ],
  	"application/vnd.flographit": [
  	"gph"
  ],
  	"application/vnd.fluxtime.clip": [
  	"ftc"
  ],
  	"application/vnd.framemaker": [
  	"fm",
  	"frame",
  	"maker",
  	"book"
  ],
  	"application/vnd.frogans.fnc": [
  	"fnc"
  ],
  	"application/vnd.frogans.ltf": [
  	"ltf"
  ],
  	"application/vnd.fsc.weblaunch": [
  	"fsc"
  ],
  	"application/vnd.fujitsu.oasys": [
  	"oas"
  ],
  	"application/vnd.fujitsu.oasys2": [
  	"oa2"
  ],
  	"application/vnd.fujitsu.oasys3": [
  	"oa3"
  ],
  	"application/vnd.fujitsu.oasysgp": [
  	"fg5"
  ],
  	"application/vnd.fujitsu.oasysprs": [
  	"bh2"
  ],
  	"application/vnd.fujixerox.ddd": [
  	"ddd"
  ],
  	"application/vnd.fujixerox.docuworks": [
  	"xdw"
  ],
  	"application/vnd.fujixerox.docuworks.binder": [
  	"xbd"
  ],
  	"application/vnd.fuzzysheet": [
  	"fzs"
  ],
  	"application/vnd.genomatix.tuxedo": [
  	"txd"
  ],
  	"application/vnd.geogebra.file": [
  	"ggb"
  ],
  	"application/vnd.geogebra.tool": [
  	"ggt"
  ],
  	"application/vnd.geometry-explorer": [
  	"gex",
  	"gre"
  ],
  	"application/vnd.geonext": [
  	"gxt"
  ],
  	"application/vnd.geoplan": [
  	"g2w"
  ],
  	"application/vnd.geospace": [
  	"g3w"
  ],
  	"application/vnd.gmx": [
  	"gmx"
  ],
  	"application/vnd.google-apps.document": [
  	"gdoc"
  ],
  	"application/vnd.google-apps.presentation": [
  	"gslides"
  ],
  	"application/vnd.google-apps.spreadsheet": [
  	"gsheet"
  ],
  	"application/vnd.google-earth.kml+xml": [
  	"kml"
  ],
  	"application/vnd.google-earth.kmz": [
  	"kmz"
  ],
  	"application/vnd.grafeq": [
  	"gqf",
  	"gqs"
  ],
  	"application/vnd.groove-account": [
  	"gac"
  ],
  	"application/vnd.groove-help": [
  	"ghf"
  ],
  	"application/vnd.groove-identity-message": [
  	"gim"
  ],
  	"application/vnd.groove-injector": [
  	"grv"
  ],
  	"application/vnd.groove-tool-message": [
  	"gtm"
  ],
  	"application/vnd.groove-tool-template": [
  	"tpl"
  ],
  	"application/vnd.groove-vcard": [
  	"vcg"
  ],
  	"application/vnd.hal+xml": [
  	"hal"
  ],
  	"application/vnd.handheld-entertainment+xml": [
  	"zmm"
  ],
  	"application/vnd.hbci": [
  	"hbci"
  ],
  	"application/vnd.hhe.lesson-player": [
  	"les"
  ],
  	"application/vnd.hp-hpgl": [
  	"hpgl"
  ],
  	"application/vnd.hp-hpid": [
  	"hpid"
  ],
  	"application/vnd.hp-hps": [
  	"hps"
  ],
  	"application/vnd.hp-jlyt": [
  	"jlt"
  ],
  	"application/vnd.hp-pcl": [
  	"pcl"
  ],
  	"application/vnd.hp-pclxl": [
  	"pclxl"
  ],
  	"application/vnd.hydrostatix.sof-data": [
  	"sfd-hdstx"
  ],
  	"application/vnd.ibm.minipay": [
  	"mpy"
  ],
  	"application/vnd.ibm.modcap": [
  	"afp",
  	"listafp",
  	"list3820"
  ],
  	"application/vnd.ibm.rights-management": [
  	"irm"
  ],
  	"application/vnd.ibm.secure-container": [
  	"sc"
  ],
  	"application/vnd.iccprofile": [
  	"icc",
  	"icm"
  ],
  	"application/vnd.igloader": [
  	"igl"
  ],
  	"application/vnd.immervision-ivp": [
  	"ivp"
  ],
  	"application/vnd.immervision-ivu": [
  	"ivu"
  ],
  	"application/vnd.insors.igm": [
  	"igm"
  ],
  	"application/vnd.intercon.formnet": [
  	"xpw",
  	"xpx"
  ],
  	"application/vnd.intergeo": [
  	"i2g"
  ],
  	"application/vnd.intu.qbo": [
  	"qbo"
  ],
  	"application/vnd.intu.qfx": [
  	"qfx"
  ],
  	"application/vnd.ipunplugged.rcprofile": [
  	"rcprofile"
  ],
  	"application/vnd.irepository.package+xml": [
  	"irp"
  ],
  	"application/vnd.is-xpr": [
  	"xpr"
  ],
  	"application/vnd.isac.fcs": [
  	"fcs"
  ],
  	"application/vnd.jam": [
  	"jam"
  ],
  	"application/vnd.jcp.javame.midlet-rms": [
  	"rms"
  ],
  	"application/vnd.jisp": [
  	"jisp"
  ],
  	"application/vnd.joost.joda-archive": [
  	"joda"
  ],
  	"application/vnd.kahootz": [
  	"ktz",
  	"ktr"
  ],
  	"application/vnd.kde.karbon": [
  	"karbon"
  ],
  	"application/vnd.kde.kchart": [
  	"chrt"
  ],
  	"application/vnd.kde.kformula": [
  	"kfo"
  ],
  	"application/vnd.kde.kivio": [
  	"flw"
  ],
  	"application/vnd.kde.kontour": [
  	"kon"
  ],
  	"application/vnd.kde.kpresenter": [
  	"kpr",
  	"kpt"
  ],
  	"application/vnd.kde.kspread": [
  	"ksp"
  ],
  	"application/vnd.kde.kword": [
  	"kwd",
  	"kwt"
  ],
  	"application/vnd.kenameaapp": [
  	"htke"
  ],
  	"application/vnd.kidspiration": [
  	"kia"
  ],
  	"application/vnd.kinar": [
  	"kne",
  	"knp"
  ],
  	"application/vnd.koan": [
  	"skp",
  	"skd",
  	"skt",
  	"skm"
  ],
  	"application/vnd.kodak-descriptor": [
  	"sse"
  ],
  	"application/vnd.las.las+xml": [
  	"lasxml"
  ],
  	"application/vnd.llamagraphics.life-balance.desktop": [
  	"lbd"
  ],
  	"application/vnd.llamagraphics.life-balance.exchange+xml": [
  	"lbe"
  ],
  	"application/vnd.lotus-1-2-3": [
  	"123"
  ],
  	"application/vnd.lotus-approach": [
  	"apr"
  ],
  	"application/vnd.lotus-freelance": [
  	"pre"
  ],
  	"application/vnd.lotus-notes": [
  	"nsf"
  ],
  	"application/vnd.lotus-organizer": [
  	"org"
  ],
  	"application/vnd.lotus-screencam": [
  	"scm"
  ],
  	"application/vnd.lotus-wordpro": [
  	"lwp"
  ],
  	"application/vnd.macports.portpkg": [
  	"portpkg"
  ],
  	"application/vnd.mcd": [
  	"mcd"
  ],
  	"application/vnd.medcalcdata": [
  	"mc1"
  ],
  	"application/vnd.mediastation.cdkey": [
  	"cdkey"
  ],
  	"application/vnd.mfer": [
  	"mwf"
  ],
  	"application/vnd.mfmp": [
  	"mfm"
  ],
  	"application/vnd.micrografx.flo": [
  	"flo"
  ],
  	"application/vnd.micrografx.igx": [
  	"igx"
  ],
  	"application/vnd.mif": [
  	"mif"
  ],
  	"application/vnd.mobius.daf": [
  	"daf"
  ],
  	"application/vnd.mobius.dis": [
  	"dis"
  ],
  	"application/vnd.mobius.mbk": [
  	"mbk"
  ],
  	"application/vnd.mobius.mqy": [
  	"mqy"
  ],
  	"application/vnd.mobius.msl": [
  	"msl"
  ],
  	"application/vnd.mobius.plc": [
  	"plc"
  ],
  	"application/vnd.mobius.txf": [
  	"txf"
  ],
  	"application/vnd.mophun.application": [
  	"mpn"
  ],
  	"application/vnd.mophun.certificate": [
  	"mpc"
  ],
  	"application/vnd.mozilla.xul+xml": [
  	"xul"
  ],
  	"application/vnd.ms-artgalry": [
  	"cil"
  ],
  	"application/vnd.ms-cab-compressed": [
  	"cab"
  ],
  	"application/vnd.ms-excel": [
  	"xls",
  	"xlm",
  	"xla",
  	"xlc",
  	"xlt",
  	"xlw"
  ],
  	"application/vnd.ms-excel.addin.macroenabled.12": [
  	"xlam"
  ],
  	"application/vnd.ms-excel.sheet.binary.macroenabled.12": [
  	"xlsb"
  ],
  	"application/vnd.ms-excel.sheet.macroenabled.12": [
  	"xlsm"
  ],
  	"application/vnd.ms-excel.template.macroenabled.12": [
  	"xltm"
  ],
  	"application/vnd.ms-fontobject": [
  	"eot"
  ],
  	"application/vnd.ms-htmlhelp": [
  	"chm"
  ],
  	"application/vnd.ms-ims": [
  	"ims"
  ],
  	"application/vnd.ms-lrm": [
  	"lrm"
  ],
  	"application/vnd.ms-officetheme": [
  	"thmx"
  ],
  	"application/vnd.ms-outlook": [
  	"msg"
  ],
  	"application/vnd.ms-pki.seccat": [
  	"cat"
  ],
  	"application/vnd.ms-pki.stl": [
  	"stl"
  ],
  	"application/vnd.ms-powerpoint": [
  	"ppt",
  	"pps",
  	"pot"
  ],
  	"application/vnd.ms-powerpoint.addin.macroenabled.12": [
  	"ppam"
  ],
  	"application/vnd.ms-powerpoint.presentation.macroenabled.12": [
  	"pptm"
  ],
  	"application/vnd.ms-powerpoint.slide.macroenabled.12": [
  	"sldm"
  ],
  	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": [
  	"ppsm"
  ],
  	"application/vnd.ms-powerpoint.template.macroenabled.12": [
  	"potm"
  ],
  	"application/vnd.ms-project": [
  	"mpp",
  	"mpt"
  ],
  	"application/vnd.ms-word.document.macroenabled.12": [
  	"docm"
  ],
  	"application/vnd.ms-word.template.macroenabled.12": [
  	"dotm"
  ],
  	"application/vnd.ms-works": [
  	"wps",
  	"wks",
  	"wcm",
  	"wdb"
  ],
  	"application/vnd.ms-wpl": [
  	"wpl"
  ],
  	"application/vnd.ms-xpsdocument": [
  	"xps"
  ],
  	"application/vnd.mseq": [
  	"mseq"
  ],
  	"application/vnd.musician": [
  	"mus"
  ],
  	"application/vnd.muvee.style": [
  	"msty"
  ],
  	"application/vnd.mynfc": [
  	"taglet"
  ],
  	"application/vnd.neurolanguage.nlu": [
  	"nlu"
  ],
  	"application/vnd.nitf": [
  	"ntf",
  	"nitf"
  ],
  	"application/vnd.noblenet-directory": [
  	"nnd"
  ],
  	"application/vnd.noblenet-sealer": [
  	"nns"
  ],
  	"application/vnd.noblenet-web": [
  	"nnw"
  ],
  	"application/vnd.nokia.n-gage.data": [
  	"ngdat"
  ],
  	"application/vnd.nokia.n-gage.symbian.install": [
  	"n-gage"
  ],
  	"application/vnd.nokia.radio-preset": [
  	"rpst"
  ],
  	"application/vnd.nokia.radio-presets": [
  	"rpss"
  ],
  	"application/vnd.novadigm.edm": [
  	"edm"
  ],
  	"application/vnd.novadigm.edx": [
  	"edx"
  ],
  	"application/vnd.novadigm.ext": [
  	"ext"
  ],
  	"application/vnd.oasis.opendocument.chart": [
  	"odc"
  ],
  	"application/vnd.oasis.opendocument.chart-template": [
  	"otc"
  ],
  	"application/vnd.oasis.opendocument.database": [
  	"odb"
  ],
  	"application/vnd.oasis.opendocument.formula": [
  	"odf"
  ],
  	"application/vnd.oasis.opendocument.formula-template": [
  	"odft"
  ],
  	"application/vnd.oasis.opendocument.graphics": [
  	"odg"
  ],
  	"application/vnd.oasis.opendocument.graphics-template": [
  	"otg"
  ],
  	"application/vnd.oasis.opendocument.image": [
  	"odi"
  ],
  	"application/vnd.oasis.opendocument.image-template": [
  	"oti"
  ],
  	"application/vnd.oasis.opendocument.presentation": [
  	"odp"
  ],
  	"application/vnd.oasis.opendocument.presentation-template": [
  	"otp"
  ],
  	"application/vnd.oasis.opendocument.spreadsheet": [
  	"ods"
  ],
  	"application/vnd.oasis.opendocument.spreadsheet-template": [
  	"ots"
  ],
  	"application/vnd.oasis.opendocument.text": [
  	"odt"
  ],
  	"application/vnd.oasis.opendocument.text-master": [
  	"odm"
  ],
  	"application/vnd.oasis.opendocument.text-template": [
  	"ott"
  ],
  	"application/vnd.oasis.opendocument.text-web": [
  	"oth"
  ],
  	"application/vnd.olpc-sugar": [
  	"xo"
  ],
  	"application/vnd.oma.dd2+xml": [
  	"dd2"
  ],
  	"application/vnd.openofficeorg.extension": [
  	"oxt"
  ],
  	"application/vnd.openxmlformats-officedocument.presentationml.presentation": [
  	"pptx"
  ],
  	"application/vnd.openxmlformats-officedocument.presentationml.slide": [
  	"sldx"
  ],
  	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": [
  	"ppsx"
  ],
  	"application/vnd.openxmlformats-officedocument.presentationml.template": [
  	"potx"
  ],
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
  	"xlsx"
  ],
  	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": [
  	"xltx"
  ],
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
  	"docx"
  ],
  	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": [
  	"dotx"
  ],
  	"application/vnd.osgeo.mapguide.package": [
  	"mgp"
  ],
  	"application/vnd.osgi.dp": [
  	"dp"
  ],
  	"application/vnd.osgi.subsystem": [
  	"esa"
  ],
  	"application/vnd.palm": [
  	"pdb",
  	"pqa",
  	"oprc"
  ],
  	"application/vnd.pawaafile": [
  	"paw"
  ],
  	"application/vnd.pg.format": [
  	"str"
  ],
  	"application/vnd.pg.osasli": [
  	"ei6"
  ],
  	"application/vnd.picsel": [
  	"efif"
  ],
  	"application/vnd.pmi.widget": [
  	"wg"
  ],
  	"application/vnd.pocketlearn": [
  	"plf"
  ],
  	"application/vnd.powerbuilder6": [
  	"pbd"
  ],
  	"application/vnd.previewsystems.box": [
  	"box"
  ],
  	"application/vnd.proteus.magazine": [
  	"mgz"
  ],
  	"application/vnd.publishare-delta-tree": [
  	"qps"
  ],
  	"application/vnd.pvi.ptid1": [
  	"ptid"
  ],
  	"application/vnd.quark.quarkxpress": [
  	"qxd",
  	"qxt",
  	"qwd",
  	"qwt",
  	"qxl",
  	"qxb"
  ],
  	"application/vnd.realvnc.bed": [
  	"bed"
  ],
  	"application/vnd.recordare.musicxml": [
  	"mxl"
  ],
  	"application/vnd.recordare.musicxml+xml": [
  	"musicxml"
  ],
  	"application/vnd.rig.cryptonote": [
  	"cryptonote"
  ],
  	"application/vnd.rim.cod": [
  	"cod"
  ],
  	"application/vnd.rn-realmedia": [
  	"rm"
  ],
  	"application/vnd.rn-realmedia-vbr": [
  	"rmvb"
  ],
  	"application/vnd.route66.link66+xml": [
  	"link66"
  ],
  	"application/vnd.sailingtracker.track": [
  	"st"
  ],
  	"application/vnd.seemail": [
  	"see"
  ],
  	"application/vnd.sema": [
  	"sema"
  ],
  	"application/vnd.semd": [
  	"semd"
  ],
  	"application/vnd.semf": [
  	"semf"
  ],
  	"application/vnd.shana.informed.formdata": [
  	"ifm"
  ],
  	"application/vnd.shana.informed.formtemplate": [
  	"itp"
  ],
  	"application/vnd.shana.informed.interchange": [
  	"iif"
  ],
  	"application/vnd.shana.informed.package": [
  	"ipk"
  ],
  	"application/vnd.simtech-mindmapper": [
  	"twd",
  	"twds"
  ],
  	"application/vnd.smaf": [
  	"mmf"
  ],
  	"application/vnd.smart.teacher": [
  	"teacher"
  ],
  	"application/vnd.solent.sdkm+xml": [
  	"sdkm",
  	"sdkd"
  ],
  	"application/vnd.spotfire.dxp": [
  	"dxp"
  ],
  	"application/vnd.spotfire.sfs": [
  	"sfs"
  ],
  	"application/vnd.stardivision.calc": [
  	"sdc"
  ],
  	"application/vnd.stardivision.draw": [
  	"sda"
  ],
  	"application/vnd.stardivision.impress": [
  	"sdd"
  ],
  	"application/vnd.stardivision.math": [
  	"smf"
  ],
  	"application/vnd.stardivision.writer": [
  	"sdw",
  	"vor"
  ],
  	"application/vnd.stardivision.writer-global": [
  	"sgl"
  ],
  	"application/vnd.stepmania.package": [
  	"smzip"
  ],
  	"application/vnd.stepmania.stepchart": [
  	"sm"
  ],
  	"application/vnd.sun.wadl+xml": [
  	"wadl"
  ],
  	"application/vnd.sun.xml.calc": [
  	"sxc"
  ],
  	"application/vnd.sun.xml.calc.template": [
  	"stc"
  ],
  	"application/vnd.sun.xml.draw": [
  	"sxd"
  ],
  	"application/vnd.sun.xml.draw.template": [
  	"std"
  ],
  	"application/vnd.sun.xml.impress": [
  	"sxi"
  ],
  	"application/vnd.sun.xml.impress.template": [
  	"sti"
  ],
  	"application/vnd.sun.xml.math": [
  	"sxm"
  ],
  	"application/vnd.sun.xml.writer": [
  	"sxw"
  ],
  	"application/vnd.sun.xml.writer.global": [
  	"sxg"
  ],
  	"application/vnd.sun.xml.writer.template": [
  	"stw"
  ],
  	"application/vnd.sus-calendar": [
  	"sus",
  	"susp"
  ],
  	"application/vnd.svd": [
  	"svd"
  ],
  	"application/vnd.symbian.install": [
  	"sis",
  	"sisx"
  ],
  	"application/vnd.syncml+xml": [
  	"xsm"
  ],
  	"application/vnd.syncml.dm+wbxml": [
  	"bdm"
  ],
  	"application/vnd.syncml.dm+xml": [
  	"xdm"
  ],
  	"application/vnd.tao.intent-module-archive": [
  	"tao"
  ],
  	"application/vnd.tcpdump.pcap": [
  	"pcap",
  	"cap",
  	"dmp"
  ],
  	"application/vnd.tmobile-livetv": [
  	"tmo"
  ],
  	"application/vnd.trid.tpt": [
  	"tpt"
  ],
  	"application/vnd.triscape.mxs": [
  	"mxs"
  ],
  	"application/vnd.trueapp": [
  	"tra"
  ],
  	"application/vnd.ufdl": [
  	"ufd",
  	"ufdl"
  ],
  	"application/vnd.uiq.theme": [
  	"utz"
  ],
  	"application/vnd.umajin": [
  	"umj"
  ],
  	"application/vnd.unity": [
  	"unityweb"
  ],
  	"application/vnd.uoml+xml": [
  	"uoml"
  ],
  	"application/vnd.vcx": [
  	"vcx"
  ],
  	"application/vnd.visio": [
  	"vsd",
  	"vst",
  	"vss",
  	"vsw"
  ],
  	"application/vnd.visionary": [
  	"vis"
  ],
  	"application/vnd.vsf": [
  	"vsf"
  ],
  	"application/vnd.wap.wbxml": [
  	"wbxml"
  ],
  	"application/vnd.wap.wmlc": [
  	"wmlc"
  ],
  	"application/vnd.wap.wmlscriptc": [
  	"wmlsc"
  ],
  	"application/vnd.webturbo": [
  	"wtb"
  ],
  	"application/vnd.wolfram.player": [
  	"nbp"
  ],
  	"application/vnd.wordperfect": [
  	"wpd"
  ],
  	"application/vnd.wqd": [
  	"wqd"
  ],
  	"application/vnd.wt.stf": [
  	"stf"
  ],
  	"application/vnd.xara": [
  	"xar"
  ],
  	"application/vnd.xfdl": [
  	"xfdl"
  ],
  	"application/vnd.yamaha.hv-dic": [
  	"hvd"
  ],
  	"application/vnd.yamaha.hv-script": [
  	"hvs"
  ],
  	"application/vnd.yamaha.hv-voice": [
  	"hvp"
  ],
  	"application/vnd.yamaha.openscoreformat": [
  	"osf"
  ],
  	"application/vnd.yamaha.openscoreformat.osfpvg+xml": [
  	"osfpvg"
  ],
  	"application/vnd.yamaha.smaf-audio": [
  	"saf"
  ],
  	"application/vnd.yamaha.smaf-phrase": [
  	"spf"
  ],
  	"application/vnd.yellowriver-custom-menu": [
  	"cmp"
  ],
  	"application/vnd.zul": [
  	"zir",
  	"zirz"
  ],
  	"application/vnd.zzazz.deck+xml": [
  	"zaz"
  ],
  	"application/voicexml+xml": [
  	"vxml"
  ],
  	"application/wasm": [
  	"wasm"
  ],
  	"application/widget": [
  	"wgt"
  ],
  	"application/winhlp": [
  	"hlp"
  ],
  	"application/wsdl+xml": [
  	"wsdl"
  ],
  	"application/wspolicy+xml": [
  	"wspolicy"
  ],
  	"application/x-7z-compressed": [
  	"7z"
  ],
  	"application/x-abiword": [
  	"abw"
  ],
  	"application/x-ace-compressed": [
  	"ace"
  ],
  	"application/x-apple-diskimage": [
  ],
  	"application/x-arj": [
  	"arj"
  ],
  	"application/x-authorware-bin": [
  	"aab",
  	"x32",
  	"u32",
  	"vox"
  ],
  	"application/x-authorware-map": [
  	"aam"
  ],
  	"application/x-authorware-seg": [
  	"aas"
  ],
  	"application/x-bcpio": [
  	"bcpio"
  ],
  	"application/x-bdoc": [
  ],
  	"application/x-bittorrent": [
  	"torrent"
  ],
  	"application/x-blorb": [
  	"blb",
  	"blorb"
  ],
  	"application/x-bzip": [
  	"bz"
  ],
  	"application/x-bzip2": [
  	"bz2",
  	"boz"
  ],
  	"application/x-cbr": [
  	"cbr",
  	"cba",
  	"cbt",
  	"cbz",
  	"cb7"
  ],
  	"application/x-cdlink": [
  	"vcd"
  ],
  	"application/x-cfs-compressed": [
  	"cfs"
  ],
  	"application/x-chat": [
  	"chat"
  ],
  	"application/x-chess-pgn": [
  	"pgn"
  ],
  	"application/x-chrome-extension": [
  	"crx"
  ],
  	"application/x-cocoa": [
  	"cco"
  ],
  	"application/x-conference": [
  	"nsc"
  ],
  	"application/x-cpio": [
  	"cpio"
  ],
  	"application/x-csh": [
  	"csh"
  ],
  	"application/x-debian-package": [
  	"udeb"
  ],
  	"application/x-dgc-compressed": [
  	"dgc"
  ],
  	"application/x-director": [
  	"dir",
  	"dcr",
  	"dxr",
  	"cst",
  	"cct",
  	"cxt",
  	"w3d",
  	"fgd",
  	"swa"
  ],
  	"application/x-doom": [
  	"wad"
  ],
  	"application/x-dtbncx+xml": [
  	"ncx"
  ],
  	"application/x-dtbook+xml": [
  	"dtb"
  ],
  	"application/x-dtbresource+xml": [
  	"res"
  ],
  	"application/x-dvi": [
  	"dvi"
  ],
  	"application/x-envoy": [
  	"evy"
  ],
  	"application/x-eva": [
  	"eva"
  ],
  	"application/x-font-bdf": [
  	"bdf"
  ],
  	"application/x-font-ghostscript": [
  	"gsf"
  ],
  	"application/x-font-linux-psf": [
  	"psf"
  ],
  	"application/x-font-pcf": [
  	"pcf"
  ],
  	"application/x-font-snf": [
  	"snf"
  ],
  	"application/x-font-type1": [
  	"pfa",
  	"pfb",
  	"pfm",
  	"afm"
  ],
  	"application/x-freearc": [
  	"arc"
  ],
  	"application/x-futuresplash": [
  	"spl"
  ],
  	"application/x-gca-compressed": [
  	"gca"
  ],
  	"application/x-glulx": [
  	"ulx"
  ],
  	"application/x-gnumeric": [
  	"gnumeric"
  ],
  	"application/x-gramps-xml": [
  	"gramps"
  ],
  	"application/x-gtar": [
  	"gtar"
  ],
  	"application/x-hdf": [
  	"hdf"
  ],
  	"application/x-httpd-php": [
  	"php"
  ],
  	"application/x-install-instructions": [
  	"install"
  ],
  	"application/x-iso9660-image": [
  ],
  	"application/x-java-archive-diff": [
  	"jardiff"
  ],
  	"application/x-java-jnlp-file": [
  	"jnlp"
  ],
  	"application/x-latex": [
  	"latex"
  ],
  	"application/x-lua-bytecode": [
  	"luac"
  ],
  	"application/x-lzh-compressed": [
  	"lzh",
  	"lha"
  ],
  	"application/x-makeself": [
  	"run"
  ],
  	"application/x-mie": [
  	"mie"
  ],
  	"application/x-mobipocket-ebook": [
  	"prc",
  	"mobi"
  ],
  	"application/x-ms-application": [
  	"application"
  ],
  	"application/x-ms-shortcut": [
  	"lnk"
  ],
  	"application/x-ms-wmd": [
  	"wmd"
  ],
  	"application/x-ms-wmz": [
  	"wmz"
  ],
  	"application/x-ms-xbap": [
  	"xbap"
  ],
  	"application/x-msaccess": [
  	"mdb"
  ],
  	"application/x-msbinder": [
  	"obd"
  ],
  	"application/x-mscardfile": [
  	"crd"
  ],
  	"application/x-msclip": [
  	"clp"
  ],
  	"application/x-msdos-program": [
  ],
  	"application/x-msdownload": [
  	"com",
  	"bat"
  ],
  	"application/x-msmediaview": [
  	"mvb",
  	"m13",
  	"m14"
  ],
  	"application/x-msmetafile": [
  	"wmf",
  	"emf",
  	"emz"
  ],
  	"application/x-msmoney": [
  	"mny"
  ],
  	"application/x-mspublisher": [
  	"pub"
  ],
  	"application/x-msschedule": [
  	"scd"
  ],
  	"application/x-msterminal": [
  	"trm"
  ],
  	"application/x-mswrite": [
  	"wri"
  ],
  	"application/x-netcdf": [
  	"nc",
  	"cdf"
  ],
  	"application/x-ns-proxy-autoconfig": [
  	"pac"
  ],
  	"application/x-nzb": [
  	"nzb"
  ],
  	"application/x-perl": [
  	"pl",
  	"pm"
  ],
  	"application/x-pilot": [
  ],
  	"application/x-pkcs12": [
  	"p12",
  	"pfx"
  ],
  	"application/x-pkcs7-certificates": [
  	"p7b",
  	"spc"
  ],
  	"application/x-pkcs7-certreqresp": [
  	"p7r"
  ],
  	"application/x-rar-compressed": [
  	"rar"
  ],
  	"application/x-redhat-package-manager": [
  	"rpm"
  ],
  	"application/x-research-info-systems": [
  	"ris"
  ],
  	"application/x-sea": [
  	"sea"
  ],
  	"application/x-sh": [
  	"sh"
  ],
  	"application/x-shar": [
  	"shar"
  ],
  	"application/x-shockwave-flash": [
  	"swf"
  ],
  	"application/x-silverlight-app": [
  	"xap"
  ],
  	"application/x-sql": [
  	"sql"
  ],
  	"application/x-stuffit": [
  	"sit"
  ],
  	"application/x-stuffitx": [
  	"sitx"
  ],
  	"application/x-subrip": [
  	"srt"
  ],
  	"application/x-sv4cpio": [
  	"sv4cpio"
  ],
  	"application/x-sv4crc": [
  	"sv4crc"
  ],
  	"application/x-t3vm-image": [
  	"t3"
  ],
  	"application/x-tads": [
  	"gam"
  ],
  	"application/x-tar": [
  	"tar"
  ],
  	"application/x-tcl": [
  	"tcl",
  	"tk"
  ],
  	"application/x-tex": [
  	"tex"
  ],
  	"application/x-tex-tfm": [
  	"tfm"
  ],
  	"application/x-texinfo": [
  	"texinfo",
  	"texi"
  ],
  	"application/x-tgif": [
  	"obj"
  ],
  	"application/x-ustar": [
  	"ustar"
  ],
  	"application/x-virtualbox-hdd": [
  	"hdd"
  ],
  	"application/x-virtualbox-ova": [
  	"ova"
  ],
  	"application/x-virtualbox-ovf": [
  	"ovf"
  ],
  	"application/x-virtualbox-vbox": [
  	"vbox"
  ],
  	"application/x-virtualbox-vbox-extpack": [
  	"vbox-extpack"
  ],
  	"application/x-virtualbox-vdi": [
  	"vdi"
  ],
  	"application/x-virtualbox-vhd": [
  	"vhd"
  ],
  	"application/x-virtualbox-vmdk": [
  	"vmdk"
  ],
  	"application/x-wais-source": [
  	"src"
  ],
  	"application/x-web-app-manifest+json": [
  	"webapp"
  ],
  	"application/x-x509-ca-cert": [
  	"der",
  	"crt",
  	"pem"
  ],
  	"application/x-xfig": [
  	"fig"
  ],
  	"application/x-xliff+xml": [
  	"xlf"
  ],
  	"application/x-xpinstall": [
  	"xpi"
  ],
  	"application/x-xz": [
  	"xz"
  ],
  	"application/x-zmachine": [
  	"z1",
  	"z2",
  	"z3",
  	"z4",
  	"z5",
  	"z6",
  	"z7",
  	"z8"
  ],
  	"application/xaml+xml": [
  	"xaml"
  ],
  	"application/xcap-diff+xml": [
  	"xdf"
  ],
  	"application/xenc+xml": [
  	"xenc"
  ],
  	"application/xhtml+xml": [
  	"xhtml",
  	"xht"
  ],
  	"application/xml": [
  	"xml",
  	"xsl",
  	"xsd",
  	"rng"
  ],
  	"application/xml-dtd": [
  	"dtd"
  ],
  	"application/xop+xml": [
  	"xop"
  ],
  	"application/xproc+xml": [
  	"xpl"
  ],
  	"application/xslt+xml": [
  	"xslt"
  ],
  	"application/xspf+xml": [
  	"xspf"
  ],
  	"application/xv+xml": [
  	"mxml",
  	"xhvml",
  	"xvml",
  	"xvm"
  ],
  	"application/yang": [
  	"yang"
  ],
  	"application/yin+xml": [
  	"yin"
  ],
  	"application/zip": [
  	"zip"
  ],
  	"audio/3gpp": [
  ],
  	"audio/adpcm": [
  	"adp"
  ],
  	"audio/basic": [
  	"au",
  	"snd"
  ],
  	"audio/midi": [
  	"mid",
  	"midi",
  	"kar",
  	"rmi"
  ],
  	"audio/mp3": [
  ],
  	"audio/mp4": [
  	"m4a",
  	"mp4a"
  ],
  	"audio/mpeg": [
  	"mpga",
  	"mp2",
  	"mp2a",
  	"mp3",
  	"m2a",
  	"m3a"
  ],
  	"audio/ogg": [
  	"oga",
  	"ogg",
  	"spx"
  ],
  	"audio/s3m": [
  	"s3m"
  ],
  	"audio/silk": [
  	"sil"
  ],
  	"audio/vnd.dece.audio": [
  	"uva",
  	"uvva"
  ],
  	"audio/vnd.digital-winds": [
  	"eol"
  ],
  	"audio/vnd.dra": [
  	"dra"
  ],
  	"audio/vnd.dts": [
  	"dts"
  ],
  	"audio/vnd.dts.hd": [
  	"dtshd"
  ],
  	"audio/vnd.lucent.voice": [
  	"lvp"
  ],
  	"audio/vnd.ms-playready.media.pya": [
  	"pya"
  ],
  	"audio/vnd.nuera.ecelp4800": [
  	"ecelp4800"
  ],
  	"audio/vnd.nuera.ecelp7470": [
  	"ecelp7470"
  ],
  	"audio/vnd.nuera.ecelp9600": [
  	"ecelp9600"
  ],
  	"audio/vnd.rip": [
  	"rip"
  ],
  	"audio/wav": [
  	"wav"
  ],
  	"audio/wave": [
  ],
  	"audio/webm": [
  	"weba"
  ],
  	"audio/x-aac": [
  	"aac"
  ],
  	"audio/x-aiff": [
  	"aif",
  	"aiff",
  	"aifc"
  ],
  	"audio/x-caf": [
  	"caf"
  ],
  	"audio/x-flac": [
  	"flac"
  ],
  	"audio/x-m4a": [
  ],
  	"audio/x-matroska": [
  	"mka"
  ],
  	"audio/x-mpegurl": [
  	"m3u"
  ],
  	"audio/x-ms-wax": [
  	"wax"
  ],
  	"audio/x-ms-wma": [
  	"wma"
  ],
  	"audio/x-pn-realaudio": [
  	"ram",
  	"ra"
  ],
  	"audio/x-pn-realaudio-plugin": [
  	"rmp"
  ],
  	"audio/x-realaudio": [
  ],
  	"audio/x-wav": [
  ],
  	"audio/xm": [
  	"xm"
  ],
  	"chemical/x-cdx": [
  	"cdx"
  ],
  	"chemical/x-cif": [
  	"cif"
  ],
  	"chemical/x-cmdf": [
  	"cmdf"
  ],
  	"chemical/x-cml": [
  	"cml"
  ],
  	"chemical/x-csml": [
  	"csml"
  ],
  	"chemical/x-xyz": [
  	"xyz"
  ],
  	"font/collection": [
  	"ttc"
  ],
  	"font/otf": [
  	"otf"
  ],
  	"font/ttf": [
  	"ttf"
  ],
  	"font/woff": [
  	"woff"
  ],
  	"font/woff2": [
  	"woff2"
  ],
  	"image/apng": [
  	"apng"
  ],
  	"image/bmp": [
  	"bmp"
  ],
  	"image/cgm": [
  	"cgm"
  ],
  	"image/g3fax": [
  	"g3"
  ],
  	"image/gif": [
  	"gif"
  ],
  	"image/ief": [
  	"ief"
  ],
  	"image/jp2": [
  	"jp2",
  	"jpg2"
  ],
  	"image/jpeg": [
  	"jpeg",
  	"jpg",
  	"jpe"
  ],
  	"image/jpm": [
  	"jpm"
  ],
  	"image/jpx": [
  	"jpx",
  	"jpf"
  ],
  	"image/ktx": [
  	"ktx"
  ],
  	"image/png": [
  	"png"
  ],
  	"image/prs.btif": [
  	"btif"
  ],
  	"image/sgi": [
  	"sgi"
  ],
  	"image/svg+xml": [
  	"svg",
  	"svgz"
  ],
  	"image/tiff": [
  	"tiff",
  	"tif"
  ],
  	"image/vnd.adobe.photoshop": [
  	"psd"
  ],
  	"image/vnd.dece.graphic": [
  	"uvi",
  	"uvvi",
  	"uvg",
  	"uvvg"
  ],
  	"image/vnd.djvu": [
  	"djvu",
  	"djv"
  ],
  	"image/vnd.dvb.subtitle": [
  ],
  	"image/vnd.dwg": [
  	"dwg"
  ],
  	"image/vnd.dxf": [
  	"dxf"
  ],
  	"image/vnd.fastbidsheet": [
  	"fbs"
  ],
  	"image/vnd.fpx": [
  	"fpx"
  ],
  	"image/vnd.fst": [
  	"fst"
  ],
  	"image/vnd.fujixerox.edmics-mmr": [
  	"mmr"
  ],
  	"image/vnd.fujixerox.edmics-rlc": [
  	"rlc"
  ],
  	"image/vnd.ms-modi": [
  	"mdi"
  ],
  	"image/vnd.ms-photo": [
  	"wdp"
  ],
  	"image/vnd.net-fpx": [
  	"npx"
  ],
  	"image/vnd.wap.wbmp": [
  	"wbmp"
  ],
  	"image/vnd.xiff": [
  	"xif"
  ],
  	"image/webp": [
  	"webp"
  ],
  	"image/x-3ds": [
  	"3ds"
  ],
  	"image/x-cmu-raster": [
  	"ras"
  ],
  	"image/x-cmx": [
  	"cmx"
  ],
  	"image/x-freehand": [
  	"fh",
  	"fhc",
  	"fh4",
  	"fh5",
  	"fh7"
  ],
  	"image/x-icon": [
  	"ico"
  ],
  	"image/x-jng": [
  	"jng"
  ],
  	"image/x-mrsid-image": [
  	"sid"
  ],
  	"image/x-ms-bmp": [
  ],
  	"image/x-pcx": [
  	"pcx"
  ],
  	"image/x-pict": [
  	"pic",
  	"pct"
  ],
  	"image/x-portable-anymap": [
  	"pnm"
  ],
  	"image/x-portable-bitmap": [
  	"pbm"
  ],
  	"image/x-portable-graymap": [
  	"pgm"
  ],
  	"image/x-portable-pixmap": [
  	"ppm"
  ],
  	"image/x-rgb": [
  	"rgb"
  ],
  	"image/x-tga": [
  	"tga"
  ],
  	"image/x-xbitmap": [
  	"xbm"
  ],
  	"image/x-xpixmap": [
  	"xpm"
  ],
  	"image/x-xwindowdump": [
  	"xwd"
  ],
  	"message/rfc822": [
  	"eml",
  	"mime"
  ],
  	"model/gltf+json": [
  	"gltf"
  ],
  	"model/gltf-binary": [
  	"glb"
  ],
  	"model/iges": [
  	"igs",
  	"iges"
  ],
  	"model/mesh": [
  	"msh",
  	"mesh",
  	"silo"
  ],
  	"model/vnd.collada+xml": [
  	"dae"
  ],
  	"model/vnd.dwf": [
  	"dwf"
  ],
  	"model/vnd.gdl": [
  	"gdl"
  ],
  	"model/vnd.gtw": [
  	"gtw"
  ],
  	"model/vnd.mts": [
  	"mts"
  ],
  	"model/vnd.vtu": [
  	"vtu"
  ],
  	"model/vrml": [
  	"wrl",
  	"vrml"
  ],
  	"model/x3d+binary": [
  	"x3db",
  	"x3dbz"
  ],
  	"model/x3d+vrml": [
  	"x3dv",
  	"x3dvz"
  ],
  	"model/x3d+xml": [
  	"x3d",
  	"x3dz"
  ],
  	"text/cache-manifest": [
  	"appcache",
  	"manifest"
  ],
  	"text/calendar": [
  	"ics",
  	"ifb"
  ],
  	"text/coffeescript": [
  	"coffee",
  	"litcoffee"
  ],
  	"text/css": [
  	"css"
  ],
  	"text/csv": [
  	"csv"
  ],
  	"text/hjson": [
  	"hjson"
  ],
  	"text/html": [
  	"html",
  	"htm",
  	"shtml"
  ],
  	"text/jade": [
  	"jade"
  ],
  	"text/jsx": [
  	"jsx"
  ],
  	"text/less": [
  	"less"
  ],
  	"text/markdown": [
  	"markdown",
  	"md"
  ],
  	"text/mathml": [
  	"mml"
  ],
  	"text/n3": [
  	"n3"
  ],
  	"text/plain": [
  	"txt",
  	"text",
  	"conf",
  	"def",
  	"list",
  	"log",
  	"in",
  	"ini"
  ],
  	"text/prs.lines.tag": [
  	"dsc"
  ],
  	"text/richtext": [
  	"rtx"
  ],
  	"text/rtf": [
  ],
  	"text/sgml": [
  	"sgml",
  	"sgm"
  ],
  	"text/slim": [
  	"slim",
  	"slm"
  ],
  	"text/stylus": [
  	"stylus",
  	"styl"
  ],
  	"text/tab-separated-values": [
  	"tsv"
  ],
  	"text/troff": [
  	"t",
  	"tr",
  	"roff",
  	"man",
  	"me",
  	"ms"
  ],
  	"text/turtle": [
  	"ttl"
  ],
  	"text/uri-list": [
  	"uri",
  	"uris",
  	"urls"
  ],
  	"text/vcard": [
  	"vcard"
  ],
  	"text/vnd.curl": [
  	"curl"
  ],
  	"text/vnd.curl.dcurl": [
  	"dcurl"
  ],
  	"text/vnd.curl.mcurl": [
  	"mcurl"
  ],
  	"text/vnd.curl.scurl": [
  	"scurl"
  ],
  	"text/vnd.dvb.subtitle": [
  	"sub"
  ],
  	"text/vnd.fly": [
  	"fly"
  ],
  	"text/vnd.fmi.flexstor": [
  	"flx"
  ],
  	"text/vnd.graphviz": [
  	"gv"
  ],
  	"text/vnd.in3d.3dml": [
  	"3dml"
  ],
  	"text/vnd.in3d.spot": [
  	"spot"
  ],
  	"text/vnd.sun.j2me.app-descriptor": [
  	"jad"
  ],
  	"text/vnd.wap.wml": [
  	"wml"
  ],
  	"text/vnd.wap.wmlscript": [
  	"wmls"
  ],
  	"text/vtt": [
  	"vtt"
  ],
  	"text/x-asm": [
  	"s",
  	"asm"
  ],
  	"text/x-c": [
  	"c",
  	"cc",
  	"cxx",
  	"cpp",
  	"h",
  	"hh",
  	"dic"
  ],
  	"text/x-component": [
  	"htc"
  ],
  	"text/x-fortran": [
  	"f",
  	"for",
  	"f77",
  	"f90"
  ],
  	"text/x-handlebars-template": [
  	"hbs"
  ],
  	"text/x-java-source": [
  	"java"
  ],
  	"text/x-lua": [
  	"lua"
  ],
  	"text/x-markdown": [
  	"mkd"
  ],
  	"text/x-nfo": [
  	"nfo"
  ],
  	"text/x-opml": [
  	"opml"
  ],
  	"text/x-org": [
  ],
  	"text/x-pascal": [
  	"p",
  	"pas"
  ],
  	"text/x-processing": [
  	"pde"
  ],
  	"text/x-sass": [
  	"sass"
  ],
  	"text/x-scss": [
  	"scss"
  ],
  	"text/x-setext": [
  	"etx"
  ],
  	"text/x-sfv": [
  	"sfv"
  ],
  	"text/x-suse-ymp": [
  	"ymp"
  ],
  	"text/x-uuencode": [
  	"uu"
  ],
  	"text/x-vcalendar": [
  	"vcs"
  ],
  	"text/x-vcard": [
  	"vcf"
  ],
  	"text/xml": [
  ],
  	"text/yaml": [
  	"yaml",
  	"yml"
  ],
  	"video/3gpp": [
  	"3gp",
  	"3gpp"
  ],
  	"video/3gpp2": [
  	"3g2"
  ],
  	"video/h261": [
  	"h261"
  ],
  	"video/h263": [
  	"h263"
  ],
  	"video/h264": [
  	"h264"
  ],
  	"video/jpeg": [
  	"jpgv"
  ],
  	"video/jpm": [
  	"jpgm"
  ],
  	"video/mj2": [
  	"mj2",
  	"mjp2"
  ],
  	"video/mp2t": [
  	"ts"
  ],
  	"video/mp4": [
  	"mp4",
  	"mp4v",
  	"mpg4"
  ],
  	"video/mpeg": [
  	"mpeg",
  	"mpg",
  	"mpe",
  	"m1v",
  	"m2v"
  ],
  	"video/ogg": [
  	"ogv"
  ],
  	"video/quicktime": [
  	"qt",
  	"mov"
  ],
  	"video/vnd.dece.hd": [
  	"uvh",
  	"uvvh"
  ],
  	"video/vnd.dece.mobile": [
  	"uvm",
  	"uvvm"
  ],
  	"video/vnd.dece.pd": [
  	"uvp",
  	"uvvp"
  ],
  	"video/vnd.dece.sd": [
  	"uvs",
  	"uvvs"
  ],
  	"video/vnd.dece.video": [
  	"uvv",
  	"uvvv"
  ],
  	"video/vnd.dvb.file": [
  	"dvb"
  ],
  	"video/vnd.fvt": [
  	"fvt"
  ],
  	"video/vnd.mpegurl": [
  	"mxu",
  	"m4u"
  ],
  	"video/vnd.ms-playready.media.pyv": [
  	"pyv"
  ],
  	"video/vnd.uvvu.mp4": [
  	"uvu",
  	"uvvu"
  ],
  	"video/vnd.vivo": [
  	"viv"
  ],
  	"video/webm": [
  	"webm"
  ],
  	"video/x-f4v": [
  	"f4v"
  ],
  	"video/x-fli": [
  	"fli"
  ],
  	"video/x-flv": [
  	"flv"
  ],
  	"video/x-m4v": [
  	"m4v"
  ],
  	"video/x-matroska": [
  	"mkv",
  	"mk3d",
  	"mks"
  ],
  	"video/x-mng": [
  	"mng"
  ],
  	"video/x-ms-asf": [
  	"asf",
  	"asx"
  ],
  	"video/x-ms-vob": [
  	"vob"
  ],
  	"video/x-ms-wm": [
  	"wm"
  ],
  	"video/x-ms-wmv": [
  	"wmv"
  ],
  	"video/x-ms-wmx": [
  	"wmx"
  ],
  	"video/x-ms-wvx": [
  	"wvx"
  ],
  	"video/x-msvideo": [
  	"avi"
  ],
  	"video/x-sgi-movie": [
  	"movie"
  ],
  	"video/x-smv": [
  	"smv"
  ],
  	"x-conference/x-cooltalk": [
  	"ice"
  ]
  };

  var types$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': types$2
  });

  var require$$0$2 = getCjsExportFromNamespace(types$3);

  function Mime() {
    // Map of extension -> mime type
    this.types = Object.create(null);

    // Map of mime type -> extension
    this.extensions = Object.create(null);
  }

  /**
   * Define mimetype -> extension mappings.  Each key is a mime-type that maps
   * to an array of extensions associated with the type.  The first extension is
   * used as the default extension for the type.
   *
   * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
   *
   * @param map (Object) type definitions
   */
  Mime.prototype.define = function (map) {
    for (var type in map) {
      var exts = map[type];
      for (var i = 0; i < exts.length; i++) {
        if (process.env.DEBUG_MIME && this.types[exts[i]]) {
          console.warn((this._loading || "define()").replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' +
            this.types[exts[i]] + ' to ' + type);
        }

        this.types[exts[i]] = type;
      }

      // Default extension is the first one we encounter
      if (!this.extensions[type]) {
        this.extensions[type] = exts[0];
      }
    }
  };

  /**
   * Load an Apache2-style ".types" file
   *
   * This may be called multiple times (it's expected).  Where files declare
   * overlapping types/extensions, the last file wins.
   *
   * @param file (String) path of file to load.
   */
  Mime.prototype.load = function(file) {
    this._loading = file;
    // Read file and split into lines
    var map = {},
        content = fs.readFileSync(file, 'ascii'),
        lines = content.split(/[\r\n]+/);

    lines.forEach(function(line) {
      // Clean up whitespace/comments, and split into fields
      var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
      map[fields.shift()] = fields;
    });

    this.define(map);

    this._loading = null;
  };

  /**
   * Lookup a mime type based on extension
   */
  Mime.prototype.lookup = function(path, fallback) {
    var ext = path.replace(/^.*[\.\/\\]/, '').toLowerCase();

    return this.types[ext] || fallback || this.default_type;
  };

  /**
   * Return file extension associated with a mime type
   */
  Mime.prototype.extension = function(mimeType) {
    var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
    return this.extensions[type];
  };

  // Default instance
  var mime = new Mime();

  // Define built-in types
  mime.define(require$$0$2);

  // Default type
  mime.default_type = mime.lookup('bin');

  //
  // Additional API specific to the default instance
  //

  mime.Mime = Mime;

  /**
   * Lookup a charset based on mime type.
   */
  mime.charsets = {
    lookup: function(mimeType, fallback) {
      // Assume text types are utf8
      return (/^text\/|^application\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;
    }
  };

  var mime_1 = mime;

  /**
   * Helpers.
   */

  var s$6 = 1000;
  var m$6 = s$6 * 60;
  var h$6 = m$6 * 60;
  var d$6 = h$6 * 24;
  var w$1 = d$6 * 7;
  var y$7 = d$6 * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  var ms$6 = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse$f(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong$6(val) : fmtShort$6(val);
    }
    throw new Error(
      'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
    );
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse$f(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y$7;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w$1;
      case 'days':
      case 'day':
      case 'd':
        return n * d$6;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h$6;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m$6;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s$6;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort$6(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d$6) {
      return Math.round(ms / d$6) + 'd';
    }
    if (msAbs >= h$6) {
      return Math.round(ms / h$6) + 'h';
    }
    if (msAbs >= m$6) {
      return Math.round(ms / m$6) + 'm';
    }
    if (msAbs >= s$6) {
      return Math.round(ms / s$6) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong$6(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d$6) {
      return plural$6(ms, msAbs, d$6, 'day');
    }
    if (msAbs >= h$6) {
      return plural$6(ms, msAbs, h$6, 'hour');
    }
    if (msAbs >= m$6) {
      return plural$6(ms, msAbs, m$6, 'minute');
    }
    if (msAbs >= s$6) {
      return plural$6(ms, msAbs, s$6, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural$6(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }

  /*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var rangeParser_1 = rangeParser;

  /**
   * Parse "Range" header `str` relative to the given file `size`.
   *
   * @param {Number} size
   * @param {String} str
   * @param {Object} [options]
   * @return {Array}
   * @public
   */

  function rangeParser (size, str, options) {
    if (typeof str !== 'string') {
      throw new TypeError('argument str must be a string')
    }

    var index = str.indexOf('=');

    if (index === -1) {
      return -2
    }

    // split the range string
    var arr = str.slice(index + 1).split(',');
    var ranges = [];

    // add ranges type
    ranges.type = str.slice(0, index);

    // parse all ranges
    for (var i = 0; i < arr.length; i++) {
      var range = arr[i].split('-');
      var start = parseInt(range[0], 10);
      var end = parseInt(range[1], 10);

      // -nnn
      if (isNaN(start)) {
        start = size - end;
        end = size - 1;
      // nnn-
      } else if (isNaN(end)) {
        end = size - 1;
      }

      // limit last-byte-pos to current length
      if (end > size - 1) {
        end = size - 1;
      }

      // invalid or unsatisifiable
      if (isNaN(start) || isNaN(end) || start > end || start < 0) {
        continue
      }

      // add range
      ranges.push({
        start: start,
        end: end
      });
    }

    if (ranges.length < 1) {
      // unsatisifiable
      return -1
    }

    return options && options.combine
      ? combineRanges(ranges)
      : ranges
  }

  /**
   * Combine overlapping & adjacent ranges.
   * @private
   */

  function combineRanges (ranges) {
    var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);

    for (var j = 0, i = 1; i < ordered.length; i++) {
      var range = ordered[i];
      var current = ordered[j];

      if (range.start > current.end + 1) {
        // next range
        ordered[++j] = range;
      } else if (range.end > current.end) {
        // extend range
        current.end = range.end;
        current.index = Math.min(current.index, range.index);
      }
    }

    // trim ordered array
    ordered.length = j + 1;

    // generate combined range
    var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);

    // copy ranges type
    combined.type = ranges.type;

    return combined
  }

  /**
   * Map function to add index value to ranges.
   * @private
   */

  function mapWithIndex (range, index) {
    return {
      start: range.start,
      end: range.end,
      index: index
    }
  }

  /**
   * Map function to remove index value from ranges.
   * @private
   */

  function mapWithoutIndex (range) {
    return {
      start: range.start,
      end: range.end
    }
  }

  /**
   * Sort function to sort ranges by index.
   * @private
   */

  function sortByRangeIndex (a, b) {
    return a.index - b.index
  }

  /**
   * Sort function to sort ranges by start position.
   * @private
   */

  function sortByRangeStart (a, b) {
    return a.start - b.start
  }

  /**
   * Module dependencies.
   * @private
   */


  var debug$j = src$5('send');
  var deprecate$1 = depd_1('send');










  var path$1 = path$3;




  /**
   * Path function references.
   * @private
   */

  var extname$1 = path$1.extname;
  var join$1 = path$1.join;
  var normalize$4 = path$1.normalize;
  var resolve$1 = path$1.resolve;
  var sep = path$1.sep;

  /**
   * Regular expression for identifying a bytes Range header.
   * @private
   */

  var BYTES_RANGE_REGEXP = /^ *bytes=/;

  /**
   * Maximum value allowed for the max age.
   * @private
   */

  var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000; // 1 year

  /**
   * Regular expression to match a path with a directory up component.
   * @private
   */

  var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;

  /**
   * Module exports.
   * @public
   */

  var send_1 = send$1;
  var mime_1$1 = mime_1;

  /**
   * Return a `SendStream` for `req` and `path`.
   *
   * @param {object} req
   * @param {string} path
   * @param {object} [options]
   * @return {SendStream}
   * @public
   */

  function send$1 (req, path, options) {
    return new SendStream(req, path, options)
  }

  /**
   * Initialize a `SendStream` with the given `path`.
   *
   * @param {Request} req
   * @param {String} path
   * @param {object} [options]
   * @private
   */

  function SendStream (req, path, options) {
    stream$1.call(this);

    var opts = options || {};

    this.options = opts;
    this.path = path;
    this.req = req;

    this._acceptRanges = opts.acceptRanges !== undefined
      ? Boolean(opts.acceptRanges)
      : true;

    this._cacheControl = opts.cacheControl !== undefined
      ? Boolean(opts.cacheControl)
      : true;

    this._etag = opts.etag !== undefined
      ? Boolean(opts.etag)
      : true;

    this._dotfiles = opts.dotfiles !== undefined
      ? opts.dotfiles
      : 'ignore';

    if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {
      throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"')
    }

    this._hidden = Boolean(opts.hidden);

    if (opts.hidden !== undefined) {
      deprecate$1('hidden: use dotfiles: \'' + (this._hidden ? 'allow' : 'ignore') + '\' instead');
    }

    // legacy support
    if (opts.dotfiles === undefined) {
      this._dotfiles = undefined;
    }

    this._extensions = opts.extensions !== undefined
      ? normalizeList(opts.extensions, 'extensions option')
      : [];

    this._immutable = opts.immutable !== undefined
      ? Boolean(opts.immutable)
      : false;

    this._index = opts.index !== undefined
      ? normalizeList(opts.index, 'index option')
      : ['index.html'];

    this._lastModified = opts.lastModified !== undefined
      ? Boolean(opts.lastModified)
      : true;

    this._maxage = opts.maxAge || opts.maxage;
    this._maxage = typeof this._maxage === 'string'
      ? ms$6(this._maxage)
      : Number(this._maxage);
    this._maxage = !isNaN(this._maxage)
      ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
      : 0;

    this._root = opts.root
      ? resolve$1(opts.root)
      : null;

    if (!this._root && opts.from) {
      this.from(opts.from);
    }
  }

  /**
   * Inherits from `Stream`.
   */

  util$2.inherits(SendStream, stream$1);

  /**
   * Enable or disable etag generation.
   *
   * @param {Boolean} val
   * @return {SendStream}
   * @api public
   */

  SendStream.prototype.etag = deprecate$1.function(function etag (val) {
    this._etag = Boolean(val);
    debug$j('etag %s', this._etag);
    return this
  }, 'send.etag: pass etag as option');

  /**
   * Enable or disable "hidden" (dot) files.
   *
   * @param {Boolean} path
   * @return {SendStream}
   * @api public
   */

  SendStream.prototype.hidden = deprecate$1.function(function hidden (val) {
    this._hidden = Boolean(val);
    this._dotfiles = undefined;
    debug$j('hidden %s', this._hidden);
    return this
  }, 'send.hidden: use dotfiles option');

  /**
   * Set index `paths`, set to a falsy
   * value to disable index support.
   *
   * @param {String|Boolean|Array} paths
   * @return {SendStream}
   * @api public
   */

  SendStream.prototype.index = deprecate$1.function(function index (paths) {
    var index = !paths ? [] : normalizeList(paths, 'paths argument');
    debug$j('index %o', paths);
    this._index = index;
    return this
  }, 'send.index: pass index as option');

  /**
   * Set root `path`.
   *
   * @param {String} path
   * @return {SendStream}
   * @api public
   */

  SendStream.prototype.root = function root (path) {
    this._root = resolve$1(String(path));
    debug$j('root %s', this._root);
    return this
  };

  SendStream.prototype.from = deprecate$1.function(SendStream.prototype.root,
    'send.from: pass root as option');

  SendStream.prototype.root = deprecate$1.function(SendStream.prototype.root,
    'send.root: pass root as option');

  /**
   * Set max-age to `maxAge`.
   *
   * @param {Number} maxAge
   * @return {SendStream}
   * @api public
   */

  SendStream.prototype.maxage = deprecate$1.function(function maxage (maxAge) {
    this._maxage = typeof maxAge === 'string'
      ? ms$6(maxAge)
      : Number(maxAge);
    this._maxage = !isNaN(this._maxage)
      ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE)
      : 0;
    debug$j('max-age %d', this._maxage);
    return this
  }, 'send.maxage: pass maxAge as option');

  /**
   * Emit error with `status`.
   *
   * @param {number} status
   * @param {Error} [err]
   * @private
   */

  SendStream.prototype.error = function error (status, err) {
    // emit if listeners instead of responding
    if (hasListeners(this, 'error')) {
      return this.emit('error', httpErrors(status, err, {
        expose: false
      }))
    }

    var res = this.res;
    var msg = statuses[status] || String(status);
    var doc = createHtmlDocument$1('Error', escapeHtml_1(msg));

    // clear existing headers
    clearHeaders(res);

    // add error headers
    if (err && err.headers) {
      setHeaders$1(res, err.headers);
    }

    // send basic response
    res.statusCode = status;
    res.setHeader('Content-Type', 'text/html; charset=UTF-8');
    res.setHeader('Content-Length', Buffer.byteLength(doc));
    res.setHeader('Content-Security-Policy', "default-src 'none'");
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.end(doc);
  };

  /**
   * Check if the pathname ends with "/".
   *
   * @return {boolean}
   * @private
   */

  SendStream.prototype.hasTrailingSlash = function hasTrailingSlash () {
    return this.path[this.path.length - 1] === '/'
  };

  /**
   * Check if this is a conditional GET request.
   *
   * @return {Boolean}
   * @api private
   */

  SendStream.prototype.isConditionalGET = function isConditionalGET () {
    return this.req.headers['if-match'] ||
      this.req.headers['if-unmodified-since'] ||
      this.req.headers['if-none-match'] ||
      this.req.headers['if-modified-since']
  };

  /**
   * Check if the request preconditions failed.
   *
   * @return {boolean}
   * @private
   */

  SendStream.prototype.isPreconditionFailure = function isPreconditionFailure () {
    var req = this.req;
    var res = this.res;

    // if-match
    var match = req.headers['if-match'];
    if (match) {
      var etag = res.getHeader('ETag');
      return !etag || (match !== '*' && parseTokenList$1(match).every(function (match) {
        return match !== etag && match !== 'W/' + etag && 'W/' + match !== etag
      }))
    }

    // if-unmodified-since
    var unmodifiedSince = parseHttpDate$1(req.headers['if-unmodified-since']);
    if (!isNaN(unmodifiedSince)) {
      var lastModified = parseHttpDate$1(res.getHeader('Last-Modified'));
      return isNaN(lastModified) || lastModified > unmodifiedSince
    }

    return false
  };

  /**
   * Strip content-* header fields.
   *
   * @private
   */

  SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields () {
    var res = this.res;
    var headers = getHeaderNames(res);

    for (var i = 0; i < headers.length; i++) {
      var header = headers[i];
      if (header.substr(0, 8) === 'content-' && header !== 'content-location') {
        res.removeHeader(header);
      }
    }
  };

  /**
   * Respond with 304 not modified.
   *
   * @api private
   */

  SendStream.prototype.notModified = function notModified () {
    var res = this.res;
    debug$j('not modified');
    this.removeContentHeaderFields();
    res.statusCode = 304;
    res.end();
  };

  /**
   * Raise error that headers already sent.
   *
   * @api private
   */

  SendStream.prototype.headersAlreadySent = function headersAlreadySent () {
    var err = new Error('Can\'t set headers after they are sent.');
    debug$j('headers already sent');
    this.error(500, err);
  };

  /**
   * Check if the request is cacheable, aka
   * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
   *
   * @return {Boolean}
   * @api private
   */

  SendStream.prototype.isCachable = function isCachable () {
    var statusCode = this.res.statusCode;
    return (statusCode >= 200 && statusCode < 300) ||
      statusCode === 304
  };

  /**
   * Handle stat() error.
   *
   * @param {Error} error
   * @private
   */

  SendStream.prototype.onStatError = function onStatError (error) {
    switch (error.code) {
      case 'ENAMETOOLONG':
      case 'ENOENT':
      case 'ENOTDIR':
        this.error(404, error);
        break
      default:
        this.error(500, error);
        break
    }
  };

  /**
   * Check if the cache is fresh.
   *
   * @return {Boolean}
   * @api private
   */

  SendStream.prototype.isFresh = function isFresh () {
    return fresh_1(this.req.headers, {
      'etag': this.res.getHeader('ETag'),
      'last-modified': this.res.getHeader('Last-Modified')
    })
  };

  /**
   * Check if the range is fresh.
   *
   * @return {Boolean}
   * @api private
   */

  SendStream.prototype.isRangeFresh = function isRangeFresh () {
    var ifRange = this.req.headers['if-range'];

    if (!ifRange) {
      return true
    }

    // if-range as etag
    if (ifRange.indexOf('"') !== -1) {
      var etag = this.res.getHeader('ETag');
      return Boolean(etag && ifRange.indexOf(etag) !== -1)
    }

    // if-range as modified date
    var lastModified = this.res.getHeader('Last-Modified');
    return parseHttpDate$1(lastModified) <= parseHttpDate$1(ifRange)
  };

  /**
   * Redirect to path.
   *
   * @param {string} path
   * @private
   */

  SendStream.prototype.redirect = function redirect (path) {
    var res = this.res;

    if (hasListeners(this, 'directory')) {
      this.emit('directory', res, path);
      return
    }

    if (this.hasTrailingSlash()) {
      this.error(403);
      return
    }

    var loc = encodeurl(collapseLeadingSlashes(this.path + '/'));
    var doc = createHtmlDocument$1('Redirecting', 'Redirecting to <a href="' + escapeHtml_1(loc) + '">' +
      escapeHtml_1(loc) + '</a>');

    // redirect
    res.statusCode = 301;
    res.setHeader('Content-Type', 'text/html; charset=UTF-8');
    res.setHeader('Content-Length', Buffer.byteLength(doc));
    res.setHeader('Content-Security-Policy', "default-src 'none'");
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('Location', loc);
    res.end(doc);
  };

  /**
   * Pipe to `res.
   *
   * @param {Stream} res
   * @return {Stream} res
   * @api public
   */

  SendStream.prototype.pipe = function pipe (res) {
    // root path
    var root = this._root;

    // references
    this.res = res;

    // decode the path
    var path = decode$3(this.path);
    if (path === -1) {
      this.error(400);
      return res
    }

    // null byte(s)
    if (~path.indexOf('\0')) {
      this.error(400);
      return res
    }

    var parts;
    if (root !== null) {
      // normalize
      if (path) {
        path = normalize$4('.' + sep + path);
      }

      // malicious path
      if (UP_PATH_REGEXP.test(path)) {
        debug$j('malicious path "%s"', path);
        this.error(403);
        return res
      }

      // explode path parts
      parts = path.split(sep);

      // join / normalize from optional root dir
      path = normalize$4(join$1(root, path));
    } else {
      // ".." is malicious without "root"
      if (UP_PATH_REGEXP.test(path)) {
        debug$j('malicious path "%s"', path);
        this.error(403);
        return res
      }

      // explode path parts
      parts = normalize$4(path).split(sep);

      // resolve the path
      path = resolve$1(path);
    }

    // dotfile handling
    if (containsDotFile(parts)) {
      var access = this._dotfiles;

      // legacy support
      if (access === undefined) {
        access = parts[parts.length - 1][0] === '.'
          ? (this._hidden ? 'allow' : 'ignore')
          : 'allow';
      }

      debug$j('%s dotfile "%s"', access, path);
      switch (access) {
        case 'allow':
          break
        case 'deny':
          this.error(403);
          return res
        case 'ignore':
        default:
          this.error(404);
          return res
      }
    }

    // index file support
    if (this._index.length && this.hasTrailingSlash()) {
      this.sendIndex(path);
      return res
    }

    this.sendFile(path);
    return res
  };

  /**
   * Transfer `path`.
   *
   * @param {String} path
   * @api public
   */

  SendStream.prototype.send = function send (path, stat) {
    var len = stat.size;
    var options = this.options;
    var opts = {};
    var res = this.res;
    var req = this.req;
    var ranges = req.headers.range;
    var offset = options.start || 0;

    if (headersSent$1(res)) {
      // impossible to send now
      this.headersAlreadySent();
      return
    }

    debug$j('pipe "%s"', path);

    // set header fields
    this.setHeader(path, stat);

    // set content-type
    this.type(path);

    // conditional GET support
    if (this.isConditionalGET()) {
      if (this.isPreconditionFailure()) {
        this.error(412);
        return
      }

      if (this.isCachable() && this.isFresh()) {
        this.notModified();
        return
      }
    }

    // adjust len to start/end options
    len = Math.max(0, len - offset);
    if (options.end !== undefined) {
      var bytes = options.end - offset + 1;
      if (len > bytes) len = bytes;
    }

    // Range support
    if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
      // parse
      ranges = rangeParser_1(len, ranges, {
        combine: true
      });

      // If-Range support
      if (!this.isRangeFresh()) {
        debug$j('range stale');
        ranges = -2;
      }

      // unsatisfiable
      if (ranges === -1) {
        debug$j('range unsatisfiable');

        // Content-Range
        res.setHeader('Content-Range', contentRange('bytes', len));

        // 416 Requested Range Not Satisfiable
        return this.error(416, {
          headers: { 'Content-Range': res.getHeader('Content-Range') }
        })
      }

      // valid (syntactically invalid/multiple ranges are treated as a regular response)
      if (ranges !== -2 && ranges.length === 1) {
        debug$j('range %j', ranges);

        // Content-Range
        res.statusCode = 206;
        res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]));

        // adjust for requested range
        offset += ranges[0].start;
        len = ranges[0].end - ranges[0].start + 1;
      }
    }

    // clone options
    for (var prop in options) {
      opts[prop] = options[prop];
    }

    // set read options
    opts.start = offset;
    opts.end = Math.max(offset, offset + len - 1);

    // content-length
    res.setHeader('Content-Length', len);

    // HEAD support
    if (req.method === 'HEAD') {
      res.end();
      return
    }

    this.stream(path, opts);
  };

  /**
   * Transfer file for `path`.
   *
   * @param {String} path
   * @api private
   */
  SendStream.prototype.sendFile = function sendFile (path) {
    var i = 0;
    var self = this;

    debug$j('stat "%s"', path);
    fs.stat(path, function onstat (err, stat) {
      if (err && err.code === 'ENOENT' && !extname$1(path) && path[path.length - 1] !== sep) {
        // not found, check extensions
        return next(err)
      }
      if (err) return self.onStatError(err)
      if (stat.isDirectory()) return self.redirect(path)
      self.emit('file', path, stat);
      self.send(path, stat);
    });

    function next (err) {
      if (self._extensions.length <= i) {
        return err
          ? self.onStatError(err)
          : self.error(404)
      }

      var p = path + '.' + self._extensions[i++];

      debug$j('stat "%s"', p);
      fs.stat(p, function (err, stat) {
        if (err) return next(err)
        if (stat.isDirectory()) return next()
        self.emit('file', p, stat);
        self.send(p, stat);
      });
    }
  };

  /**
   * Transfer index for `path`.
   *
   * @param {String} path
   * @api private
   */
  SendStream.prototype.sendIndex = function sendIndex (path) {
    var i = -1;
    var self = this;

    function next (err) {
      if (++i >= self._index.length) {
        if (err) return self.onStatError(err)
        return self.error(404)
      }

      var p = join$1(path, self._index[i]);

      debug$j('stat "%s"', p);
      fs.stat(p, function (err, stat) {
        if (err) return next(err)
        if (stat.isDirectory()) return next()
        self.emit('file', p, stat);
        self.send(p, stat);
      });
    }

    next();
  };

  /**
   * Stream `path` to the response.
   *
   * @param {String} path
   * @param {Object} options
   * @api private
   */

  SendStream.prototype.stream = function stream (path, options) {
    // TODO: this is all lame, refactor meeee
    var finished = false;
    var self = this;
    var res = this.res;

    // pipe
    var stream = fs.createReadStream(path, options);
    this.emit('stream', stream);
    stream.pipe(res);

    // response finished, done with the fd
    onFinished_1(res, function onfinished () {
      finished = true;
      destroy_1(stream);
    });

    // error handling code-smell
    stream.on('error', function onerror (err) {
      // request already finished
      if (finished) return

      // clean up stream
      finished = true;
      destroy_1(stream);

      // error
      self.onStatError(err);
    });

    // end
    stream.on('end', function onend () {
      self.emit('end');
    });
  };

  /**
   * Set content-type based on `path`
   * if it hasn't been explicitly set.
   *
   * @param {String} path
   * @api private
   */

  SendStream.prototype.type = function type (path) {
    var res = this.res;

    if (res.getHeader('Content-Type')) return

    var type = mime_1.lookup(path);

    if (!type) {
      debug$j('no content-type');
      return
    }

    var charset = mime_1.charsets.lookup(type);

    debug$j('content-type %s', type);
    res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));
  };

  /**
   * Set response header fields, most
   * fields may be pre-defined.
   *
   * @param {String} path
   * @param {Object} stat
   * @api private
   */

  SendStream.prototype.setHeader = function setHeader (path, stat) {
    var res = this.res;

    this.emit('headers', res, path, stat);

    if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {
      debug$j('accept ranges');
      res.setHeader('Accept-Ranges', 'bytes');
    }

    if (this._cacheControl && !res.getHeader('Cache-Control')) {
      var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000);

      if (this._immutable) {
        cacheControl += ', immutable';
      }

      debug$j('cache-control %s', cacheControl);
      res.setHeader('Cache-Control', cacheControl);
    }

    if (this._lastModified && !res.getHeader('Last-Modified')) {
      var modified = stat.mtime.toUTCString();
      debug$j('modified %s', modified);
      res.setHeader('Last-Modified', modified);
    }

    if (this._etag && !res.getHeader('ETag')) {
      var val = etag_1(stat);
      debug$j('etag %s', val);
      res.setHeader('ETag', val);
    }
  };

  /**
   * Clear all headers from a response.
   *
   * @param {object} res
   * @private
   */

  function clearHeaders (res) {
    var headers = getHeaderNames(res);

    for (var i = 0; i < headers.length; i++) {
      res.removeHeader(headers[i]);
    }
  }

  /**
   * Collapse all leading slashes into a single slash
   *
   * @param {string} str
   * @private
   */
  function collapseLeadingSlashes (str) {
    for (var i = 0; i < str.length; i++) {
      if (str[i] !== '/') {
        break
      }
    }

    return i > 1
      ? '/' + str.substr(i)
      : str
  }

  /**
   * Determine if path parts contain a dotfile.
   *
   * @api private
   */

  function containsDotFile (parts) {
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      if (part.length > 1 && part[0] === '.') {
        return true
      }
    }

    return false
  }

  /**
   * Create a Content-Range header.
   *
   * @param {string} type
   * @param {number} size
   * @param {array} [range]
   */

  function contentRange (type, size, range) {
    return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size
  }

  /**
   * Create a minimal HTML document.
   *
   * @param {string} title
   * @param {string} body
   * @private
   */

  function createHtmlDocument$1 (title, body) {
    return '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>' + title + '</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>' + body + '</pre>\n' +
      '</body>\n' +
      '</html>\n'
  }

  /**
   * decodeURIComponent.
   *
   * Allows V8 to only deoptimize this fn instead of all
   * of send().
   *
   * @param {String} path
   * @api private
   */

  function decode$3 (path) {
    try {
      return decodeURIComponent(path)
    } catch (err) {
      return -1
    }
  }

  /**
   * Get the header names on a respnse.
   *
   * @param {object} res
   * @returns {array[string]}
   * @private
   */

  function getHeaderNames (res) {
    return typeof res.getHeaderNames !== 'function'
      ? Object.keys(res._headers || {})
      : res.getHeaderNames()
  }

  /**
   * Determine if emitter has listeners of a given type.
   *
   * The way to do this check is done three different ways in Node.js >= 0.8
   * so this consolidates them into a minimal set using instance methods.
   *
   * @param {EventEmitter} emitter
   * @param {string} type
   * @returns {boolean}
   * @private
   */

  function hasListeners (emitter, type) {
    var count = typeof emitter.listenerCount !== 'function'
      ? emitter.listeners(type).length
      : emitter.listenerCount(type);

    return count > 0
  }

  /**
   * Determine if the response headers have been sent.
   *
   * @param {object} res
   * @returns {boolean}
   * @private
   */

  function headersSent$1 (res) {
    return typeof res.headersSent !== 'boolean'
      ? Boolean(res._header)
      : res.headersSent
  }

  /**
   * Normalize the index option into an array.
   *
   * @param {boolean|string|array} val
   * @param {string} name
   * @private
   */

  function normalizeList (val, name) {
    var list = [].concat(val || []);

    for (var i = 0; i < list.length; i++) {
      if (typeof list[i] !== 'string') {
        throw new TypeError(name + ' must be array of strings or false')
      }
    }

    return list
  }

  /**
   * Parse an HTTP Date into a number.
   *
   * @param {string} date
   * @private
   */

  function parseHttpDate$1 (date) {
    var timestamp = date && Date.parse(date);

    return typeof timestamp === 'number'
      ? timestamp
      : NaN
  }

  /**
   * Parse a HTTP token list.
   *
   * @param {string} str
   * @private
   */

  function parseTokenList$1 (str) {
    var end = 0;
    var list = [];
    var start = 0;

    // gather tokens
    for (var i = 0, len = str.length; i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 0x20: /*   */
          if (start === end) {
            start = end = i + 1;
          }
          break
        case 0x2c: /* , */
          list.push(str.substring(start, end));
          start = end = i + 1;
          break
        default:
          end = i + 1;
          break
      }
    }

    // final token
    list.push(str.substring(start, end));

    return list
  }

  /**
   * Set an object of headers on a response.
   *
   * @param {object} res
   * @param {object} headers
   * @private
   */

  function setHeaders$1 (res, headers) {
    var keys = Object.keys(headers);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  }
  send_1.mime = mime_1$1;

  /*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var forwarded_1 = forwarded;

  /**
   * Get all addresses in the request, using the `X-Forwarded-For` header.
   *
   * @param {object} req
   * @return {array}
   * @public
   */

  function forwarded (req) {
    if (!req) {
      throw new TypeError('argument req is required')
    }

    // simple header parsing
    var proxyAddrs = parse$g(req.headers['x-forwarded-for'] || '');
    var socketAddr = req.connection.remoteAddress;
    var addrs = [socketAddr].concat(proxyAddrs);

    // return all addresses
    return addrs
  }

  /**
   * Parse the X-Forwarded-For header.
   *
   * @param {string} header
   * @private
   */

  function parse$g (header) {
    var end = header.length;
    var list = [];
    var start = header.length;

    // gather addresses, backwards
    for (var i = header.length - 1; i >= 0; i--) {
      switch (header.charCodeAt(i)) {
        case 0x20: /*   */
          if (start === end) {
            start = end = i;
          }
          break
        case 0x2c: /* , */
          if (start !== end) {
            list.push(header.substring(start, end));
          }
          start = end = i;
          break
        default:
          start = i;
          break
      }
    }

    // final address
    if (start !== end) {
      list.push(header.substring(start, end));
    }

    return list
  }

  var ipaddr = createCommonjsModule(function (module) {
  (function() {
    var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;

    ipaddr = {};

    root = this;

    if (( module !== null) && module.exports) {
      module.exports = ipaddr;
    } else {
      root['ipaddr'] = ipaddr;
    }

    matchCIDR = function(first, second, partSize, cidrBits) {
      var part, shift;
      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }
      part = 0;
      while (cidrBits > 0) {
        shift = partSize - cidrBits;
        if (shift < 0) {
          shift = 0;
        }
        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }
        cidrBits -= partSize;
        part += 1;
      }
      return true;
    };

    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
      var k, len, rangeName, rangeSubnets, subnet;
      if (defaultName == null) {
        defaultName = 'unicast';
      }
      for (rangeName in rangeList) {
        rangeSubnets = rangeList[rangeName];
        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
          rangeSubnets = [rangeSubnets];
        }
        for (k = 0, len = rangeSubnets.length; k < len; k++) {
          subnet = rangeSubnets[k];
          if (address.kind() === subnet[0].kind()) {
            if (address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }
      return defaultName;
    };

    ipaddr.IPv4 = (function() {
      function IPv4(octets) {
        var k, len, octet;
        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }
        for (k = 0, len = octets.length; k < len; k++) {
          octet = octets[k];
          if (!((0 <= octet && octet <= 255))) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }
        this.octets = octets;
      }

      IPv4.prototype.kind = function() {
        return 'ipv4';
      };

      IPv4.prototype.toString = function() {
        return this.octets.join(".");
      };

      IPv4.prototype.toNormalizedString = function() {
        return this.toString();
      };

      IPv4.prototype.toByteArray = function() {
        return this.octets.slice(0);
      };

      IPv4.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== 'ipv4') {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }
        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };

      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
        reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
      };

      IPv4.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };

      IPv4.prototype.toIPv4MappedAddress = function() {
        return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
      };

      IPv4.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, octet, stop, zeros, zerotable;
        zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 3; k >= 0; i = k += -1) {
          octet = this.octets[i];
          if (octet in zerotable) {
            zeros = zerotable[octet];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 8) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 32 - cidr;
      };

      return IPv4;

    })();

    ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

    ipv4Regexes = {
      fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
      longValue: new RegExp("^" + ipv4Part + "$", 'i')
    };

    ipaddr.IPv4.parser = function(string) {
      var match, parseIntAuto, part, shift, value;
      parseIntAuto = function(string) {
        if (string[0] === "0" && string[1] !== "x") {
          return parseInt(string, 8);
        } else {
          return parseInt(string);
        }
      };
      if (match = string.match(ipv4Regexes.fourOctet)) {
        return (function() {
          var k, len, ref, results;
          ref = match.slice(1, 6);
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(parseIntAuto(part));
          }
          return results;
        })();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);
        if (value > 0xffffffff || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }
        return ((function() {
          var k, results;
          results = [];
          for (shift = k = 0; k <= 24; shift = k += 8) {
            results.push((value >> shift) & 0xff);
          }
          return results;
        })()).reverse();
      } else {
        return null;
      }
    };

    ipaddr.IPv6 = (function() {
      function IPv6(parts, zoneId) {
        var i, k, l, len, part, ref;
        if (parts.length === 16) {
          this.parts = [];
          for (i = k = 0; k <= 14; i = k += 2) {
            this.parts.push((parts[i] << 8) | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }
        ref = this.parts;
        for (l = 0, len = ref.length; l < len; l++) {
          part = ref[l];
          if (!((0 <= part && part <= 0xffff))) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }
        if (zoneId) {
          this.zoneId = zoneId;
        }
      }

      IPv6.prototype.kind = function() {
        return 'ipv6';
      };

      IPv6.prototype.toString = function() {
        return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
      };

      IPv6.prototype.toRFC5952String = function() {
        var bestMatchIndex, bestMatchLength, match, regex, string;
        regex = /((^|:)(0(:|$)){2,})/g;
        string = this.toNormalizedString();
        bestMatchIndex = 0;
        bestMatchLength = -1;
        while ((match = regex.exec(string))) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }
        if (bestMatchLength < 0) {
          return string;
        }
        return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);
      };

      IPv6.prototype.toByteArray = function() {
        var bytes, k, len, part, ref;
        bytes = [];
        ref = this.parts;
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          bytes.push(part >> 8);
          bytes.push(part & 0xff);
        }
        return bytes;
      };

      IPv6.prototype.toNormalizedString = function() {
        var addr, part, suffix;
        addr = ((function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16));
          }
          return results;
        }).call(this)).join(":");
        suffix = '';
        if (this.zoneId) {
          suffix = '%' + this.zoneId;
        }
        return addr + suffix;
      };

      IPv6.prototype.toFixedLengthString = function() {
        var addr, part, suffix;
        addr = ((function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16).padStart(4, '0'));
          }
          return results;
        }).call(this)).join(":");
        suffix = '';
        if (this.zoneId) {
          suffix = '%' + this.zoneId;
        }
        return addr + suffix;
      };

      IPv6.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== 'ipv6') {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }
        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };

      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
        rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
        rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
        '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
        reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
      };

      IPv6.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };

      IPv6.prototype.isIPv4MappedAddress = function() {
        return this.range() === 'ipv4Mapped';
      };

      IPv6.prototype.toIPv4Address = function() {
        var high, low, ref;
        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }
        ref = this.parts.slice(-2), high = ref[0], low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
      };

      IPv6.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, part, stop, zeros, zerotable;
        zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 7; k >= 0; i = k += -1) {
          part = this.parts[i];
          if (part in zerotable) {
            zeros = zerotable[part];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 16) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 128 - cidr;
      };

      return IPv6;

    })();

    ipv6Part = "(?:[0-9a-f]+::?)+";

    zoneIndex = "%[0-9a-z]{1,}";

    ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, 'i'),
      "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
      transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
    };

    expandIPv6 = function(string, parts) {
      var colonCount, lastColon, part, replacement, replacementCount, zoneId;
      if (string.indexOf('::') !== string.lastIndexOf('::')) {
        return null;
      }
      zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];
      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, '');
      }
      colonCount = 0;
      lastColon = -1;
      while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
        colonCount++;
      }
      if (string.substr(0, 2) === '::') {
        colonCount--;
      }
      if (string.substr(-2, 2) === '::') {
        colonCount--;
      }
      if (colonCount > parts) {
        return null;
      }
      replacementCount = parts - colonCount;
      replacement = ':';
      while (replacementCount--) {
        replacement += '0:';
      }
      string = string.replace('::', replacement);
      if (string[0] === ':') {
        string = string.slice(1);
      }
      if (string[string.length - 1] === ':') {
        string = string.slice(0, -1);
      }
      parts = (function() {
        var k, len, ref, results;
        ref = string.split(":");
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          results.push(parseInt(part, 16));
        }
        return results;
      })();
      return {
        parts: parts,
        zoneId: zoneId
      };
    };

    ipaddr.IPv6.parser = function(string) {
      var addr, k, len, match, octet, octets, zoneId;
      if (ipv6Regexes['native'].test(string)) {
        return expandIPv6(string, 8);
      } else if (match = string.match(ipv6Regexes['transitional'])) {
        zoneId = match[6] || '';
        addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
        if (addr.parts) {
          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
          for (k = 0, len = octets.length; k < len; k++) {
            octet = octets[k];
            if (!((0 <= octet && octet <= 255))) {
              return null;
            }
          }
          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }
      return null;
    };

    ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
      return this.parser(string) !== null;
    };

    ipaddr.IPv4.isValid = function(string) {
      try {
        new this(this.parser(string));
        return true;
      } catch (error1) {
        return false;
      }
    };

    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };

    ipaddr.IPv6.isValid = function(string) {
      var addr;
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (error1) {
        return false;
      }
    };

    ipaddr.IPv4.parse = function(string) {
      var parts;
      parts = this.parser(string);
      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(parts);
    };

    ipaddr.IPv6.parse = function(string) {
      var addr;
      addr = this.parser(string);
      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(addr.parts, addr.zoneId);
    };

    ipaddr.IPv4.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 32) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, 'toString', {
            value: function() {
              return this.join('/');
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };

    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
      var filledOctetCount, j, octets;
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 32) {
        throw new Error('ipaddr: invalid IPv4 prefix length');
      }
      octets = [0, 0, 0, 0];
      j = 0;
      filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
      }
      return new this(octets);
    };

    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
      var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (error1) {
        throw new Error('ipaddr: the address does not have IPv4 CIDR format');
      }
    };

    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
      var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (error1) {
        throw new Error('ipaddr: the address does not have IPv4 CIDR format');
      }
    };

    ipaddr.IPv6.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, 'toString', {
            value: function() {
              return this.join('/');
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };

    ipaddr.isValid = function(string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };

    ipaddr.parse = function(string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };

    ipaddr.parseCIDR = function(string) {
      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (error1) {
        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (error1) {
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };

    ipaddr.fromByteArray = function(bytes) {
      var length;
      length = bytes.length;
      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };

    ipaddr.process = function(string) {
      var addr;
      addr = this.parse(string);
      if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };

  }).call(commonjsGlobal);
  });

  /**
   * Module exports.
   * @public
   */

  var proxyAddr = proxyaddr;
  var all = alladdrs;
  var compile_1 = compile;

  /**
   * Module dependencies.
   * @private
   */




  /**
   * Variables.
   * @private
   */

  var DIGIT_REGEXP = /^[0-9]+$/;
  var isip = ipaddr.isValid;
  var parseip = ipaddr.parse;

  /**
   * Pre-defined IP ranges.
   * @private
   */

  var IP_RANGES = {
    linklocal: ['169.254.0.0/16', 'fe80::/10'],
    loopback: ['127.0.0.1/8', '::1/128'],
    uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
  };

  /**
   * Get all addresses in the request, optionally stopping
   * at the first untrusted.
   *
   * @param {Object} request
   * @param {Function|Array|String} [trust]
   * @public
   */

  function alladdrs (req, trust) {
    // get addresses
    var addrs = forwarded_1(req);

    if (!trust) {
      // Return all addresses
      return addrs
    }

    if (typeof trust !== 'function') {
      trust = compile(trust);
    }

    for (var i = 0; i < addrs.length - 1; i++) {
      if (trust(addrs[i], i)) continue

      addrs.length = i + 1;
    }

    return addrs
  }

  /**
   * Compile argument into trust function.
   *
   * @param {Array|String} val
   * @private
   */

  function compile (val) {
    if (!val) {
      throw new TypeError('argument is required')
    }

    var trust;

    if (typeof val === 'string') {
      trust = [val];
    } else if (Array.isArray(val)) {
      trust = val.slice();
    } else {
      throw new TypeError('unsupported trust argument')
    }

    for (var i = 0; i < trust.length; i++) {
      val = trust[i];

      if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
        continue
      }

      // Splice in pre-defined range
      val = IP_RANGES[val];
      trust.splice.apply(trust, [i, 1].concat(val));
      i += val.length - 1;
    }

    return compileTrust(compileRangeSubnets(trust))
  }

  /**
   * Compile `arr` elements into range subnets.
   *
   * @param {Array} arr
   * @private
   */

  function compileRangeSubnets (arr) {
    var rangeSubnets = new Array(arr.length);

    for (var i = 0; i < arr.length; i++) {
      rangeSubnets[i] = parseipNotation(arr[i]);
    }

    return rangeSubnets
  }

  /**
   * Compile range subnet array into trust function.
   *
   * @param {Array} rangeSubnets
   * @private
   */

  function compileTrust (rangeSubnets) {
    // Return optimized function based on length
    var len = rangeSubnets.length;
    return len === 0
      ? trustNone
      : len === 1
        ? trustSingle(rangeSubnets[0])
        : trustMulti(rangeSubnets)
  }

  /**
   * Parse IP notation string into range subnet.
   *
   * @param {String} note
   * @private
   */

  function parseipNotation (note) {
    var pos = note.lastIndexOf('/');
    var str = pos !== -1
      ? note.substring(0, pos)
      : note;

    if (!isip(str)) {
      throw new TypeError('invalid IP address: ' + str)
    }

    var ip = parseip(str);

    if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
      // Store as IPv4
      ip = ip.toIPv4Address();
    }

    var max = ip.kind() === 'ipv6'
      ? 128
      : 32;

    var range = pos !== -1
      ? note.substring(pos + 1, note.length)
      : null;

    if (range === null) {
      range = max;
    } else if (DIGIT_REGEXP.test(range)) {
      range = parseInt(range, 10);
    } else if (ip.kind() === 'ipv4' && isip(range)) {
      range = parseNetmask(range);
    } else {
      range = null;
    }

    if (range <= 0 || range > max) {
      throw new TypeError('invalid range on address: ' + note)
    }

    return [ip, range]
  }

  /**
   * Parse netmask string into CIDR range.
   *
   * @param {String} netmask
   * @private
   */

  function parseNetmask (netmask) {
    var ip = parseip(netmask);
    var kind = ip.kind();

    return kind === 'ipv4'
      ? ip.prefixLengthFromSubnetMask()
      : null
  }

  /**
   * Determine address of proxied request.
   *
   * @param {Object} request
   * @param {Function|Array|String} trust
   * @public
   */

  function proxyaddr (req, trust) {
    if (!req) {
      throw new TypeError('req argument is required')
    }

    if (!trust) {
      throw new TypeError('trust argument is required')
    }

    var addrs = alladdrs(req, trust);
    var addr = addrs[addrs.length - 1];

    return addr
  }

  /**
   * Static trust function to trust nothing.
   *
   * @private
   */

  function trustNone () {
    return false
  }

  /**
   * Compile trust function for multiple subnets.
   *
   * @param {Array} subnets
   * @private
   */

  function trustMulti (subnets) {
    return function trust (addr) {
      if (!isip(addr)) return false

      var ip = parseip(addr);
      var ipconv;
      var kind = ip.kind();

      for (var i = 0; i < subnets.length; i++) {
        var subnet = subnets[i];
        var subnetip = subnet[0];
        var subnetkind = subnetip.kind();
        var subnetrange = subnet[1];
        var trusted = ip;

        if (kind !== subnetkind) {
          if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {
            // Incompatible IP addresses
            continue
          }

          if (!ipconv) {
            // Convert IP to match subnet IP kind
            ipconv = subnetkind === 'ipv4'
              ? ip.toIPv4Address()
              : ip.toIPv4MappedAddress();
          }

          trusted = ipconv;
        }

        if (trusted.match(subnetip, subnetrange)) {
          return true
        }
      }

      return false
    }
  }

  /**
   * Compile trust function for single subnet.
   *
   * @param {Object} subnet
   * @private
   */

  function trustSingle (subnet) {
    var subnetip = subnet[0];
    var subnetkind = subnetip.kind();
    var subnetisipv4 = subnetkind === 'ipv4';
    var subnetrange = subnet[1];

    return function trust (addr) {
      if (!isip(addr)) return false

      var ip = parseip(addr);
      var kind = ip.kind();

      if (kind !== subnetkind) {
        if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
          // Incompatible IP addresses
          return false
        }

        // Convert IP to match subnet IP kind
        ip = subnetisipv4
          ? ip.toIPv4Address()
          : ip.toIPv4MappedAddress();
      }

      return ip.match(subnetip, subnetrange)
    }
  }
  proxyAddr.all = all;
  proxyAddr.compile = compile_1;

  var utils$3 = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @api private
   */

  var Buffer = safeBuffer.Buffer;


  var deprecate = depd_1('express');

  var mime = send_1.mime;





  /**
   * Return strong ETag for `body`.
   *
   * @param {String|Buffer} body
   * @param {String} [encoding]
   * @return {String}
   * @api private
   */

  exports.etag = createETagGenerator({ weak: false });

  /**
   * Return weak ETag for `body`.
   *
   * @param {String|Buffer} body
   * @param {String} [encoding]
   * @return {String}
   * @api private
   */

  exports.wetag = createETagGenerator({ weak: true });

  /**
   * Check if `path` looks absolute.
   *
   * @param {String} path
   * @return {Boolean}
   * @api private
   */

  exports.isAbsolute = function(path){
    if ('/' === path[0]) return true;
    if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
    if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
  };

  /**
   * Flatten the given `arr`.
   *
   * @param {Array} arr
   * @return {Array}
   * @api private
   */

  exports.flatten = deprecate.function(arrayFlatten_1,
    'utils.flatten: use array-flatten npm module instead');

  /**
   * Normalize the given `type`, for example "html" becomes "text/html".
   *
   * @param {String} type
   * @return {Object}
   * @api private
   */

  exports.normalizeType = function(type){
    return ~type.indexOf('/')
      ? acceptParams(type)
      : { value: mime.lookup(type), params: {} };
  };

  /**
   * Normalize `types`, for example "html" becomes "text/html".
   *
   * @param {Array} types
   * @return {Array}
   * @api private
   */

  exports.normalizeTypes = function(types){
    var ret = [];

    for (var i = 0; i < types.length; ++i) {
      ret.push(exports.normalizeType(types[i]));
    }

    return ret;
  };

  /**
   * Generate Content-Disposition header appropriate for the filename.
   * non-ascii filenames are urlencoded and a filename* parameter is added
   *
   * @param {String} filename
   * @return {String}
   * @api private
   */

  exports.contentDisposition = deprecate.function(contentDisposition_1,
    'utils.contentDisposition: use content-disposition npm module instead');

  /**
   * Parse accept params `str` returning an
   * object with `.value`, `.quality` and `.params`.
   * also includes `.originalIndex` for stable sorting
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function acceptParams(str, index) {
    var parts = str.split(/ *; */);
    var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };

    for (var i = 1; i < parts.length; ++i) {
      var pms = parts[i].split(/ *= */);
      if ('q' === pms[0]) {
        ret.quality = parseFloat(pms[1]);
      } else {
        ret.params[pms[0]] = pms[1];
      }
    }

    return ret;
  }

  /**
   * Compile "etag" value to function.
   *
   * @param  {Boolean|String|Function} val
   * @return {Function}
   * @api private
   */

  exports.compileETag = function(val) {
    var fn;

    if (typeof val === 'function') {
      return val;
    }

    switch (val) {
      case true:
        fn = exports.wetag;
        break;
      case false:
        break;
      case 'strong':
        fn = exports.etag;
        break;
      case 'weak':
        fn = exports.wetag;
        break;
      default:
        throw new TypeError('unknown value for etag function: ' + val);
    }

    return fn;
  };

  /**
   * Compile "query parser" value to function.
   *
   * @param  {String|Function} val
   * @return {Function}
   * @api private
   */

  exports.compileQueryParser = function compileQueryParser(val) {
    var fn;

    if (typeof val === 'function') {
      return val;
    }

    switch (val) {
      case true:
        fn = querystring.parse;
        break;
      case false:
        fn = newObject;
        break;
      case 'extended':
        fn = parseExtendedQueryString;
        break;
      case 'simple':
        fn = querystring.parse;
        break;
      default:
        throw new TypeError('unknown value for query parser function: ' + val);
    }

    return fn;
  };

  /**
   * Compile "proxy trust" value to function.
   *
   * @param  {Boolean|String|Number|Array|Function} val
   * @return {Function}
   * @api private
   */

  exports.compileTrust = function(val) {
    if (typeof val === 'function') return val;

    if (val === true) {
      // Support plain true/false
      return function(){ return true };
    }

    if (typeof val === 'number') {
      // Support trusting hop count
      return function(a, i){ return i < val };
    }

    if (typeof val === 'string') {
      // Support comma-separated values
      val = val.split(/ *, */);
    }

    return proxyAddr.compile(val || []);
  };

  /**
   * Set the charset in a given Content-Type string.
   *
   * @param {String} type
   * @param {String} charset
   * @return {String}
   * @api private
   */

  exports.setCharset = function setCharset(type, charset) {
    if (!type || !charset) {
      return type;
    }

    // parse type
    var parsed = contentType.parse(type);

    // set charset
    parsed.parameters.charset = charset;

    // format type
    return contentType.format(parsed);
  };

  /**
   * Create an ETag generator function, generating ETags with
   * the given options.
   *
   * @param {object} options
   * @return {function}
   * @private
   */

  function createETagGenerator (options) {
    return function generateETag (body, encoding) {
      var buf = !Buffer.isBuffer(body)
        ? Buffer.from(body, encoding)
        : body;

      return etag_1(buf, options)
    }
  }

  /**
   * Parse an extended query string with qs.
   *
   * @return {Object}
   * @private
   */

  function parseExtendedQueryString(str) {
    return lib$8.parse(str, {
      allowPrototypes: true
    });
  }

  /**
   * Return new empty object.
   *
   * @return {Object}
   * @api private
   */

  function newObject() {
    return {};
  }
  });
  var utils_1$2 = utils$3.etag;
  var utils_2$2 = utils$3.wetag;
  var utils_3 = utils$3.isAbsolute;
  var utils_4 = utils$3.flatten;
  var utils_5 = utils$3.normalizeType;
  var utils_6 = utils$3.normalizeTypes;
  var utils_7 = utils$3.contentDisposition;
  var utils_8 = utils$3.compileETag;
  var utils_9 = utils$3.compileQueryParser;
  var utils_10 = utils$3.compileTrust;
  var utils_11 = utils$3.setCharset;

  var application = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   * @private
   */






  var debug = src$4('express:application');


  var compileETag = utils$3.compileETag;
  var compileQueryParser = utils$3.compileQueryParser;
  var compileTrust = utils$3.compileTrust;
  var deprecate = depd_1('express');


  var resolve = path$3.resolve;

  var slice = Array.prototype.slice;

  /**
   * Application prototype.
   */

  var app = exports = module.exports = {};

  /**
   * Variable for trust proxy inheritance back-compat
   * @private
   */

  var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';

  /**
   * Initialize the server.
   *
   *   - setup default configuration
   *   - setup default middleware
   *   - setup route reflection methods
   *
   * @private
   */

  app.init = function init() {
    this.cache = {};
    this.engines = {};
    this.settings = {};

    this.defaultConfiguration();
  };

  /**
   * Initialize application configuration.
   * @private
   */

  app.defaultConfiguration = function defaultConfiguration() {
    var env = process.env.NODE_ENV || 'development';

    // default settings
    this.enable('x-powered-by');
    this.set('etag', 'weak');
    this.set('env', env);
    this.set('query parser', 'extended');
    this.set('subdomain offset', 2);
    this.set('trust proxy', false);

    // trust proxy inherit back-compat
    Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
      configurable: true,
      value: true
    });

    debug('booting in %s mode', env);

    this.on('mount', function onmount(parent) {
      // inherit trust proxy
      if (this.settings[trustProxyDefaultSymbol] === true
        && typeof parent.settings['trust proxy fn'] === 'function') {
        delete this.settings['trust proxy'];
        delete this.settings['trust proxy fn'];
      }

      // inherit protos
      setprototypeof(this.request, parent.request);
      setprototypeof(this.response, parent.response);
      setprototypeof(this.engines, parent.engines);
      setprototypeof(this.settings, parent.settings);
    });

    // setup locals
    this.locals = Object.create(null);

    // top-most app is mounted at /
    this.mountpath = '/';

    // default locals
    this.locals.settings = this.settings;

    // default configuration
    this.set('view', view);
    this.set('views', resolve('views'));
    this.set('jsonp callback name', 'callback');

    if (env === 'production') {
      this.enable('view cache');
    }

    Object.defineProperty(this, 'router', {
      get: function() {
        throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
      }
    });
  };

  /**
   * lazily adds the base router if it has not yet been added.
   *
   * We cannot add the base router in the defaultConfiguration because
   * it reads app settings which might be set after that has run.
   *
   * @private
   */
  app.lazyrouter = function lazyrouter() {
    if (!this._router) {
      this._router = new router({
        caseSensitive: this.enabled('case sensitive routing'),
        strict: this.enabled('strict routing')
      });

      this._router.use(query(this.get('query parser fn')));
      this._router.use(init.init(this));
    }
  };

  /**
   * Dispatch a req, res pair into the application. Starts pipeline processing.
   *
   * If no callback is provided, then default error handlers will respond
   * in the event of an error bubbling through the stack.
   *
   * @private
   */

  app.handle = function handle(req, res, callback) {
    var router = this._router;

    // final handler
    var done = callback || finalhandler_1(req, res, {
      env: this.get('env'),
      onerror: logerror.bind(this)
    });

    // no routes
    if (!router) {
      debug('no routes defined on app');
      done();
      return;
    }

    router.handle(req, res, done);
  };

  /**
   * Proxy `Router#use()` to add middleware to the app router.
   * See Router#use() documentation for details.
   *
   * If the _fn_ parameter is an express app, then it will be
   * mounted at the _route_ specified.
   *
   * @public
   */

  app.use = function use(fn) {
    var offset = 0;
    var path = '/';

    // default path to '/'
    // disambiguate app.use([fn])
    if (typeof fn !== 'function') {
      var arg = fn;

      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }

      // first arg is the path
      if (typeof arg !== 'function') {
        offset = 1;
        path = fn;
      }
    }

    var fns = arrayFlatten_1(slice.call(arguments, offset));

    if (fns.length === 0) {
      throw new TypeError('app.use() requires a middleware function')
    }

    // setup router
    this.lazyrouter();
    var router = this._router;

    fns.forEach(function (fn) {
      // non-express app
      if (!fn || !fn.handle || !fn.set) {
        return router.use(path, fn);
      }

      debug('.use app under %s', path);
      fn.mountpath = path;
      fn.parent = this;

      // restore .app property on req and res
      router.use(path, function mounted_app(req, res, next) {
        var orig = req.app;
        fn.handle(req, res, function (err) {
          setprototypeof(req, orig.request);
          setprototypeof(res, orig.response);
          next(err);
        });
      });

      // mounted an app
      fn.emit('mount', this);
    }, this);

    return this;
  };

  /**
   * Proxy to the app `Router#route()`
   * Returns a new `Route` instance for the _path_.
   *
   * Routes are isolated middleware stacks for specific paths.
   * See the Route api docs for details.
   *
   * @public
   */

  app.route = function route(path) {
    this.lazyrouter();
    return this._router.route(path);
  };

  /**
   * Register the given template engine callback `fn`
   * as `ext`.
   *
   * By default will `require()` the engine based on the
   * file extension. For example if you try to render
   * a "foo.ejs" file Express will invoke the following internally:
   *
   *     app.engine('ejs', require('ejs').__express);
   *
   * For engines that do not provide `.__express` out of the box,
   * or if you wish to "map" a different extension to the template engine
   * you may use this method. For example mapping the EJS template engine to
   * ".html" files:
   *
   *     app.engine('html', require('ejs').renderFile);
   *
   * In this case EJS provides a `.renderFile()` method with
   * the same signature that Express expects: `(path, options, callback)`,
   * though note that it aliases this method as `ejs.__express` internally
   * so if you're using ".ejs" extensions you dont need to do anything.
   *
   * Some template engines do not follow this convention, the
   * [Consolidate.js](https://github.com/tj/consolidate.js)
   * library was created to map all of node's popular template
   * engines to follow this convention, thus allowing them to
   * work seamlessly within Express.
   *
   * @param {String} ext
   * @param {Function} fn
   * @return {app} for chaining
   * @public
   */

  app.engine = function engine(ext, fn) {
    if (typeof fn !== 'function') {
      throw new Error('callback function required');
    }

    // get file extension
    var extension = ext[0] !== '.'
      ? '.' + ext
      : ext;

    // store engine
    this.engines[extension] = fn;

    return this;
  };

  /**
   * Proxy to `Router#param()` with one added api feature. The _name_ parameter
   * can be an array of names.
   *
   * See the Router#param() docs for more details.
   *
   * @param {String|Array} name
   * @param {Function} fn
   * @return {app} for chaining
   * @public
   */

  app.param = function param(name, fn) {
    this.lazyrouter();

    if (Array.isArray(name)) {
      for (var i = 0; i < name.length; i++) {
        this.param(name[i], fn);
      }

      return this;
    }

    this._router.param(name, fn);

    return this;
  };

  /**
   * Assign `setting` to `val`, or return `setting`'s value.
   *
   *    app.set('foo', 'bar');
   *    app.set('foo');
   *    // => "bar"
   *
   * Mounted servers inherit their parent server's settings.
   *
   * @param {String} setting
   * @param {*} [val]
   * @return {Server} for chaining
   * @public
   */

  app.set = function set(setting, val) {
    if (arguments.length === 1) {
      // app.get(setting)
      return this.settings[setting];
    }

    debug('set "%s" to %o', setting, val);

    // set value
    this.settings[setting] = val;

    // trigger matched settings
    switch (setting) {
      case 'etag':
        this.set('etag fn', compileETag(val));
        break;
      case 'query parser':
        this.set('query parser fn', compileQueryParser(val));
        break;
      case 'trust proxy':
        this.set('trust proxy fn', compileTrust(val));

        // trust proxy inherit back-compat
        Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
          configurable: true,
          value: false
        });

        break;
    }

    return this;
  };

  /**
   * Return the app's absolute pathname
   * based on the parent(s) that have
   * mounted it.
   *
   * For example if the application was
   * mounted as "/admin", which itself
   * was mounted as "/blog" then the
   * return value would be "/blog/admin".
   *
   * @return {String}
   * @private
   */

  app.path = function path() {
    return this.parent
      ? this.parent.path() + this.mountpath
      : '';
  };

  /**
   * Check if `setting` is enabled (truthy).
   *
   *    app.enabled('foo')
   *    // => false
   *
   *    app.enable('foo')
   *    app.enabled('foo')
   *    // => true
   *
   * @param {String} setting
   * @return {Boolean}
   * @public
   */

  app.enabled = function enabled(setting) {
    return Boolean(this.set(setting));
  };

  /**
   * Check if `setting` is disabled.
   *
   *    app.disabled('foo')
   *    // => true
   *
   *    app.enable('foo')
   *    app.disabled('foo')
   *    // => false
   *
   * @param {String} setting
   * @return {Boolean}
   * @public
   */

  app.disabled = function disabled(setting) {
    return !this.set(setting);
  };

  /**
   * Enable `setting`.
   *
   * @param {String} setting
   * @return {app} for chaining
   * @public
   */

  app.enable = function enable(setting) {
    return this.set(setting, true);
  };

  /**
   * Disable `setting`.
   *
   * @param {String} setting
   * @return {app} for chaining
   * @public
   */

  app.disable = function disable(setting) {
    return this.set(setting, false);
  };

  /**
   * Delegate `.VERB(...)` calls to `router.VERB(...)`.
   */

  methods.forEach(function(method){
    app[method] = function(path){
      if (method === 'get' && arguments.length === 1) {
        // app.get(setting)
        return this.set(path);
      }

      this.lazyrouter();

      var route = this._router.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });

  /**
   * Special-cased "all" method, applying the given route `path`,
   * middleware, and callback to _every_ HTTP method.
   *
   * @param {String} path
   * @param {Function} ...
   * @return {app} for chaining
   * @public
   */

  app.all = function all(path) {
    this.lazyrouter();

    var route = this._router.route(path);
    var args = slice.call(arguments, 1);

    for (var i = 0; i < methods.length; i++) {
      route[methods[i]].apply(route, args);
    }

    return this;
  };

  // del -> delete alias

  app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');

  /**
   * Render the given view `name` name with `options`
   * and a callback accepting an error and the
   * rendered template string.
   *
   * Example:
   *
   *    app.render('email', { name: 'Tobi' }, function(err, html){
   *      // ...
   *    })
   *
   * @param {String} name
   * @param {Object|Function} options or fn
   * @param {Function} callback
   * @public
   */

  app.render = function render(name, options, callback) {
    var cache = this.cache;
    var done = callback;
    var engines = this.engines;
    var opts = options;
    var renderOptions = {};
    var view;

    // support callback function as second arg
    if (typeof options === 'function') {
      done = options;
      opts = {};
    }

    // merge app.locals
    utilsMerge(renderOptions, this.locals);

    // merge options._locals
    if (opts._locals) {
      utilsMerge(renderOptions, opts._locals);
    }

    // merge options
    utilsMerge(renderOptions, opts);

    // set .cache unless explicitly provided
    if (renderOptions.cache == null) {
      renderOptions.cache = this.enabled('view cache');
    }

    // primed cache
    if (renderOptions.cache) {
      view = cache[name];
    }

    // view
    if (!view) {
      var View = this.get('view');

      view = new View(name, {
        defaultEngine: this.get('view engine'),
        root: this.get('views'),
        engines: engines
      });

      if (!view.path) {
        var dirs = Array.isArray(view.root) && view.root.length > 1
          ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"'
          : 'directory "' + view.root + '"';
        var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
        err.view = view;
        return done(err);
      }

      // prime the cache
      if (renderOptions.cache) {
        cache[name] = view;
      }
    }

    // render
    tryRender(view, renderOptions, done);
  };

  /**
   * Listen for connections.
   *
   * A node `http.Server` is returned, with this
   * application (which is a `Function`) as its
   * callback. If you wish to create both an HTTP
   * and HTTPS server you may do so with the "http"
   * and "https" modules as shown here:
   *
   *    var http = require('http')
   *      , https = require('https')
   *      , express = require('express')
   *      , app = express();
   *
   *    http.createServer(app).listen(80);
   *    https.createServer({ ... }, app).listen(443);
   *
   * @return {http.Server}
   * @public
   */

  app.listen = function listen() {
    var server = http.createServer(this);
    return server.listen.apply(server, arguments);
  };

  /**
   * Log error using console.error.
   *
   * @param {Error} err
   * @private
   */

  function logerror(err) {
    /* istanbul ignore next */
    if (this.get('env') !== 'test') console.error(err.stack || err.toString());
  }

  /**
   * Try rendering a view.
   * @private
   */

  function tryRender(view, options, callback) {
    try {
      view.render(options, callback);
    } catch (err) {
      callback(err);
    }
  }
  });

  /**
   * negotiator
   * Copyright(c) 2012 Isaac Z. Schlueter
   * Copyright(c) 2014 Federico Romero
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var charset = preferredCharsets;
  var preferredCharsets_1 = preferredCharsets;

  /**
   * Module variables.
   * @private
   */

  var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

  /**
   * Parse the Accept-Charset header.
   * @private
   */

  function parseAcceptCharset(accept) {
    var accepts = accept.split(',');

    for (var i = 0, j = 0; i < accepts.length; i++) {
      var charset = parseCharset(accepts[i].trim(), i);

      if (charset) {
        accepts[j++] = charset;
      }
    }

    // trim accepts
    accepts.length = j;

    return accepts;
  }

  /**
   * Parse a charset from the Accept-Charset header.
   * @private
   */

  function parseCharset(str, i) {
    var match = simpleCharsetRegExp.exec(str);
    if (!match) return null;

    var charset = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(';');
      for (var j = 0; j < params.length; j++) {
        var p = params[j].trim().split('=');
        if (p[0] === 'q') {
          q = parseFloat(p[1]);
          break;
        }
      }
    }

    return {
      charset: charset,
      q: q,
      i: i
    };
  }

  /**
   * Get the priority of a charset.
   * @private
   */

  function getCharsetPriority(charset, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};

    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(charset, accepted[i], index);

      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }

    return priority;
  }

  /**
   * Get the specificity of the charset.
   * @private
   */

  function specify(charset, spec, index) {
    var s = 0;
    if(spec.charset.toLowerCase() === charset.toLowerCase()){
      s |= 1;
    } else if (spec.charset !== '*' ) {
      return null
    }

    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }

  /**
   * Get the preferred charsets from an Accept-Charset header.
   * @public
   */

  function preferredCharsets(accept, provided) {
    // RFC 2616 sec 14.2: no header = *
    var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

    if (!provided) {
      // sorted list of all charsets
      return accepts
        .filter(isQuality)
        .sort(compareSpecs)
        .map(getFullCharset);
    }

    var priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index);
    });

    // sorted list of accepted charsets
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }

  /**
   * Get full charset string.
   * @private
   */

  function getFullCharset(spec) {
    return spec.charset;
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality(spec) {
    return spec.q > 0;
  }
  charset.preferredCharsets = preferredCharsets_1;

  /**
   * negotiator
   * Copyright(c) 2012 Isaac Z. Schlueter
   * Copyright(c) 2014 Federico Romero
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var encoding = preferredEncodings;
  var preferredEncodings_1 = preferredEncodings;

  /**
   * Module variables.
   * @private
   */

  var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

  /**
   * Parse the Accept-Encoding header.
   * @private
   */

  function parseAcceptEncoding(accept) {
    var accepts = accept.split(',');
    var hasIdentity = false;
    var minQuality = 1;

    for (var i = 0, j = 0; i < accepts.length; i++) {
      var encoding = parseEncoding(accepts[i].trim(), i);

      if (encoding) {
        accepts[j++] = encoding;
        hasIdentity = hasIdentity || specify$1('identity', encoding);
        minQuality = Math.min(minQuality, encoding.q || 1);
      }
    }

    if (!hasIdentity) {
      /*
       * If identity doesn't explicitly appear in the accept-encoding header,
       * it's added to the list of acceptable encoding with the lowest q
       */
      accepts[j++] = {
        encoding: 'identity',
        q: minQuality,
        i: i
      };
    }

    // trim accepts
    accepts.length = j;

    return accepts;
  }

  /**
   * Parse an encoding from the Accept-Encoding header.
   * @private
   */

  function parseEncoding(str, i) {
    var match = simpleEncodingRegExp.exec(str);
    if (!match) return null;

    var encoding = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(';');
      for (var j = 0; j < params.length; j++) {
        var p = params[j].trim().split('=');
        if (p[0] === 'q') {
          q = parseFloat(p[1]);
          break;
        }
      }
    }

    return {
      encoding: encoding,
      q: q,
      i: i
    };
  }

  /**
   * Get the priority of an encoding.
   * @private
   */

  function getEncodingPriority(encoding, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};

    for (var i = 0; i < accepted.length; i++) {
      var spec = specify$1(encoding, accepted[i], index);

      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }

    return priority;
  }

  /**
   * Get the specificity of the encoding.
   * @private
   */

  function specify$1(encoding, spec, index) {
    var s = 0;
    if(spec.encoding.toLowerCase() === encoding.toLowerCase()){
      s |= 1;
    } else if (spec.encoding !== '*' ) {
      return null
    }

    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }
  /**
   * Get the preferred encodings from an Accept-Encoding header.
   * @public
   */

  function preferredEncodings(accept, provided) {
    var accepts = parseAcceptEncoding(accept || '');

    if (!provided) {
      // sorted list of all encodings
      return accepts
        .filter(isQuality$1)
        .sort(compareSpecs$1)
        .map(getFullEncoding);
    }

    var priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index);
    });

    // sorted list of accepted encodings
    return priorities.filter(isQuality$1).sort(compareSpecs$1).map(function getEncoding(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs$1(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }

  /**
   * Get full encoding string.
   * @private
   */

  function getFullEncoding(spec) {
    return spec.encoding;
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality$1(spec) {
    return spec.q > 0;
  }
  encoding.preferredEncodings = preferredEncodings_1;

  /**
   * negotiator
   * Copyright(c) 2012 Isaac Z. Schlueter
   * Copyright(c) 2014 Federico Romero
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var language = preferredLanguages;
  var preferredLanguages_1 = preferredLanguages;

  /**
   * Module variables.
   * @private
   */

  var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

  /**
   * Parse the Accept-Language header.
   * @private
   */

  function parseAcceptLanguage(accept) {
    var accepts = accept.split(',');

    for (var i = 0, j = 0; i < accepts.length; i++) {
      var language = parseLanguage(accepts[i].trim(), i);

      if (language) {
        accepts[j++] = language;
      }
    }

    // trim accepts
    accepts.length = j;

    return accepts;
  }

  /**
   * Parse a language from the Accept-Language header.
   * @private
   */

  function parseLanguage(str, i) {
    var match = simpleLanguageRegExp.exec(str);
    if (!match) return null;

    var prefix = match[1],
      suffix = match[2],
      full = prefix;

    if (suffix) full += "-" + suffix;

    var q = 1;
    if (match[3]) {
      var params = match[3].split(';');
      for (var j = 0; j < params.length; j++) {
        var p = params[j].split('=');
        if (p[0] === 'q') q = parseFloat(p[1]);
      }
    }

    return {
      prefix: prefix,
      suffix: suffix,
      q: q,
      i: i,
      full: full
    };
  }

  /**
   * Get the priority of a language.
   * @private
   */

  function getLanguagePriority(language, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};

    for (var i = 0; i < accepted.length; i++) {
      var spec = specify$2(language, accepted[i], index);

      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }

    return priority;
  }

  /**
   * Get the specificity of the language.
   * @private
   */

  function specify$2(language, spec, index) {
    var p = parseLanguage(language);
    if (!p) return null;
    var s = 0;
    if(spec.full.toLowerCase() === p.full.toLowerCase()){
      s |= 4;
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2;
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1;
    } else if (spec.full !== '*' ) {
      return null
    }

    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s
    }
  }
  /**
   * Get the preferred languages from an Accept-Language header.
   * @public
   */

  function preferredLanguages(accept, provided) {
    // RFC 2616 sec 14.4: no header = *
    var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

    if (!provided) {
      // sorted list of all languages
      return accepts
        .filter(isQuality$2)
        .sort(compareSpecs$2)
        .map(getFullLanguage);
    }

    var priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index);
    });

    // sorted list of accepted languages
    return priorities.filter(isQuality$2).sort(compareSpecs$2).map(function getLanguage(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs$2(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }

  /**
   * Get full language string.
   * @private
   */

  function getFullLanguage(spec) {
    return spec.full;
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality$2(spec) {
    return spec.q > 0;
  }
  language.preferredLanguages = preferredLanguages_1;

  /**
   * negotiator
   * Copyright(c) 2012 Isaac Z. Schlueter
   * Copyright(c) 2014 Federico Romero
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var mediaType = preferredMediaTypes;
  var preferredMediaTypes_1 = preferredMediaTypes;

  /**
   * Module variables.
   * @private
   */

  var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

  /**
   * Parse the Accept header.
   * @private
   */

  function parseAccept(accept) {
    var accepts = splitMediaTypes(accept);

    for (var i = 0, j = 0; i < accepts.length; i++) {
      var mediaType = parseMediaType(accepts[i].trim(), i);

      if (mediaType) {
        accepts[j++] = mediaType;
      }
    }

    // trim accepts
    accepts.length = j;

    return accepts;
  }

  /**
   * Parse a media type from the Accept header.
   * @private
   */

  function parseMediaType(str, i) {
    var match = simpleMediaTypeRegExp.exec(str);
    if (!match) return null;

    var params = Object.create(null);
    var q = 1;
    var subtype = match[2];
    var type = match[1];

    if (match[3]) {
      var kvps = splitParameters(match[3]).map(splitKeyValuePair);

      for (var j = 0; j < kvps.length; j++) {
        var pair = kvps[j];
        var key = pair[0].toLowerCase();
        var val = pair[1];

        // get the value, unwrapping quotes
        var value = val && val[0] === '"' && val[val.length - 1] === '"'
          ? val.substr(1, val.length - 2)
          : val;

        if (key === 'q') {
          q = parseFloat(value);
          break;
        }

        // store parameter
        params[key] = value;
      }
    }

    return {
      type: type,
      subtype: subtype,
      params: params,
      q: q,
      i: i
    };
  }

  /**
   * Get the priority of a media type.
   * @private
   */

  function getMediaTypePriority(type, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};

    for (var i = 0; i < accepted.length; i++) {
      var spec = specify$3(type, accepted[i], index);

      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }

    return priority;
  }

  /**
   * Get the specificity of the media type.
   * @private
   */

  function specify$3(type, spec, index) {
    var p = parseMediaType(type);
    var s = 0;

    if (!p) {
      return null;
    }

    if(spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4;
    } else if(spec.type != '*') {
      return null;
    }

    if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2;
    } else if(spec.subtype != '*') {
      return null;
    }

    var keys = Object.keys(spec.params);
    if (keys.length > 0) {
      if (keys.every(function (k) {
        return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
      })) {
        s |= 1;
      } else {
        return null
      }
    }

    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s: s,
    }
  }

  /**
   * Get the preferred media types from an Accept header.
   * @public
   */

  function preferredMediaTypes(accept, provided) {
    // RFC 2616 sec 14.2: no header = */*
    var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

    if (!provided) {
      // sorted list of all types
      return accepts
        .filter(isQuality$3)
        .sort(compareSpecs$3)
        .map(getFullType);
    }

    var priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index);
    });

    // sorted list of accepted types
    return priorities.filter(isQuality$3).sort(compareSpecs$3).map(function getType(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }

  /**
   * Compare two specs.
   * @private
   */

  function compareSpecs$3(a, b) {
    return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;
  }

  /**
   * Get full type string.
   * @private
   */

  function getFullType(spec) {
    return spec.type + '/' + spec.subtype;
  }

  /**
   * Check if a spec has any quality.
   * @private
   */

  function isQuality$3(spec) {
    return spec.q > 0;
  }

  /**
   * Count the number of quotes in a string.
   * @private
   */

  function quoteCount(string) {
    var count = 0;
    var index = 0;

    while ((index = string.indexOf('"', index)) !== -1) {
      count++;
      index++;
    }

    return count;
  }

  /**
   * Split a key value pair.
   * @private
   */

  function splitKeyValuePair(str) {
    var index = str.indexOf('=');
    var key;
    var val;

    if (index === -1) {
      key = str;
    } else {
      key = str.substr(0, index);
      val = str.substr(index + 1);
    }

    return [key, val];
  }

  /**
   * Split an Accept header into media types.
   * @private
   */

  function splitMediaTypes(accept) {
    var accepts = accept.split(',');

    for (var i = 1, j = 0; i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i];
      } else {
        accepts[j] += ',' + accepts[i];
      }
    }

    // trim accepts
    accepts.length = j + 1;

    return accepts;
  }

  /**
   * Split a string of parameters.
   * @private
   */

  function splitParameters(str) {
    var parameters = str.split(';');

    for (var i = 1, j = 0; i < parameters.length; i++) {
      if (quoteCount(parameters[j]) % 2 == 0) {
        parameters[++j] = parameters[i];
      } else {
        parameters[j] += ';' + parameters[i];
      }
    }

    // trim parameters
    parameters.length = j + 1;

    for (var i = 0; i < parameters.length; i++) {
      parameters[i] = parameters[i].trim();
    }

    return parameters;
  }
  mediaType.preferredMediaTypes = preferredMediaTypes_1;

  /**
   * Cached loaded submodules.
   * @private
   */

  var modules = Object.create(null);

  /**
   * Module exports.
   * @public
   */

  var negotiator = Negotiator;
  var Negotiator_1 = Negotiator;

  /**
   * Create a Negotiator instance from a request.
   * @param {object} request
   * @public
   */

  function Negotiator(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request);
    }

    this.request = request;
  }

  Negotiator.prototype.charset = function charset(available) {
    var set = this.charsets(available);
    return set && set[0];
  };

  Negotiator.prototype.charsets = function charsets(available) {
    var preferredCharsets = loadModule('charset').preferredCharsets;
    return preferredCharsets(this.request.headers['accept-charset'], available);
  };

  Negotiator.prototype.encoding = function encoding(available) {
    var set = this.encodings(available);
    return set && set[0];
  };

  Negotiator.prototype.encodings = function encodings(available) {
    var preferredEncodings = loadModule('encoding').preferredEncodings;
    return preferredEncodings(this.request.headers['accept-encoding'], available);
  };

  Negotiator.prototype.language = function language(available) {
    var set = this.languages(available);
    return set && set[0];
  };

  Negotiator.prototype.languages = function languages(available) {
    var preferredLanguages = loadModule('language').preferredLanguages;
    return preferredLanguages(this.request.headers['accept-language'], available);
  };

  Negotiator.prototype.mediaType = function mediaType(available) {
    var set = this.mediaTypes(available);
    return set && set[0];
  };

  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
    return preferredMediaTypes(this.request.headers.accept, available);
  };

  // Backwards compatibility
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

  /**
   * Load the given module.
   * @private
   */

  function loadModule(moduleName) {
    var module = modules[moduleName];

    if (module !== undefined) {
      return module;
    }

    // This uses a switch for static require analysis
    switch (moduleName) {
      case 'charset':
        module = charset;
        break;
      case 'encoding':
        module = encoding;
        break;
      case 'language':
        module = language;
        break;
      case 'mediaType':
        module = mediaType;
        break;
      default:
        throw new Error('Cannot find module \'' + moduleName + '\'');
    }

    // Store to prevent invoking require()
    modules[moduleName] = module;

    return module;
  }
  negotiator.Negotiator = Negotiator_1;

  /**
   * Module dependencies.
   * @private
   */




  /**
   * Module exports.
   * @public
   */

  var accepts = Accepts;

  /**
   * Create a new Accepts object for the given req.
   *
   * @param {object} req
   * @public
   */

  function Accepts (req) {
    if (!(this instanceof Accepts)) {
      return new Accepts(req)
    }

    this.headers = req.headers;
    this.negotiator = new negotiator(req);
  }

  /**
   * Check if the given `type(s)` is acceptable, returning
   * the best match when true, otherwise `undefined`, in which
   * case you should respond with 406 "Not Acceptable".
   *
   * The `type` value may be a single mime type string
   * such as "application/json", the extension name
   * such as "json" or an array `["json", "html", "text/plain"]`. When a list
   * or array is given the _best_ match, if any is returned.
   *
   * Examples:
   *
   *     // Accept: text/html
   *     this.types('html');
   *     // => "html"
   *
   *     // Accept: text/*, application/json
   *     this.types('html');
   *     // => "html"
   *     this.types('text/html');
   *     // => "text/html"
   *     this.types('json', 'text');
   *     // => "json"
   *     this.types('application/json');
   *     // => "application/json"
   *
   *     // Accept: text/*, application/json
   *     this.types('image/png');
   *     this.types('png');
   *     // => undefined
   *
   *     // Accept: text/*;q=.5, application/json
   *     this.types(['html', 'json']);
   *     this.types('html', 'json');
   *     // => "json"
   *
   * @param {String|Array} types...
   * @return {String|Array|Boolean}
   * @public
   */

  Accepts.prototype.type =
  Accepts.prototype.types = function (types_) {
    var types = types_;

    // support flattened arguments
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i];
      }
    }

    // no types, return all requested types
    if (!types || types.length === 0) {
      return this.negotiator.mediaTypes()
    }

    // no accept header, return first given type
    if (!this.headers.accept) {
      return types[0]
    }

    var mimes = types.map(extToMime);
    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
    var first = accepts[0];

    return first
      ? types[mimes.indexOf(first)]
      : false
  };

  /**
   * Return accepted encodings or best fit based on `encodings`.
   *
   * Given `Accept-Encoding: gzip, deflate`
   * an array sorted by quality is returned:
   *
   *     ['gzip', 'deflate']
   *
   * @param {String|Array} encodings...
   * @return {String|Array}
   * @public
   */

  Accepts.prototype.encoding =
  Accepts.prototype.encodings = function (encodings_) {
    var encodings = encodings_;

    // support flattened arguments
    if (encodings && !Array.isArray(encodings)) {
      encodings = new Array(arguments.length);
      for (var i = 0; i < encodings.length; i++) {
        encodings[i] = arguments[i];
      }
    }

    // no encodings, return all requested encodings
    if (!encodings || encodings.length === 0) {
      return this.negotiator.encodings()
    }

    return this.negotiator.encodings(encodings)[0] || false
  };

  /**
   * Return accepted charsets or best fit based on `charsets`.
   *
   * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
   * an array sorted by quality is returned:
   *
   *     ['utf-8', 'utf-7', 'iso-8859-1']
   *
   * @param {String|Array} charsets...
   * @return {String|Array}
   * @public
   */

  Accepts.prototype.charset =
  Accepts.prototype.charsets = function (charsets_) {
    var charsets = charsets_;

    // support flattened arguments
    if (charsets && !Array.isArray(charsets)) {
      charsets = new Array(arguments.length);
      for (var i = 0; i < charsets.length; i++) {
        charsets[i] = arguments[i];
      }
    }

    // no charsets, return all requested charsets
    if (!charsets || charsets.length === 0) {
      return this.negotiator.charsets()
    }

    return this.negotiator.charsets(charsets)[0] || false
  };

  /**
   * Return accepted languages or best fit based on `langs`.
   *
   * Given `Accept-Language: en;q=0.8, es, pt`
   * an array sorted by quality is returned:
   *
   *     ['es', 'pt', 'en']
   *
   * @param {String|Array} langs...
   * @return {Array|String}
   * @public
   */

  Accepts.prototype.lang =
  Accepts.prototype.langs =
  Accepts.prototype.language =
  Accepts.prototype.languages = function (languages_) {
    var languages = languages_;

    // support flattened arguments
    if (languages && !Array.isArray(languages)) {
      languages = new Array(arguments.length);
      for (var i = 0; i < languages.length; i++) {
        languages[i] = arguments[i];
      }
    }

    // no languages, return all requested languages
    if (!languages || languages.length === 0) {
      return this.negotiator.languages()
    }

    return this.negotiator.languages(languages)[0] || false
  };

  /**
   * Convert extnames to mime.
   *
   * @param {String} type
   * @return {String}
   * @private
   */

  function extToMime (type) {
    return type.indexOf('/') === -1
      ? mimeTypes.lookup(type)
      : type
  }

  /**
   * Check if mime is valid.
   *
   * @param {String} type
   * @return {String}
   * @private
   */

  function validMime (type) {
    return typeof type === 'string'
  }

  /**
   * Module dependencies.
   * @private
   */


  var deprecate$2 = depd_1('express');
  var isIP = net.isIP;







  /**
   * Request prototype.
   * @public
   */

  var req = Object.create(http.IncomingMessage.prototype);

  /**
   * Module exports.
   * @public
   */

  var request = req;

  /**
   * Return request header.
   *
   * The `Referrer` header field is special-cased,
   * both `Referrer` and `Referer` are interchangeable.
   *
   * Examples:
   *
   *     req.get('Content-Type');
   *     // => "text/plain"
   *
   *     req.get('content-type');
   *     // => "text/plain"
   *
   *     req.get('Something');
   *     // => undefined
   *
   * Aliased as `req.header()`.
   *
   * @param {String} name
   * @return {String}
   * @public
   */

  req.get =
  req.header = function header(name) {
    if (!name) {
      throw new TypeError('name argument is required to req.get');
    }

    if (typeof name !== 'string') {
      throw new TypeError('name must be a string to req.get');
    }

    var lc = name.toLowerCase();

    switch (lc) {
      case 'referer':
      case 'referrer':
        return this.headers.referrer
          || this.headers.referer;
      default:
        return this.headers[lc];
    }
  };

  /**
   * To do: update docs.
   *
   * Check if the given `type(s)` is acceptable, returning
   * the best match when true, otherwise `undefined`, in which
   * case you should respond with 406 "Not Acceptable".
   *
   * The `type` value may be a single MIME type string
   * such as "application/json", an extension name
   * such as "json", a comma-delimited list such as "json, html, text/plain",
   * an argument list such as `"json", "html", "text/plain"`,
   * or an array `["json", "html", "text/plain"]`. When a list
   * or array is given, the _best_ match, if any is returned.
   *
   * Examples:
   *
   *     // Accept: text/html
   *     req.accepts('html');
   *     // => "html"
   *
   *     // Accept: text/*, application/json
   *     req.accepts('html');
   *     // => "html"
   *     req.accepts('text/html');
   *     // => "text/html"
   *     req.accepts('json, text');
   *     // => "json"
   *     req.accepts('application/json');
   *     // => "application/json"
   *
   *     // Accept: text/*, application/json
   *     req.accepts('image/png');
   *     req.accepts('png');
   *     // => undefined
   *
   *     // Accept: text/*;q=.5, application/json
   *     req.accepts(['html', 'json']);
   *     req.accepts('html', 'json');
   *     req.accepts('html, json');
   *     // => "json"
   *
   * @param {String|Array} type(s)
   * @return {String|Array|Boolean}
   * @public
   */

  req.accepts = function(){
    var accept = accepts(this);
    return accept.types.apply(accept, arguments);
  };

  /**
   * Check if the given `encoding`s are accepted.
   *
   * @param {String} ...encoding
   * @return {String|Array}
   * @public
   */

  req.acceptsEncodings = function(){
    var accept = accepts(this);
    return accept.encodings.apply(accept, arguments);
  };

  req.acceptsEncoding = deprecate$2.function(req.acceptsEncodings,
    'req.acceptsEncoding: Use acceptsEncodings instead');

  /**
   * Check if the given `charset`s are acceptable,
   * otherwise you should respond with 406 "Not Acceptable".
   *
   * @param {String} ...charset
   * @return {String|Array}
   * @public
   */

  req.acceptsCharsets = function(){
    var accept = accepts(this);
    return accept.charsets.apply(accept, arguments);
  };

  req.acceptsCharset = deprecate$2.function(req.acceptsCharsets,
    'req.acceptsCharset: Use acceptsCharsets instead');

  /**
   * Check if the given `lang`s are acceptable,
   * otherwise you should respond with 406 "Not Acceptable".
   *
   * @param {String} ...lang
   * @return {String|Array}
   * @public
   */

  req.acceptsLanguages = function(){
    var accept = accepts(this);
    return accept.languages.apply(accept, arguments);
  };

  req.acceptsLanguage = deprecate$2.function(req.acceptsLanguages,
    'req.acceptsLanguage: Use acceptsLanguages instead');

  /**
   * Parse Range header field, capping to the given `size`.
   *
   * Unspecified ranges such as "0-" require knowledge of your resource length. In
   * the case of a byte range this is of course the total number of bytes. If the
   * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
   * and `-2` when syntactically invalid.
   *
   * When ranges are returned, the array has a "type" property which is the type of
   * range that is required (most commonly, "bytes"). Each array element is an object
   * with a "start" and "end" property for the portion of the range.
   *
   * The "combine" option can be set to `true` and overlapping & adjacent ranges
   * will be combined into a single range.
   *
   * NOTE: remember that ranges are inclusive, so for example "Range: users=0-3"
   * should respond with 4 users when available, not 3.
   *
   * @param {number} size
   * @param {object} [options]
   * @param {boolean} [options.combine=false]
   * @return {number|array}
   * @public
   */

  req.range = function range(size, options) {
    var range = this.get('Range');
    if (!range) return;
    return rangeParser_1(size, range, options);
  };

  /**
   * Return the value of param `name` when present or `defaultValue`.
   *
   *  - Checks route placeholders, ex: _/user/:id_
   *  - Checks body params, ex: id=12, {"id":12}
   *  - Checks query string params, ex: ?id=12
   *
   * To utilize request bodies, `req.body`
   * should be an object. This can be done by using
   * the `bodyParser()` middleware.
   *
   * @param {String} name
   * @param {Mixed} [defaultValue]
   * @return {String}
   * @public
   */

  req.param = function param(name, defaultValue) {
    var params = this.params || {};
    var body = this.body || {};
    var query = this.query || {};

    var args = arguments.length === 1
      ? 'name'
      : 'name, default';
    deprecate$2('req.param(' + args + '): Use req.params, req.body, or req.query instead');

    if (null != params[name] && params.hasOwnProperty(name)) return params[name];
    if (null != body[name]) return body[name];
    if (null != query[name]) return query[name];

    return defaultValue;
  };

  /**
   * Check if the incoming request contains the "Content-Type"
   * header field, and it contains the give mime `type`.
   *
   * Examples:
   *
   *      // With Content-Type: text/html; charset=utf-8
   *      req.is('html');
   *      req.is('text/html');
   *      req.is('text/*');
   *      // => true
   *
   *      // When Content-Type is application/json
   *      req.is('json');
   *      req.is('application/json');
   *      req.is('application/*');
   *      // => true
   *
   *      req.is('html');
   *      // => false
   *
   * @param {String|Array} types...
   * @return {String|false|null}
   * @public
   */

  req.is = function is(types) {
    var arr = types;

    // support flattened arguments
    if (!Array.isArray(types)) {
      arr = new Array(arguments.length);
      for (var i = 0; i < arr.length; i++) {
        arr[i] = arguments[i];
      }
    }

    return typeIs(this, arr);
  };

  /**
   * Return the protocol string "http" or "https"
   * when requested with TLS. When the "trust proxy"
   * setting trusts the socket address, the
   * "X-Forwarded-Proto" header field will be trusted
   * and used if present.
   *
   * If you're running behind a reverse proxy that
   * supplies https for you this may be enabled.
   *
   * @return {String}
   * @public
   */

  defineGetter(req, 'protocol', function protocol(){
    var proto = this.connection.encrypted
      ? 'https'
      : 'http';
    var trust = this.app.get('trust proxy fn');

    if (!trust(this.connection.remoteAddress, 0)) {
      return proto;
    }

    // Note: X-Forwarded-Proto is normally only ever a
    //       single value, but this is to be safe.
    var header = this.get('X-Forwarded-Proto') || proto;
    var index = header.indexOf(',');

    return index !== -1
      ? header.substring(0, index).trim()
      : header.trim()
  });

  /**
   * Short-hand for:
   *
   *    req.protocol === 'https'
   *
   * @return {Boolean}
   * @public
   */

  defineGetter(req, 'secure', function secure(){
    return this.protocol === 'https';
  });

  /**
   * Return the remote address from the trusted proxy.
   *
   * The is the remote address on the socket unless
   * "trust proxy" is set.
   *
   * @return {String}
   * @public
   */

  defineGetter(req, 'ip', function ip(){
    var trust = this.app.get('trust proxy fn');
    return proxyAddr(this, trust);
  });

  /**
   * When "trust proxy" is set, trusted proxy addresses + client.
   *
   * For example if the value were "client, proxy1, proxy2"
   * you would receive the array `["client", "proxy1", "proxy2"]`
   * where "proxy2" is the furthest down-stream and "proxy1" and
   * "proxy2" were trusted.
   *
   * @return {Array}
   * @public
   */

  defineGetter(req, 'ips', function ips() {
    var trust = this.app.get('trust proxy fn');
    var addrs = proxyAddr.all(this, trust);

    // reverse the order (to farthest -> closest)
    // and remove socket address
    addrs.reverse().pop();

    return addrs
  });

  /**
   * Return subdomains as an array.
   *
   * Subdomains are the dot-separated parts of the host before the main domain of
   * the app. By default, the domain of the app is assumed to be the last two
   * parts of the host. This can be changed by setting "subdomain offset".
   *
   * For example, if the domain is "tobi.ferrets.example.com":
   * If "subdomain offset" is not set, req.subdomains is `["ferrets", "tobi"]`.
   * If "subdomain offset" is 3, req.subdomains is `["tobi"]`.
   *
   * @return {Array}
   * @public
   */

  defineGetter(req, 'subdomains', function subdomains() {
    var hostname = this.hostname;

    if (!hostname) return [];

    var offset = this.app.get('subdomain offset');
    var subdomains = !isIP(hostname)
      ? hostname.split('.').reverse()
      : [hostname];

    return subdomains.slice(offset);
  });

  /**
   * Short-hand for `url.parse(req.url).pathname`.
   *
   * @return {String}
   * @public
   */

  defineGetter(req, 'path', function path() {
    return parseurl_1(this).pathname;
  });

  /**
   * Parse the "Host" header field to a hostname.
   *
   * When the "trust proxy" setting trusts the socket
   * address, the "X-Forwarded-Host" header field will
   * be trusted.
   *
   * @return {String}
   * @public
   */

  defineGetter(req, 'hostname', function hostname(){
    var trust = this.app.get('trust proxy fn');
    var host = this.get('X-Forwarded-Host');

    if (!host || !trust(this.connection.remoteAddress, 0)) {
      host = this.get('Host');
    } else if (host.indexOf(',') !== -1) {
      // Note: X-Forwarded-Host is normally only ever a
      //       single value, but this is to be safe.
      host = host.substring(0, host.indexOf(',')).trimRight();
    }

    if (!host) return;

    // IPv6 literal support
    var offset = host[0] === '['
      ? host.indexOf(']') + 1
      : 0;
    var index = host.indexOf(':', offset);

    return index !== -1
      ? host.substring(0, index)
      : host;
  });

  // TODO: change req.host to return host in next major

  defineGetter(req, 'host', deprecate$2.function(function host(){
    return this.hostname;
  }, 'req.host: Use req.hostname instead'));

  /**
   * Check if the request is fresh, aka
   * Last-Modified and/or the ETag
   * still match.
   *
   * @return {Boolean}
   * @public
   */

  defineGetter(req, 'fresh', function(){
    var method = this.method;
    var res = this.res;
    var status = res.statusCode;

    // GET or HEAD for weak freshness validation only
    if ('GET' !== method && 'HEAD' !== method) return false;

    // 2xx or 304 as per rfc2616 14.26
    if ((status >= 200 && status < 300) || 304 === status) {
      return fresh_1(this.headers, {
        'etag': res.get('ETag'),
        'last-modified': res.get('Last-Modified')
      })
    }

    return false;
  });

  /**
   * Check if the request is stale, aka
   * "Last-Modified" and / or the "ETag" for the
   * resource has changed.
   *
   * @return {Boolean}
   * @public
   */

  defineGetter(req, 'stale', function stale(){
    return !this.fresh;
  });

  /**
   * Check if the request was an _XMLHttpRequest_.
   *
   * @return {Boolean}
   * @public
   */

  defineGetter(req, 'xhr', function xhr(){
    var val = this.get('X-Requested-With') || '';
    return val.toLowerCase() === 'xmlhttprequest';
  });

  /**
   * Helper function for creating a getter on an object.
   *
   * @param {Object} obj
   * @param {String} name
   * @param {Function} getter
   * @private
   */
  function defineGetter(obj, name, getter) {
    Object.defineProperty(obj, name, {
      configurable: true,
      enumerable: true,
      get: getter
    });
  }

  var cookieSignature = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */



  /**
   * Sign the given `val` with `secret`.
   *
   * @param {String} val
   * @param {String} secret
   * @return {String}
   * @api private
   */

  exports.sign = function(val, secret){
    if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
    if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
    return val + '.' + crypto
      .createHmac('sha256', secret)
      .update(val)
      .digest('base64')
      .replace(/\=+$/, '');
  };

  /**
   * Unsign and decode the given `val` with `secret`,
   * returning `false` if the signature is invalid.
   *
   * @param {String} val
   * @param {String} secret
   * @return {String|Boolean}
   * @api private
   */

  exports.unsign = function(val, secret){
    if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
    if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
    var str = val.slice(0, val.lastIndexOf('.'))
      , mac = exports.sign(str, secret);
    
    return sha1(mac) == sha1(val) ? str : false;
  };

  /**
   * Private
   */

  function sha1(str){
    return crypto.createHash('sha1').update(str).digest('hex');
  }
  });
  var cookieSignature_1 = cookieSignature.sign;
  var cookieSignature_2 = cookieSignature.unsign;

  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var parse_1$4 = parse$h;
  var serialize_1 = serialize;

  /**
   * Module variables.
   * @private
   */

  var decode$4 = decodeURIComponent;
  var encode$3 = encodeURIComponent;
  var pairSplitRegExp = /; */;

  /**
   * RegExp to match field-content in RFC 7230 sec 3.2
   *
   * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
   * field-vchar   = VCHAR / obs-text
   * obs-text      = %x80-FF
   */

  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

  /**
   * Parse a cookie header.
   *
   * Parse the given cookie header string into an object
   * The object has the various cookies as keys(names) => values
   *
   * @param {string} str
   * @param {object} [options]
   * @return {object}
   * @public
   */

  function parse$h(str, options) {
    if (typeof str !== 'string') {
      throw new TypeError('argument str must be a string');
    }

    var obj = {};
    var opt = options || {};
    var pairs = str.split(pairSplitRegExp);
    var dec = opt.decode || decode$4;

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var eq_idx = pair.indexOf('=');

      // skip things that don't look like key=value
      if (eq_idx < 0) {
        continue;
      }

      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();

      // quoted values
      if ('"' == val[0]) {
        val = val.slice(1, -1);
      }

      // only assign once
      if (undefined == obj[key]) {
        obj[key] = tryDecode(val, dec);
      }
    }

    return obj;
  }

  /**
   * Serialize data into a cookie header.
   *
   * Serialize the a name value pair into a cookie string suitable for
   * http headers. An optional options object specified cookie parameters.
   *
   * serialize('foo', 'bar', { httpOnly: true })
   *   => "foo=bar; httpOnly"
   *
   * @param {string} name
   * @param {string} val
   * @param {object} [options]
   * @return {string}
   * @public
   */

  function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode$3;

    if (typeof enc !== 'function') {
      throw new TypeError('option encode is invalid');
    }

    if (!fieldContentRegExp.test(name)) {
      throw new TypeError('argument name is invalid');
    }

    var value = enc(val);

    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError('argument val is invalid');
    }

    var str = name + '=' + value;

    if (null != opt.maxAge) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
      str += '; Max-Age=' + Math.floor(maxAge);
    }

    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError('option domain is invalid');
      }

      str += '; Domain=' + opt.domain;
    }

    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError('option path is invalid');
      }

      str += '; Path=' + opt.path;
    }

    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== 'function') {
        throw new TypeError('option expires is invalid');
      }

      str += '; Expires=' + opt.expires.toUTCString();
    }

    if (opt.httpOnly) {
      str += '; HttpOnly';
    }

    if (opt.secure) {
      str += '; Secure';
    }

    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === 'string'
        ? opt.sameSite.toLowerCase() : opt.sameSite;

      switch (sameSite) {
        case true:
          str += '; SameSite=Strict';
          break;
        case 'lax':
          str += '; SameSite=Lax';
          break;
        case 'strict':
          str += '; SameSite=Strict';
          break;
        case 'none':
          str += '; SameSite=None';
          break;
        default:
          throw new TypeError('option sameSite is invalid');
      }
    }

    return str;
  }

  /**
   * Try decoding a string using a decoding function.
   *
   * @param {string} str
   * @param {function} decode
   * @private
   */

  function tryDecode(str, decode) {
    try {
      return decode(str);
    } catch (e) {
      return str;
    }
  }

  var cookie = {
  	parse: parse_1$4,
  	serialize: serialize_1
  };

  /*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   */

  var vary_1 = vary;
  var append_1 = append;

  /**
   * RegExp to match field-name in RFC 7230 sec 3.2
   *
   * field-name    = token
   * token         = 1*tchar
   * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
   *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
   *               / DIGIT / ALPHA
   *               ; any VCHAR, except delimiters
   */

  var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;

  /**
   * Append a field to a vary header.
   *
   * @param {String} header
   * @param {String|Array} field
   * @return {String}
   * @public
   */

  function append (header, field) {
    if (typeof header !== 'string') {
      throw new TypeError('header argument is required')
    }

    if (!field) {
      throw new TypeError('field argument is required')
    }

    // get fields array
    var fields = !Array.isArray(field)
      ? parse$i(String(field))
      : field;

    // assert on invalid field names
    for (var j = 0; j < fields.length; j++) {
      if (!FIELD_NAME_REGEXP.test(fields[j])) {
        throw new TypeError('field argument contains an invalid header name')
      }
    }

    // existing, unspecified vary
    if (header === '*') {
      return header
    }

    // enumerate current values
    var val = header;
    var vals = parse$i(header.toLowerCase());

    // unspecified vary
    if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
      return '*'
    }

    for (var i = 0; i < fields.length; i++) {
      var fld = fields[i].toLowerCase();

      // append value (case-preserving)
      if (vals.indexOf(fld) === -1) {
        vals.push(fld);
        val = val
          ? val + ', ' + fields[i]
          : fields[i];
      }
    }

    return val
  }

  /**
   * Parse a vary header into an array.
   *
   * @param {String} header
   * @return {Array}
   * @private
   */

  function parse$i (header) {
    var end = 0;
    var list = [];
    var start = 0;

    // gather tokens
    for (var i = 0, len = header.length; i < len; i++) {
      switch (header.charCodeAt(i)) {
        case 0x20: /*   */
          if (start === end) {
            start = end = i + 1;
          }
          break
        case 0x2c: /* , */
          list.push(header.substring(start, end));
          start = end = i + 1;
          break
        default:
          end = i + 1;
          break
      }
    }

    // final token
    list.push(header.substring(start, end));

    return list
  }

  /**
   * Mark that a request is varied on a header field.
   *
   * @param {Object} res
   * @param {String|Array} field
   * @public
   */

  function vary (res, field) {
    if (!res || !res.getHeader || !res.setHeader) {
      // quack quack
      throw new TypeError('res argument is required')
    }

    // get existing header
    var val = res.getHeader('Vary') || '';
    var header = Array.isArray(val)
      ? val.join(', ')
      : String(val);

    // set new header
    if ((val = append(header, field))) {
      res.setHeader('Vary', val);
    }
  }
  vary_1.append = append_1;

  /**
   * Module dependencies.
   * @private
   */

  var Buffer$a = safeBuffer.Buffer;

  var deprecate$3 = depd_1('express');



  var isAbsolute = utils$3.isAbsolute;




  var sign = cookieSignature.sign;
  var normalizeType$1 = utils$3.normalizeType;
  var normalizeTypes = utils$3.normalizeTypes;
  var setCharset = utils$3.setCharset;


  var extname$2 = path$3.extname;
  var mime$1 = send_1.mime;
  var resolve$2 = path$3.resolve;


  /**
   * Response prototype.
   * @public
   */

  var res = Object.create(http.ServerResponse.prototype);

  /**
   * Module exports.
   * @public
   */

  var response = res;

  /**
   * Module variables.
   * @private
   */

  var charsetRegExp = /;\s*charset\s*=/;

  /**
   * Set status `code`.
   *
   * @param {Number} code
   * @return {ServerResponse}
   * @public
   */

  res.status = function status(code) {
    this.statusCode = code;
    return this;
  };

  /**
   * Set Link header field with the given `links`.
   *
   * Examples:
   *
   *    res.links({
   *      next: 'http://api.example.com/users?page=2',
   *      last: 'http://api.example.com/users?page=5'
   *    });
   *
   * @param {Object} links
   * @return {ServerResponse}
   * @public
   */

  res.links = function(links){
    var link = this.get('Link') || '';
    if (link) link += ', ';
    return this.set('Link', link + Object.keys(links).map(function(rel){
      return '<' + links[rel] + '>; rel="' + rel + '"';
    }).join(', '));
  };

  /**
   * Send a response.
   *
   * Examples:
   *
   *     res.send(Buffer.from('wahoo'));
   *     res.send({ some: 'json' });
   *     res.send('<p>some html</p>');
   *
   * @param {string|number|boolean|object|Buffer} body
   * @public
   */

  res.send = function send(body) {
    var chunk = body;
    var encoding;
    var req = this.req;
    var type;

    // settings
    var app = this.app;

    // allow status / body
    if (arguments.length === 2) {
      // res.send(body, status) backwards compat
      if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
        deprecate$3('res.send(body, status): Use res.status(status).send(body) instead');
        this.statusCode = arguments[1];
      } else {
        deprecate$3('res.send(status, body): Use res.status(status).send(body) instead');
        this.statusCode = arguments[0];
        chunk = arguments[1];
      }
    }

    // disambiguate res.send(status) and res.send(status, num)
    if (typeof chunk === 'number' && arguments.length === 1) {
      // res.send(status) will set status message as text string
      if (!this.get('Content-Type')) {
        this.type('txt');
      }

      deprecate$3('res.send(status): Use res.sendStatus(status) instead');
      this.statusCode = chunk;
      chunk = statuses[chunk];
    }

    switch (typeof chunk) {
      // string defaulting to html
      case 'string':
        if (!this.get('Content-Type')) {
          this.type('html');
        }
        break;
      case 'boolean':
      case 'number':
      case 'object':
        if (chunk === null) {
          chunk = '';
        } else if (Buffer$a.isBuffer(chunk)) {
          if (!this.get('Content-Type')) {
            this.type('bin');
          }
        } else {
          return this.json(chunk);
        }
        break;
    }

    // write strings in utf-8
    if (typeof chunk === 'string') {
      encoding = 'utf8';
      type = this.get('Content-Type');

      // reflect this in content-type
      if (typeof type === 'string') {
        this.set('Content-Type', setCharset(type, 'utf-8'));
      }
    }

    // determine if ETag should be generated
    var etagFn = app.get('etag fn');
    var generateETag = !this.get('ETag') && typeof etagFn === 'function';

    // populate Content-Length
    var len;
    if (chunk !== undefined) {
      if (Buffer$a.isBuffer(chunk)) {
        // get length of Buffer
        len = chunk.length;
      } else if (!generateETag && chunk.length < 1000) {
        // just calculate length when no ETag + small chunk
        len = Buffer$a.byteLength(chunk, encoding);
      } else {
        // convert chunk to Buffer and calculate
        chunk = Buffer$a.from(chunk, encoding);
        encoding = undefined;
        len = chunk.length;
      }

      this.set('Content-Length', len);
    }

    // populate ETag
    var etag;
    if (generateETag && len !== undefined) {
      if ((etag = etagFn(chunk, encoding))) {
        this.set('ETag', etag);
      }
    }

    // freshness
    if (req.fresh) this.statusCode = 304;

    // strip irrelevant headers
    if (204 === this.statusCode || 304 === this.statusCode) {
      this.removeHeader('Content-Type');
      this.removeHeader('Content-Length');
      this.removeHeader('Transfer-Encoding');
      chunk = '';
    }

    if (req.method === 'HEAD') {
      // skip body for HEAD
      this.end();
    } else {
      // respond
      this.end(chunk, encoding);
    }

    return this;
  };

  /**
   * Send JSON response.
   *
   * Examples:
   *
   *     res.json(null);
   *     res.json({ user: 'tj' });
   *
   * @param {string|number|boolean|object} obj
   * @public
   */

  res.json = function json(obj) {
    var val = obj;

    // allow status / body
    if (arguments.length === 2) {
      // res.json(body, status) backwards compat
      if (typeof arguments[1] === 'number') {
        deprecate$3('res.json(obj, status): Use res.status(status).json(obj) instead');
        this.statusCode = arguments[1];
      } else {
        deprecate$3('res.json(status, obj): Use res.status(status).json(obj) instead');
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }

    // settings
    var app = this.app;
    var escape = app.get('json escape');
    var replacer = app.get('json replacer');
    var spaces = app.get('json spaces');
    var body = stringify$2(val, replacer, spaces, escape);

    // content-type
    if (!this.get('Content-Type')) {
      this.set('Content-Type', 'application/json');
    }

    return this.send(body);
  };

  /**
   * Send JSON response with JSONP callback support.
   *
   * Examples:
   *
   *     res.jsonp(null);
   *     res.jsonp({ user: 'tj' });
   *
   * @param {string|number|boolean|object} obj
   * @public
   */

  res.jsonp = function jsonp(obj) {
    var val = obj;

    // allow status / body
    if (arguments.length === 2) {
      // res.json(body, status) backwards compat
      if (typeof arguments[1] === 'number') {
        deprecate$3('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
        this.statusCode = arguments[1];
      } else {
        deprecate$3('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }

    // settings
    var app = this.app;
    var escape = app.get('json escape');
    var replacer = app.get('json replacer');
    var spaces = app.get('json spaces');
    var body = stringify$2(val, replacer, spaces, escape);
    var callback = this.req.query[app.get('jsonp callback name')];

    // content-type
    if (!this.get('Content-Type')) {
      this.set('X-Content-Type-Options', 'nosniff');
      this.set('Content-Type', 'application/json');
    }

    // fixup callback
    if (Array.isArray(callback)) {
      callback = callback[0];
    }

    // jsonp
    if (typeof callback === 'string' && callback.length !== 0) {
      this.set('X-Content-Type-Options', 'nosniff');
      this.set('Content-Type', 'text/javascript');

      // restrict callback charset
      callback = callback.replace(/[^\[\]\w$.]/g, '');

      // replace chars not allowed in JavaScript that are in JSON
      body = body
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029');

      // the /**/ is a specific security mitigation for "Rosetta Flash JSONP abuse"
      // the typeof check is just to reduce client error noise
      body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
    }

    return this.send(body);
  };

  /**
   * Send given HTTP status code.
   *
   * Sets the response status to `statusCode` and the body of the
   * response to the standard description from node's http.STATUS_CODES
   * or the statusCode number if no description.
   *
   * Examples:
   *
   *     res.sendStatus(200);
   *
   * @param {number} statusCode
   * @public
   */

  res.sendStatus = function sendStatus(statusCode) {
    var body = statuses[statusCode] || String(statusCode);

    this.statusCode = statusCode;
    this.type('txt');

    return this.send(body);
  };

  /**
   * Transfer the file at the given `path`.
   *
   * Automatically sets the _Content-Type_ response header field.
   * The callback `callback(err)` is invoked when the transfer is complete
   * or when an error occurs. Be sure to check `res.sentHeader`
   * if you wish to attempt responding, as the header and some data
   * may have already been transferred.
   *
   * Options:
   *
   *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
   *   - `root`     root directory for relative filenames
   *   - `headers`  object of headers to serve with file
   *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
   *
   * Other options are passed along to `send`.
   *
   * Examples:
   *
   *  The following example illustrates how `res.sendFile()` may
   *  be used as an alternative for the `static()` middleware for
   *  dynamic situations. The code backing `res.sendFile()` is actually
   *  the same code, so HTTP cache support etc is identical.
   *
   *     app.get('/user/:uid/photos/:file', function(req, res){
   *       var uid = req.params.uid
   *         , file = req.params.file;
   *
   *       req.user.mayViewFilesFrom(uid, function(yes){
   *         if (yes) {
   *           res.sendFile('/uploads/' + uid + '/' + file);
   *         } else {
   *           res.send(403, 'Sorry! you cant see that.');
   *         }
   *       });
   *     });
   *
   * @public
   */

  res.sendFile = function sendFile(path, options, callback) {
    var done = callback;
    var req = this.req;
    var res = this;
    var next = req.next;
    var opts = options || {};

    if (!path) {
      throw new TypeError('path argument is required to res.sendFile');
    }

    if (typeof path !== 'string') {
      throw new TypeError('path must be a string to res.sendFile')
    }

    // support function as second arg
    if (typeof options === 'function') {
      done = options;
      opts = {};
    }

    if (!opts.root && !isAbsolute(path)) {
      throw new TypeError('path must be absolute or specify root to res.sendFile');
    }

    // create file stream
    var pathname = encodeURI(path);
    var file = send_1(req, pathname, opts);

    // transfer
    sendfile(res, file, opts, function (err) {
      if (done) return done(err);
      if (err && err.code === 'EISDIR') return next();

      // next() all but write errors
      if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
        next(err);
      }
    });
  };

  /**
   * Transfer the file at the given `path`.
   *
   * Automatically sets the _Content-Type_ response header field.
   * The callback `callback(err)` is invoked when the transfer is complete
   * or when an error occurs. Be sure to check `res.sentHeader`
   * if you wish to attempt responding, as the header and some data
   * may have already been transferred.
   *
   * Options:
   *
   *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
   *   - `root`     root directory for relative filenames
   *   - `headers`  object of headers to serve with file
   *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
   *
   * Other options are passed along to `send`.
   *
   * Examples:
   *
   *  The following example illustrates how `res.sendfile()` may
   *  be used as an alternative for the `static()` middleware for
   *  dynamic situations. The code backing `res.sendfile()` is actually
   *  the same code, so HTTP cache support etc is identical.
   *
   *     app.get('/user/:uid/photos/:file', function(req, res){
   *       var uid = req.params.uid
   *         , file = req.params.file;
   *
   *       req.user.mayViewFilesFrom(uid, function(yes){
   *         if (yes) {
   *           res.sendfile('/uploads/' + uid + '/' + file);
   *         } else {
   *           res.send(403, 'Sorry! you cant see that.');
   *         }
   *       });
   *     });
   *
   * @public
   */

  res.sendfile = function (path, options, callback) {
    var done = callback;
    var req = this.req;
    var res = this;
    var next = req.next;
    var opts = options || {};

    // support function as second arg
    if (typeof options === 'function') {
      done = options;
      opts = {};
    }

    // create file stream
    var file = send_1(req, path, opts);

    // transfer
    sendfile(res, file, opts, function (err) {
      if (done) return done(err);
      if (err && err.code === 'EISDIR') return next();

      // next() all but write errors
      if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
        next(err);
      }
    });
  };

  res.sendfile = deprecate$3.function(res.sendfile,
    'res.sendfile: Use res.sendFile instead');

  /**
   * Transfer the file at the given `path` as an attachment.
   *
   * Optionally providing an alternate attachment `filename`,
   * and optional callback `callback(err)`. The callback is invoked
   * when the data transfer is complete, or when an error has
   * ocurred. Be sure to check `res.headersSent` if you plan to respond.
   *
   * Optionally providing an `options` object to use with `res.sendFile()`.
   * This function will set the `Content-Disposition` header, overriding
   * any `Content-Disposition` header passed as header options in order
   * to set the attachment and filename.
   *
   * This method uses `res.sendFile()`.
   *
   * @public
   */

  res.download = function download (path, filename, options, callback) {
    var done = callback;
    var name = filename;
    var opts = options || null;

    // support function as second or third arg
    if (typeof filename === 'function') {
      done = filename;
      name = null;
      opts = null;
    } else if (typeof options === 'function') {
      done = options;
      opts = null;
    }

    // set Content-Disposition when file is sent
    var headers = {
      'Content-Disposition': contentDisposition_1(name || path)
    };

    // merge user-provided headers
    if (opts && opts.headers) {
      var keys = Object.keys(opts.headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.toLowerCase() !== 'content-disposition') {
          headers[key] = opts.headers[key];
        }
      }
    }

    // merge user-provided options
    opts = Object.create(opts);
    opts.headers = headers;

    // Resolve the full path for sendFile
    var fullPath = resolve$2(path);

    // send file
    return this.sendFile(fullPath, opts, done)
  };

  /**
   * Set _Content-Type_ response header with `type` through `mime.lookup()`
   * when it does not contain "/", or set the Content-Type to `type` otherwise.
   *
   * Examples:
   *
   *     res.type('.html');
   *     res.type('html');
   *     res.type('json');
   *     res.type('application/json');
   *     res.type('png');
   *
   * @param {String} type
   * @return {ServerResponse} for chaining
   * @public
   */

  res.contentType =
  res.type = function contentType(type) {
    var ct = type.indexOf('/') === -1
      ? mime$1.lookup(type)
      : type;

    return this.set('Content-Type', ct);
  };

  /**
   * Respond to the Acceptable formats using an `obj`
   * of mime-type callbacks.
   *
   * This method uses `req.accepted`, an array of
   * acceptable types ordered by their quality values.
   * When "Accept" is not present the _first_ callback
   * is invoked, otherwise the first match is used. When
   * no match is performed the server responds with
   * 406 "Not Acceptable".
   *
   * Content-Type is set for you, however if you choose
   * you may alter this within the callback using `res.type()`
   * or `res.set('Content-Type', ...)`.
   *
   *    res.format({
   *      'text/plain': function(){
   *        res.send('hey');
   *      },
   *
   *      'text/html': function(){
   *        res.send('<p>hey</p>');
   *      },
   *
   *      'appliation/json': function(){
   *        res.send({ message: 'hey' });
   *      }
   *    });
   *
   * In addition to canonicalized MIME types you may
   * also use extnames mapped to these types:
   *
   *    res.format({
   *      text: function(){
   *        res.send('hey');
   *      },
   *
   *      html: function(){
   *        res.send('<p>hey</p>');
   *      },
   *
   *      json: function(){
   *        res.send({ message: 'hey' });
   *      }
   *    });
   *
   * By default Express passes an `Error`
   * with a `.status` of 406 to `next(err)`
   * if a match is not made. If you provide
   * a `.default` callback it will be invoked
   * instead.
   *
   * @param {Object} obj
   * @return {ServerResponse} for chaining
   * @public
   */

  res.format = function(obj){
    var req = this.req;
    var next = req.next;

    var fn = obj.default;
    if (fn) delete obj.default;
    var keys = Object.keys(obj);

    var key = keys.length > 0
      ? req.accepts(keys)
      : false;

    this.vary("Accept");

    if (key) {
      this.set('Content-Type', normalizeType$1(key).value);
      obj[key](req, this, next);
    } else if (fn) {
      fn();
    } else {
      var err = new Error('Not Acceptable');
      err.status = err.statusCode = 406;
      err.types = normalizeTypes(keys).map(function(o){ return o.value });
      next(err);
    }

    return this;
  };

  /**
   * Set _Content-Disposition_ header to _attachment_ with optional `filename`.
   *
   * @param {String} filename
   * @return {ServerResponse}
   * @public
   */

  res.attachment = function attachment(filename) {
    if (filename) {
      this.type(extname$2(filename));
    }

    this.set('Content-Disposition', contentDisposition_1(filename));

    return this;
  };

  /**
   * Append additional header `field` with value `val`.
   *
   * Example:
   *
   *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
   *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
   *    res.append('Warning', '199 Miscellaneous warning');
   *
   * @param {String} field
   * @param {String|Array} val
   * @return {ServerResponse} for chaining
   * @public
   */

  res.append = function append(field, val) {
    var prev = this.get(field);
    var value = val;

    if (prev) {
      // concat the new and prev vals
      value = Array.isArray(prev) ? prev.concat(val)
        : Array.isArray(val) ? [prev].concat(val)
        : [prev, val];
    }

    return this.set(field, value);
  };

  /**
   * Set header `field` to `val`, or pass
   * an object of header fields.
   *
   * Examples:
   *
   *    res.set('Foo', ['bar', 'baz']);
   *    res.set('Accept', 'application/json');
   *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });
   *
   * Aliased as `res.header()`.
   *
   * @param {String|Object} field
   * @param {String|Array} val
   * @return {ServerResponse} for chaining
   * @public
   */

  res.set =
  res.header = function header(field, val) {
    if (arguments.length === 2) {
      var value = Array.isArray(val)
        ? val.map(String)
        : String(val);

      // add charset to content-type
      if (field.toLowerCase() === 'content-type') {
        if (Array.isArray(value)) {
          throw new TypeError('Content-Type cannot be set to an Array');
        }
        if (!charsetRegExp.test(value)) {
          var charset = mime$1.charsets.lookup(value.split(';')[0]);
          if (charset) value += '; charset=' + charset.toLowerCase();
        }
      }

      this.setHeader(field, value);
    } else {
      for (var key in field) {
        this.set(key, field[key]);
      }
    }
    return this;
  };

  /**
   * Get value for header `field`.
   *
   * @param {String} field
   * @return {String}
   * @public
   */

  res.get = function(field){
    return this.getHeader(field);
  };

  /**
   * Clear cookie `name`.
   *
   * @param {String} name
   * @param {Object} [options]
   * @return {ServerResponse} for chaining
   * @public
   */

  res.clearCookie = function clearCookie(name, options) {
    var opts = utilsMerge({ expires: new Date(1), path: '/' }, options);

    return this.cookie(name, '', opts);
  };

  /**
   * Set cookie `name` to `value`, with the given `options`.
   *
   * Options:
   *
   *    - `maxAge`   max-age in milliseconds, converted to `expires`
   *    - `signed`   sign the cookie
   *    - `path`     defaults to "/"
   *
   * Examples:
   *
   *    // "Remember Me" for 15 minutes
   *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });
   *
   *    // same as above
   *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
   *
   * @param {String} name
   * @param {String|Object} value
   * @param {Object} [options]
   * @return {ServerResponse} for chaining
   * @public
   */

  res.cookie = function (name, value, options) {
    var opts = utilsMerge({}, options);
    var secret = this.req.secret;
    var signed = opts.signed;

    if (signed && !secret) {
      throw new Error('cookieParser("secret") required for signed cookies');
    }

    var val = typeof value === 'object'
      ? 'j:' + JSON.stringify(value)
      : String(value);

    if (signed) {
      val = 's:' + sign(val, secret);
    }

    if ('maxAge' in opts) {
      opts.expires = new Date(Date.now() + opts.maxAge);
      opts.maxAge /= 1000;
    }

    if (opts.path == null) {
      opts.path = '/';
    }

    this.append('Set-Cookie', cookie.serialize(name, String(val), opts));

    return this;
  };

  /**
   * Set the location header to `url`.
   *
   * The given `url` can also be "back", which redirects
   * to the _Referrer_ or _Referer_ headers or "/".
   *
   * Examples:
   *
   *    res.location('/foo/bar').;
   *    res.location('http://example.com');
   *    res.location('../login');
   *
   * @param {String} url
   * @return {ServerResponse} for chaining
   * @public
   */

  res.location = function location(url) {
    var loc = url;

    // "back" is an alias for the referrer
    if (url === 'back') {
      loc = this.req.get('Referrer') || '/';
    }

    // set location
    return this.set('Location', encodeurl(loc));
  };

  /**
   * Redirect to the given `url` with optional response `status`
   * defaulting to 302.
   *
   * The resulting `url` is determined by `res.location()`, so
   * it will play nicely with mounted apps, relative paths,
   * `"back"` etc.
   *
   * Examples:
   *
   *    res.redirect('/foo/bar');
   *    res.redirect('http://example.com');
   *    res.redirect(301, 'http://example.com');
   *    res.redirect('../login'); // /blog/post/1 -> /blog/login
   *
   * @public
   */

  res.redirect = function redirect(url) {
    var address = url;
    var body;
    var status = 302;

    // allow status / url
    if (arguments.length === 2) {
      if (typeof arguments[0] === 'number') {
        status = arguments[0];
        address = arguments[1];
      } else {
        deprecate$3('res.redirect(url, status): Use res.redirect(status, url) instead');
        status = arguments[1];
      }
    }

    // Set location header
    address = this.location(address).get('Location');

    // Support text/{plain,html} by default
    this.format({
      text: function(){
        body = statuses[status] + '. Redirecting to ' + address;
      },

      html: function(){
        var u = escapeHtml_1(address);
        body = '<p>' + statuses[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>';
      },

      default: function(){
        body = '';
      }
    });

    // Respond
    this.statusCode = status;
    this.set('Content-Length', Buffer$a.byteLength(body));

    if (this.req.method === 'HEAD') {
      this.end();
    } else {
      this.end(body);
    }
  };

  /**
   * Add `field` to Vary. If already present in the Vary set, then
   * this call is simply ignored.
   *
   * @param {Array|String} field
   * @return {ServerResponse} for chaining
   * @public
   */

  res.vary = function(field){
    // checks for back-compat
    if (!field || (Array.isArray(field) && !field.length)) {
      deprecate$3('res.vary(): Provide a field name');
      return this;
    }

    vary_1(this, field);

    return this;
  };

  /**
   * Render `view` with the given `options` and optional callback `fn`.
   * When a callback function is given a response will _not_ be made
   * automatically, otherwise a response of _200_ and _text/html_ is given.
   *
   * Options:
   *
   *  - `cache`     boolean hinting to the engine it should cache
   *  - `filename`  filename of the view being rendered
   *
   * @public
   */

  res.render = function render(view, options, callback) {
    var app = this.req.app;
    var done = callback;
    var opts = options || {};
    var req = this.req;
    var self = this;

    // support callback function as second arg
    if (typeof options === 'function') {
      done = options;
      opts = {};
    }

    // merge res.locals
    opts._locals = self.locals;

    // default callback to respond
    done = done || function (err, str) {
      if (err) return req.next(err);
      self.send(str);
    };

    // render
    app.render(view, opts, done);
  };

  // pipe the send file stream
  function sendfile(res, file, options, callback) {
    var done = false;
    var streaming;

    // request aborted
    function onaborted() {
      if (done) return;
      done = true;

      var err = new Error('Request aborted');
      err.code = 'ECONNABORTED';
      callback(err);
    }

    // directory
    function ondirectory() {
      if (done) return;
      done = true;

      var err = new Error('EISDIR, read');
      err.code = 'EISDIR';
      callback(err);
    }

    // errors
    function onerror(err) {
      if (done) return;
      done = true;
      callback(err);
    }

    // ended
    function onend() {
      if (done) return;
      done = true;
      callback();
    }

    // file
    function onfile() {
      streaming = false;
    }

    // finished
    function onfinish(err) {
      if (err && err.code === 'ECONNRESET') return onaborted();
      if (err) return onerror(err);
      if (done) return;

      setImmediate(function () {
        if (streaming !== false && !done) {
          onaborted();
          return;
        }

        if (done) return;
        done = true;
        callback();
      });
    }

    // streaming
    function onstream() {
      streaming = true;
    }

    file.on('directory', ondirectory);
    file.on('end', onend);
    file.on('error', onerror);
    file.on('file', onfile);
    file.on('stream', onstream);
    onFinished_1(res, onfinish);

    if (options.headers) {
      // set headers on successful transfer
      file.on('headers', function headers(res) {
        var obj = options.headers;
        var keys = Object.keys(obj);

        for (var i = 0; i < keys.length; i++) {
          var k = keys[i];
          res.setHeader(k, obj[k]);
        }
      });
    }

    // pipe
    file.pipe(res);
  }

  /**
   * Stringify JSON, like JSON.stringify, but v8 optimized, with the
   * ability to escape characters that can trigger HTML sniffing.
   *
   * @param {*} value
   * @param {function} replaces
   * @param {number} spaces
   * @param {boolean} escape
   * @returns {string}
   * @private
   */

  function stringify$2 (value, replacer, spaces, escape) {
    // v8 checks arguments.length for optimizing simple call
    // https://bugs.chromium.org/p/v8/issues/detail?id=4730
    var json = replacer || spaces
      ? JSON.stringify(value, replacer, spaces)
      : JSON.stringify(value);

    if (escape) {
      json = json.replace(/[<>&]/g, function (c) {
        switch (c.charCodeAt(0)) {
          case 0x3c:
            return '\\u003c'
          case 0x3e:
            return '\\u003e'
          case 0x26:
            return '\\u0026'
          /* istanbul ignore next: unreachable default */
          default:
            return c
        }
      });
    }

    return json
  }

  /**
   * Module dependencies.
   * @private
   */




  var resolve$3 = path$3.resolve;



  /**
   * Module exports.
   * @public
   */

  var serveStatic_1 = serveStatic;
  var mime$2 = send_1.mime;

  /**
   * @param {string} root
   * @param {object} [options]
   * @return {function}
   * @public
   */

  function serveStatic (root, options) {
    if (!root) {
      throw new TypeError('root path required')
    }

    if (typeof root !== 'string') {
      throw new TypeError('root path must be a string')
    }

    // copy options object
    var opts = Object.create(options || null);

    // fall-though
    var fallthrough = opts.fallthrough !== false;

    // default redirect
    var redirect = opts.redirect !== false;

    // headers listener
    var setHeaders = opts.setHeaders;

    if (setHeaders && typeof setHeaders !== 'function') {
      throw new TypeError('option setHeaders must be function')
    }

    // setup options for send
    opts.maxage = opts.maxage || opts.maxAge || 0;
    opts.root = resolve$3(root);

    // construct directory listener
    var onDirectory = redirect
      ? createRedirectDirectoryListener()
      : createNotFoundDirectoryListener();

    return function serveStatic (req, res, next) {
      if (req.method !== 'GET' && req.method !== 'HEAD') {
        if (fallthrough) {
          return next()
        }

        // method not allowed
        res.statusCode = 405;
        res.setHeader('Allow', 'GET, HEAD');
        res.setHeader('Content-Length', '0');
        res.end();
        return
      }

      var forwardError = !fallthrough;
      var originalUrl = parseurl_1.original(req);
      var path = parseurl_1(req).pathname;

      // make sure redirect occurs at mount
      if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {
        path = '';
      }

      // create send stream
      var stream = send_1(req, path, opts);

      // add directory handler
      stream.on('directory', onDirectory);

      // add headers listener
      if (setHeaders) {
        stream.on('headers', setHeaders);
      }

      // add file listener for fallthrough
      if (fallthrough) {
        stream.on('file', function onFile () {
          // once file is determined, always forward error
          forwardError = true;
        });
      }

      // forward errors
      stream.on('error', function error (err) {
        if (forwardError || !(err.statusCode < 500)) {
          next(err);
          return
        }

        next();
      });

      // pipe
      stream.pipe(res);
    }
  }

  /**
   * Collapse all leading slashes into a single slash
   * @private
   */
  function collapseLeadingSlashes$1 (str) {
    for (var i = 0; i < str.length; i++) {
      if (str.charCodeAt(i) !== 0x2f /* / */) {
        break
      }
    }

    return i > 1
      ? '/' + str.substr(i)
      : str
  }

  /**
   * Create a minimal HTML document.
   *
   * @param {string} title
   * @param {string} body
   * @private
   */

  function createHtmlDocument$2 (title, body) {
    return '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>' + title + '</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>' + body + '</pre>\n' +
      '</body>\n' +
      '</html>\n'
  }

  /**
   * Create a directory listener that just 404s.
   * @private
   */

  function createNotFoundDirectoryListener () {
    return function notFound () {
      this.error(404);
    }
  }

  /**
   * Create a directory listener that performs a redirect.
   * @private
   */

  function createRedirectDirectoryListener () {
    return function redirect (res) {
      if (this.hasTrailingSlash()) {
        this.error(404);
        return
      }

      // get original URL
      var originalUrl = parseurl_1.original(this.req);

      // append trailing slash
      originalUrl.path = null;
      originalUrl.pathname = collapseLeadingSlashes$1(originalUrl.pathname + '/');

      // reformat the URL
      var loc = encodeurl(url$1.format(originalUrl));
      var doc = createHtmlDocument$2('Redirecting', 'Redirecting to <a href="' + escapeHtml_1(loc) + '">' +
        escapeHtml_1(loc) + '</a>');

      // send redirect response
      res.statusCode = 301;
      res.setHeader('Content-Type', 'text/html; charset=UTF-8');
      res.setHeader('Content-Length', Buffer.byteLength(doc));
      res.setHeader('Content-Security-Policy', "default-src 'none'");
      res.setHeader('X-Content-Type-Options', 'nosniff');
      res.setHeader('Location', loc);
      res.end(doc);
    }
  }
  serveStatic_1.mime = mime$2;

  var express = createCommonjsModule(function (module, exports) {

  /**
   * Module dependencies.
   */


  var EventEmitter = events.EventEmitter;







  /**
   * Expose `createApplication()`.
   */

  exports = module.exports = createApplication;

  /**
   * Create an express application.
   *
   * @return {Function}
   * @api public
   */

  function createApplication() {
    var app = function(req, res, next) {
      app.handle(req, res, next);
    };

    mergeDescriptors(app, EventEmitter.prototype, false);
    mergeDescriptors(app, application, false);

    // expose the prototype that will get set on requests
    app.request = Object.create(request, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });

    // expose the prototype that will get set on responses
    app.response = Object.create(response, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });

    app.init();
    return app;
  }

  /**
   * Expose the prototypes.
   */

  exports.application = application;
  exports.request = request;
  exports.response = response;

  /**
   * Expose constructors.
   */

  exports.Route = route;
  exports.Router = router;

  /**
   * Expose middleware
   */

  exports.json = bodyParser_1.json;
  exports.query = query;
  exports.raw = bodyParser_1.raw;
  exports.static = serveStatic_1;
  exports.text = bodyParser_1.text;
  exports.urlencoded = bodyParser_1.urlencoded;

  /**
   * Replace removed middleware with an appropriate error message.
   */

  var removedMiddlewares = [
    'bodyParser',
    'compress',
    'cookieSession',
    'session',
    'logger',
    'cookieParser',
    'favicon',
    'responseTime',
    'errorHandler',
    'timeout',
    'methodOverride',
    'vhost',
    'csrf',
    'directory',
    'limit',
    'multipart',
    'staticCache'
  ];

  removedMiddlewares.forEach(function (name) {
    Object.defineProperty(exports, name, {
      get: function () {
        throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
      },
      configurable: true
    });
  });
  });
  var express_1 = express.application;
  var express_2 = express.request;
  var express_3 = express.response;
  var express_4 = express.Route;
  var express_5 = express.Router;
  var express_6 = express.json;
  var express_7 = express.query;
  var express_8 = express.raw;
  var express_9 = express.text;
  var express_10 = express.urlencoded;

  var express$1 = express;

  var base64id = createCommonjsModule(function (module, exports) {
  /*!
   * base64id v0.1.0
   */

  /**
   * Module dependencies
   */



  /**
   * Constructor
   */

  var Base64Id = function() { };

  /**
   * Get random bytes
   *
   * Uses a buffer if available, falls back to crypto.randomBytes
   */

  Base64Id.prototype.getRandomBytes = function(bytes) {

    var BUFFER_SIZE = 4096;
    var self = this;  
    
    bytes = bytes || 12;

    if (bytes > BUFFER_SIZE) {
      return crypto.randomBytes(bytes);
    }
    
    var bytesInBuffer = parseInt(BUFFER_SIZE/bytes);
    var threshold = parseInt(bytesInBuffer*0.85);

    if (!threshold) {
      return crypto.randomBytes(bytes);
    }

    if (this.bytesBufferIndex == null) {
       this.bytesBufferIndex = -1;
    }

    if (this.bytesBufferIndex == bytesInBuffer) {
      this.bytesBuffer = null;
      this.bytesBufferIndex = -1;
    }

    // No buffered bytes available or index above threshold
    if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {
       
      if (!this.isGeneratingBytes) {
        this.isGeneratingBytes = true;
        crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {
          self.bytesBuffer = bytes;
          self.bytesBufferIndex = 0;
          self.isGeneratingBytes = false;
        }); 
      }
      
      // Fall back to sync call when no buffered bytes are available
      if (this.bytesBufferIndex == -1) {
        return crypto.randomBytes(bytes);
      }
    }
    
    var result = this.bytesBuffer.slice(bytes*this.bytesBufferIndex, bytes*(this.bytesBufferIndex+1)); 
    this.bytesBufferIndex++; 
    
    return result;
  };

  /**
   * Generates a base64 id
   *
   * (Original version from socket.io <http://socket.io>)
   */

  Base64Id.prototype.generateId = function () {
    var rand = Buffer.alloc(15); // multiple of 3 for base64
    if (!rand.writeInt32BE) {
      return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()
        + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();
    }
    this.sequenceNumber = (this.sequenceNumber + 1) | 0;
    rand.writeInt32BE(this.sequenceNumber, 11);
    if (crypto.randomBytes) {
      this.getRandomBytes(12).copy(rand);
    } else {
      // not secure for node 0.4
      [0, 4, 8].forEach(function(i) {
        rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);
      });
    }
    return rand.toString('base64').replace(/\//g, '_').replace(/\+/g, '-');
  };

  /**
   * Export
   */

  exports = module.exports = new Base64Id();
  });

  /**
   * Module dependencies.
   */

  var EventEmitter = events.EventEmitter;


  var debug$k = src('engine:transport');

  /**
   * Expose the constructor.
   */

  var transport$1 = Transport$1;

  /**
   * Noop function.
   *
   * @api private
   */

  function noop$1 () {}

  /**
   * Transport constructor.
   *
   * @param {http.IncomingMessage} request
   * @api public
   */

  function Transport$1 (req) {
    this.readyState = 'open';
    this.discarded = false;
  }

  /**
   * Inherits from EventEmitter.
   */

  util$2.inherits(Transport$1, EventEmitter);

  /**
   * Flags the transport as discarded.
   *
   * @api private
   */

  Transport$1.prototype.discard = function () {
    this.discarded = true;
  };

  /**
   * Called with an incoming HTTP request.
   *
   * @param {http.IncomingMessage} request
   * @api private
   */

  Transport$1.prototype.onRequest = function (req) {
    debug$k('setting request');
    this.req = req;
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  Transport$1.prototype.close = function (fn) {
    if ('closed' === this.readyState || 'closing' === this.readyState) return;

    this.readyState = 'closing';
    this.doClose(fn || noop$1);
  };

  /**
   * Called with a transport error.
   *
   * @param {String} message error
   * @param {Object} error description
   * @api private
   */

  Transport$1.prototype.onError = function (msg, desc) {
    if (this.listeners('error').length) {
      var err = new Error(msg);
      err.type = 'TransportError';
      err.description = desc;
      this.emit('error', err);
    } else {
      debug$k('ignored transport error %s (%s)', msg, desc);
    }
  };

  /**
   * Called with parsed out a packets from the data stream.
   *
   * @param {Object} packet
   * @api private
   */

  Transport$1.prototype.onPacket = function (packet) {
    this.emit('packet', packet);
  };

  /**
   * Called with the encoded packet data.
   *
   * @param {String} data
   * @api private
   */

  Transport$1.prototype.onData = function (data) {
    this.onPacket(lib.decodePacket(data));
  };

  /**
   * Called upon transport close.
   *
   * @api private
   */

  Transport$1.prototype.onClose = function () {
    this.readyState = 'closed';
    this.emit('close');
  };

  /**
   * Module requirements.
   */






  var debug$l = src('engine:polling');

  var compressionMethods = {
    gzip: zlib.createGzip,
    deflate: zlib.createDeflate
  };

  /**
   * Exports the constructor.
   */

  var polling$2 = Polling$1;

  /**
   * HTTP polling constructor.
   *
   * @api public.
   */

  function Polling$1 (req) {
    transport$1.call(this, req);

    this.closeTimeout = 30 * 1000;
    this.maxHttpBufferSize = null;
    this.httpCompression = null;
  }

  /**
   * Inherits from Transport.
   *
   * @api public.
   */

  util$2.inherits(Polling$1, transport$1);

  /**
   * Transport name
   *
   * @api public
   */

  Polling$1.prototype.name = 'polling';

  /**
   * Overrides onRequest.
   *
   * @param {http.IncomingMessage}
   * @api private
   */

  Polling$1.prototype.onRequest = function (req) {
    var res = req.res;

    if ('GET' === req.method) {
      this.onPollRequest(req, res);
    } else if ('POST' === req.method) {
      this.onDataRequest(req, res);
    } else {
      res.writeHead(500);
      res.end();
    }
  };

  /**
   * The client sends a request awaiting for us to send data.
   *
   * @api private
   */

  Polling$1.prototype.onPollRequest = function (req, res) {
    if (this.req) {
      debug$l('request overlap');
      // assert: this.res, '.req and .res should be (un)set together'
      this.onError('overlap from client');
      res.writeHead(500);
      res.end();
      return;
    }

    debug$l('setting request');

    this.req = req;
    this.res = res;

    var self = this;

    function onClose () {
      self.onError('poll connection closed prematurely');
    }

    function cleanup () {
      req.removeListener('close', onClose);
      self.req = self.res = null;
    }

    req.cleanup = cleanup;
    req.on('close', onClose);

    this.writable = true;
    this.emit('drain');

    // if we're still writable but had a pending close, trigger an empty send
    if (this.writable && this.shouldClose) {
      debug$l('triggering empty send to append close packet');
      this.send([{ type: 'noop' }]);
    }
  };

  /**
   * The client sends a request with data.
   *
   * @api private
   */

  Polling$1.prototype.onDataRequest = function (req, res) {
    if (this.dataReq) {
      // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'
      this.onError('data request overlap from client');
      res.writeHead(500);
      res.end();
      return;
    }

    var isBinary = 'application/octet-stream' === req.headers['content-type'];

    this.dataReq = req;
    this.dataRes = res;

    var chunks = isBinary ? Buffer.concat([]) : '';
    var self = this;

    function cleanup () {
      req.removeListener('data', onData);
      req.removeListener('end', onEnd);
      req.removeListener('close', onClose);
      self.dataReq = self.dataRes = chunks = null;
    }

    function onClose () {
      cleanup();
      self.onError('data request connection closed prematurely');
    }

    function onData (data) {
      var contentLength;
      if (isBinary) {
        chunks = Buffer.concat([chunks, data]);
        contentLength = chunks.length;
      } else {
        chunks += data;
        contentLength = Buffer.byteLength(chunks);
      }

      if (contentLength > self.maxHttpBufferSize) {
        chunks = isBinary ? Buffer.concat([]) : '';
        req.connection.destroy();
      }
    }

    function onEnd () {
      self.onData(chunks);

      var headers = {
        // text/html is required instead of text/plain to avoid an
        // unwanted download dialog on certain user-agents (GH-43)
        'Content-Type': 'text/html',
        'Content-Length': 2
      };

      res.writeHead(200, self.headers(req, headers));
      res.end('ok');
      cleanup();
    }

    req.on('close', onClose);
    if (!isBinary) req.setEncoding('utf8');
    req.on('data', onData);
    req.on('end', onEnd);
  };

  /**
   * Processes the incoming data payload.
   *
   * @param {String} encoded payload
   * @api private
   */

  Polling$1.prototype.onData = function (data) {
    debug$l('received "%s"', data);
    var self = this;
    var callback = function (packet) {
      if ('close' === packet.type) {
        debug$l('got xhr close packet');
        self.onClose();
        return false;
      }

      self.onPacket(packet);
    };

    lib.decodePayload(data, callback);
  };

  /**
   * Overrides onClose.
   *
   * @api private
   */

  Polling$1.prototype.onClose = function () {
    if (this.writable) {
      // close pending poll request
      this.send([{ type: 'noop' }]);
    }
    transport$1.prototype.onClose.call(this);
  };

  /**
   * Writes a packet payload.
   *
   * @param {Object} packet
   * @api private
   */

  Polling$1.prototype.send = function (packets) {
    this.writable = false;

    if (this.shouldClose) {
      debug$l('appending close packet to payload');
      packets.push({ type: 'close' });
      this.shouldClose();
      this.shouldClose = null;
    }

    var self = this;
    lib.encodePayload(packets, this.supportsBinary, function (data) {
      var compress = packets.some(function (packet) {
        return packet.options && packet.options.compress;
      });
      self.write(data, { compress: compress });
    });
  };

  /**
   * Writes data as response to poll request.
   *
   * @param {String} data
   * @param {Object} options
   * @api private
   */

  Polling$1.prototype.write = function (data, options) {
    debug$l('writing "%s"', data);
    var self = this;
    this.doWrite(data, options, function () {
      self.req.cleanup();
    });
  };

  /**
   * Performs the write.
   *
   * @api private
   */

  Polling$1.prototype.doWrite = function (data, options, callback) {
    var self = this;

    // explicit UTF-8 is required for pages not served under utf
    var isString = typeof data === 'string';
    var contentType = isString
      ? 'text/plain; charset=UTF-8'
      : 'application/octet-stream';

    var headers = {
      'Content-Type': contentType
    };

    if (!this.httpCompression || !options.compress) {
      respond(data);
      return;
    }

    var len = isString ? Buffer.byteLength(data) : data.length;
    if (len < this.httpCompression.threshold) {
      respond(data);
      return;
    }

    var encoding = accepts(this.req).encodings(['gzip', 'deflate']);
    if (!encoding) {
      respond(data);
      return;
    }

    this.compress(data, encoding, function (err, data) {
      if (err) {
        self.res.writeHead(500);
        self.res.end();
        callback(err);
        return;
      }

      headers['Content-Encoding'] = encoding;
      respond(data);
    });

    function respond (data) {
      headers['Content-Length'] = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
      self.res.writeHead(200, self.headers(self.req, headers));
      self.res.end(data);
      callback();
    }
  };

  /**
   * Compresses data.
   *
   * @api private
   */

  Polling$1.prototype.compress = function (data, encoding, callback) {
    debug$l('compressing');

    var buffers = [];
    var nread = 0;

    compressionMethods[encoding](this.httpCompression)
      .on('error', callback)
      .on('data', function (chunk) {
        buffers.push(chunk);
        nread += chunk.length;
      })
      .on('end', function () {
        callback(null, Buffer.concat(buffers, nread));
      })
      .end(data);
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  Polling$1.prototype.doClose = function (fn) {
    debug$l('closing');

    var self = this;
    var closeTimeoutTimer;

    if (this.dataReq) {
      debug$l('aborting ongoing data request');
      this.dataReq.destroy();
    }

    if (this.writable) {
      debug$l('transport writable - closing right away');
      this.send([{ type: 'close' }]);
      onClose();
    } else if (this.discarded) {
      debug$l('transport discarded - closing right away');
      onClose();
    } else {
      debug$l('transport not writable - buffering orderly close');
      this.shouldClose = onClose;
      closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);
    }

    function onClose () {
      clearTimeout(closeTimeoutTimer);
      fn();
      self.onClose();
    }
  };

  /**
   * Returns headers for a response.
   *
   * @param {http.IncomingMessage} request
   * @param {Object} extra headers
   * @api private
   */

  Polling$1.prototype.headers = function (req, headers) {
    headers = headers || {};

    // prevent XSS warnings on IE
    // https://github.com/LearnBoost/socket.io/pull/1333
    var ua = req.headers['user-agent'];
    if (ua && (~ua.indexOf(';MSIE') || ~ua.indexOf('Trident/'))) {
      headers['X-XSS-Protection'] = '0';
    }

    this.emit('headers', headers);
    return headers;
  };

  /**
   * Module dependencies.
   */




  /**
   * Module exports.
   */

  var pollingXhr$1 = XHR$1;

  /**
   * Ajax polling transport.
   *
   * @api public
   */

  function XHR$1 (req) {
    polling$2.call(this, req);
  }

  /**
   * Inherits from Polling.
   */

  util$2.inherits(XHR$1, polling$2);

  /**
   * Overrides `onRequest` to handle `OPTIONS`..
   *
   * @param {http.IncomingMessage}
   * @api private
   */

  XHR$1.prototype.onRequest = function (req) {
    if ('OPTIONS' === req.method) {
      var res = req.res;
      var headers = this.headers(req);
      headers['Access-Control-Allow-Headers'] = 'Content-Type';
      res.writeHead(200, headers);
      res.end();
    } else {
      polling$2.prototype.onRequest.call(this, req);
    }
  };

  /**
   * Returns headers for a response.
   *
   * @param {http.IncomingMessage} request
   * @param {Object} extra headers
   * @api private
   */

  XHR$1.prototype.headers = function (req, headers) {
    headers = headers || {};

    if (req.headers.origin) {
      headers['Access-Control-Allow-Credentials'] = 'true';
      headers['Access-Control-Allow-Origin'] = req.headers.origin;
    } else {
      headers['Access-Control-Allow-Origin'] = '*';
    }

    return polling$2.prototype.headers.call(this, req, headers);
  };

  /**
   * Module dependencies.
   */



  var rDoubleSlashes = /\\\\n/g;
  var rSlashes = /(\\)?\\n/g;


  /**
   * Module exports.
   */

  var pollingJsonp$1 = JSONP;

  /**
   * JSON-P polling transport.
   *
   * @api public
   */

  function JSONP (req) {
    polling$2.call(this, req);

    this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';
    this.foot = ');';
  }

  /**
   * Inherits from Polling.
   */

  util$2.inherits(JSONP, polling$2);

  /**
   * Handles incoming data.
   * Due to a bug in \n handling by browsers, we expect a escaped string.
   *
   * @api private
   */

  JSONP.prototype.onData = function (data) {
    // we leverage the qs module so that we get built-in DoS protection
    // and the fast alternative to decodeURIComponent
    data = querystring.parse(data).d;
    if ('string' === typeof data) {
      // client will send already escaped newlines as \\\\n and newlines as \\n
      // \\n must be replaced with \n and \\\\n with \\n
      data = data.replace(rSlashes, function (match, slashes) {
        return slashes ? match : '\n';
      });
      polling$2.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\n'));
    }
  };

  /**
   * Performs the write.
   *
   * @api private
   */

  JSONP.prototype.doWrite = function (data, options, callback) {
    // we must output valid javascript, not valid json
    // see: http://timelessrepo.com/json-isnt-a-javascript-subset
    var js = JSON.stringify(data)
      .replace(/\u2028/g, '\\u2028')
      .replace(/\u2029/g, '\\u2029');

    // prepare response
    data = this.head + js + this.foot;

    polling$2.prototype.doWrite.call(this, data, options, callback);
  };

  /**
   * Module dependencies.
   */




  var debug$m = src('engine:ws');

  /**
   * Export the constructor.
   */

  var websocket$2 = WebSocket$2;

  /**
   * WebSocket transport
   *
   * @param {http.IncomingMessage}
   * @api public
   */

  function WebSocket$2 (req) {
    transport$1.call(this, req);
    var self = this;
    this.socket = req.websocket;
    this.socket.on('message', this.onData.bind(this));
    this.socket.once('close', this.onClose.bind(this));
    this.socket.on('error', this.onError.bind(this));
    this.socket.on('headers', onHeaders);
    this.writable = true;
    this.perMessageDeflate = null;

    function onHeaders (headers) {
      self.emit('headers', headers);
    }
  }

  /**
   * Inherits from Transport.
   */

  util$2.inherits(WebSocket$2, transport$1);

  /**
   * Transport name
   *
   * @api public
   */

  WebSocket$2.prototype.name = 'websocket';

  /**
   * Advertise upgrade support.
   *
   * @api public
   */

  WebSocket$2.prototype.handlesUpgrades = true;

  /**
   * Advertise framing support.
   *
   * @api public
   */

  WebSocket$2.prototype.supportsFraming = true;

  /**
   * Processes the incoming data.
   *
   * @param {String} encoded packet
   * @api private
   */

  WebSocket$2.prototype.onData = function (data) {
    debug$m('received "%s"', data);
    transport$1.prototype.onData.call(this, data);
  };

  /**
   * Writes a packet payload.
   *
   * @param {Array} packets
   * @api private
   */

  WebSocket$2.prototype.send = function (packets) {
    var self = this;

    for (var i = 0; i < packets.length; i++) {
      var packet = packets[i];
      lib.encodePacket(packet, self.supportsBinary, send);
    }

    function send (data) {
      debug$m('writing "%s"', data);

      // always creates a new object since ws modifies it
      var opts = {};
      if (packet.options) {
        opts.compress = packet.options.compress;
      }

      if (self.perMessageDeflate) {
        var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
        if (len < self.perMessageDeflate.threshold) {
          opts.compress = false;
        }
      }

      self.writable = false;
      self.socket.send(data, opts, onEnd);
    }

    function onEnd (err) {
      if (err) return self.onError('write error', err.stack);
      self.writable = true;
      self.emit('drain');
    }
  };

  /**
   * Closes the transport.
   *
   * @api private
   */

  WebSocket$2.prototype.doClose = function (fn) {
    debug$m('closing');
    this.socket.close();
    fn && fn();
  };

  var transports$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */




  /**
   * Export transports.
   */

  module.exports = exports = {
    polling: polling,
    websocket: websocket$2
  };

  /**
   * Export upgrades map.
   */

  exports.polling.upgradesTo = ['websocket'];

  /**
   * Polling polymorphic constructor.
   *
   * @api private
   */

  function polling (req) {
    if ('string' === typeof req._query.j) {
      return new pollingJsonp$1(req);
    } else {
      return new pollingXhr$1(req);
    }
  }
  });

  /**
   * Module dependencies.
   */

  var EventEmitter$1 = events.EventEmitter;

  var debug$n = src('engine:socket');

  /**
   * Module exports.
   */

  var socket$2 = Socket$1;

  /**
   * Client class (abstract).
   *
   * @api private
   */

  function Socket$1 (id, server, transport, req) {
    this.id = id;
    this.server = server;
    this.upgrading = false;
    this.upgraded = false;
    this.readyState = 'opening';
    this.writeBuffer = [];
    this.packetsFn = [];
    this.sentCallbackFn = [];
    this.cleanupFn = [];
    this.request = req;

    // Cache IP since it might not be in the req later
    if (req.websocket && req.websocket._socket) {
      this.remoteAddress = req.websocket._socket.remoteAddress;
    } else {
      this.remoteAddress = req.connection.remoteAddress;
    }

    this.checkIntervalTimer = null;
    this.upgradeTimeoutTimer = null;
    this.pingTimeoutTimer = null;

    this.setTransport(transport);
    this.onOpen();
  }

  /**
   * Inherits from EventEmitter.
   */

  util$2.inherits(Socket$1, EventEmitter$1);

  /**
   * Called upon transport considered open.
   *
   * @api private
   */

  Socket$1.prototype.onOpen = function () {
    this.readyState = 'open';

    // sends an `open` packet
    this.transport.sid = this.id;
    this.sendPacket('open', JSON.stringify({
      sid: this.id,
      upgrades: this.getAvailableUpgrades(),
      pingInterval: this.server.pingInterval,
      pingTimeout: this.server.pingTimeout
    }));

    if (this.server.initialPacket) {
      this.sendPacket('message', this.server.initialPacket);
    }

    this.emit('open');
    this.setPingTimeout();
  };

  /**
   * Called upon transport packet.
   *
   * @param {Object} packet
   * @api private
   */

  Socket$1.prototype.onPacket = function (packet) {
    if ('open' === this.readyState) {
      // export packet event
      debug$n('packet');
      this.emit('packet', packet);

      // Reset ping timeout on any packet, incoming data is a good sign of
      // other side's liveness
      this.setPingTimeout();

      switch (packet.type) {
        case 'ping':
          debug$n('got ping');
          this.sendPacket('pong');
          this.emit('heartbeat');
          break;

        case 'error':
          this.onClose('parse error');
          break;

        case 'message':
          this.emit('data', packet.data);
          this.emit('message', packet.data);
          break;
      }
    } else {
      debug$n('packet received with closed socket');
    }
  };

  /**
   * Called upon transport error.
   *
   * @param {Error} error object
   * @api private
   */

  Socket$1.prototype.onError = function (err) {
    debug$n('transport error');
    this.onClose('transport error', err);
  };

  /**
   * Sets and resets ping timeout timer based on client pings.
   *
   * @api private
   */

  Socket$1.prototype.setPingTimeout = function () {
    var self = this;
    clearTimeout(self.pingTimeoutTimer);
    self.pingTimeoutTimer = setTimeout(function () {
      self.onClose('ping timeout');
    }, self.server.pingInterval + self.server.pingTimeout);
  };

  /**
   * Attaches handlers for the given transport.
   *
   * @param {Transport} transport
   * @api private
   */

  Socket$1.prototype.setTransport = function (transport) {
    var onError = this.onError.bind(this);
    var onPacket = this.onPacket.bind(this);
    var flush = this.flush.bind(this);
    var onClose = this.onClose.bind(this, 'transport close');

    this.transport = transport;
    this.transport.once('error', onError);
    this.transport.on('packet', onPacket);
    this.transport.on('drain', flush);
    this.transport.once('close', onClose);
    // this function will manage packet events (also message callbacks)
    this.setupSendCallback();

    this.cleanupFn.push(function () {
      transport.removeListener('error', onError);
      transport.removeListener('packet', onPacket);
      transport.removeListener('drain', flush);
      transport.removeListener('close', onClose);
    });
  };

  /**
   * Upgrades socket to the given transport
   *
   * @param {Transport} transport
   * @api private
   */

  Socket$1.prototype.maybeUpgrade = function (transport) {
    debug$n('might upgrade socket transport from "%s" to "%s"'
      , this.transport.name, transport.name);

    this.upgrading = true;

    var self = this;

    // set transport upgrade timer
    self.upgradeTimeoutTimer = setTimeout(function () {
      debug$n('client did not complete upgrade - closing transport');
      cleanup();
      if ('open' === transport.readyState) {
        transport.close();
      }
    }, this.server.upgradeTimeout);

    function onPacket (packet) {
      if ('ping' === packet.type && 'probe' === packet.data) {
        transport.send([{ type: 'pong', data: 'probe' }]);
        self.emit('upgrading', transport);
        clearInterval(self.checkIntervalTimer);
        self.checkIntervalTimer = setInterval(check, 100);
      } else if ('upgrade' === packet.type && self.readyState !== 'closed') {
        debug$n('got upgrade packet - upgrading');
        cleanup();
        self.transport.discard();
        self.upgraded = true;
        self.clearTransport();
        self.setTransport(transport);
        self.emit('upgrade', transport);
        self.setPingTimeout();
        self.flush();
        if (self.readyState === 'closing') {
          transport.close(function () {
            self.onClose('forced close');
          });
        }
      } else {
        cleanup();
        transport.close();
      }
    }

    // we force a polling cycle to ensure a fast upgrade
    function check () {
      if ('polling' === self.transport.name && self.transport.writable) {
        debug$n('writing a noop packet to polling for fast upgrade');
        self.transport.send([{ type: 'noop' }]);
      }
    }

    function cleanup () {
      self.upgrading = false;

      clearInterval(self.checkIntervalTimer);
      self.checkIntervalTimer = null;

      clearTimeout(self.upgradeTimeoutTimer);
      self.upgradeTimeoutTimer = null;

      transport.removeListener('packet', onPacket);
      transport.removeListener('close', onTransportClose);
      transport.removeListener('error', onError);
      self.removeListener('close', onClose);
    }

    function onError (err) {
      debug$n('client did not complete upgrade - %s', err);
      cleanup();
      transport.close();
      transport = null;
    }

    function onTransportClose () {
      onError('transport closed');
    }

    function onClose () {
      onError('socket closed');
    }

    transport.on('packet', onPacket);
    transport.once('close', onTransportClose);
    transport.once('error', onError);

    self.once('close', onClose);
  };

  /**
   * Clears listeners and timers associated with current transport.
   *
   * @api private
   */

  Socket$1.prototype.clearTransport = function () {
    var cleanup;

    var toCleanUp = this.cleanupFn.length;

    for (var i = 0; i < toCleanUp; i++) {
      cleanup = this.cleanupFn.shift();
      cleanup();
    }

    // silence further transport errors and prevent uncaught exceptions
    this.transport.on('error', function () {
      debug$n('error triggered by discarded transport');
    });

    // ensure transport won't stay open
    this.transport.close();

    clearTimeout(this.pingTimeoutTimer);
  };

  /**
   * Called upon transport considered closed.
   * Possible reasons: `ping timeout`, `client error`, `parse error`,
   * `transport error`, `server close`, `transport close`
   */

  Socket$1.prototype.onClose = function (reason, description) {
    if ('closed' !== this.readyState) {
      this.readyState = 'closed';
      clearTimeout(this.pingTimeoutTimer);
      clearInterval(this.checkIntervalTimer);
      this.checkIntervalTimer = null;
      clearTimeout(this.upgradeTimeoutTimer);
      var self = this;
      // clean writeBuffer in next tick, so developers can still
      // grab the writeBuffer on 'close' event
      process.nextTick(function () {
        self.writeBuffer = [];
      });
      this.packetsFn = [];
      this.sentCallbackFn = [];
      this.clearTransport();
      this.emit('close', reason, description);
    }
  };

  /**
   * Setup and manage send callback
   *
   * @api private
   */

  Socket$1.prototype.setupSendCallback = function () {
    var self = this;
    this.transport.on('drain', onDrain);

    this.cleanupFn.push(function () {
      self.transport.removeListener('drain', onDrain);
    });

    // the message was sent successfully, execute the callback
    function onDrain () {
      if (self.sentCallbackFn.length > 0) {
        var seqFn = self.sentCallbackFn.splice(0, 1)[0];
        if ('function' === typeof seqFn) {
          debug$n('executing send callback');
          seqFn(self.transport);
        } else if (Array.isArray(seqFn)) {
          debug$n('executing batch send callback');
          for (var l = seqFn.length, i = 0; i < l; i++) {
            if ('function' === typeof seqFn[i]) {
              seqFn[i](self.transport);
            }
          }
        }
      }
    }
  };

  /**
   * Sends a message packet.
   *
   * @param {String} message
   * @param {Object} options
   * @param {Function} callback
   * @return {Socket} for chaining
   * @api public
   */

  Socket$1.prototype.send =
  Socket$1.prototype.write = function (data, options, callback) {
    this.sendPacket('message', data, options, callback);
    return this;
  };

  /**
   * Sends a packet.
   *
   * @param {String} packet type
   * @param {String} optional, data
   * @param {Object} options
   * @api private
   */

  Socket$1.prototype.sendPacket = function (type, data, options, callback) {
    if ('function' === typeof options) {
      callback = options;
      options = null;
    }

    options = options || {};
    options.compress = false !== options.compress;

    if ('closing' !== this.readyState && 'closed' !== this.readyState) {
      debug$n('sending packet "%s" (%s)', type, data);

      var packet = {
        type: type,
        options: options
      };
      if (data) packet.data = data;

      // exports packetCreate event
      this.emit('packetCreate', packet);

      this.writeBuffer.push(packet);

      // add send callback to object, if defined
      if (callback) this.packetsFn.push(callback);

      this.flush();
    }
  };

  /**
   * Attempts to flush the packets buffer.
   *
   * @api private
   */

  Socket$1.prototype.flush = function () {
    if ('closed' !== this.readyState &&
                  this.transport.writable &&
                  this.writeBuffer.length) {
      debug$n('flushing buffer to transport');
      this.emit('flush', this.writeBuffer);
      this.server.emit('flush', this, this.writeBuffer);
      var wbuf = this.writeBuffer;
      this.writeBuffer = [];
      if (!this.transport.supportsFraming) {
        this.sentCallbackFn.push(this.packetsFn);
      } else {
        this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);
      }
      this.packetsFn = [];
      this.transport.send(wbuf);
      this.emit('drain');
      this.server.emit('drain', this);
    }
  };

  /**
   * Get available upgrades for this socket.
   *
   * @api private
   */

  Socket$1.prototype.getAvailableUpgrades = function () {
    var availableUpgrades = [];
    var allUpgrades = this.server.upgrades(this.transport.name);
    for (var i = 0, l = allUpgrades.length; i < l; ++i) {
      var upg = allUpgrades[i];
      if (this.server.transports.indexOf(upg) !== -1) {
        availableUpgrades.push(upg);
      }
    }
    return availableUpgrades;
  };

  /**
   * Closes the socket and underlying transport.
   *
   * @param {Boolean} optional, discard
   * @return {Socket} for chaining
   * @api public
   */

  Socket$1.prototype.close = function (discard) {
    if ('open' !== this.readyState) return;

    this.readyState = 'closing';

    if (this.writeBuffer.length) {
      this.once('drain', this.closeTransport.bind(this, discard));
      return;
    }

    this.closeTransport(discard);
  };

  /**
   * Closes the underlying transport.
   *
   * @param {Boolean} discard
   * @api private
   */

  Socket$1.prototype.closeTransport = function (discard) {
    if (discard) this.transport.discard();
    this.transport.close(this.onClose.bind(this, 'forced close'));
  };

  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * Module exports.
   * @public
   */

  var parse_1$5 = parse$j;
  var serialize_1$1 = serialize$1;

  /**
   * Module variables.
   * @private
   */

  var decode$5 = decodeURIComponent;
  var encode$4 = encodeURIComponent;
  var pairSplitRegExp$1 = /; */;

  /**
   * RegExp to match field-content in RFC 7230 sec 3.2
   *
   * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
   * field-vchar   = VCHAR / obs-text
   * obs-text      = %x80-FF
   */

  var fieldContentRegExp$1 = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

  /**
   * Parse a cookie header.
   *
   * Parse the given cookie header string into an object
   * The object has the various cookies as keys(names) => values
   *
   * @param {string} str
   * @param {object} [options]
   * @return {object}
   * @public
   */

  function parse$j(str, options) {
    if (typeof str !== 'string') {
      throw new TypeError('argument str must be a string');
    }

    var obj = {};
    var opt = options || {};
    var pairs = str.split(pairSplitRegExp$1);
    var dec = opt.decode || decode$5;

    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var eq_idx = pair.indexOf('=');

      // skip things that don't look like key=value
      if (eq_idx < 0) {
        continue;
      }

      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();

      // quoted values
      if ('"' == val[0]) {
        val = val.slice(1, -1);
      }

      // only assign once
      if (undefined == obj[key]) {
        obj[key] = tryDecode$1(val, dec);
      }
    }

    return obj;
  }

  /**
   * Serialize data into a cookie header.
   *
   * Serialize the a name value pair into a cookie string suitable for
   * http headers. An optional options object specified cookie parameters.
   *
   * serialize('foo', 'bar', { httpOnly: true })
   *   => "foo=bar; httpOnly"
   *
   * @param {string} name
   * @param {string} val
   * @param {object} [options]
   * @return {string}
   * @public
   */

  function serialize$1(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode$4;

    if (typeof enc !== 'function') {
      throw new TypeError('option encode is invalid');
    }

    if (!fieldContentRegExp$1.test(name)) {
      throw new TypeError('argument name is invalid');
    }

    var value = enc(val);

    if (value && !fieldContentRegExp$1.test(value)) {
      throw new TypeError('argument val is invalid');
    }

    var str = name + '=' + value;

    if (null != opt.maxAge) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
      str += '; Max-Age=' + Math.floor(maxAge);
    }

    if (opt.domain) {
      if (!fieldContentRegExp$1.test(opt.domain)) {
        throw new TypeError('option domain is invalid');
      }

      str += '; Domain=' + opt.domain;
    }

    if (opt.path) {
      if (!fieldContentRegExp$1.test(opt.path)) {
        throw new TypeError('option path is invalid');
      }

      str += '; Path=' + opt.path;
    }

    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== 'function') {
        throw new TypeError('option expires is invalid');
      }

      str += '; Expires=' + opt.expires.toUTCString();
    }

    if (opt.httpOnly) {
      str += '; HttpOnly';
    }

    if (opt.secure) {
      str += '; Secure';
    }

    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === 'string'
        ? opt.sameSite.toLowerCase() : opt.sameSite;

      switch (sameSite) {
        case true:
          str += '; SameSite=Strict';
          break;
        case 'lax':
          str += '; SameSite=Lax';
          break;
        case 'strict':
          str += '; SameSite=Strict';
          break;
        default:
          throw new TypeError('option sameSite is invalid');
      }
    }

    return str;
  }

  /**
   * Try decoding a string using a decoding function.
   *
   * @param {string} str
   * @param {function} decode
   * @private
   */

  function tryDecode$1(str, decode) {
    try {
      return decode(str);
    } catch (e) {
      return str;
    }
  }

  var cookie$1 = {
  	parse: parse_1$5,
  	serialize: serialize_1$1
  };

  var constants$1 = {
    BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
    GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
    kStatusCode: Symbol('status-code'),
    kWebSocket: Symbol('websocket'),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {}
  };

  var bufferUtil$1 = createCommonjsModule(function (module) {

  const { EMPTY_BUFFER } = constants$1;

  /**
   * Merges an array of buffers into a new buffer.
   *
   * @param {Buffer[]} list The array of buffers to concat
   * @param {Number} totalLength The total length of buffers in the list
   * @return {Buffer} The resulting buffer
   * @public
   */
  function concat(list, totalLength) {
    if (list.length === 0) return EMPTY_BUFFER;
    if (list.length === 1) return list[0];

    const target = Buffer.allocUnsafe(totalLength);
    let offset = 0;

    for (let i = 0; i < list.length; i++) {
      const buf = list[i];
      target.set(buf, offset);
      offset += buf.length;
    }

    if (offset < totalLength) return target.slice(0, offset);

    return target;
  }

  /**
   * Masks a buffer using the given mask.
   *
   * @param {Buffer} source The buffer to mask
   * @param {Buffer} mask The mask to use
   * @param {Buffer} output The buffer where to store the result
   * @param {Number} offset The offset at which to start writing
   * @param {Number} length The number of bytes to mask.
   * @public
   */
  function _mask(source, mask, output, offset, length) {
    for (let i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }

  /**
   * Unmasks a buffer using the given mask.
   *
   * @param {Buffer} buffer The buffer to unmask
   * @param {Buffer} mask The mask to use
   * @public
   */
  function _unmask(buffer, mask) {
    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
    const length = buffer.length;
    for (let i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }

  /**
   * Converts a buffer to an `ArrayBuffer`.
   *
   * @param {Buffer} buf The buffer to convert
   * @return {ArrayBuffer} Converted buffer
   * @public
   */
  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }

    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  /**
   * Converts `data` to a `Buffer`.
   *
   * @param {*} data The data to convert
   * @return {Buffer} The buffer
   * @throws {TypeError}
   * @public
   */
  function toBuffer(data) {
    toBuffer.readOnly = true;

    if (Buffer.isBuffer(data)) return data;

    let buf;

    if (data instanceof ArrayBuffer) {
      buf = Buffer.from(data);
    } else if (ArrayBuffer.isView(data)) {
      buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
    } else {
      buf = Buffer.from(data);
      toBuffer.readOnly = false;
    }

    return buf;
  }

  try {
    const bufferUtil = bufferutil;
    const bu = bufferUtil.BufferUtil || bufferUtil;

    module.exports = {
      concat,
      mask(source, mask, output, offset, length) {
        if (length < 48) _mask(source, mask, output, offset, length);
        else bu.mask(source, mask, output, offset, length);
      },
      toArrayBuffer,
      toBuffer,
      unmask(buffer, mask) {
        if (buffer.length < 32) _unmask(buffer, mask);
        else bu.unmask(buffer, mask);
      }
    };
  } catch (e) /* istanbul ignore next */ {
    module.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
  }
  });
  var bufferUtil_1$1 = bufferUtil$1.concat;
  var bufferUtil_2$1 = bufferUtil$1.mask;
  var bufferUtil_3$1 = bufferUtil$1.toArrayBuffer;
  var bufferUtil_4 = bufferUtil$1.toBuffer;
  var bufferUtil_5 = bufferUtil$1.unmask;

  const kDone = Symbol('kDone');
  const kRun = Symbol('kRun');

  /**
   * A very simple job queue with adjustable concurrency. Adapted from
   * https://github.com/STRML/async-limiter
   */
  class Limiter {
    /**
     * Creates a new `Limiter`.
     *
     * @param {Number} concurrency The maximum number of jobs allowed to run
     *     concurrently
     */
    constructor(concurrency) {
      this[kDone] = () => {
        this.pending--;
        this[kRun]();
      };
      this.concurrency = concurrency || Infinity;
      this.jobs = [];
      this.pending = 0;
    }

    /**
     * Adds a job to the queue.
     *
     * @public
     */
    add(job) {
      this.jobs.push(job);
      this[kRun]();
    }

    /**
     * Removes a job from the queue and runs it if possible.
     *
     * @private
     */
    [kRun]() {
      if (this.pending === this.concurrency) return;

      if (this.jobs.length) {
        const job = this.jobs.shift();

        this.pending++;
        job(this[kDone]);
      }
    }
  }

  var limiter = Limiter;

  const { kStatusCode: kStatusCode$1, NOOP: NOOP$1 } = constants$1;

  const TRAILER$1 = Buffer.from([0x00, 0x00, 0xff, 0xff]);
  const kPerMessageDeflate$1 = Symbol('permessage-deflate');
  const kTotalLength$1 = Symbol('total-length');
  const kCallback$1 = Symbol('callback');
  const kBuffers$1 = Symbol('buffers');
  const kError$1 = Symbol('error');

  //
  // We limit zlib concurrency, which prevents severe memory fragmentation
  // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
  // and https://github.com/websockets/ws/issues/1202
  //
  // Intentionally global; it's the global thread pool that's an issue.
  //
  let zlibLimiter$1;

  /**
   * permessage-deflate implementation.
   */
  class PerMessageDeflate$1 {
    /**
     * Creates a PerMessageDeflate instance.
     *
     * @param {Object} options Configuration options
     * @param {Boolean} options.serverNoContextTakeover Request/accept disabling
     *     of server context takeover
     * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge
     *     disabling of client context takeover
     * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the
     *     use of a custom server window size
     * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support
     *     for, or request, a custom client window size
     * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate
     * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate
     * @param {Number} options.threshold Size (in bytes) below which messages
     *     should not be compressed
     * @param {Number} options.concurrencyLimit The number of concurrent calls to
     *     zlib
     * @param {Boolean} isServer Create the instance in either server or client
     *     mode
     * @param {Number} maxPayload The maximum allowed message length
     */
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold =
        this._options.threshold !== undefined ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._deflate = null;
      this._inflate = null;

      this.params = null;

      if (!zlibLimiter$1) {
        const concurrency =
          this._options.concurrencyLimit !== undefined
            ? this._options.concurrencyLimit
            : 10;
        zlibLimiter$1 = new limiter(concurrency);
      }
    }

    /**
     * @type {String}
     */
    static get extensionName() {
      return 'permessage-deflate';
    }

    /**
     * Create an extension negotiation offer.
     *
     * @return {Object} Extension parameters
     * @public
     */
    offer() {
      const params = {};

      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }
      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }
      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }

      return params;
    }

    /**
     * Accept an extension negotiation offer/response.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Object} Accepted configuration
     * @public
     */
    accept(configurations) {
      configurations = this.normalizeParams(configurations);

      this.params = this._isServer
        ? this.acceptAsServer(configurations)
        : this.acceptAsClient(configurations);

      return this.params;
    }

    /**
     * Releases all resources used by the extension.
     *
     * @public
     */
    cleanup() {
      if (this._inflate) {
        this._inflate.close();
        this._inflate = null;
      }

      if (this._deflate) {
        const callback = this._deflate[kCallback$1];

        this._deflate.close();
        this._deflate = null;

        if (callback) {
          callback(
            new Error(
              'The deflate stream was closed while data was being processed'
            )
          );
        }
      }
    }

    /**
     *  Accept an extension negotiation offer.
     *
     * @param {Array} offers The extension negotiation offers
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find((params) => {
        if (
          (opts.serverNoContextTakeover === false &&
            params.server_no_context_takeover) ||
          (params.server_max_window_bits &&
            (opts.serverMaxWindowBits === false ||
              (typeof opts.serverMaxWindowBits === 'number' &&
                opts.serverMaxWindowBits > params.server_max_window_bits))) ||
          (typeof opts.clientMaxWindowBits === 'number' &&
            !params.client_max_window_bits)
        ) {
          return false;
        }

        return true;
      });

      if (!accepted) {
        throw new Error('None of the extension offers can be accepted');
      }

      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }
      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof opts.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }
      if (typeof opts.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (
        accepted.client_max_window_bits === true ||
        opts.clientMaxWindowBits === false
      ) {
        delete accepted.client_max_window_bits;
      }

      return accepted;
    }

    /**
     * Accept the extension negotiation response.
     *
     * @param {Array} response The extension negotiation response
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsClient(response) {
      const params = response[0];

      if (
        this._options.clientNoContextTakeover === false &&
        params.client_no_context_takeover
      ) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }

      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === 'number') {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (
        this._options.clientMaxWindowBits === false ||
        (typeof this._options.clientMaxWindowBits === 'number' &&
          params.client_max_window_bits > this._options.clientMaxWindowBits)
      ) {
        throw new Error(
          'Unexpected or invalid parameter "client_max_window_bits"'
        );
      }

      return params;
    }

    /**
     * Normalize parameters.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Array} The offers/response with normalized parameters
     * @private
     */
    normalizeParams(configurations) {
      configurations.forEach((params) => {
        Object.keys(params).forEach((key) => {
          let value = params[key];

          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }

          value = value[0];

          if (key === 'client_max_window_bits') {
            if (value !== true) {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (!this._isServer) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else if (key === 'server_max_window_bits') {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
            value = num;
          } else if (
            key === 'client_no_context_takeover' ||
            key === 'server_no_context_takeover'
          ) {
            if (value !== true) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }

          params[key] = value;
        });
      });

      return configurations;
    }

    /**
     * Decompress data. Concurrency limited.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    decompress(data, fin, callback) {
      zlibLimiter$1.add((done) => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Compress data. Concurrency limited.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    compress(data, fin, callback) {
      zlibLimiter$1.add((done) => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Decompress data.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? 'client' : 'server';

      if (!this._inflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._inflate = zlib.createInflateRaw({
          ...this._options.zlibInflateOptions,
          windowBits
        });
        this._inflate[kPerMessageDeflate$1] = this;
        this._inflate[kTotalLength$1] = 0;
        this._inflate[kBuffers$1] = [];
        this._inflate.on('error', inflateOnError$1);
        this._inflate.on('data', inflateOnData$1);
      }

      this._inflate[kCallback$1] = callback;

      this._inflate.write(data);
      if (fin) this._inflate.write(TRAILER$1);

      this._inflate.flush(() => {
        const err = this._inflate[kError$1];

        if (err) {
          this._inflate.close();
          this._inflate = null;
          callback(err);
          return;
        }

        const data = bufferUtil$1.concat(
          this._inflate[kBuffers$1],
          this._inflate[kTotalLength$1]
        );

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.close();
          this._inflate = null;
        } else {
          this._inflate[kTotalLength$1] = 0;
          this._inflate[kBuffers$1] = [];
        }

        callback(null, data);
      });
    }

    /**
     * Compress data.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _compress(data, fin, callback) {
      const endpoint = this._isServer ? 'server' : 'client';

      if (!this._deflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._deflate = zlib.createDeflateRaw({
          ...this._options.zlibDeflateOptions,
          windowBits
        });

        this._deflate[kTotalLength$1] = 0;
        this._deflate[kBuffers$1] = [];

        //
        // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
        // `zlib.DeflateRaw` instance is closed while data is being processed.
        // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
        // time due to an abnormal WebSocket closure.
        //
        this._deflate.on('error', NOOP$1);
        this._deflate.on('data', deflateOnData$1);
      }

      this._deflate[kCallback$1] = callback;

      this._deflate.write(data);
      this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._deflate) {
          //
          // The deflate stream was closed while data was being processed.
          //
          return;
        }

        let data = bufferUtil$1.concat(
          this._deflate[kBuffers$1],
          this._deflate[kTotalLength$1]
        );

        if (fin) data = data.slice(0, data.length - 4);

        //
        // Ensure that the callback will not be called again in
        // `PerMessageDeflate#cleanup()`.
        //
        this._deflate[kCallback$1] = null;

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._deflate.close();
          this._deflate = null;
        } else {
          this._deflate[kTotalLength$1] = 0;
          this._deflate[kBuffers$1] = [];
        }

        callback(null, data);
      });
    }
  }

  var permessageDeflate$1 = PerMessageDeflate$1;

  /**
   * The listener of the `zlib.DeflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function deflateOnData$1(chunk) {
    this[kBuffers$1].push(chunk);
    this[kTotalLength$1] += chunk.length;
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function inflateOnData$1(chunk) {
    this[kTotalLength$1] += chunk.length;

    if (
      this[kPerMessageDeflate$1]._maxPayload < 1 ||
      this[kTotalLength$1] <= this[kPerMessageDeflate$1]._maxPayload
    ) {
      this[kBuffers$1].push(chunk);
      return;
    }

    this[kError$1] = new RangeError('Max payload size exceeded');
    this[kError$1][kStatusCode$1] = 1009;
    this.removeListener('data', inflateOnData$1);
    this.reset();
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'error'` event.
   *
   * @param {Error} err The emitted error
   * @private
   */
  function inflateOnError$1(err) {
    //
    // There is no need to call `Zlib#close()` as the handle is automatically
    // closed when an error is emitted.
    //
    this[kPerMessageDeflate$1]._inflate = null;
    err[kStatusCode$1] = 1007;
    this[kCallback$1](err);
  }

  var validation$1 = createCommonjsModule(function (module, exports) {

  try {
    const isValidUTF8 = utf8Validate;

    exports.isValidUTF8 =
      typeof isValidUTF8 === 'object'
        ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
        : isValidUTF8;
  } catch (e) /* istanbul ignore next */ {
    exports.isValidUTF8 = () => true;
  }

  /**
   * Checks if a status code is allowed in a close frame.
   *
   * @param {Number} code The status code
   * @return {Boolean} `true` if the status code is valid, else `false`
   * @public
   */
  exports.isValidStatusCode = (code) => {
    return (
      (code >= 1000 &&
        code <= 1014 &&
        code !== 1004 &&
        code !== 1005 &&
        code !== 1006) ||
      (code >= 3000 && code <= 4999)
    );
  };
  });
  var validation_1$1 = validation$1.isValidUTF8;
  var validation_2$1 = validation$1.isValidStatusCode;

  const { Writable } = stream$1;


  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    kStatusCode: kStatusCode$2,
    kWebSocket: kWebSocket$1
  } = constants$1;
  const { concat, toArrayBuffer: toArrayBuffer$1, unmask: unmask$1 } = bufferUtil$1;
  const { isValidStatusCode, isValidUTF8: isValidUTF8$1 } = validation$1;

  const GET_INFO$1 = 0;
  const GET_PAYLOAD_LENGTH_16$1 = 1;
  const GET_PAYLOAD_LENGTH_64$1 = 2;
  const GET_MASK$1 = 3;
  const GET_DATA$1 = 4;
  const INFLATING$1 = 5;

  /**
   * HyBi Receiver implementation.
   *
   * @extends stream.Writable
   */
  class Receiver$1 extends Writable {
    /**
     * Creates a Receiver instance.
     *
     * @param {String} binaryType The type for binary data
     * @param {Object} extensions An object containing the negotiated extensions
     * @param {Boolean} isServer Specifies whether to operate in client or server
     *     mode
     * @param {Number} maxPayload The maximum allowed message length
     */
    constructor(binaryType, extensions, isServer, maxPayload) {
      super();

      this._binaryType = binaryType || BINARY_TYPES[0];
      this[kWebSocket$1] = undefined;
      this._extensions = extensions || {};
      this._isServer = !!isServer;
      this._maxPayload = maxPayload | 0;

      this._bufferedBytes = 0;
      this._buffers = [];

      this._compressed = false;
      this._payloadLength = 0;
      this._mask = undefined;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];

      this._state = GET_INFO$1;
      this._loop = false;
    }

    /**
     * Implements `Writable.prototype._write()`.
     *
     * @param {Buffer} chunk The chunk of data to write
     * @param {String} encoding The character encoding of `chunk`
     * @param {Function} cb Callback
     * @private
     */
    _write(chunk, encoding, cb) {
      if (this._opcode === 0x08 && this._state == GET_INFO$1) return cb();

      this._bufferedBytes += chunk.length;
      this._buffers.push(chunk);
      this.startLoop(cb);
    }

    /**
     * Consumes `n` bytes from the buffered data.
     *
     * @param {Number} n The number of bytes to consume
     * @return {Buffer} The consumed bytes
     * @private
     */
    consume(n) {
      this._bufferedBytes -= n;

      if (n === this._buffers[0].length) return this._buffers.shift();

      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }

      const dst = Buffer.allocUnsafe(n);

      do {
        const buf = this._buffers[0];
        const offset = dst.length - n;

        if (n >= buf.length) {
          dst.set(this._buffers.shift(), offset);
        } else {
          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
          this._buffers[0] = buf.slice(n);
        }

        n -= buf.length;
      } while (n > 0);

      return dst;
    }

    /**
     * Starts the parsing loop.
     *
     * @param {Function} cb Callback
     * @private
     */
    startLoop(cb) {
      let err;
      this._loop = true;

      do {
        switch (this._state) {
          case GET_INFO$1:
            err = this.getInfo();
            break;
          case GET_PAYLOAD_LENGTH_16$1:
            err = this.getPayloadLength16();
            break;
          case GET_PAYLOAD_LENGTH_64$1:
            err = this.getPayloadLength64();
            break;
          case GET_MASK$1:
            this.getMask();
            break;
          case GET_DATA$1:
            err = this.getData(cb);
            break;
          default:
            // `INFLATING`
            this._loop = false;
            return;
        }
      } while (this._loop);

      cb(err);
    }

    /**
     * Reads the first two bytes of a frame.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      const buf = this.consume(2);

      if ((buf[0] & 0x30) !== 0x00) {
        this._loop = false;
        return error$1(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
      }

      const compressed = (buf[0] & 0x40) === 0x40;

      if (compressed && !this._extensions[permessageDeflate$1.extensionName]) {
        this._loop = false;
        return error$1(RangeError, 'RSV1 must be clear', true, 1002);
      }

      this._fin = (buf[0] & 0x80) === 0x80;
      this._opcode = buf[0] & 0x0f;
      this._payloadLength = buf[1] & 0x7f;

      if (this._opcode === 0x00) {
        if (compressed) {
          this._loop = false;
          return error$1(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (!this._fragmented) {
          this._loop = false;
          return error$1(RangeError, 'invalid opcode 0', true, 1002);
        }

        this._opcode = this._fragmented;
      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
        if (this._fragmented) {
          this._loop = false;
          return error$1(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }

        this._compressed = compressed;
      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
        if (!this._fin) {
          this._loop = false;
          return error$1(RangeError, 'FIN must be set', true, 1002);
        }

        if (compressed) {
          this._loop = false;
          return error$1(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (this._payloadLength > 0x7d) {
          this._loop = false;
          return error$1(
            RangeError,
            `invalid payload length ${this._payloadLength}`,
            true,
            1002
          );
        }
      } else {
        this._loop = false;
        return error$1(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
      this._masked = (buf[1] & 0x80) === 0x80;

      if (this._isServer) {
        if (!this._masked) {
          this._loop = false;
          return error$1(RangeError, 'MASK must be set', true, 1002);
        }
      } else if (this._masked) {
        this._loop = false;
        return error$1(RangeError, 'MASK must be clear', true, 1002);
      }

      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16$1;
      else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64$1;
      else return this.haveLength();
    }

    /**
     * Gets extended payload length (7+16).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }

    /**
     * Gets extended payload length (7+64).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }

      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);

      //
      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
      // if payload length is greater than this number.
      //
      if (num > Math.pow(2, 53 - 32) - 1) {
        this._loop = false;
        return error$1(
          RangeError,
          'Unsupported WebSocket frame: payload length > 2^53 - 1',
          false,
          1009
        );
      }

      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }

    /**
     * Payload length has been read.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    haveLength() {
      if (this._payloadLength && this._opcode < 0x08) {
        this._totalPayloadLength += this._payloadLength;
        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error$1(RangeError, 'Max payload size exceeded', false, 1009);
        }
      }

      if (this._masked) this._state = GET_MASK$1;
      else this._state = GET_DATA$1;
    }

    /**
     * Reads mask bytes.
     *
     * @private
     */
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }

      this._mask = this.consume(4);
      this._state = GET_DATA$1;
    }

    /**
     * Reads data bytes.
     *
     * @param {Function} cb Callback
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    getData(cb) {
      let data = EMPTY_BUFFER;

      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }

        data = this.consume(this._payloadLength);
        if (this._masked) unmask$1(data, this._mask);
      }

      if (this._opcode > 0x07) return this.controlMessage(data);

      if (this._compressed) {
        this._state = INFLATING$1;
        this.decompress(data, cb);
        return;
      }

      if (data.length) {
        //
        // This message is not compressed so its lenght is the sum of the payload
        // length of all fragments.
        //
        this._messageLength = this._totalPayloadLength;
        this._fragments.push(data);
      }

      return this.dataMessage();
    }

    /**
     * Decompresses data.
     *
     * @param {Buffer} data Compressed data
     * @param {Function} cb Callback
     * @private
     */
    decompress(data, cb) {
      const perMessageDeflate = this._extensions[permessageDeflate$1.extensionName];

      perMessageDeflate.decompress(data, this._fin, (err, buf) => {
        if (err) return cb(err);

        if (buf.length) {
          this._messageLength += buf.length;
          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(
              error$1(RangeError, 'Max payload size exceeded', false, 1009)
            );
          }

          this._fragments.push(buf);
        }

        const er = this.dataMessage();
        if (er) return cb(er);

        this.startLoop(cb);
      });
    }

    /**
     * Handles a data message.
     *
     * @return {(Error|undefined)} A possible error
     * @private
     */
    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;

        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];

        if (this._opcode === 2) {
          let data;

          if (this._binaryType === 'nodebuffer') {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === 'arraybuffer') {
            data = toArrayBuffer$1(concat(fragments, messageLength));
          } else {
            data = fragments;
          }

          this.emit('message', data);
        } else {
          const buf = concat(fragments, messageLength);

          if (!isValidUTF8$1(buf)) {
            this._loop = false;
            return error$1(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('message', buf.toString());
        }
      }

      this._state = GET_INFO$1;
    }

    /**
     * Handles a control message.
     *
     * @param {Buffer} data Data to handle
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    controlMessage(data) {
      if (this._opcode === 0x08) {
        this._loop = false;

        if (data.length === 0) {
          this.emit('conclude', 1005, '');
          this.end();
        } else if (data.length === 1) {
          return error$1(RangeError, 'invalid payload length 1', true, 1002);
        } else {
          const code = data.readUInt16BE(0);

          if (!isValidStatusCode(code)) {
            return error$1(RangeError, `invalid status code ${code}`, true, 1002);
          }

          const buf = data.slice(2);

          if (!isValidUTF8$1(buf)) {
            return error$1(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('conclude', code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 0x09) {
        this.emit('ping', data);
      } else {
        this.emit('pong', data);
      }

      this._state = GET_INFO$1;
    }
  }

  var receiver$1 = Receiver$1;

  /**
   * Builds an error object.
   *
   * @param {(Error|RangeError)} ErrorCtor The error constructor
   * @param {String} message The error message
   * @param {Boolean} prefix Specifies whether or not to add a default prefix to
   *     `message`
   * @param {Number} statusCode The status code
   * @return {(Error|RangeError)} The error
   * @private
   */
  function error$1(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(
      prefix ? `Invalid WebSocket frame: ${message}` : message
    );

    Error.captureStackTrace(err, error$1);
    err[kStatusCode$2] = statusCode;
    return err;
  }

  const { randomFillSync } = crypto;


  const { EMPTY_BUFFER: EMPTY_BUFFER$1 } = constants$1;
  const { isValidStatusCode: isValidStatusCode$1 } = validation$1;
  const { mask: applyMask, toBuffer: toBuffer$1 } = bufferUtil$1;

  const mask$1 = Buffer.alloc(4);

  /**
   * HyBi Sender implementation.
   */
  class Sender$1 {
    /**
     * Creates a Sender instance.
     *
     * @param {net.Socket} socket The connection socket
     * @param {Object} extensions An object containing the negotiated extensions
     */
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;

      this._firstFragment = true;
      this._compress = false;

      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }

    /**
     * Frames a piece of data according to the HyBi WebSocket protocol.
     *
     * @param {Buffer} data The data to frame
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} options.readOnly Specifies whether `data` can be modified
     * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
     * @return {Buffer[]} The framed data as a list of `Buffer` instances
     * @public
     */
    static frame(data, options) {
      const merge = options.mask && options.readOnly;
      let offset = options.mask ? 6 : 2;
      let payloadLength = data.length;

      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }

      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
      if (options.rsv1) target[0] |= 0x40;

      target[1] = payloadLength;

      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }

      if (!options.mask) return [target, data];

      randomFillSync(mask$1, 0, 4);

      target[1] |= 0x80;
      target[offset - 4] = mask$1[0];
      target[offset - 3] = mask$1[1];
      target[offset - 2] = mask$1[2];
      target[offset - 1] = mask$1[3];

      if (merge) {
        applyMask(data, mask$1, target, offset, data.length);
        return [target];
      }

      applyMask(data, mask$1, data, 0, data.length);
      return [target, data];
    }

    /**
     * Sends a close message to the other peer.
     *
     * @param {(Number|undefined)} code The status code component of the body
     * @param {String} data The message component of the body
     * @param {Boolean} mask Specifies whether or not to mask the message
     * @param {Function} cb Callback
     * @public
     */
    close(code, data, mask, cb) {
      let buf;

      if (code === undefined) {
        buf = EMPTY_BUFFER$1;
      } else if (typeof code !== 'number' || !isValidStatusCode$1(code)) {
        throw new TypeError('First argument must be a valid error code number');
      } else if (data === undefined || data === '') {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        const length = Buffer.byteLength(data);

        if (length > 123) {
          throw new RangeError('The message must not be greater than 123 bytes');
        }

        buf = Buffer.allocUnsafe(2 + length);
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }

      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask, cb]);
      } else {
        this.doClose(buf, mask, cb);
      }
    }

    /**
     * Frames and sends a close message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @private
     */
    doClose(data, mask, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x08,
          mask,
          readOnly: false
        }),
        cb
      );
    }

    /**
     * Sends a ping message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    ping(data, mask, cb) {
      const buf = toBuffer$1(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPing, buf, mask, toBuffer$1.readOnly, cb]);
      } else {
        this.doPing(buf, mask, toBuffer$1.readOnly, cb);
      }
    }

    /**
     * Frames and sends a ping message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Boolean} readOnly Specifies whether `data` can be modified
     * @param {Function} cb Callback
     * @private
     */
    doPing(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x09,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a pong message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    pong(data, mask, cb) {
      const buf = toBuffer$1(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPong, buf, mask, toBuffer$1.readOnly, cb]);
      } else {
        this.doPong(buf, mask, toBuffer$1.readOnly, cb);
      }
    }

    /**
     * Frames and sends a pong message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} mask Specifies whether or not to mask `data`
     * @param {Boolean} readOnly Specifies whether `data` can be modified
     * @param {Function} cb Callback
     * @private
     */
    doPong(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x0a,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a data message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Object} options Options object
     * @param {Boolean} options.compress Specifies whether or not to compress `data`
     * @param {Boolean} options.binary Specifies whether `data` is binary or text
     * @param {Boolean} options.fin Specifies whether the fragment is the last one
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback
     * @public
     */
    send(data, options, cb) {
      const buf = toBuffer$1(data);
      const perMessageDeflate = this._extensions[permessageDeflate$1.extensionName];
      let opcode = options.binary ? 2 : 1;
      let rsv1 = options.compress;

      if (this._firstFragment) {
        this._firstFragment = false;
        if (rsv1 && perMessageDeflate) {
          rsv1 = buf.length >= perMessageDeflate._threshold;
        }
        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }

      if (options.fin) this._firstFragment = true;

      if (perMessageDeflate) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly: toBuffer$1.readOnly
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
        } else {
          this.dispatch(buf, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(
          Sender$1.frame(buf, {
            fin: options.fin,
            rsv1: false,
            opcode,
            mask: options.mask,
            readOnly: toBuffer$1.readOnly
          }),
          cb
        );
      }
    }

    /**
     * Dispatches a data message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} compress Specifies whether or not to compress `data`
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} options.readOnly Specifies whether `data` can be modified
     * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
     * @param {Function} cb Callback
     * @private
     */
    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender$1.frame(data, options), cb);
        return;
      }

      const perMessageDeflate = this._extensions[permessageDeflate$1.extensionName];

      this._bufferedBytes += data.length;
      this._deflating = true;
      perMessageDeflate.compress(data, options.fin, (_, buf) => {
        if (this._socket.destroyed) {
          const err = new Error(
            'The socket was closed while data was being compressed'
          );

          if (typeof cb === 'function') cb(err);

          for (let i = 0; i < this._queue.length; i++) {
            const callback = this._queue[i][4];

            if (typeof callback === 'function') callback(err);
          }

          return;
        }

        this._bufferedBytes -= data.length;
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender$1.frame(buf, options), cb);
        this.dequeue();
      });
    }

    /**
     * Executes queued send operations.
     *
     * @private
     */
    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();

        this._bufferedBytes -= params[1].length;
        Reflect.apply(params[0], this, params.slice(1));
      }
    }

    /**
     * Enqueues a send operation.
     *
     * @param {Array} params Send operation parameters.
     * @private
     */
    enqueue(params) {
      this._bufferedBytes += params[1].length;
      this._queue.push(params);
    }

    /**
     * Sends a frame.
     *
     * @param {Buffer[]} list The frame to send
     * @param {Function} cb Callback
     * @private
     */
    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.cork();
        this._socket.write(list[0]);
        this._socket.write(list[1], cb);
        this._socket.uncork();
      } else {
        this._socket.write(list[0], cb);
      }
    }
  }

  var sender$1 = Sender$1;

  /**
   * Class representing an event.
   *
   * @private
   */
  class Event$1 {
    /**
     * Create a new `Event`.
     *
     * @param {String} type The name of the event
     * @param {Object} target A reference to the target to which the event was dispatched
     */
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }
  }

  /**
   * Class representing a message event.
   *
   * @extends Event
   * @private
   */
  class MessageEvent$1 extends Event$1 {
    /**
     * Create a new `MessageEvent`.
     *
     * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(data, target) {
      super('message', target);

      this.data = data;
    }
  }

  /**
   * Class representing a close event.
   *
   * @extends Event
   * @private
   */
  class CloseEvent$1 extends Event$1 {
    /**
     * Create a new `CloseEvent`.
     *
     * @param {Number} code The status code explaining why the connection is being closed
     * @param {String} reason A human-readable string explaining why the connection is closing
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(code, reason, target) {
      super('close', target);

      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }
  }

  /**
   * Class representing an open event.
   *
   * @extends Event
   * @private
   */
  class OpenEvent$1 extends Event$1 {
    /**
     * Create a new `OpenEvent`.
     *
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(target) {
      super('open', target);
    }
  }

  /**
   * Class representing an error event.
   *
   * @extends Event
   * @private
   */
  class ErrorEvent$1 extends Event$1 {
    /**
     * Create a new `ErrorEvent`.
     *
     * @param {Object} error The error that generated this event
     * @param {WebSocket} target A reference to the target to which the event was dispatched
     */
    constructor(error, target) {
      super('error', target);

      this.message = error.message;
      this.error = error;
    }
  }

  /**
   * This provides methods for emulating the `EventTarget` interface. It's not
   * meant to be used directly.
   *
   * @mixin
   */
  const EventTarget$1 = {
    /**
     * Register an event listener.
     *
     * @param {String} type A string representing the event type to listen for
     * @param {Function} listener The listener to add
     * @param {Object} options An options object specifies characteristics about
     *     the event listener
     * @param {Boolean} options.once A `Boolean`` indicating that the listener
     *     should be invoked at most once after being added. If `true`, the
     *     listener would be automatically removed when invoked.
     * @public
     */
    addEventListener(type, listener, options) {
      if (typeof listener !== 'function') return;

      function onMessage(data) {
        listener.call(this, new MessageEvent$1(data, this));
      }

      function onClose(code, message) {
        listener.call(this, new CloseEvent$1(code, message, this));
      }

      function onError(error) {
        listener.call(this, new ErrorEvent$1(error, this));
      }

      function onOpen() {
        listener.call(this, new OpenEvent$1(this));
      }

      const method = options && options.once ? 'once' : 'on';

      if (type === 'message') {
        onMessage._listener = listener;
        this[method](type, onMessage);
      } else if (type === 'close') {
        onClose._listener = listener;
        this[method](type, onClose);
      } else if (type === 'error') {
        onError._listener = listener;
        this[method](type, onError);
      } else if (type === 'open') {
        onOpen._listener = listener;
        this[method](type, onOpen);
      } else {
        this[method](type, listener);
      }
    },

    /**
     * Remove an event listener.
     *
     * @param {String} type A string representing the event type to remove
     * @param {Function} listener The listener to remove
     * @public
     */
    removeEventListener(type, listener) {
      const listeners = this.listeners(type);

      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(type, listeners[i]);
        }
      }
    }
  };

  var eventTarget$1 = EventTarget$1;

  //
  // Allowed token characters:
  //
  // '!', '#', '$', '%', '&', ''', '*', '+', '-',
  // '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
  //
  // tokenChars[32] === 0 // ' '
  // tokenChars[33] === 1 // '!'
  // tokenChars[34] === 0 // '"'
  // ...
  //
  // prettier-ignore
  const tokenChars$1 = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
    0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
  ];

  /**
   * Adds an offer to the map of extension offers or a parameter to the map of
   * parameters.
   *
   * @param {Object} dest The map of extension offers or parameters
   * @param {String} name The extension or parameter name
   * @param {(Object|Boolean|String)} elem The extension parameters or the
   *     parameter value
   * @private
   */
  function push$2(dest, name, elem) {
    if (dest[name] === undefined) dest[name] = [elem];
    else dest[name].push(elem);
  }

  /**
   * Parses the `Sec-WebSocket-Extensions` header into an object.
   *
   * @param {String} header The field value of the header
   * @return {Object} The parsed object
   * @public
   */
  function parse$k(header) {
    const offers = Object.create(null);

    if (header === undefined || header === '') return offers;

    let params = Object.create(null);
    let mustUnescape = false;
    let isEscaping = false;
    let inQuotes = false;
    let extensionName;
    let paramName;
    let start = -1;
    let end = -1;
    let i = 0;

    for (; i < header.length; i++) {
      const code = header.charCodeAt(i);

      if (extensionName === undefined) {
        if (end === -1 && tokenChars$1[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          const name = header.slice(start, end);
          if (code === 0x2c) {
            push$2(offers, name, params);
            params = Object.create(null);
          } else {
            extensionName = name;
          }

          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === undefined) {
        if (end === -1 && tokenChars$1[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          push$2(params, header.slice(start, end), true);
          if (code === 0x2c) {
            push$2(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          start = end = -1;
        } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        //
        // The value of a quoted-string after unescaping must conform to the
        // token ABNF, so only token characters are valid.
        // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
        //
        if (isEscaping) {
          if (tokenChars$1[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (start === -1) start = i;
          else if (!mustUnescape) mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars$1[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x22 /* '"' */ && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 0x5c /* '\' */) {
            isEscaping = true;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
          inQuotes = true;
        } else if (end === -1 && tokenChars$1[code] === 1) {
          if (start === -1) start = i;
        } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
          if (end === -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          let value = header.slice(start, end);
          if (mustUnescape) {
            value = value.replace(/\\/g, '');
            mustUnescape = false;
          }
          push$2(params, paramName, value);
          if (code === 0x2c) {
            push$2(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          paramName = undefined;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }

    if (start === -1 || inQuotes) {
      throw new SyntaxError('Unexpected end of input');
    }

    if (end === -1) end = i;
    const token = header.slice(start, end);
    if (extensionName === undefined) {
      push$2(offers, token, params);
    } else {
      if (paramName === undefined) {
        push$2(params, token, true);
      } else if (mustUnescape) {
        push$2(params, paramName, token.replace(/\\/g, ''));
      } else {
        push$2(params, paramName, token);
      }
      push$2(offers, extensionName, params);
    }

    return offers;
  }

  /**
   * Builds the `Sec-WebSocket-Extensions` header field value.
   *
   * @param {Object} extensions The map of extensions and parameters to format
   * @return {String} A string representing the given object
   * @public
   */
  function format$6(extensions) {
    return Object.keys(extensions)
      .map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations)) configurations = [configurations];
        return configurations
          .map((params) => {
            return [extension]
              .concat(
                Object.keys(params).map((k) => {
                  let values = params[k];
                  if (!Array.isArray(values)) values = [values];
                  return values
                    .map((v) => (v === true ? k : `${k}=${v}`))
                    .join('; ');
                })
              )
              .join('; ');
          })
          .join(', ');
      })
      .join(', ');
  }

  var extension$1 = { format: format$6, parse: parse$k };

  const { randomBytes, createHash } = crypto;
  const { URL: URL$1 } = url$1;




  const {
    BINARY_TYPES: BINARY_TYPES$1,
    EMPTY_BUFFER: EMPTY_BUFFER$2,
    GUID,
    kStatusCode: kStatusCode$3,
    kWebSocket: kWebSocket$2,
    NOOP: NOOP$2
  } = constants$1;
  const { addEventListener: addEventListener$1, removeEventListener } = eventTarget$1;
  const { format: format$7, parse: parse$l } = extension$1;
  const { toBuffer: toBuffer$2 } = bufferUtil$1;

  const readyStates$1 = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
  const protocolVersions$1 = [8, 13];
  const closeTimeout$1 = 30 * 1000;

  /**
   * Class representing a WebSocket.
   *
   * @extends EventEmitter
   */
  class WebSocket$3 extends events {
    /**
     * Create a new `WebSocket`.
     *
     * @param {(String|url.URL)} address The URL to which to connect
     * @param {(String|String[])} protocols The subprotocols
     * @param {Object} options Connection options
     */
    constructor(address, protocols, options) {
      super();

      this.readyState = WebSocket$3.CONNECTING;
      this.protocol = '';

      this._binaryType = BINARY_TYPES$1[0];
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = '';
      this._closeTimer = null;
      this._closeCode = 1006;
      this._extensions = {};
      this._receiver = null;
      this._sender = null;
      this._socket = null;

      if (address !== null) {
        this._bufferedAmount = 0;
        this._isServer = false;
        this._redirects = 0;

        if (Array.isArray(protocols)) {
          protocols = protocols.join(', ');
        } else if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = undefined;
        }

        initAsClient$1(this, address, protocols, options);
      } else {
        this._isServer = true;
      }
    }

    get CONNECTING() {
      return WebSocket$3.CONNECTING;
    }
    get CLOSING() {
      return WebSocket$3.CLOSING;
    }
    get CLOSED() {
      return WebSocket$3.CLOSED;
    }
    get OPEN() {
      return WebSocket$3.OPEN;
    }

    /**
     * This deviates from the WHATWG interface since ws doesn't support the
     * required default "blob" type (instead we define a custom "nodebuffer"
     * type).
     *
     * @type {String}
     */
    get binaryType() {
      return this._binaryType;
    }

    set binaryType(type) {
      if (!BINARY_TYPES$1.includes(type)) return;

      this._binaryType = type;

      //
      // Allow to change `binaryType` on the fly.
      //
      if (this._receiver) this._receiver._binaryType = type;
    }

    /**
     * @type {Number}
     */
    get bufferedAmount() {
      if (!this._socket) return this._bufferedAmount;

      return this._socket._writableState.length + this._sender._bufferedBytes;
    }

    /**
     * @type {String}
     */
    get extensions() {
      return Object.keys(this._extensions).join();
    }

    /**
     * Set up the socket and the internal resources.
     *
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Number} maxPayload The maximum allowed message size
     * @private
     */
    setSocket(socket, head, maxPayload) {
      const receiver = new receiver$1(
        this._binaryType,
        this._extensions,
        this._isServer,
        maxPayload
      );

      this._sender = new sender$1(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;

      receiver[kWebSocket$2] = this;
      socket[kWebSocket$2] = this;

      receiver.on('conclude', receiverOnConclude$1);
      receiver.on('drain', receiverOnDrain$1);
      receiver.on('error', receiverOnError$1);
      receiver.on('message', receiverOnMessage$1);
      receiver.on('ping', receiverOnPing$1);
      receiver.on('pong', receiverOnPong$1);

      socket.setTimeout(0);
      socket.setNoDelay();

      if (head.length > 0) socket.unshift(head);

      socket.on('close', socketOnClose$1);
      socket.on('data', socketOnData$1);
      socket.on('end', socketOnEnd$1);
      socket.on('error', socketOnError$2);

      this.readyState = WebSocket$3.OPEN;
      this.emit('open');
    }

    /**
     * Emit the `'close'` event.
     *
     * @private
     */
    emitClose() {
      if (!this._socket) {
        this.readyState = WebSocket$3.CLOSED;
        this.emit('close', this._closeCode, this._closeMessage);
        return;
      }

      if (this._extensions[permessageDeflate$1.extensionName]) {
        this._extensions[permessageDeflate$1.extensionName].cleanup();
      }

      this._receiver.removeAllListeners();
      this.readyState = WebSocket$3.CLOSED;
      this.emit('close', this._closeCode, this._closeMessage);
    }

    /**
     * Start a closing handshake.
     *
     *          +----------+   +-----------+   +----------+
     *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
     *    |     +----------+   +-----------+   +----------+     |
     *          +----------+   +-----------+         |
     * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
     *          +----------+   +-----------+   |
     *    |           |                        |   +---+        |
     *                +------------------------+-->|fin| - - - -
     *    |         +---+                      |   +---+
     *     - - - - -|fin|<---------------------+
     *              +---+
     *
     * @param {Number} code Status code explaining why the connection is closing
     * @param {String} data A string explaining why the connection is closing
     * @public
     */
    close(code, data) {
      if (this.readyState === WebSocket$3.CLOSED) return;
      if (this.readyState === WebSocket$3.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake$2(this, this._req, msg);
      }

      if (this.readyState === WebSocket$3.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
        return;
      }

      this.readyState = WebSocket$3.CLOSING;
      this._sender.close(code, data, !this._isServer, (err) => {
        //
        // This error is handled by the `'error'` listener on the socket. We only
        // want to know if the close frame has been sent here.
        //
        if (err) return;

        this._closeFrameSent = true;
        if (this._closeFrameReceived) this._socket.end();
      });

      //
      // Specify a timeout for the closing handshake to complete.
      //
      this._closeTimer = setTimeout(
        this._socket.destroy.bind(this._socket),
        closeTimeout$1
      );
    }

    /**
     * Send a ping.
     *
     * @param {*} data The data to send
     * @param {Boolean} mask Indicates whether or not to mask `data`
     * @param {Function} cb Callback which is executed when the ping is sent
     * @public
     */
    ping(data, mask, cb) {
      if (this.readyState === WebSocket$3.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$3.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;
      this._sender.ping(data || EMPTY_BUFFER$2, mask, cb);
    }

    /**
     * Send a pong.
     *
     * @param {*} data The data to send
     * @param {Boolean} mask Indicates whether or not to mask `data`
     * @param {Function} cb Callback which is executed when the pong is sent
     * @public
     */
    pong(data, mask, cb) {
      if (this.readyState === WebSocket$3.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$3.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;
      this._sender.pong(data || EMPTY_BUFFER$2, mask, cb);
    }

    /**
     * Send a data message.
     *
     * @param {*} data The message to send
     * @param {Object} options Options object
     * @param {Boolean} options.compress Specifies whether or not to compress
     *     `data`
     * @param {Boolean} options.binary Specifies whether `data` is binary or text
     * @param {Boolean} options.fin Specifies whether the fragment is the last one
     * @param {Boolean} options.mask Specifies whether or not to mask `data`
     * @param {Function} cb Callback which is executed when data is written out
     * @public
     */
    send(data, options, cb) {
      if (this.readyState === WebSocket$3.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$3.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      const opts = {
        binary: typeof data !== 'string',
        mask: !this._isServer,
        compress: true,
        fin: true,
        ...options
      };

      if (!this._extensions[permessageDeflate$1.extensionName]) {
        opts.compress = false;
      }

      this._sender.send(data || EMPTY_BUFFER$2, opts, cb);
    }

    /**
     * Forcibly close the connection.
     *
     * @public
     */
    terminate() {
      if (this.readyState === WebSocket$3.CLOSED) return;
      if (this.readyState === WebSocket$3.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake$2(this, this._req, msg);
      }

      if (this._socket) {
        this.readyState = WebSocket$3.CLOSING;
        this._socket.destroy();
      }
    }
  }

  readyStates$1.forEach((readyState, i) => {
    WebSocket$3[readyState] = i;
  });

  //
  // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
  // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
  //
  ['open', 'error', 'close', 'message'].forEach((method) => {
    Object.defineProperty(WebSocket$3.prototype, `on${method}`, {
      /**
       * Return the listener of the event.
       *
       * @return {(Function|undefined)} The event listener or `undefined`
       * @public
       */
      get() {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) return listeners[i]._listener;
        }

        return undefined;
      },
      /**
       * Add a listener for the event.
       *
       * @param {Function} listener The listener to add
       * @public
       */
      set(listener) {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          //
          // Remove only the listeners added via `addEventListener`.
          //
          if (listeners[i]._listener) this.removeListener(method, listeners[i]);
        }
        this.addEventListener(method, listener);
      }
    });
  });

  WebSocket$3.prototype.addEventListener = addEventListener$1;
  WebSocket$3.prototype.removeEventListener = removeEventListener;

  var websocket$3 = WebSocket$3;

  /**
   * Initialize a WebSocket client.
   *
   * @param {WebSocket} websocket The client to initialize
   * @param {(String|url.URL)} address The URL to which to connect
   * @param {String} protocols The subprotocols
   * @param {Object} options Connection options
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable
   *     permessage-deflate
   * @param {Number} options.handshakeTimeout Timeout in milliseconds for the
   *     handshake request
   * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version`
   *     header
   * @param {String} options.origin Value of the `Origin` or
   *     `Sec-WebSocket-Origin` header
   * @param {Number} options.maxPayload The maximum allowed message size
   * @param {Boolean} options.followRedirects Whether or not to follow redirects
   * @param {Number} options.maxRedirects The maximum number of redirects allowed
   * @private
   */
  function initAsClient$1(websocket, address, protocols, options) {
    const opts = {
      protocolVersion: protocolVersions$1[1],
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      followRedirects: false,
      maxRedirects: 10,
      ...options,
      createConnection: undefined,
      socketPath: undefined,
      hostname: undefined,
      protocol: undefined,
      timeout: undefined,
      method: undefined,
      host: undefined,
      path: undefined,
      port: undefined
    };

    if (!protocolVersions$1.includes(opts.protocolVersion)) {
      throw new RangeError(
        `Unsupported protocol version: ${opts.protocolVersion} ` +
          `(supported versions: ${protocolVersions$1.join(', ')})`
      );
    }

    let parsedUrl;

    if (address instanceof URL$1) {
      parsedUrl = address;
      websocket.url = address.href;
    } else {
      parsedUrl = new URL$1(address);
      websocket.url = address;
    }

    const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${websocket.url}`);
    }

    const isSecure =
      parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
    const defaultPort = isSecure ? 443 : 80;
    const key = randomBytes(16).toString('base64');
    const get = isSecure ? https.get : http.get;
    let perMessageDeflate;

    opts.createConnection = isSecure ? tlsConnect$1 : netConnect$1;
    opts.defaultPort = opts.defaultPort || defaultPort;
    opts.port = parsedUrl.port || defaultPort;
    opts.host = parsedUrl.hostname.startsWith('[')
      ? parsedUrl.hostname.slice(1, -1)
      : parsedUrl.hostname;
    opts.headers = {
      'Sec-WebSocket-Version': opts.protocolVersion,
      'Sec-WebSocket-Key': key,
      Connection: 'Upgrade',
      Upgrade: 'websocket',
      ...opts.headers
    };
    opts.path = parsedUrl.pathname + parsedUrl.search;
    opts.timeout = opts.handshakeTimeout;

    if (opts.perMessageDeflate) {
      perMessageDeflate = new permessageDeflate$1(
        opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
        false,
        opts.maxPayload
      );
      opts.headers['Sec-WebSocket-Extensions'] = format$7({
        [permessageDeflate$1.extensionName]: perMessageDeflate.offer()
      });
    }
    if (protocols) {
      opts.headers['Sec-WebSocket-Protocol'] = protocols;
    }
    if (opts.origin) {
      if (opts.protocolVersion < 13) {
        opts.headers['Sec-WebSocket-Origin'] = opts.origin;
      } else {
        opts.headers.Origin = opts.origin;
      }
    }
    if (parsedUrl.username || parsedUrl.password) {
      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }

    if (isUnixSocket) {
      const parts = opts.path.split(':');

      opts.socketPath = parts[0];
      opts.path = parts[1];
    }

    let req = (websocket._req = get(opts));

    if (opts.timeout) {
      req.on('timeout', () => {
        abortHandshake$2(websocket, req, 'Opening handshake has timed out');
      });
    }

    req.on('error', (err) => {
      if (websocket._req.aborted) return;

      req = websocket._req = null;
      websocket.readyState = WebSocket$3.CLOSING;
      websocket.emit('error', err);
      websocket.emitClose();
    });

    req.on('response', (res) => {
      const location = res.headers.location;
      const statusCode = res.statusCode;

      if (
        location &&
        opts.followRedirects &&
        statusCode >= 300 &&
        statusCode < 400
      ) {
        if (++websocket._redirects > opts.maxRedirects) {
          abortHandshake$2(websocket, req, 'Maximum redirects exceeded');
          return;
        }

        req.abort();

        const addr = new URL$1(location, address);

        initAsClient$1(websocket, addr, protocols, options);
      } else if (!websocket.emit('unexpected-response', req, res)) {
        abortHandshake$2(
          websocket,
          req,
          `Unexpected server response: ${res.statusCode}`
        );
      }
    });

    req.on('upgrade', (res, socket, head) => {
      websocket.emit('upgrade', res);

      //
      // The user may have closed the connection from a listener of the `upgrade`
      // event.
      //
      if (websocket.readyState !== WebSocket$3.CONNECTING) return;

      req = websocket._req = null;

      const digest = createHash('sha1')
        .update(key + GUID)
        .digest('base64');

      if (res.headers['sec-websocket-accept'] !== digest) {
        abortHandshake$2(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
        return;
      }

      const serverProt = res.headers['sec-websocket-protocol'];
      const protList = (protocols || '').split(/, */);
      let protError;

      if (!protocols && serverProt) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (protocols && !serverProt) {
        protError = 'Server sent no subprotocol';
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }

      if (protError) {
        abortHandshake$2(websocket, socket, protError);
        return;
      }

      if (serverProt) websocket.protocol = serverProt;

      if (perMessageDeflate) {
        try {
          const extensions = parse$l(res.headers['sec-websocket-extensions']);

          if (extensions[permessageDeflate$1.extensionName]) {
            perMessageDeflate.accept(extensions[permessageDeflate$1.extensionName]);
            websocket._extensions[
              permessageDeflate$1.extensionName
            ] = perMessageDeflate;
          }
        } catch (err) {
          abortHandshake$2(
            websocket,
            socket,
            'Invalid Sec-WebSocket-Extensions header'
          );
          return;
        }
      }

      websocket.setSocket(socket, head, opts.maxPayload);
    });
  }

  /**
   * Create a `net.Socket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {net.Socket} The newly created socket used to start the connection
   * @private
   */
  function netConnect$1(options) {
    options.path = options.socketPath;
    return net.connect(options);
  }

  /**
   * Create a `tls.TLSSocket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {tls.TLSSocket} The newly created socket used to start the connection
   * @private
   */
  function tlsConnect$1(options) {
    options.path = undefined;

    if (!options.servername && options.servername !== '') {
      options.servername = options.host;
    }

    return tls$1.connect(options);
  }

  /**
   * Abort the handshake and emit an error.
   *
   * @param {WebSocket} websocket The WebSocket instance
   * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the
   *     socket to destroy
   * @param {String} message The error message
   * @private
   */
  function abortHandshake$2(websocket, stream, message) {
    websocket.readyState = WebSocket$3.CLOSING;

    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake$2);

    if (stream.setHeader) {
      stream.abort();
      stream.once('abort', websocket.emitClose.bind(websocket));
      websocket.emit('error', err);
    } else {
      stream.destroy(err);
      stream.once('error', websocket.emit.bind(websocket, 'error'));
      stream.once('close', websocket.emitClose.bind(websocket));
    }
  }

  /**
   * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
   * when the `readyState` attribute is `CLOSING` or `CLOSED`.
   *
   * @param {WebSocket} websocket The WebSocket instance
   * @param {*} data The data to send
   * @param {Function} cb Callback
   * @private
   */
  function sendAfterClose(websocket, data, cb) {
    if (data) {
      const length = toBuffer$2(data).length;

      //
      // The `_bufferedAmount` property is used only when the peer is a client and
      // the opening handshake fails. Under these circumstances, in fact, the
      // `setSocket()` method is not called, so the `_socket` and `_sender`
      // properties are set to `null`.
      //
      if (websocket._socket) websocket._sender._bufferedBytes += length;
      else websocket._bufferedAmount += length;
    }

    if (cb) {
      const err = new Error(
        `WebSocket is not open: readyState ${websocket.readyState} ` +
          `(${readyStates$1[websocket.readyState]})`
      );
      cb(err);
    }
  }

  /**
   * The listener of the `Receiver` `'conclude'` event.
   *
   * @param {Number} code The status code
   * @param {String} reason The reason for closing
   * @private
   */
  function receiverOnConclude$1(code, reason) {
    const websocket = this[kWebSocket$2];

    websocket._socket.removeListener('data', socketOnData$1);
    websocket._socket.resume();

    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;

    if (code === 1005) websocket.close();
    else websocket.close(code, reason);
  }

  /**
   * The listener of the `Receiver` `'drain'` event.
   *
   * @private
   */
  function receiverOnDrain$1() {
    this[kWebSocket$2]._socket.resume();
  }

  /**
   * The listener of the `Receiver` `'error'` event.
   *
   * @param {(RangeError|Error)} err The emitted error
   * @private
   */
  function receiverOnError$1(err) {
    const websocket = this[kWebSocket$2];

    websocket._socket.removeListener('data', socketOnData$1);

    websocket.readyState = WebSocket$3.CLOSING;
    websocket._closeCode = err[kStatusCode$3];
    websocket.emit('error', err);
    websocket._socket.destroy();
  }

  /**
   * The listener of the `Receiver` `'finish'` event.
   *
   * @private
   */
  function receiverOnFinish$1() {
    this[kWebSocket$2].emitClose();
  }

  /**
   * The listener of the `Receiver` `'message'` event.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
   * @private
   */
  function receiverOnMessage$1(data) {
    this[kWebSocket$2].emit('message', data);
  }

  /**
   * The listener of the `Receiver` `'ping'` event.
   *
   * @param {Buffer} data The data included in the ping frame
   * @private
   */
  function receiverOnPing$1(data) {
    const websocket = this[kWebSocket$2];

    websocket.pong(data, !websocket._isServer, NOOP$2);
    websocket.emit('ping', data);
  }

  /**
   * The listener of the `Receiver` `'pong'` event.
   *
   * @param {Buffer} data The data included in the pong frame
   * @private
   */
  function receiverOnPong$1(data) {
    this[kWebSocket$2].emit('pong', data);
  }

  /**
   * The listener of the `net.Socket` `'close'` event.
   *
   * @private
   */
  function socketOnClose$1() {
    const websocket = this[kWebSocket$2];

    this.removeListener('close', socketOnClose$1);
    this.removeListener('end', socketOnEnd$1);

    websocket.readyState = WebSocket$3.CLOSING;

    //
    // The close frame might not have been received or the `'end'` event emitted,
    // for example, if the socket was destroyed due to an error. Ensure that the
    // `receiver` stream is closed after writing any remaining buffered data to
    // it. If the readable side of the socket is in flowing mode then there is no
    // buffered data as everything has been already written and `readable.read()`
    // will return `null`. If instead, the socket is paused, any possible buffered
    // data will be read as a single chunk and emitted synchronously in a single
    // `'data'` event.
    //
    websocket._socket.read();
    websocket._receiver.end();

    this.removeListener('data', socketOnData$1);
    this[kWebSocket$2] = undefined;

    clearTimeout(websocket._closeTimer);

    if (
      websocket._receiver._writableState.finished ||
      websocket._receiver._writableState.errorEmitted
    ) {
      websocket.emitClose();
    } else {
      websocket._receiver.on('error', receiverOnFinish$1);
      websocket._receiver.on('finish', receiverOnFinish$1);
    }
  }

  /**
   * The listener of the `net.Socket` `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function socketOnData$1(chunk) {
    if (!this[kWebSocket$2]._receiver.write(chunk)) {
      this.pause();
    }
  }

  /**
   * The listener of the `net.Socket` `'end'` event.
   *
   * @private
   */
  function socketOnEnd$1() {
    const websocket = this[kWebSocket$2];

    websocket.readyState = WebSocket$3.CLOSING;
    websocket._receiver.end();
    this.end();
  }

  /**
   * The listener of the `net.Socket` `'error'` event.
   *
   * @private
   */
  function socketOnError$2() {
    const websocket = this[kWebSocket$2];

    this.removeListener('error', socketOnError$2);
    this.on('error', NOOP$2);

    if (websocket) {
      websocket.readyState = WebSocket$3.CLOSING;
      this.destroy();
    }
  }

  const { Duplex } = stream$1;

  /**
   * Emits the `'close'` event on a stream.
   *
   * @param {stream.Duplex} The stream.
   * @private
   */
  function emitClose$1(stream) {
    stream.emit('close');
  }

  /**
   * The listener of the `'end'` event.
   *
   * @private
   */
  function duplexOnEnd() {
    if (!this.destroyed && this._writableState.finished) {
      this.destroy();
    }
  }

  /**
   * The listener of the `'error'` event.
   *
   * @private
   */
  function duplexOnError(err) {
    this.removeListener('error', duplexOnError);
    this.destroy();
    if (this.listenerCount('error') === 0) {
      // Do not suppress the throwing behavior.
      this.emit('error', err);
    }
  }

  /**
   * Wraps a `WebSocket` in a duplex stream.
   *
   * @param {WebSocket} ws The `WebSocket` to wrap
   * @param {Object} options The options for the `Duplex` constructor
   * @return {stream.Duplex} The duplex stream
   * @public
   */
  function createWebSocketStream(ws, options) {
    let resumeOnReceiverDrain = true;

    function receiverOnDrain() {
      if (resumeOnReceiverDrain) ws._socket.resume();
    }

    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        ws._receiver.removeAllListeners('drain');
        ws._receiver.on('drain', receiverOnDrain);
      });
    } else {
      ws._receiver.removeAllListeners('drain');
      ws._receiver.on('drain', receiverOnDrain);
    }

    const duplex = new Duplex({
      ...options,
      autoDestroy: false,
      emitClose: false,
      objectMode: false,
      writableObjectMode: false
    });

    ws.on('message', function message(msg) {
      if (!duplex.push(msg)) {
        resumeOnReceiverDrain = false;
        ws._socket.pause();
      }
    });

    ws.once('error', function error(err) {
      if (duplex.destroyed) return;

      duplex.destroy(err);
    });

    ws.once('close', function close() {
      if (duplex.destroyed) return;

      duplex.push(null);
    });

    duplex._destroy = function (err, callback) {
      if (ws.readyState === ws.CLOSED) {
        callback(err);
        process.nextTick(emitClose$1, duplex);
        return;
      }

      let called = false;

      ws.once('error', function error(err) {
        called = true;
        callback(err);
      });

      ws.once('close', function close() {
        if (!called) callback(err);
        process.nextTick(emitClose$1, duplex);
      });
      ws.terminate();
    };

    duplex._final = function (callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._final(callback);
        });
        return;
      }

      // If the value of the `_socket` property is `null` it means that `ws` is a
      // client websocket and the handshake failed. In fact, when this happens, a
      // socket is never assigned to the websocket. Wait for the `'error'` event
      // that will be emitted by the websocket.
      if (ws._socket === null) return;

      if (ws._socket._writableState.finished) {
        callback();
        if (duplex._readableState.endEmitted) duplex.destroy();
      } else {
        ws._socket.once('finish', function finish() {
          // `duplex` is not destroyed here because the `'end'` event will be
          // emitted on `duplex` after this `'finish'` event. The EOF signaling
          // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
          callback();
        });
        ws.close();
      }
    };

    duplex._read = function () {
      if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
        resumeOnReceiverDrain = true;
        if (!ws._receiver._writableState.needDrain) ws._socket.resume();
      }
    };

    duplex._write = function (chunk, encoding, callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._write(chunk, encoding, callback);
        });
        return;
      }

      ws.send(chunk, callback);
    };

    duplex.on('end', duplexOnEnd);
    duplex.on('error', duplexOnError);
    return duplex;
  }

  var stream = createWebSocketStream;

  const { createHash: createHash$1 } = crypto;
  const { createServer, STATUS_CODES } = http;



  const { format: format$8, parse: parse$m } = extension$1;
  const { GUID: GUID$1, kWebSocket: kWebSocket$3 } = constants$1;

  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

  /**
   * Class representing a WebSocket server.
   *
   * @extends EventEmitter
   */
  class WebSocketServer$1 extends events {
    /**
     * Create a `WebSocketServer` instance.
     *
     * @param {Object} options Configuration options
     * @param {Number} options.backlog The maximum length of the queue of pending
     *     connections
     * @param {Boolean} options.clientTracking Specifies whether or not to track
     *     clients
     * @param {Function} options.handleProtocols A hook to handle protocols
     * @param {String} options.host The hostname where to bind the server
     * @param {Number} options.maxPayload The maximum allowed message size
     * @param {Boolean} options.noServer Enable no server mode
     * @param {String} options.path Accept only connections matching this path
     * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable
     *     permessage-deflate
     * @param {Number} options.port The port where to bind the server
     * @param {http.Server} options.server A pre-created HTTP/S server to use
     * @param {Function} options.verifyClient A hook to reject connections
     * @param {Function} callback A listener for the `listening` event
     */
    constructor(options, callback) {
      super();

      options = {
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null, // use default (511 as implemented in net.js)
        server: null,
        host: null,
        path: null,
        port: null,
        ...options
      };

      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError(
          'One of the "port", "server", or "noServer" options must be specified'
        );
      }

      if (options.port != null) {
        this._server = createServer((req, res) => {
          const body = STATUS_CODES[426];

          res.writeHead(426, {
            'Content-Length': body.length,
            'Content-Type': 'text/plain'
          });
          res.end(body);
        });
        this._server.listen(
          options.port,
          options.host,
          options.backlog,
          callback
        );
      } else if (options.server) {
        this._server = options.server;
      }

      if (this._server) {
        this._removeListeners = addListeners$1(this._server, {
          listening: this.emit.bind(this, 'listening'),
          error: this.emit.bind(this, 'error'),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, (ws) => {
              this.emit('connection', ws, req);
            });
          }
        });
      }

      if (options.perMessageDeflate === true) options.perMessageDeflate = {};
      if (options.clientTracking) this.clients = new Set();
      this.options = options;
    }

    /**
     * Returns the bound address, the address family name, and port of the server
     * as reported by the operating system if listening on an IP socket.
     * If the server is listening on a pipe or UNIX domain socket, the name is
     * returned as a string.
     *
     * @return {(Object|String|null)} The address of the server
     * @public
     */
    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }

      if (!this._server) return null;
      return this._server.address();
    }

    /**
     * Close the server.
     *
     * @param {Function} cb Callback
     * @public
     */
    close(cb) {
      if (cb) this.once('close', cb);

      //
      // Terminate all associated clients.
      //
      if (this.clients) {
        for (const client of this.clients) client.terminate();
      }

      const server = this._server;

      if (server) {
        this._removeListeners();
        this._removeListeners = this._server = null;

        //
        // Close the http server if it was internally created.
        //
        if (this.options.port != null) {
          server.close(() => this.emit('close'));
          return;
        }
      }

      process.nextTick(emitClose$2, this);
    }

    /**
     * See if a given request should be handled by this server instance.
     *
     * @param {http.IncomingMessage} req Request object to inspect
     * @return {Boolean} `true` if the request is valid, else `false`
     * @public
     */
    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf('?');
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

        if (pathname !== this.options.path) return false;
      }

      return true;
    }

    /**
     * Handle a HTTP Upgrade request.
     *
     * @param {http.IncomingMessage} req The request object
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @public
     */
    handleUpgrade(req, socket, head, cb) {
      socket.on('error', socketOnError$3);

      const key =
        req.headers['sec-websocket-key'] !== undefined
          ? req.headers['sec-websocket-key'].trim()
          : false;
      const version = +req.headers['sec-websocket-version'];
      const extensions = {};

      if (
        req.method !== 'GET' ||
        req.headers.upgrade.toLowerCase() !== 'websocket' ||
        !key ||
        !keyRegex.test(key) ||
        (version !== 8 && version !== 13) ||
        !this.shouldHandle(req)
      ) {
        return abortHandshake$3(socket, 400);
      }

      if (this.options.perMessageDeflate) {
        const perMessageDeflate = new permessageDeflate$1(
          this.options.perMessageDeflate,
          true,
          this.options.maxPayload
        );

        try {
          const offers = parse$m(req.headers['sec-websocket-extensions']);

          if (offers[permessageDeflate$1.extensionName]) {
            perMessageDeflate.accept(offers[permessageDeflate$1.extensionName]);
            extensions[permessageDeflate$1.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          return abortHandshake$3(socket, 400);
        }
      }

      //
      // Optionally call external client verification handler.
      //
      if (this.options.verifyClient) {
        const info = {
          origin:
            req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
          secure: !!(req.connection.authorized || req.connection.encrypted),
          req
        };

        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake$3(socket, code || 401, message, headers);
            }

            this.completeUpgrade(key, extensions, req, socket, head, cb);
          });
          return;
        }

        if (!this.options.verifyClient(info)) return abortHandshake$3(socket, 401);
      }

      this.completeUpgrade(key, extensions, req, socket, head, cb);
    }

    /**
     * Upgrade the connection to WebSocket.
     *
     * @param {String} key The value of the `Sec-WebSocket-Key` header
     * @param {Object} extensions The accepted extensions
     * @param {http.IncomingMessage} req The request object
     * @param {net.Socket} socket The network socket between the server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @throws {Error} If called more than once with the same socket
     * @private
     */
    completeUpgrade(key, extensions, req, socket, head, cb) {
      //
      // Destroy the socket if the client has already sent a FIN packet.
      //
      if (!socket.readable || !socket.writable) return socket.destroy();

      if (socket[kWebSocket$3]) {
        throw new Error(
          'server.handleUpgrade() was called more than once with the same ' +
            'socket, possibly due to a misconfiguration'
        );
      }

      const digest = createHash$1('sha1')
        .update(key + GUID$1)
        .digest('base64');

      const headers = [
        'HTTP/1.1 101 Switching Protocols',
        'Upgrade: websocket',
        'Connection: Upgrade',
        `Sec-WebSocket-Accept: ${digest}`
      ];

      const ws = new websocket$3(null);
      let protocol = req.headers['sec-websocket-protocol'];

      if (protocol) {
        protocol = protocol.trim().split(/ *, */);

        //
        // Optionally call external protocol selection handler.
        //
        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }

        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws.protocol = protocol;
        }
      }

      if (extensions[permessageDeflate$1.extensionName]) {
        const params = extensions[permessageDeflate$1.extensionName].params;
        const value = format$8({
          [permessageDeflate$1.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }

      //
      // Allow external modification/inspection of handshake headers.
      //
      this.emit('headers', headers, req);

      socket.write(headers.concat('\r\n').join('\r\n'));
      socket.removeListener('error', socketOnError$3);

      ws.setSocket(socket, head, this.options.maxPayload);

      if (this.clients) {
        this.clients.add(ws);
        ws.on('close', () => this.clients.delete(ws));
      }

      cb(ws);
    }
  }

  var websocketServer$1 = WebSocketServer$1;

  /**
   * Add event listeners on an `EventEmitter` using a map of <event, listener>
   * pairs.
   *
   * @param {EventEmitter} server The event emitter
   * @param {Object.<String, Function>} map The listeners to add
   * @return {Function} A function that will remove the added listeners when called
   * @private
   */
  function addListeners$1(server, map) {
    for (const event of Object.keys(map)) server.on(event, map[event]);

    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }

  /**
   * Emit a `'close'` event on an `EventEmitter`.
   *
   * @param {EventEmitter} server The event emitter
   * @private
   */
  function emitClose$2(server) {
    server.emit('close');
  }

  /**
   * Handle premature socket errors.
   *
   * @private
   */
  function socketOnError$3() {
    this.destroy();
  }

  /**
   * Close the connection when preconditions are not fulfilled.
   *
   * @param {net.Socket} socket The socket of the upgrade request
   * @param {Number} code The HTTP response status code
   * @param {String} [message] The HTTP response body
   * @param {Object} [headers] Additional HTTP response headers
   * @private
   */
  function abortHandshake$3(socket, code, message, headers) {
    if (socket.writable) {
      message = message || STATUS_CODES[code];
      headers = {
        Connection: 'close',
        'Content-Type': 'text/html',
        'Content-Length': Buffer.byteLength(message),
        ...headers
      };

      socket.write(
        `HTTP/1.1 ${code} ${STATUS_CODES[code]}\r\n` +
          Object.keys(headers)
            .map((h) => `${h}: ${headers[h]}`)
            .join('\r\n') +
          '\r\n\r\n' +
          message
      );
    }

    socket.removeListener('error', socketOnError$3);
    socket.destroy();
  }

  websocket$3.createWebSocketStream = stream;
  websocket$3.Server = websocketServer$1;
  websocket$3.Receiver = receiver$1;
  websocket$3.Sender = sender$1;

  var ws$1 = websocket$3;

  /**
   * Module dependencies.
   */


  var parse$n = url$1.parse;


  var EventEmitter$2 = events.EventEmitter;


  var debug$o = src('engine');


  /**
   * Module exports.
   */

  var server = Server;

  /**
   * Server constructor.
   *
   * @param {Object} options
   * @api public
   */

  function Server (opts) {
    if (!(this instanceof Server)) {
      return new Server(opts);
    }

    this.clients = {};
    this.clientsCount = 0;

    opts = opts || {};

    this.wsEngine = opts.wsEngine || process.env.EIO_WS_ENGINE || 'ws';
    this.pingTimeout = opts.pingTimeout || 5000;
    this.pingInterval = opts.pingInterval || 25000;
    this.upgradeTimeout = opts.upgradeTimeout || 10000;
    this.maxHttpBufferSize = opts.maxHttpBufferSize || 10E7;
    this.transports = opts.transports || Object.keys(transports$1);
    this.allowUpgrades = false !== opts.allowUpgrades;
    this.allowRequest = opts.allowRequest;
    this.cookie = false !== opts.cookie ? (opts.cookie || 'io') : false;
    this.cookiePath = false !== opts.cookiePath ? (opts.cookiePath || '/') : false;
    this.cookieHttpOnly = false !== opts.cookieHttpOnly;
    this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || true) : false;
    this.httpCompression = false !== opts.httpCompression ? (opts.httpCompression || {}) : false;
    this.initialPacket = opts.initialPacket;

    var self = this;

    // initialize compression options
    ['perMessageDeflate', 'httpCompression'].forEach(function (type) {
      var compression = self[type];
      if (true === compression) self[type] = compression = {};
      if (compression && null == compression.threshold) {
        compression.threshold = 1024;
      }
    });

    this.init();
  }

  /**
   * Protocol errors mappings.
   */

  Server.errors = {
    UNKNOWN_TRANSPORT: 0,
    UNKNOWN_SID: 1,
    BAD_HANDSHAKE_METHOD: 2,
    BAD_REQUEST: 3,
    FORBIDDEN: 4
  };

  Server.errorMessages = {
    0: 'Transport unknown',
    1: 'Session ID unknown',
    2: 'Bad handshake method',
    3: 'Bad request',
    4: 'Forbidden'
  };

  /**
   * Inherits from EventEmitter.
   */

  util$2.inherits(Server, EventEmitter$2);

  /**
   * Initialize websocket server
   *
   * @api private
   */

  Server.prototype.init = function () {
    if (!~this.transports.indexOf('websocket')) return;

    if (this.ws) this.ws.close();

    // add explicit require for bundlers like webpack
    var wsModule = this.wsEngine === 'ws' ? ws$1 : require(this.wsEngine);
    this.ws = new wsModule.Server({
      noServer: true,
      clientTracking: false,
      perMessageDeflate: this.perMessageDeflate,
      maxPayload: this.maxHttpBufferSize
    });
  };

  /**
   * Returns a list of available transports for upgrade given a certain transport.
   *
   * @return {Array}
   * @api public
   */

  Server.prototype.upgrades = function (transport) {
    if (!this.allowUpgrades) return [];
    return transports$1[transport].upgradesTo || [];
  };

  /**
   * Verifies a request.
   *
   * @param {http.IncomingMessage}
   * @return {Boolean} whether the request is valid
   * @api private
   */

  Server.prototype.verify = function (req, upgrade, fn) {
    // transport check
    var transport = req._query.transport;
    if (!~this.transports.indexOf(transport)) {
      debug$o('unknown transport "%s"', transport);
      return fn(Server.errors.UNKNOWN_TRANSPORT, false);
    }

    // 'Origin' header check
    var isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);
    if (isOriginInvalid) {
      req.headers.origin = null;
      debug$o('origin header invalid');
      return fn(Server.errors.BAD_REQUEST, false);
    }

    // sid check
    var sid = req._query.sid;
    if (sid) {
      if (!this.clients.hasOwnProperty(sid)) {
        debug$o('unknown sid "%s"', sid);
        return fn(Server.errors.UNKNOWN_SID, false);
      }
      if (!upgrade && this.clients[sid].transport.name !== transport) {
        debug$o('bad request: unexpected transport without upgrade');
        return fn(Server.errors.BAD_REQUEST, false);
      }
    } else {
      // handshake is GET only
      if ('GET' !== req.method) return fn(Server.errors.BAD_HANDSHAKE_METHOD, false);
      if (!this.allowRequest) return fn(null, true);
      return this.allowRequest(req, fn);
    }

    fn(null, true);
  };

  /**
   * Prepares a request by processing the query string.
   *
   * @api private
   */

  Server.prototype.prepare = function (req) {
    // try to leverage pre-existing `req._query` (e.g: from connect)
    if (!req._query) {
      req._query = ~req.url.indexOf('?') ? querystring.parse(parse$n(req.url).query) : {};
    }
  };

  /**
   * Closes all clients.
   *
   * @api public
   */

  Server.prototype.close = function () {
    debug$o('closing all open clients');
    for (var i in this.clients) {
      if (this.clients.hasOwnProperty(i)) {
        this.clients[i].close(true);
      }
    }
    if (this.ws) {
      debug$o('closing webSocketServer');
      this.ws.close();
      // don't delete this.ws because it can be used again if the http server starts listening again
    }
    return this;
  };

  /**
   * Handles an Engine.IO HTTP request.
   *
   * @param {http.IncomingMessage} request
   * @param {http.ServerResponse|http.OutgoingMessage} response
   * @api public
   */

  Server.prototype.handleRequest = function (req, res) {
    debug$o('handling "%s" http request "%s"', req.method, req.url);
    this.prepare(req);
    req.res = res;

    var self = this;
    this.verify(req, false, function (err, success) {
      if (!success) {
        sendErrorMessage(req, res, err);
        return;
      }

      if (req._query.sid) {
        debug$o('setting new request for existing client');
        self.clients[req._query.sid].transport.onRequest(req);
      } else {
        self.handshake(req._query.transport, req);
      }
    });
  };

  /**
   * Sends an Engine.IO Error Message
   *
   * @param {http.ServerResponse} response
   * @param {code} error code
   * @api private
   */

  function sendErrorMessage (req, res, code) {
    var headers = { 'Content-Type': 'application/json' };

    var isForbidden = !Server.errorMessages.hasOwnProperty(code);
    if (isForbidden) {
      res.writeHead(403, headers);
      res.end(JSON.stringify({
        code: Server.errors.FORBIDDEN,
        message: code || Server.errorMessages[Server.errors.FORBIDDEN]
      }));
      return;
    }
    if (req.headers.origin) {
      headers['Access-Control-Allow-Credentials'] = 'true';
      headers['Access-Control-Allow-Origin'] = req.headers.origin;
    } else {
      headers['Access-Control-Allow-Origin'] = '*';
    }
    if (res !== undefined) {
      res.writeHead(400, headers);
      res.end(JSON.stringify({
        code: code,
        message: Server.errorMessages[code]
      }));
    }
  }

  /**
   * generate a socket id.
   * Overwrite this method to generate your custom socket id
   *
   * @param {Object} request object
   * @api public
   */

  Server.prototype.generateId = function (req) {
    return base64id.generateId();
  };

  /**
   * Handshakes a new client.
   *
   * @param {String} transport name
   * @param {Object} request object
   * @api private
   */

  Server.prototype.handshake = function (transportName, req) {
    var id = this.generateId(req);

    debug$o('handshaking client "%s"', id);

    try {
      var transport = new transports$1[transportName](req);
      if ('polling' === transportName) {
        transport.maxHttpBufferSize = this.maxHttpBufferSize;
        transport.httpCompression = this.httpCompression;
      } else if ('websocket' === transportName) {
        transport.perMessageDeflate = this.perMessageDeflate;
      }

      if (req._query && req._query.b64) {
        transport.supportsBinary = false;
      } else {
        transport.supportsBinary = true;
      }
    } catch (e) {
      debug$o('error handshaking to transport "%s"', transportName);
      sendErrorMessage(req, req.res, Server.errors.BAD_REQUEST);
      return;
    }
    var socket = new socket$2(id, this, transport, req);
    var self = this;

    if (false !== this.cookie) {
      transport.on('headers', function (headers) {
        headers['Set-Cookie'] = cookie$1.serialize(self.cookie, id,
          {
            path: self.cookiePath,
            httpOnly: self.cookiePath ? self.cookieHttpOnly : false,
            sameSite: true
          });
      });
    }

    transport.onRequest(req);

    this.clients[id] = socket;
    this.clientsCount++;

    socket.once('close', function () {
      delete self.clients[id];
      self.clientsCount--;
    });

    this.emit('connection', socket);
  };

  /**
   * Handles an Engine.IO HTTP Upgrade.
   *
   * @api public
   */

  Server.prototype.handleUpgrade = function (req, socket, upgradeHead) {
    this.prepare(req);

    var self = this;
    this.verify(req, true, function (err, success) {
      if (!success) {
        abortConnection(socket, err);
        return;
      }

      var head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api
      upgradeHead = null;

      // delegate to ws
      self.ws.handleUpgrade(req, socket, head, function (conn) {
        self.onWebSocket(req, conn);
      });
    });
  };

  /**
   * Called upon a ws.io connection.
   *
   * @param {ws.Socket} websocket
   * @api private
   */

  Server.prototype.onWebSocket = function (req, socket) {
    socket.on('error', onUpgradeError);

    if (transports$1[req._query.transport] !== undefined && !transports$1[req._query.transport].prototype.handlesUpgrades) {
      debug$o('transport doesnt handle upgraded requests');
      socket.close();
      return;
    }

    // get client id
    var id = req._query.sid;

    // keep a reference to the ws.Socket
    req.websocket = socket;

    if (id) {
      var client = this.clients[id];
      if (!client) {
        debug$o('upgrade attempt for closed client');
        socket.close();
      } else if (client.upgrading) {
        debug$o('transport has already been trying to upgrade');
        socket.close();
      } else if (client.upgraded) {
        debug$o('transport had already been upgraded');
        socket.close();
      } else {
        debug$o('upgrading existing transport');

        // transport error handling takes over
        socket.removeListener('error', onUpgradeError);

        var transport = new transports$1[req._query.transport](req);
        if (req._query && req._query.b64) {
          transport.supportsBinary = false;
        } else {
          transport.supportsBinary = true;
        }
        transport.perMessageDeflate = this.perMessageDeflate;
        client.maybeUpgrade(transport);
      }
    } else {
      // transport error handling takes over
      socket.removeListener('error', onUpgradeError);

      this.handshake(req._query.transport, req);
    }

    function onUpgradeError () {
      debug$o('websocket error before upgrade');
      // socket.close() not needed
    }
  };

  /**
   * Captures upgrade requests for a http.Server.
   *
   * @param {http.Server} server
   * @param {Object} options
   * @api public
   */

  Server.prototype.attach = function (server, options) {
    var self = this;
    options = options || {};
    var path = (options.path || '/engine.io').replace(/\/$/, '');

    var destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;

    // normalize path
    path += '/';

    function check (req) {
      if ('OPTIONS' === req.method && false === options.handlePreflightRequest) {
        return false;
      }
      return path === req.url.substr(0, path.length);
    }

    // cache and clean up listeners
    var listeners = server.listeners('request').slice(0);
    server.removeAllListeners('request');
    server.on('close', self.close.bind(self));
    server.on('listening', self.init.bind(self));

    // add request handler
    server.on('request', function (req, res) {
      if (check(req)) {
        debug$o('intercepting request for path "%s"', path);
        if ('OPTIONS' === req.method && 'function' === typeof options.handlePreflightRequest) {
          options.handlePreflightRequest.call(server, req, res);
        } else {
          self.handleRequest(req, res);
        }
      } else {
        for (var i = 0, l = listeners.length; i < l; i++) {
          listeners[i].call(server, req, res);
        }
      }
    });

    if (~self.transports.indexOf('websocket')) {
      server.on('upgrade', function (req, socket, head) {
        if (check(req)) {
          self.handleUpgrade(req, socket, head);
        } else if (false !== options.destroyUpgrade) {
          // default node behavior is to disconnect when no handlers
          // but by adding a handler, we prevent that
          // and if no eio thing handles the upgrade
          // then the socket needs to die!
          setTimeout(function () {
            if (socket.writable && socket.bytesWritten <= 0) {
              return socket.end();
            }
          }, destroyUpgradeTimeout);
        }
      });
    }
  };

  /**
   * Closes the connection
   *
   * @param {net.Socket} socket
   * @param {code} error code
   * @api private
   */

  function abortConnection (socket, code) {
    socket.on('error', () => {
      debug$o('ignoring error from closed connection');
    });
    if (socket.writable) {
      var message = Server.errorMessages.hasOwnProperty(code) ? Server.errorMessages[code] : String(code || '');
      var length = Buffer.byteLength(message);
      socket.write(
        'HTTP/1.1 400 Bad Request\r\n' +
        'Connection: close\r\n' +
        'Content-type: text/html\r\n' +
        'Content-Length: ' + length + '\r\n' +
        '\r\n' +
        message
      );
    }
    socket.destroy();
  }

  /* eslint-disable */

  /**
   * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354
   *
   * True if val contains an invalid field-vchar
   *  field-value    = *( field-content / obs-fold )
   *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
   *  field-vchar    = VCHAR / obs-text
   *
   * checkInvalidHeaderChar() is currently designed to be inlinable by v8,
   * so take care when making changes to the implementation so that the source
   * code size does not exceed v8's default max_inlined_source_size setting.
   **/
  var validHdrChars = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, // 0 - 15
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32 - 47
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 48 - 63
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 80 - 95
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 112 - 127
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 128 ...
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // ... 255
  ];

  function checkInvalidHeaderChar(val) {
    val += '';
    if (val.length < 1)
      return false;
    if (!validHdrChars[val.charCodeAt(0)]) {
      debug$o('invalid header, index 0, char "%s"', val.charCodeAt(0));
      return true;
    }
    if (val.length < 2)
      return false;
    if (!validHdrChars[val.charCodeAt(1)]) {
      debug$o('invalid header, index 1, char "%s"', val.charCodeAt(1));
      return true;
    }
    if (val.length < 3)
      return false;
    if (!validHdrChars[val.charCodeAt(2)]) {
      debug$o('invalid header, index 2, char "%s"', val.charCodeAt(2));
      return true;
    }
    if (val.length < 4)
      return false;
    if (!validHdrChars[val.charCodeAt(3)]) {
      debug$o('invalid header, index 3, char "%s"', val.charCodeAt(3));
      return true;
    }
    for (var i = 4; i < val.length; ++i) {
      if (!validHdrChars[val.charCodeAt(i)]) {
        debug$o('invalid header, index "%i", char "%s"', i, val.charCodeAt(i));
        return true;
      }
    }
    return false;
  }

  var engine_io = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */



  /**
   * Invoking the library as a function delegates to attach if the first argument
   * is an `http.Server`.
   *
   * If there are no arguments or the first argument is an options object, then
   * a new Server instance is returned.
   *
   * @param {http.Server} server (if specified, will be attached to by the new Server instance)
   * @param {Object} options
   * @return {Server} engine server
   * @api public
   */

  exports = module.exports = function () {
    // backwards compatible use as `.attach`
    // if first argument is an http server
    if (arguments.length && arguments[0] instanceof http.Server) {
      return attach.apply(this, arguments);
    }

    // if first argument is not an http server, then just make a regular eio server
    return exports.Server.apply(null, arguments);
  };

  /**
   * Protocol revision number.
   *
   * @api public
   */

  exports.protocol = 1;

  /**
   * Expose Server constructor.
   *
   * @api public
   */

  exports.Server = server;

  /**
   * Expose Socket constructor.
   *
   * @api public
   */

  exports.Socket = socket$2;

  /**
   * Expose Transport constructor.
   *
   * @api public
   */

  exports.Transport = transport$1;

  /**
   * Expose mutable list of available transports.
   *
   * @api public
   */

  exports.transports = transports$1;

  /**
   * Exports parser.
   *
   * @api public
   */

  exports.parser = lib;

  /**
   * Creates an http.Server exclusively used for WS upgrades.
   *
   * @param {Number} port
   * @param {Function} callback
   * @param {Object} options
   * @return {Server} websocket.io server
   * @api public
   */

  exports.listen = listen;

  function listen (port, options, fn) {
    if ('function' === typeof options) {
      fn = options;
      options = {};
    }

    var server = http.createServer(function (req, res) {
      res.writeHead(501);
      res.end('Not Implemented');
    });

    // create engine server
    var engine = exports.attach(server, options);
    engine.httpServer = server;

    server.listen(port, fn);

    return engine;
  }

  /**
   * Captures upgrade requests for a http.Server.
   *
   * @param {http.Server} server
   * @param {Object} options
   * @return {Server} engine server
   * @api public
   */

  exports.attach = attach;

  function attach (server, options) {
    var engine = new exports.Server(options);
    engine.attach(server, options);
    return engine;
  }
  });
  var engine_io_1 = engine_io.protocol;
  var engine_io_2 = engine_io.Server;
  var engine_io_3 = engine_io.Socket;
  var engine_io_4 = engine_io.Transport;
  var engine_io_5 = engine_io.transports;
  var engine_io_6 = engine_io.parser;
  var engine_io_7 = engine_io.listen;
  var engine_io_8 = engine_io.attach;

  var _from = "socket.io-client@^2.3.0";
  var _id = "socket.io-client@2.3.0";
  var _inBundle = false;
  var _integrity = "sha512-cEQQf24gET3rfhxZ2jJ5xzAOo/xhZwK+mOqtGRg5IowZsMgwvHwnf/mCRapAAkadhM26y+iydgwsXGObBB5ZdA==";
  var _location = "/socket.io-client";
  var _phantomChildren = {
  	"component-emitter": "1.2.1"
  };
  var _requested = {
  	type: "range",
  	registry: true,
  	raw: "socket.io-client@^2.3.0",
  	name: "socket.io-client",
  	escapedName: "socket.io-client",
  	rawSpec: "^2.3.0",
  	saveSpec: null,
  	fetchSpec: "^2.3.0"
  };
  var _requiredBy = [
  	"/",
  	"/socket.io"
  ];
  var _resolved = "https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.3.0.tgz";
  var _shasum = "14d5ba2e00b9bcd145ae443ab96b3f86cbcc1bb4";
  var _spec = "socket.io-client@^2.3.0";
  var _where = "/home/beast/Documents/GitHub/ecsy-input";
  var bugs = {
  	url: "https://github.com/Automattic/socket.io-client/issues"
  };
  var bundleDependencies = false;
  var contributors = [
  	{
  		name: "Guillermo Rauch",
  		email: "rauchg@gmail.com"
  	},
  	{
  		name: "Arnout Kazemier",
  		email: "info@3rd-eden.com"
  	},
  	{
  		name: "Vladimir Dronnikov",
  		email: "dronnikov@gmail.com"
  	},
  	{
  		name: "Einar Otto Stangvik",
  		email: "einaros@gmail.com"
  	}
  ];
  var dependencies = {
  	backo2: "1.0.2",
  	"base64-arraybuffer": "0.1.5",
  	"component-bind": "1.0.0",
  	"component-emitter": "1.2.1",
  	debug: "~4.1.0",
  	"engine.io-client": "~3.4.0",
  	"has-binary2": "~1.0.2",
  	"has-cors": "1.1.0",
  	indexof: "0.0.1",
  	"object-component": "0.0.3",
  	parseqs: "0.0.5",
  	parseuri: "0.0.5",
  	"socket.io-parser": "~3.3.0",
  	"to-array": "0.1.4"
  };
  var deprecated = false;
  var description = "[![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg?branch=master)](http://travis-ci.org/socketio/socket.io-client) [![Dependency Status](https://david-dm.org/socketio/socket.io-client.svg)](https://david-dm.org/socketio/socket.io-client) [![devDependency Status](https://david-dm.org/socketio/socket.io-client/dev-status.svg)](https://david-dm.org/socketio/socket.io-client#info=devDependencies) [![NPM version](https://badge.fury.io/js/socket.io-client.svg)](https://www.npmjs.com/package/socket.io-client) ![Downloads](http://img.shields.io/npm/dm/socket.io-client.svg?style=flat) [![](http://slack.socket.io/badge.svg?)](http://slack.socket.io)";
  var devDependencies = {
  	"babel-core": "^6.24.1",
  	"babel-eslint": "4.1.7",
  	"babel-loader": "7.0.0",
  	"babel-preset-es2015": "6.24.1",
  	"concat-stream": "^1.6.0",
  	derequire: "^2.0.6",
  	"eslint-config-standard": "4.4.0",
  	"eslint-plugin-standard": "1.3.1",
  	"expect.js": "0.3.1",
  	gulp: "^3.9.1",
  	"gulp-eslint": "1.1.1",
  	"gulp-file": "^0.3.0",
  	"gulp-istanbul": "^1.1.1",
  	"gulp-mocha": "^4.3.1",
  	"gulp-task-listing": "1.0.1",
  	"imports-loader": "^0.7.1",
  	istanbul: "^0.4.5",
  	mocha: "^3.3.0",
  	"socket.io": "2.3.0",
  	"socket.io-browsers": "^1.0.0",
  	"strip-loader": "0.1.2",
  	"text-blob-builder": "0.0.1",
  	"webpack-merge": "4.1.2",
  	"webpack-stream": "3.2.0",
  	zuul: "~3.11.1",
  	"zuul-builder-webpack": "^1.2.0",
  	"zuul-ngrok": "4.0.0"
  };
  var files = [
  	"lib/",
  	"dist/"
  ];
  var homepage = "https://github.com/Automattic/socket.io-client#readme";
  var keywords = [
  	"realtime",
  	"framework",
  	"websocket",
  	"tcp",
  	"events",
  	"client"
  ];
  var license = "MIT";
  var main = "./lib/index";
  var name = "socket.io-client";
  var repository = {
  	type: "git",
  	url: "git+https://github.com/Automattic/socket.io-client.git"
  };
  var scripts = {
  	test: "gulp test"
  };
  var version$1 = "2.3.0";
  var _package = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	contributors: contributors,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	devDependencies: devDependencies,
  	files: files,
  	homepage: homepage,
  	keywords: keywords,
  	license: license,
  	main: main,
  	name: name,
  	repository: repository,
  	scripts: scripts,
  	version: version$1
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _from: _from,
    _id: _id,
    _inBundle: _inBundle,
    _integrity: _integrity,
    _location: _location,
    _phantomChildren: _phantomChildren,
    _requested: _requested,
    _requiredBy: _requiredBy,
    _resolved: _resolved,
    _shasum: _shasum,
    _spec: _spec,
    _where: _where,
    bugs: bugs,
    bundleDependencies: bundleDependencies,
    contributors: contributors,
    dependencies: dependencies,
    deprecated: deprecated,
    description: description,
    devDependencies: devDependencies,
    files: files,
    homepage: homepage,
    keywords: keywords,
    license: license,
    main: main,
    name: name,
    repository: repository,
    scripts: scripts,
    version: version$1,
    'default': _package
  });

  var toString$6 = {}.toString;

  var isarray$2 = Array.isArray || function (arr) {
    return toString$6.call(arr) == '[object Array]';
  };

  var isBuffer$2 = isBuf$1;

  var withNativeBuffer$1 = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
  var withNativeArrayBuffer$1 = typeof ArrayBuffer === 'function';

  var isView$1 = function (obj) {
    return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
  };

  /**
   * Returns true if obj is a buffer or an arraybuffer.
   *
   * @api private
   */

  function isBuf$1(obj) {
    return (withNativeBuffer$1 && Buffer.isBuffer(obj)) ||
            (withNativeArrayBuffer$1 && (obj instanceof ArrayBuffer || isView$1(obj)));
  }

  /*global Blob,File*/

  /**
   * Module requirements
   */



  var toString$7 = Object.prototype.toString;
  var withNativeBlob$2 = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString$7.call(Blob) === '[object BlobConstructor]');
  var withNativeFile$2 = typeof File === 'function' || (typeof File !== 'undefined' && toString$7.call(File) === '[object FileConstructor]');

  /**
   * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
   * Anything with blobs or files should be fed through removeBlobs before coming
   * here.
   *
   * @param {Object} packet - socket.io event packet
   * @return {Object} with deconstructed packet and list of buffers
   * @api public
   */

  var deconstructPacket$1 = function(packet) {
    var buffers = [];
    var packetData = packet.data;
    var pack = packet;
    pack.data = _deconstructPacket$1(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return {packet: pack, buffers: buffers};
  };

  function _deconstructPacket$1(data, buffers) {
    if (!data) return data;

    if (isBuffer$2(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isarray$2(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket$1(data[i], buffers);
      }
      return newData;
    } else if (typeof data === 'object' && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket$1(data[key], buffers);
      }
      return newData;
    }
    return data;
  }

  /**
   * Reconstructs a binary packet from its placeholder packet and buffers
   *
   * @param {Object} packet - event packet with placeholders
   * @param {Array} buffers - binary buffers to put in placeholder positions
   * @return {Object} reconstructed packet
   * @api public
   */

  var reconstructPacket$1 = function(packet, buffers) {
    packet.data = _reconstructPacket$1(packet.data, buffers);
    packet.attachments = undefined; // no longer useful
    return packet;
  };

  function _reconstructPacket$1(data, buffers) {
    if (!data) return data;

    if (data && data._placeholder) {
      return buffers[data.num]; // appropriate buffer (should be natural order anyway)
    } else if (isarray$2(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket$1(data[i], buffers);
      }
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = _reconstructPacket$1(data[key], buffers);
      }
    }

    return data;
  }

  /**
   * Asynchronously removes Blobs or Files from data via
   * FileReader's readAsArrayBuffer method. Used before encoding
   * data as msgpack. Calls callback with the blobless data.
   *
   * @param {Object} data
   * @param {Function} callback
   * @api private
   */

  var removeBlobs$1 = function(data, callback) {
    function _removeBlobs(obj, curKey, containingObject) {
      if (!obj) return obj;

      // convert any blob
      if ((withNativeBlob$2 && obj instanceof Blob) ||
          (withNativeFile$2 && obj instanceof File)) {
        pendingBlobs++;

        // async filereader
        var fileReader = new FileReader();
        fileReader.onload = function() { // this.result == arraybuffer
          if (containingObject) {
            containingObject[curKey] = this.result;
          }
          else {
            bloblessData = this.result;
          }

          // if nothing pending its callback time
          if(! --pendingBlobs) {
            callback(bloblessData);
          }
        };

        fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
      } else if (isarray$2(obj)) { // handle array
        for (var i = 0; i < obj.length; i++) {
          _removeBlobs(obj[i], i, obj);
        }
      } else if (typeof obj === 'object' && !isBuffer$2(obj)) { // and object
        for (var key in obj) {
          _removeBlobs(obj[key], key, obj);
        }
      }
    }

    var pendingBlobs = 0;
    var bloblessData = data;
    _removeBlobs(bloblessData);
    if (!pendingBlobs) {
      callback(bloblessData);
    }
  };

  var binary$1 = {
  	deconstructPacket: deconstructPacket$1,
  	reconstructPacket: reconstructPacket$1,
  	removeBlobs: removeBlobs$1
  };

  var socket_ioParser$1 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */

  var debug = src('socket.io-parser');





  /**
   * Protocol version.
   *
   * @api public
   */

  exports.protocol = 4;

  /**
   * Packet types.
   *
   * @api public
   */

  exports.types = [
    'CONNECT',
    'DISCONNECT',
    'EVENT',
    'ACK',
    'ERROR',
    'BINARY_EVENT',
    'BINARY_ACK'
  ];

  /**
   * Packet type `connect`.
   *
   * @api public
   */

  exports.CONNECT = 0;

  /**
   * Packet type `disconnect`.
   *
   * @api public
   */

  exports.DISCONNECT = 1;

  /**
   * Packet type `event`.
   *
   * @api public
   */

  exports.EVENT = 2;

  /**
   * Packet type `ack`.
   *
   * @api public
   */

  exports.ACK = 3;

  /**
   * Packet type `error`.
   *
   * @api public
   */

  exports.ERROR = 4;

  /**
   * Packet type 'binary event'
   *
   * @api public
   */

  exports.BINARY_EVENT = 5;

  /**
   * Packet type `binary ack`. For acks with binary arguments.
   *
   * @api public
   */

  exports.BINARY_ACK = 6;

  /**
   * Encoder constructor.
   *
   * @api public
   */

  exports.Encoder = Encoder;

  /**
   * Decoder constructor.
   *
   * @api public
   */

  exports.Decoder = Decoder;

  /**
   * A socket.io Encoder instance
   *
   * @api public
   */

  function Encoder() {}

  var ERROR_PACKET = exports.ERROR + '"encode error"';

  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   * @param {Function} callback - function to handle encodings (likely engine.write)
   * @return Calls callback with Array of encodings
   * @api public
   */

  Encoder.prototype.encode = function(obj, callback){
    debug('encoding packet %j', obj);

    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      encodeAsBinary(obj, callback);
    } else {
      var encoding = encodeAsString(obj);
      callback([encoding]);
    }
  };

  /**
   * Encode packet as string.
   *
   * @param {Object} packet
   * @return {String} encoded
   * @api private
   */

  function encodeAsString(obj) {

    // first is type
    var str = '' + obj.type;

    // attachments if we have them
    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      str += obj.attachments + '-';
    }

    // if we have a namespace other than `/`
    // we append it followed by a comma `,`
    if (obj.nsp && '/' !== obj.nsp) {
      str += obj.nsp + ',';
    }

    // immediately followed by the id
    if (null != obj.id) {
      str += obj.id;
    }

    // json data
    if (null != obj.data) {
      var payload = tryStringify(obj.data);
      if (payload !== false) {
        str += payload;
      } else {
        return ERROR_PACKET;
      }
    }

    debug('encoded %j as %s', obj, str);
    return str;
  }

  function tryStringify(str) {
    try {
      return JSON.stringify(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   *
   * @param {Object} packet
   * @return {Buffer} encoded
   * @api private
   */

  function encodeAsBinary(obj, callback) {

    function writeEncoding(bloblessData) {
      var deconstruction = binary$1.deconstructPacket(bloblessData);
      var pack = encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;

      buffers.unshift(pack); // add packet info to beginning of data list
      callback(buffers); // write all the buffers
    }

    binary$1.removeBlobs(obj, writeEncoding);
  }

  /**
   * A socket.io Decoder instance
   *
   * @return {Object} decoder
   * @api public
   */

  function Decoder() {
    this.reconstructor = null;
  }

  /**
   * Mix in `Emitter` with Decoder.
   */

  componentEmitter(Decoder.prototype);

  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   * @return {Object} packet
   * @api public
   */

  Decoder.prototype.add = function(obj) {
    var packet;
    if (typeof obj === 'string') {
      packet = decodeString(obj);
      if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
        this.reconstructor = new BinaryReconstructor(packet);

        // no attachments, labeled binary but no binary data to follow
        if (this.reconstructor.reconPack.attachments === 0) {
          this.emit('decoded', packet);
        }
      } else { // non-binary full packet
        this.emit('decoded', packet);
      }
    } else if (isBuffer$2(obj) || obj.base64) { // raw binary data
      if (!this.reconstructor) {
        throw new Error('got binary data when not reconstructing a packet');
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) { // received final buffer
          this.reconstructor = null;
          this.emit('decoded', packet);
        }
      }
    } else {
      throw new Error('Unknown type: ' + obj);
    }
  };

  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   * @api private
   */

  function decodeString(str) {
    var i = 0;
    // look up type
    var p = {
      type: Number(str.charAt(0))
    };

    if (null == exports.types[p.type]) {
      return error('unknown packet type ' + p.type);
    }

    // look up attachments if type binary
    if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
      var start = i + 1;
      while (str.charAt(++i) !== '-' && i != str.length) {}
      var buf = str.substring(start, i);
      if (buf != Number(buf) || str.charAt(i) !== '-') {
        throw new Error('Illegal attachments');
      }
      p.attachments = Number(buf);
    }

    // look up namespace (if any)
    if ('/' === str.charAt(i + 1)) {
      var start = i + 1;
      while (++i) {
        var c = str.charAt(i);
        if (',' === c) break;
        if (i === str.length) break;
      }
      p.nsp = str.substring(start, i);
    } else {
      p.nsp = '/';
    }

    // look up id
    var next = str.charAt(i + 1);
    if ('' !== next && Number(next) == next) {
      var start = i + 1;
      while (++i) {
        var c = str.charAt(i);
        if (null == c || Number(c) != c) {
          --i;
          break;
        }
        if (i === str.length) break;
      }
      p.id = Number(str.substring(start, i + 1));
    }

    // look up json data
    if (str.charAt(++i)) {
      var payload = tryParse(str.substr(i));
      var isPayloadValid = payload !== false && (p.type === exports.ERROR || isarray$2(payload));
      if (isPayloadValid) {
        p.data = payload;
      } else {
        return error('invalid payload');
      }
    }

    debug('decoded %s as %j', str, p);
    return p;
  }

  function tryParse(str) {
    try {
      return JSON.parse(str);
    } catch(e){
      return false;
    }
  }

  /**
   * Deallocates a parser's resources
   *
   * @api public
   */

  Decoder.prototype.destroy = function() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
    }
  };

  /**
   * A manager of a binary event's 'buffer sequence'. Should
   * be constructed whenever a packet of type BINARY_EVENT is
   * decoded.
   *
   * @param {Object} packet
   * @return {BinaryReconstructor} initialized reconstructor
   * @api private
   */

  function BinaryReconstructor(packet) {
    this.reconPack = packet;
    this.buffers = [];
  }

  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   * @api private
   */

  BinaryReconstructor.prototype.takeBinaryData = function(binData) {
    this.buffers.push(binData);
    if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
      var packet = binary$1.reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  };

  /**
   * Cleans up binary packet reconstruction variables.
   *
   * @api private
   */

  BinaryReconstructor.prototype.finishedReconstruction = function() {
    this.reconPack = null;
    this.buffers = [];
  };

  function error(msg) {
    return {
      type: exports.ERROR,
      data: 'parser error: ' + msg
    };
  }
  });
  var socket_ioParser_1$1 = socket_ioParser$1.protocol;
  var socket_ioParser_2$1 = socket_ioParser$1.types;
  var socket_ioParser_3$1 = socket_ioParser$1.CONNECT;
  var socket_ioParser_4$1 = socket_ioParser$1.DISCONNECT;
  var socket_ioParser_5$1 = socket_ioParser$1.EVENT;
  var socket_ioParser_6$1 = socket_ioParser$1.ACK;
  var socket_ioParser_7$1 = socket_ioParser$1.ERROR;
  var socket_ioParser_8$1 = socket_ioParser$1.BINARY_EVENT;
  var socket_ioParser_9$1 = socket_ioParser$1.BINARY_ACK;
  var socket_ioParser_10$1 = socket_ioParser$1.Encoder;
  var socket_ioParser_11$1 = socket_ioParser$1.Decoder;

  /**
   * Module dependencies.
   */


  var debug$p = src('socket.io:client');


  /**
   * Module exports.
   */

  var client = Client;

  /**
   * Client constructor.
   *
   * @param {Server} server instance
   * @param {Socket} conn
   * @api private
   */

  function Client(server, conn){
    this.server = server;
    this.conn = conn;
    this.encoder = server.encoder;
    this.decoder = new server.parser.Decoder();
    this.id = conn.id;
    this.request = conn.request;
    this.setup();
    this.sockets = {};
    this.nsps = {};
    this.connectBuffer = [];
  }

  /**
   * Sets up event listeners.
   *
   * @api private
   */

  Client.prototype.setup = function(){
    this.onclose = this.onclose.bind(this);
    this.ondata = this.ondata.bind(this);
    this.onerror = this.onerror.bind(this);
    this.ondecoded = this.ondecoded.bind(this);

    this.decoder.on('decoded', this.ondecoded);
    this.conn.on('data', this.ondata);
    this.conn.on('error', this.onerror);
    this.conn.on('close', this.onclose);
  };

  /**
   * Connects a client to a namespace.
   *
   * @param {String} name namespace
   * @param {Object} query the query parameters
   * @api private
   */

  Client.prototype.connect = function(name, query){
    if (this.server.nsps[name]) {
      debug$p('connecting to namespace %s', name);
      return this.doConnect(name, query);
    }

    this.server.checkNamespace(name, query, (dynamicNsp) => {
      if (dynamicNsp) {
        debug$p('dynamic namespace %s was created', dynamicNsp.name);
        this.doConnect(name, query);
      } else {
        debug$p('creation of namespace %s was denied', name);
        this.packet({ type: socket_ioParser$1.ERROR, nsp: name, data: 'Invalid namespace' });
      }
    });
  };

  /**
   * Connects a client to a namespace.
   *
   * @param {String} name namespace
   * @param {String} query the query parameters
   * @api private
   */

  Client.prototype.doConnect = function(name, query){
    var nsp = this.server.of(name);

    if ('/' != name && !this.nsps['/']) {
      this.connectBuffer.push(name);
      return;
    }

    var self = this;
    var socket = nsp.add(this, query, function(){
      self.sockets[socket.id] = socket;
      self.nsps[nsp.name] = socket;

      if ('/' == nsp.name && self.connectBuffer.length > 0) {
        self.connectBuffer.forEach(self.connect, self);
        self.connectBuffer = [];
      }
    });
  };

  /**
   * Disconnects from all namespaces and closes transport.
   *
   * @api private
   */

  Client.prototype.disconnect = function(){
    for (var id in this.sockets) {
      if (this.sockets.hasOwnProperty(id)) {
        this.sockets[id].disconnect();
      }
    }
    this.sockets = {};
    this.close();
  };

  /**
   * Removes a socket. Called by each `Socket`.
   *
   * @api private
   */

  Client.prototype.remove = function(socket){
    if (this.sockets.hasOwnProperty(socket.id)) {
      var nsp = this.sockets[socket.id].nsp.name;
      delete this.sockets[socket.id];
      delete this.nsps[nsp];
    } else {
      debug$p('ignoring remove for %s', socket.id);
    }
  };

  /**
   * Closes the underlying connection.
   *
   * @api private
   */

  Client.prototype.close = function(){
    if ('open' == this.conn.readyState) {
      debug$p('forcing transport close');
      this.conn.close();
      this.onclose('forced server close');
    }
  };

  /**
   * Writes a packet to the transport.
   *
   * @param {Object} packet object
   * @param {Object} opts
   * @api private
   */

  Client.prototype.packet = function(packet, opts){
    opts = opts || {};
    var self = this;

    // this writes to the actual connection
    function writeToEngine(encodedPackets) {
      if (opts.volatile && !self.conn.transport.writable) return;
      for (var i = 0; i < encodedPackets.length; i++) {
        self.conn.write(encodedPackets[i], { compress: opts.compress });
      }
    }

    if ('open' == this.conn.readyState) {
      debug$p('writing packet %j', packet);
      if (!opts.preEncoded) { // not broadcasting, need to encode
        this.encoder.encode(packet, writeToEngine); // encode, then write results to engine
      } else { // a broadcast pre-encodes a packet
        writeToEngine(packet);
      }
    } else {
      debug$p('ignoring packet write %j', packet);
    }
  };

  /**
   * Called with incoming transport data.
   *
   * @api private
   */

  Client.prototype.ondata = function(data){
    // try/catch is needed for protocol violations (GH-1880)
    try {
      this.decoder.add(data);
    } catch(e) {
      this.onerror(e);
    }
  };

  /**
   * Called when parser fully decodes a packet.
   *
   * @api private
   */

  Client.prototype.ondecoded = function(packet) {
    if (socket_ioParser$1.CONNECT == packet.type) {
      this.connect(url$1.parse(packet.nsp).pathname, url$1.parse(packet.nsp, true).query);
    } else {
      var socket = this.nsps[packet.nsp];
      if (socket) {
        process.nextTick(function() {
          socket.onpacket(packet);
        });
      } else {
        debug$p('no socket for namespace %s', packet.nsp);
      }
    }
  };

  /**
   * Handles an error.
   *
   * @param {Object} err object
   * @api private
   */

  Client.prototype.onerror = function(err){
    for (var id in this.sockets) {
      if (this.sockets.hasOwnProperty(id)) {
        this.sockets[id].onerror(err);
      }
    }
    this.conn.close();
  };

  /**
   * Called upon transport close.
   *
   * @param {String} reason
   * @api private
   */

  Client.prototype.onclose = function(reason){
    debug$p('client close with reason %s', reason);

    // ignore a potential subsequent `close` event
    this.destroy();

    // `nsps` and `sockets` are cleaned up seamlessly
    for (var id in this.sockets) {
      if (this.sockets.hasOwnProperty(id)) {
        this.sockets[id].onclose(reason);
      }
    }
    this.sockets = {};

    this.decoder.destroy(); // clean up decoder
  };

  /**
   * Cleans up event listeners.
   *
   * @api private
   */

  Client.prototype.destroy = function(){
    this.conn.removeListener('data', this.ondata);
    this.conn.removeListener('error', this.onerror);
    this.conn.removeListener('close', this.onclose);
    this.decoder.removeListener('decoded', this.ondecoded);
  };

  var socket$3 = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */

  var Emitter = events.EventEmitter;



  var debug = src('socket.io:socket');

  /**
   * Module exports.
   */

  module.exports = exports = Socket;

  /**
   * Blacklisted events.
   *
   * @api public
   */

  exports.events = [
    'error',
    'connect',
    'disconnect',
    'disconnecting',
    'newListener',
    'removeListener'
  ];

  /**
   * Flags.
   *
   * @api private
   */

  var flags = [
    'json',
    'volatile',
    'broadcast',
    'local'
  ];

  /**
   * `EventEmitter#emit` reference.
   */

  var emit = Emitter.prototype.emit;

  /**
   * Interface to a `Client` for a given `Namespace`.
   *
   * @param {Namespace} nsp
   * @param {Client} client
   * @api public
   */

  function Socket(nsp, client, query){
    this.nsp = nsp;
    this.server = nsp.server;
    this.adapter = this.nsp.adapter;
    this.id = nsp.name !== '/' ? nsp.name + '#' + client.id : client.id;
    this.client = client;
    this.conn = client.conn;
    this.rooms = {};
    this.acks = {};
    this.connected = true;
    this.disconnected = false;
    this.handshake = this.buildHandshake(query);
    this.fns = [];
    this.flags = {};
    this._rooms = [];
  }

  /**
   * Inherits from `EventEmitter`.
   */

  Socket.prototype.__proto__ = Emitter.prototype;

  /**
   * Apply flags from `Socket`.
   */

  flags.forEach(function(flag){
    Object.defineProperty(Socket.prototype, flag, {
      get: function() {
        this.flags[flag] = true;
        return this;
      }
    });
  });

  /**
   * `request` engine.io shortcut.
   *
   * @api public
   */

  Object.defineProperty(Socket.prototype, 'request', {
    get: function() {
      return this.conn.request;
    }
  });

  /**
   * Builds the `handshake` BC object
   *
   * @api private
   */

  Socket.prototype.buildHandshake = function(query){
    var self = this;
    function buildQuery(){
      var requestQuery = url$1.parse(self.request.url, true).query;
      //if socket-specific query exist, replace query strings in requestQuery
      return Object.assign({}, query, requestQuery);
    }
    return {
      headers: this.request.headers,
      time: (new Date) + '',
      address: this.conn.remoteAddress,
      xdomain: !!this.request.headers.origin,
      secure: !!this.request.connection.encrypted,
      issued: +(new Date),
      url: this.request.url,
      query: buildQuery()
    };
  };

  /**
   * Emits to this client.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.emit = function(ev){
    if (~exports.events.indexOf(ev)) {
      emit.apply(this, arguments);
      return this;
    }

    var args = Array.prototype.slice.call(arguments);
    var packet = {
      type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary2(args)) ? socket_ioParser$1.BINARY_EVENT : socket_ioParser$1.EVENT,
      data: args
    };

    // access last argument to see if it's an ACK callback
    if (typeof args[args.length - 1] === 'function') {
      if (this._rooms.length || this.flags.broadcast) {
        throw new Error('Callbacks are not supported when broadcasting');
      }

      debug('emitting packet with ack id %d', this.nsp.ids);
      this.acks[this.nsp.ids] = args.pop();
      packet.id = this.nsp.ids++;
    }

    var rooms = this._rooms.slice(0);
    var flags = Object.assign({}, this.flags);

    // reset flags
    this._rooms = [];
    this.flags = {};

    if (rooms.length || flags.broadcast) {
      this.adapter.broadcast(packet, {
        except: [this.id],
        rooms: rooms,
        flags: flags
      });
    } else {
      // dispatch packet
      this.packet(packet, flags);
    }
    return this;
  };

  /**
   * Targets a room when broadcasting.
   *
   * @param {String} name
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.to =
  Socket.prototype.in = function(name){
    if (!~this._rooms.indexOf(name)) this._rooms.push(name);
    return this;
  };

  /**
   * Sends a `message` event.
   *
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.send =
  Socket.prototype.write = function(){
    var args = Array.prototype.slice.call(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  /**
   * Writes a packet.
   *
   * @param {Object} packet object
   * @param {Object} opts options
   * @api private
   */

  Socket.prototype.packet = function(packet, opts){
    packet.nsp = this.nsp.name;
    opts = opts || {};
    opts.compress = false !== opts.compress;
    this.client.packet(packet, opts);
  };

  /**
   * Joins a room.
   *
   * @param {String|Array} room or array of rooms
   * @param {Function} fn optional, callback
   * @return {Socket} self
   * @api private
   */

  Socket.prototype.join = function(rooms, fn){
    debug('joining room %s', rooms);
    var self = this;
    if (!Array.isArray(rooms)) {
      rooms = [rooms];
    }
    rooms = rooms.filter(function (room) {
      return !self.rooms.hasOwnProperty(room);
    });
    if (!rooms.length) {
      fn && fn(null);
      return this;
    }
    this.adapter.addAll(this.id, rooms, function(err){
      if (err) return fn && fn(err);
      debug('joined room %s', rooms);
      rooms.forEach(function (room) {
        self.rooms[room] = room;
      });
      fn && fn(null);
    });
    return this;
  };

  /**
   * Leaves a room.
   *
   * @param {String} room
   * @param {Function} fn optional, callback
   * @return {Socket} self
   * @api private
   */

  Socket.prototype.leave = function(room, fn){
    debug('leave room %s', room);
    var self = this;
    this.adapter.del(this.id, room, function(err){
      if (err) return fn && fn(err);
      debug('left room %s', room);
      delete self.rooms[room];
      fn && fn(null);
    });
    return this;
  };

  /**
   * Leave all rooms.
   *
   * @api private
   */

  Socket.prototype.leaveAll = function(){
    this.adapter.delAll(this.id);
    this.rooms = {};
  };

  /**
   * Called by `Namespace` upon successful
   * middleware execution (ie: authorization).
   * Socket is added to namespace array before
   * call to join, so adapters can access it.
   *
   * @api private
   */

  Socket.prototype.onconnect = function(){
    debug('socket connected - writing packet');
    this.nsp.connected[this.id] = this;
    this.join(this.id);
    var skip = this.nsp.name === '/' && this.nsp.fns.length === 0;
    if (skip) {
      debug('packet already sent in initial handshake');
    } else {
      this.packet({ type: socket_ioParser$1.CONNECT });
    }
  };

  /**
   * Called with each packet. Called by `Client`.
   *
   * @param {Object} packet
   * @api private
   */

  Socket.prototype.onpacket = function(packet){
    debug('got packet %j', packet);
    switch (packet.type) {
      case socket_ioParser$1.EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser$1.BINARY_EVENT:
        this.onevent(packet);
        break;

      case socket_ioParser$1.ACK:
        this.onack(packet);
        break;

      case socket_ioParser$1.BINARY_ACK:
        this.onack(packet);
        break;

      case socket_ioParser$1.DISCONNECT:
        this.ondisconnect();
        break;

      case socket_ioParser$1.ERROR:
        this.onerror(new Error(packet.data));
    }
  };

  /**
   * Called upon event packet.
   *
   * @param {Object} packet object
   * @api private
   */

  Socket.prototype.onevent = function(packet){
    var args = packet.data || [];
    debug('emitting event %j', args);

    if (null != packet.id) {
      debug('attaching ack callback to event');
      args.push(this.ack(packet.id));
    }

    this.dispatch(args);
  };

  /**
   * Produces an ack callback to emit with an event.
   *
   * @param {Number} id packet id
   * @api private
   */

  Socket.prototype.ack = function(id){
    var self = this;
    var sent = false;
    return function(){
      // prevent double callbacks
      if (sent) return;
      var args = Array.prototype.slice.call(arguments);
      debug('sending ack %j', args);

      self.packet({
        id: id,
        type: hasBinary2(args) ? socket_ioParser$1.BINARY_ACK : socket_ioParser$1.ACK,
        data: args
      });

      sent = true;
    };
  };

  /**
   * Called upon ack packet.
   *
   * @api private
   */

  Socket.prototype.onack = function(packet){
    var ack = this.acks[packet.id];
    if ('function' == typeof ack) {
      debug('calling ack %s with %j', packet.id, packet.data);
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    } else {
      debug('bad ack %s', packet.id);
    }
  };

  /**
   * Called upon client disconnect packet.
   *
   * @api private
   */

  Socket.prototype.ondisconnect = function(){
    debug('got disconnect packet');
    this.onclose('client namespace disconnect');
  };

  /**
   * Handles a client error.
   *
   * @api private
   */

  Socket.prototype.onerror = function(err){
    if (this.listeners('error').length) {
      this.emit('error', err);
    } else {
      console.error('Missing error handler on `socket`.');
      console.error(err.stack);
    }
  };

  /**
   * Called upon closing. Called by `Client`.
   *
   * @param {String} reason
   * @throw {Error} optional error object
   * @api private
   */

  Socket.prototype.onclose = function(reason){
    if (!this.connected) return this;
    debug('closing socket - reason %s', reason);
    this.emit('disconnecting', reason);
    this.leaveAll();
    this.nsp.remove(this);
    this.client.remove(this);
    this.connected = false;
    this.disconnected = true;
    delete this.nsp.connected[this.id];
    this.emit('disconnect', reason);
  };

  /**
   * Produces an `error` packet.
   *
   * @param {Object} err error object
   * @api private
   */

  Socket.prototype.error = function(err){
    this.packet({ type: socket_ioParser$1.ERROR, data: err });
  };

  /**
   * Disconnects this client.
   *
   * @param {Boolean} close if `true`, closes the underlying connection
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.disconnect = function(close){
    if (!this.connected) return this;
    if (close) {
      this.client.disconnect();
    } else {
      this.packet({ type: socket_ioParser$1.DISCONNECT });
      this.onclose('server namespace disconnect');
    }
    return this;
  };

  /**
   * Sets the compress flag.
   *
   * @param {Boolean} compress if `true`, compresses the sending data
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.compress = function(compress){
    this.flags.compress = compress;
    return this;
  };

  /**
   * Sets the binary flag
   *
   * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`
   * @return {Socket} self
   * @api public
   */

   Socket.prototype.binary = function (binary) {
     this.flags.binary = binary;
     return this;
   };

  /**
   * Dispatch incoming event to socket listeners.
   *
   * @param {Array} event that will get emitted
   * @api private
   */

  Socket.prototype.dispatch = function(event){
    debug('dispatching an event %j', event);
    var self = this;
    function dispatchSocket(err) {
      process.nextTick(function(){
        if (err) {
          return self.error(err.data || err.message);
        }
        emit.apply(self, event);
      });
    }
    this.run(event, dispatchSocket);
  };

  /**
   * Sets up socket middleware.
   *
   * @param {Function} middleware function (event, next)
   * @return {Socket} self
   * @api public
   */

  Socket.prototype.use = function(fn){
    this.fns.push(fn);
    return this;
  };

  /**
   * Executes the middleware for an incoming event.
   *
   * @param {Array} event that will get emitted
   * @param {Function} last fn call in the middleware
   * @api private
   */
  Socket.prototype.run = function(event, fn){
    var fns = this.fns.slice(0);
    if (!fns.length) return fn(null);

    function run(i){
      fns[i](event, function(err){
        // upon error, short-circuit
        if (err) return fn(err);

        // if no middleware left, summon callback
        if (!fns[i + 1]) return fn(null);

        // go on to next
        run(i + 1);
      });
    }

    run(0);
  };
  });
  var socket_1 = socket$3.events;

  var namespace = createCommonjsModule(function (module, exports) {
  /**
   * Module dependencies.
   */


  var Emitter = events.EventEmitter;


  var debug = src('socket.io:namespace');

  /**
   * Module exports.
   */

  module.exports = exports = Namespace;

  /**
   * Blacklisted events.
   */

  exports.events = [
    'connect',    // for symmetry with client
    'connection',
    'newListener'
  ];

  /**
   * Flags.
   */

  exports.flags = [
    'json',
    'volatile',
    'local'
  ];

  /**
   * `EventEmitter#emit` reference.
   */

  var emit = Emitter.prototype.emit;

  /**
   * Namespace constructor.
   *
   * @param {Server} server instance
   * @param {Socket} name
   * @api private
   */

  function Namespace(server, name){
    this.name = name;
    this.server = server;
    this.sockets = {};
    this.connected = {};
    this.fns = [];
    this.ids = 0;
    this.rooms = [];
    this.flags = {};
    this.initAdapter();
  }

  /**
   * Inherits from `EventEmitter`.
   */

  Namespace.prototype.__proto__ = Emitter.prototype;

  /**
   * Apply flags from `Socket`.
   */

  exports.flags.forEach(function(flag){
    Object.defineProperty(Namespace.prototype, flag, {
      get: function() {
        this.flags[flag] = true;
        return this;
      }
    });
  });

  /**
   * Initializes the `Adapter` for this nsp.
   * Run upon changing adapter by `Server#adapter`
   * in addition to the constructor.
   *
   * @api private
   */

  Namespace.prototype.initAdapter = function(){
    this.adapter = new (this.server.adapter())(this);
  };

  /**
   * Sets up namespace middleware.
   *
   * @return {Namespace} self
   * @api public
   */

  Namespace.prototype.use = function(fn){
    if (this.server.eio && this.name === '/') {
      debug('removing initial packet');
      delete this.server.eio.initialPacket;
    }
    this.fns.push(fn);
    return this;
  };

  /**
   * Executes the middleware for an incoming client.
   *
   * @param {Socket} socket that will get added
   * @param {Function} fn last fn call in the middleware
   * @api private
   */

  Namespace.prototype.run = function(socket, fn){
    var fns = this.fns.slice(0);
    if (!fns.length) return fn(null);

    function run(i){
      fns[i](socket, function(err){
        // upon error, short-circuit
        if (err) return fn(err);

        // if no middleware left, summon callback
        if (!fns[i + 1]) return fn(null);

        // go on to next
        run(i + 1);
      });
    }

    run(0);
  };

  /**
   * Targets a room when emitting.
   *
   * @param {String} name
   * @return {Namespace} self
   * @api public
   */

  Namespace.prototype.to =
  Namespace.prototype.in = function(name){
    if (!~this.rooms.indexOf(name)) this.rooms.push(name);
    return this;
  };

  /**
   * Adds a new client.
   *
   * @return {Socket}
   * @api private
   */

  Namespace.prototype.add = function(client, query, fn){
    debug('adding socket to nsp %s', this.name);
    var socket = new socket$3(this, client, query);
    var self = this;
    this.run(socket, function(err){
      process.nextTick(function(){
        if ('open' == client.conn.readyState) {
          if (err) return socket.error(err.data || err.message);

          // track socket
          self.sockets[socket.id] = socket;

          // it's paramount that the internal `onconnect` logic
          // fires before user-set events to prevent state order
          // violations (such as a disconnection before the connection
          // logic is complete)
          socket.onconnect();
          if (fn) fn();

          // fire user-set events
          self.emit('connect', socket);
          self.emit('connection', socket);
        } else {
          debug('next called after client was closed - ignoring socket');
        }
      });
    });
    return socket;
  };

  /**
   * Removes a client. Called by each `Socket`.
   *
   * @api private
   */

  Namespace.prototype.remove = function(socket){
    if (this.sockets.hasOwnProperty(socket.id)) {
      delete this.sockets[socket.id];
    } else {
      debug('ignoring remove for %s', socket.id);
    }
  };

  /**
   * Emits to all clients.
   *
   * @return {Namespace} self
   * @api public
   */

  Namespace.prototype.emit = function(ev){
    if (~exports.events.indexOf(ev)) {
      emit.apply(this, arguments);
      return this;
    }
    // set up packet object
    var args = Array.prototype.slice.call(arguments);
    var packet = {
      type: (this.flags.binary !== undefined ? this.flags.binary : hasBinary2(args)) ? socket_ioParser$1.BINARY_EVENT : socket_ioParser$1.EVENT,
      data: args
    };

    if ('function' == typeof args[args.length - 1]) {
      throw new Error('Callbacks are not supported when broadcasting');
    }

    var rooms = this.rooms.slice(0);
    var flags = Object.assign({}, this.flags);

    // reset flags
    this.rooms = [];
    this.flags = {};

    this.adapter.broadcast(packet, {
      rooms: rooms,
      flags: flags
    });

    return this;
  };

  /**
   * Sends a `message` event to all clients.
   *
   * @return {Namespace} self
   * @api public
   */

  Namespace.prototype.send =
  Namespace.prototype.write = function(){
    var args = Array.prototype.slice.call(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  /**
   * Gets a list of clients.
   *
   * @return {Namespace} self
   * @api public
   */

  Namespace.prototype.clients = function(fn){
    if(!this.adapter){
      throw new Error('No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?')
    }
    this.adapter.clients(this.rooms, fn);
    // reset rooms for scenario:
    // .in('room').clients() (GH-1978)
    this.rooms = [];
    return this;
  };

  /**
   * Sets the compress flag.
   *
   * @param {Boolean} compress if `true`, compresses the sending data
   * @return {Socket} self
   * @api public
   */

  Namespace.prototype.compress = function(compress){
    this.flags.compress = compress;
    return this;
  };

  /**
   * Sets the binary flag
   *
   * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`
   * @return {Socket} self
   * @api public
   */

   Namespace.prototype.binary = function (binary) {
     this.flags.binary = binary;
     return this;
   };
  });
  var namespace_1 = namespace.events;
  var namespace_2 = namespace.flags;

  let count = 0;

  class ParentNamespace extends namespace {

    constructor(server) {
      super(server, '/_' + (count++));
      this.children = new Set();
    }

    initAdapter() {}

    emit() {
      const args = Array.prototype.slice.call(arguments);

      this.children.forEach(nsp => {
        nsp.rooms = this.rooms;
        nsp.flags = this.flags;
        nsp.emit.apply(nsp, args);
      });
      this.rooms = [];
      this.flags = {};
    }

    createChild(name) {
      const namespace$1 = new namespace(this.server, name);
      namespace$1.fns = this.fns.slice(0);
      this.listeners('connect').forEach(listener => namespace$1.on('connect', listener));
      this.listeners('connection').forEach(listener => namespace$1.on('connection', listener));
      this.children.add(namespace$1);
      this.server.nsps[name] = namespace$1;
      return namespace$1;
    }
  }

  var parentNamespace = ParentNamespace;

  /**
   * Module dependencies.
   */

  var Emitter = events.EventEmitter;

  /**
   * Module exports.
   */

  var socket_ioAdapter = Adapter;

  /**
   * Memory adapter constructor.
   *
   * @param {Namespace} nsp
   * @api public
   */

  function Adapter(nsp){
    this.nsp = nsp;
    this.rooms = {};
    this.sids = {};
    this.encoder = nsp.server.encoder;
  }

  /**
   * Inherits from `EventEmitter`.
   */

  Adapter.prototype.__proto__ = Emitter.prototype;

  /**
   * Adds a socket to a room.
   *
   * @param {String} socket id
   * @param {String} room name
   * @param {Function} callback
   * @api public
   */

  Adapter.prototype.add = function(id, room, fn){
    return this.addAll(id, [ room ], fn);
  };

  /**
   * Adds a socket to a list of room.
   *
   * @param {String} socket id
   * @param {String} rooms
   * @param {Function} callback
   * @api public
   */

  Adapter.prototype.addAll = function(id, rooms, fn){
    for (var i = 0; i < rooms.length; i++) {
      var room = rooms[i];
      this.sids[id] = this.sids[id] || {};
      this.sids[id][room] = true;
      this.rooms[room] = this.rooms[room] || Room();
      this.rooms[room].add(id);
    }
    if (fn) process.nextTick(fn.bind(null, null));
  };

  /**
   * Removes a socket from a room.
   *
   * @param {String} socket id
   * @param {String} room name
   * @param {Function} callback
   * @api public
   */

  Adapter.prototype.del = function(id, room, fn){
    if (this.sids[id]) delete this.sids[id][room];

    if (this.rooms.hasOwnProperty(room)) {
      this.rooms[room].del(id);
      if (this.rooms[room].length === 0) delete this.rooms[room];
    }

    if (fn) process.nextTick(fn.bind(null, null));
  };

  /**
   * Removes a socket from all rooms it's joined.
   *
   * @param {String} socket id
   * @param {Function} callback
   * @api public
   */

  Adapter.prototype.delAll = function(id, fn){
    var rooms = this.sids[id];
    if (rooms) {
      for (var room in rooms) {
        if (this.rooms.hasOwnProperty(room)) {
          this.rooms[room].del(id);
          if (this.rooms[room].length === 0) delete this.rooms[room];
        }
      }
    }
    delete this.sids[id];

    if (fn) process.nextTick(fn.bind(null, null));
  };

  /**
   * Broadcasts a packet.
   *
   * Options:
   *  - `flags` {Object} flags for this packet
   *  - `except` {Array} sids that should be excluded
   *  - `rooms` {Array} list of rooms to broadcast to
   *
   * @param {Object} packet object
   * @api public
   */

  Adapter.prototype.broadcast = function(packet, opts){
    var rooms = opts.rooms || [];
    var except = opts.except || [];
    var flags = opts.flags || {};
    var packetOpts = {
      preEncoded: true,
      volatile: flags.volatile,
      compress: flags.compress
    };
    var ids = {};
    var self = this;
    var socket;

    packet.nsp = this.nsp.name;
    this.encoder.encode(packet, function(encodedPackets) {
      if (rooms.length) {
        for (var i = 0; i < rooms.length; i++) {
          var room = self.rooms[rooms[i]];
          if (!room) continue;
          var sockets = room.sockets;
          for (var id in sockets) {
            if (sockets.hasOwnProperty(id)) {
              if (ids[id] || ~except.indexOf(id)) continue;
              socket = self.nsp.connected[id];
              if (socket) {
                socket.packet(encodedPackets, packetOpts);
                ids[id] = true;
              }
            }
          }
        }
      } else {
        for (var id in self.sids) {
          if (self.sids.hasOwnProperty(id)) {
            if (~except.indexOf(id)) continue;
            socket = self.nsp.connected[id];
            if (socket) socket.packet(encodedPackets, packetOpts);
          }
        }
      }
    });
  };

  /**
   * Gets a list of clients by sid.
   *
   * @param {Array} explicit set of rooms to check.
   * @param {Function} callback
   * @api public
   */

  Adapter.prototype.clients = function(rooms, fn){
    if ('function' == typeof rooms){
      fn = rooms;
      rooms = null;
    }

    rooms = rooms || [];

    var ids = {};
    var sids = [];
    var socket;

    if (rooms.length) {
      for (var i = 0; i < rooms.length; i++) {
        var room = this.rooms[rooms[i]];
        if (!room) continue;
        var sockets = room.sockets;
        for (var id in sockets) {
          if (sockets.hasOwnProperty(id)) {
            if (ids[id]) continue;
            socket = this.nsp.connected[id];
            if (socket) {
              sids.push(id);
              ids[id] = true;
            }
          }
        }
      }
    } else {
      for (var id in this.sids) {
        if (this.sids.hasOwnProperty(id)) {
          socket = this.nsp.connected[id];
          if (socket) sids.push(id);
        }
      }
    }

    if (fn) process.nextTick(fn.bind(null, null, sids));
  };

  /**
   * Gets the list of rooms a given client has joined.
   *
   * @param {String} socket id
   * @param {Function} callback
   * @api public
   */
  Adapter.prototype.clientRooms = function(id, fn){
    var rooms = this.sids[id];
    if (fn) process.nextTick(fn.bind(null, null, rooms ? Object.keys(rooms) : null));
  };

  /**
  * Room constructor.
  *
  * @api private
  */

  function Room(){
    if (!(this instanceof Room)) return new Room();
    this.sockets = {};
    this.length = 0;
  }

  /**
   * Adds a socket to a room.
   *
   * @param {String} socket id
   * @api private
   */

  Room.prototype.add = function(id){
    if (!this.sockets.hasOwnProperty(id)) {
      this.sockets[id] = true;
      this.length++;
    }
  };

  /**
   * Removes a socket from a room.
   *
   * @param {String} socket id
   * @api private
   */

  Room.prototype.del = function(id){
    if (this.sockets.hasOwnProperty(id)) {
      delete this.sockets[id];
      this.length--;
    }
  };

  var require$$1$1 = getCjsExportFromNamespace(_package$1);

  /**
   * Module dependencies.
   */


  var read$1 = fs.readFileSync;

  var exists = fs.existsSync;

  var clientVersion = require$$1$1.version;

  var Emitter$1 = events.EventEmitter;




  var debug$q = src('socket.io:server');


  /**
   * Module exports.
   */

  var lib$9 = Server$1;

  /**
   * Socket.IO client source.
   */

  var clientSource = undefined;
  var clientSourceMap = undefined;

  /**
   * Server constructor.
   *
   * @param {http.Server|Number|Object} srv http server, port or options
   * @param {Object} [opts]
   * @api public
   */

  function Server$1(srv, opts){
    if (!(this instanceof Server$1)) return new Server$1(srv, opts);
    if ('object' == typeof srv && srv instanceof Object && !srv.listen) {
      opts = srv;
      srv = null;
    }
    opts = opts || {};
    this.nsps = {};
    this.parentNsps = new Map();
    this.path(opts.path || '/socket.io');
    this.serveClient(false !== opts.serveClient);
    this.parser = opts.parser || socket_ioParser$1;
    this.encoder = new this.parser.Encoder();
    this.adapter(opts.adapter || socket_ioAdapter);
    this.origins(opts.origins || '*:*');
    this.sockets = this.of('/');
    if (srv) this.attach(srv, opts);
  }

  /**
   * Server request verification function, that checks for allowed origins
   *
   * @param {http.IncomingMessage} req request
   * @param {Function} fn callback to be called with the result: `fn(err, success)`
   */

  Server$1.prototype.checkRequest = function(req, fn) {
    var origin = req.headers.origin || req.headers.referer;

    // file:// URLs produce a null Origin which can't be authorized via echo-back
    if ('null' == origin || null == origin) origin = '*';

    if (!!origin && typeof(this._origins) == 'function') return this._origins(origin, fn);
    if (this._origins.indexOf('*:*') !== -1) return fn(null, true);
    if (origin) {
      try {
        var parts = url$1.parse(origin);
        var defaultPort = 'https:' == parts.protocol ? 443 : 80;
        parts.port = parts.port != null
          ? parts.port
          : defaultPort;
        var ok =
          ~this._origins.indexOf(parts.protocol + '//' + parts.hostname + ':' + parts.port) ||
          ~this._origins.indexOf(parts.hostname + ':' + parts.port) ||
          ~this._origins.indexOf(parts.hostname + ':*') ||
          ~this._origins.indexOf('*:' + parts.port);
        debug$q('origin %s is %svalid', origin, !!ok ? '' : 'not ');
        return fn(null, !!ok);
      } catch (ex) {
      }
    }
    fn(null, false);
  };

  /**
   * Sets/gets whether client code is being served.
   *
   * @param {Boolean} v whether to serve client code
   * @return {Server|Boolean} self when setting or value when getting
   * @api public
   */

  Server$1.prototype.serveClient = function(v){
    if (!arguments.length) return this._serveClient;
    this._serveClient = v;
    var resolvePath = function(file){
      var filepath = path$3.resolve(__dirname, './../../', file);
      if (exists(filepath)) {
        return filepath;
      }
      return require.resolve(file);
    };
    if (v && !clientSource) {
      clientSource = read$1(resolvePath( 'socket.io-client/dist/socket.io.js'), 'utf-8');
      try {
        clientSourceMap = read$1(resolvePath( 'socket.io-client/dist/socket.io.js.map'), 'utf-8');
      } catch(err) {
        debug$q('could not load sourcemap file');
      }
    }
    return this;
  };

  /**
   * Old settings for backwards compatibility
   */

  var oldSettings = {
    "transports": "transports",
    "heartbeat timeout": "pingTimeout",
    "heartbeat interval": "pingInterval",
    "destroy buffer size": "maxHttpBufferSize"
  };

  /**
   * Backwards compatibility.
   *
   * @api public
   */

  Server$1.prototype.set = function(key, val){
    if ('authorization' == key && val) {
      this.use(function(socket, next) {
        val(socket.request, function(err, authorized) {
          if (err) return next(new Error(err));
          if (!authorized) return next(new Error('Not authorized'));
          next();
        });
      });
    } else if ('origins' == key && val) {
      this.origins(val);
    } else if ('resource' == key) {
      this.path(val);
    } else if (oldSettings[key] && this.eio[oldSettings[key]]) {
      this.eio[oldSettings[key]] = val;
    } else {
      console.error('Option %s is not valid. Please refer to the README.', key);
    }

    return this;
  };

  /**
   * Executes the middleware for an incoming namespace not already created on the server.
   *
   * @param {String} name name of incoming namespace
   * @param {Object} query the query parameters
   * @param {Function} fn callback
   * @api private
   */

  Server$1.prototype.checkNamespace = function(name, query, fn){
    if (this.parentNsps.size === 0) return fn(false);

    const keysIterator = this.parentNsps.keys();

    const run = () => {
      let nextFn = keysIterator.next();
      if (nextFn.done) {
        return fn(false);
      }
      nextFn.value(name, query, (err, allow) => {
        if (err || !allow) {
          run();
        } else {
          fn(this.parentNsps.get(nextFn.value).createChild(name));
        }
      });
    };

    run();
  };

  /**
   * Sets the client serving path.
   *
   * @param {String} v pathname
   * @return {Server|String} self when setting or value when getting
   * @api public
   */

  Server$1.prototype.path = function(v){
    if (!arguments.length) return this._path;
    this._path = v.replace(/\/$/, '');
    return this;
  };

  /**
   * Sets the adapter for rooms.
   *
   * @param {Adapter} v pathname
   * @return {Server|Adapter} self when setting or value when getting
   * @api public
   */

  Server$1.prototype.adapter = function(v){
    if (!arguments.length) return this._adapter;
    this._adapter = v;
    for (var i in this.nsps) {
      if (this.nsps.hasOwnProperty(i)) {
        this.nsps[i].initAdapter();
      }
    }
    return this;
  };

  /**
   * Sets the allowed origins for requests.
   *
   * @param {String|String[]} v origins
   * @return {Server|Adapter} self when setting or value when getting
   * @api public
   */

  Server$1.prototype.origins = function(v){
    if (!arguments.length) return this._origins;

    this._origins = v;
    return this;
  };

  /**
   * Attaches socket.io to a server or port.
   *
   * @param {http.Server|Number} server or port
   * @param {Object} options passed to engine.io
   * @return {Server} self
   * @api public
   */

  Server$1.prototype.listen =
  Server$1.prototype.attach = function(srv, opts){
    if ('function' == typeof srv) {
      var msg = 'You are trying to attach socket.io to an express ' +
      'request handler function. Please pass a http.Server instance.';
      throw new Error(msg);
    }

    // handle a port as a string
    if (Number(srv) == srv) {
      srv = Number(srv);
    }

    if ('number' == typeof srv) {
      debug$q('creating http server and binding to %d', srv);
      var port = srv;
      srv = http.Server(function(req, res){
        res.writeHead(404);
        res.end();
      });
      srv.listen(port);

    }

    // set engine.io path to `/socket.io`
    opts = opts || {};
    opts.path = opts.path || this.path();
    // set origins verification
    opts.allowRequest = opts.allowRequest || this.checkRequest.bind(this);

    if (this.sockets.fns.length > 0) {
      this.initEngine(srv, opts);
      return this;
    }

    var self = this;
    var connectPacket = { type: socket_ioParser$1.CONNECT, nsp: '/' };
    this.encoder.encode(connectPacket, function (encodedPacket){
      // the CONNECT packet will be merged with Engine.IO handshake,
      // to reduce the number of round trips
      opts.initialPacket = encodedPacket;

      self.initEngine(srv, opts);
    });
    return this;
  };

  /**
   * Initialize engine
   *
   * @param {Object} options passed to engine.io
   * @api private
   */

  Server$1.prototype.initEngine = function(srv, opts){
    // initialize engine
    debug$q('creating engine.io instance with opts %j', opts);
    this.eio = engine_io.attach(srv, opts);

    // attach static file serving
    if (this._serveClient) this.attachServe(srv);

    // Export http server
    this.httpServer = srv;

    // bind to engine events
    this.bind(this.eio);
  };

  /**
   * Attaches the static file serving.
   *
   * @param {Function|http.Server} srv http server
   * @api private
   */

  Server$1.prototype.attachServe = function(srv){
    debug$q('attaching client serving req handler');
    var url = this._path + '/socket.io.js';
    var urlMap = this._path + '/socket.io.js.map';
    var evs = srv.listeners('request').slice(0);
    var self = this;
    srv.removeAllListeners('request');
    srv.on('request', function(req, res) {
      if (0 === req.url.indexOf(urlMap)) {
        self.serveMap(req, res);
      } else if (0 === req.url.indexOf(url)) {
        self.serve(req, res);
      } else {
        for (var i = 0; i < evs.length; i++) {
          evs[i].call(srv, req, res);
        }
      }
    });
  };

  /**
   * Handles a request serving `/socket.io.js`
   *
   * @param {http.Request} req
   * @param {http.Response} res
   * @api private
   */

  Server$1.prototype.serve = function(req, res){
    // Per the standard, ETags must be quoted:
    // https://tools.ietf.org/html/rfc7232#section-2.3
    var expectedEtag = '"' + clientVersion + '"';

    var etag = req.headers['if-none-match'];
    if (etag) {
      if (expectedEtag == etag) {
        debug$q('serve client 304');
        res.writeHead(304);
        res.end();
        return;
      }
    }

    debug$q('serve client source');
    res.setHeader("Cache-Control", "public, max-age=0");
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('ETag', expectedEtag);
    res.writeHead(200);
    res.end(clientSource);
  };

  /**
   * Handles a request serving `/socket.io.js.map`
   *
   * @param {http.Request} req
   * @param {http.Response} res
   * @api private
   */

  Server$1.prototype.serveMap = function(req, res){
    // Per the standard, ETags must be quoted:
    // https://tools.ietf.org/html/rfc7232#section-2.3
    var expectedEtag = '"' + clientVersion + '"';

    var etag = req.headers['if-none-match'];
    if (etag) {
      if (expectedEtag == etag) {
        debug$q('serve client 304');
        res.writeHead(304);
        res.end();
        return;
      }
    }

    debug$q('serve client sourcemap');
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('ETag', expectedEtag);
    res.writeHead(200);
    res.end(clientSourceMap);
  };

  /**
   * Binds socket.io to an engine.io instance.
   *
   * @param {engine.Server} engine engine.io (or compatible) server
   * @return {Server} self
   * @api public
   */

  Server$1.prototype.bind = function(engine){
    this.engine = engine;
    this.engine.on('connection', this.onconnection.bind(this));
    return this;
  };

  /**
   * Called with each incoming transport connection.
   *
   * @param {engine.Socket} conn
   * @return {Server} self
   * @api public
   */

  Server$1.prototype.onconnection = function(conn){
    debug$q('incoming connection with id %s', conn.id);
    var client$1 = new client(this, conn);
    client$1.connect('/');
    return this;
  };

  /**
   * Looks up a namespace.
   *
   * @param {String|RegExp|Function} name nsp name
   * @param {Function} [fn] optional, nsp `connection` ev handler
   * @api public
   */

  Server$1.prototype.of = function(name, fn){
    if (typeof name === 'function' || name instanceof RegExp) {
      const parentNsp = new parentNamespace(this);
      debug$q('initializing parent namespace %s', parentNsp.name);
      if (typeof name === 'function') {
        this.parentNsps.set(name, parentNsp);
      } else {
        this.parentNsps.set((nsp, conn, next) => next(null, name.test(nsp)), parentNsp);
      }
      if (fn) parentNsp.on('connect', fn);
      return parentNsp;
    }

    if (String(name)[0] !== '/') name = '/' + name;

    var nsp = this.nsps[name];
    if (!nsp) {
      debug$q('initializing namespace %s', name);
      nsp = new namespace(this, name);
      this.nsps[name] = nsp;
    }
    if (fn) nsp.on('connect', fn);
    return nsp;
  };

  /**
   * Closes server connection
   *
   * @param {Function} [fn] optional, called as `fn([err])` on error OR all conns closed
   * @api public
   */

  Server$1.prototype.close = function(fn){
    for (var id in this.nsps['/'].sockets) {
      if (this.nsps['/'].sockets.hasOwnProperty(id)) {
        this.nsps['/'].sockets[id].onclose();
      }
    }

    this.engine.close();

    if (this.httpServer) {
      this.httpServer.close(fn);
    } else {
      fn && fn();
    }
  };

  /**
   * Expose main namespace (/).
   */

  var emitterMethods = Object.keys(Emitter$1.prototype).filter(function(key){
    return typeof Emitter$1.prototype[key] === 'function';
  });

  emitterMethods.concat(['to', 'in', 'use', 'send', 'write', 'clients', 'compress', 'binary']).forEach(function(fn){
    Server$1.prototype[fn] = function(){
      return this.sockets[fn].apply(this.sockets, arguments);
    };
  });

  namespace.flags.forEach(function(flag){
    Object.defineProperty(Server$1.prototype, flag, {
      get: function() {
        this.sockets.flags = this.sockets.flags || {};
        this.sockets.flags[flag] = true;
        return this;
      }
    });
  });

  /**
   * BC with `io.listen`
   */

  Server$1.listen = Server$1;

  var isBuffer$3 = function isBuffer(arg) {
    return arg instanceof Buffer;
  };

  var inherits_browser$1 = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var inherits$1 = createCommonjsModule(function (module) {
  try {
    var util = util$2;
    if (typeof util.inherits !== 'function') throw '';
    module.exports = util.inherits;
  } catch (e) {
    module.exports = inherits_browser$1;
  }
  });

  var util$1 = createCommonjsModule(function (module, exports) {
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(commonjsGlobal.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = isBuffer$3;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = inherits$1;

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  });
  var util_1 = util$1.format;
  var util_2 = util$1.deprecate;
  var util_3 = util$1.debuglog;
  var util_4 = util$1.inspect;
  var util_5 = util$1.isArray;
  var util_6 = util$1.isBoolean;
  var util_7 = util$1.isNull;
  var util_8 = util$1.isNullOrUndefined;
  var util_9 = util$1.isNumber;
  var util_10 = util$1.isString;
  var util_11 = util$1.isSymbol;
  var util_12 = util$1.isUndefined;
  var util_13 = util$1.isRegExp;
  var util_14 = util$1.isObject;
  var util_15 = util$1.isDate;
  var util_16 = util$1.isError;
  var util_17 = util$1.isFunction;
  var util_18 = util$1.isPrimitive;
  var util_19 = util$1.isBuffer;
  var util_20 = util$1.log;
  var util_21 = util$1.inherits;
  var util_22 = util$1._extend;

  var path$2 = createCommonjsModule(function (module) {


  var isWindows = process.platform === 'win32';



  // resolves . and .. elements in a path array with directory names there
  // must be no slashes or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    var res = [];
    for (var i = 0; i < parts.length; i++) {
      var p = parts[i];

      // ignore empty parts
      if (!p || p === '.')
        continue;

      if (p === '..') {
        if (res.length && res[res.length - 1] !== '..') {
          res.pop();
        } else if (allowAboveRoot) {
          res.push('..');
        }
      } else {
        res.push(p);
      }
    }

    return res;
  }

  // returns an array with empty elements removed from either end of the input
  // array or the original array if no elements need to be removed
  function trimArray(arr) {
    var lastIndex = arr.length - 1;
    var start = 0;
    for (; start <= lastIndex; start++) {
      if (arr[start])
        break;
    }

    var end = lastIndex;
    for (; end >= 0; end--) {
      if (arr[end])
        break;
    }

    if (start === 0 && end === lastIndex)
      return arr;
    if (start > end)
      return [];
    return arr.slice(start, end + 1);
  }

  // Regex to split a windows path into three parts: [*, device, slash,
  // tail] windows-only
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

  // Regex to split the tail part of the above into [*, dir, basename, ext]
  var splitTailRe =
      /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

  var win32 = {};

  // Function to split a filename into [root, dir, basename, ext]
  function win32SplitPath(filename) {
    // Separate device+slash from tail
    var result = splitDeviceRe.exec(filename),
        device = (result[1] || '') + (result[2] || ''),
        tail = result[3] || '';
    // Split the tail into dir, basename and extension
    var result2 = splitTailRe.exec(tail),
        dir = result2[1],
        basename = result2[2],
        ext = result2[3];
    return [device, dir, basename, ext];
  }

  function win32StatPath(path) {
    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = !!device && device[1] !== ':';
    return {
      device: device,
      isUnc: isUnc,
      isAbsolute: isUnc || !!result[2], // UNC paths are always absolute
      tail: result[3]
    };
  }

  function normalizeUNCRoot(device) {
    return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
  }

  // path.resolve([from ...], to)
  win32.resolve = function() {
    var resolvedDevice = '',
        resolvedTail = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1; i--) {
      var path;
      if (i >= 0) {
        path = arguments[i];
      } else if (!resolvedDevice) {
        path = process.cwd();
      } else {
        // Windows has the concept of drive-specific current working
        // directories. If we've resolved a drive letter but not yet an
        // absolute path, get cwd for that drive. We're sure the device is not
        // an unc path at this points, because unc paths are always absolute.
        path = process.env['=' + resolvedDevice];
        // Verify that a drive-local cwd was found and that it actually points
        // to our drive. If not, default to the drive's root.
        if (!path || path.substr(0, 3).toLowerCase() !==
            resolvedDevice.toLowerCase() + '\\') {
          path = resolvedDevice + '\\';
        }
      }

      // Skip empty and invalid entries
      if (!util$1.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      var result = win32StatPath(path),
          device = result.device,
          isUnc = result.isUnc,
          isAbsolute = result.isAbsolute,
          tail = result.tail;

      if (device &&
          resolvedDevice &&
          device.toLowerCase() !== resolvedDevice.toLowerCase()) {
        // This path points to another device so it is not applicable
        continue;
      }

      if (!resolvedDevice) {
        resolvedDevice = device;
      }
      if (!resolvedAbsolute) {
        resolvedTail = tail + '\\' + resolvedTail;
        resolvedAbsolute = isAbsolute;
      }

      if (resolvedDevice && resolvedAbsolute) {
        break;
      }
    }

    // Convert slashes to backslashes when `resolvedDevice` points to an UNC
    // root. Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      resolvedDevice = normalizeUNCRoot(resolvedDevice);
    }

    // At this point the path should be resolved to a full absolute path,
    // but handle relative paths to be safe (might happen when process.cwd()
    // fails)

    // Normalize the tail path
    resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/),
                                  !resolvedAbsolute).join('\\');

    return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
           '.';
  };


  win32.normalize = function(path) {
    var result = win32StatPath(path),
        device = result.device,
        isUnc = result.isUnc,
        isAbsolute = result.isAbsolute,
        tail = result.tail,
        trailingSlash = /[\\\/]$/.test(tail);

    // Normalize the tail path
    tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');

    if (!tail && !isAbsolute) {
      tail = '.';
    }
    if (tail && trailingSlash) {
      tail += '\\';
    }

    // Convert slashes to backslashes when `device` points to an UNC root.
    // Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      device = normalizeUNCRoot(device);
    }

    return device + (isAbsolute ? '\\' : '') + tail;
  };


  win32.isAbsolute = function(path) {
    return win32StatPath(path).isAbsolute;
  };

  win32.join = function() {
    var paths = [];
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!util$1.isString(arg)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      if (arg) {
        paths.push(arg);
      }
    }

    var joined = paths.join('\\');

    // Make sure that the joined path doesn't start with two slashes, because
    // normalize() will mistake it for an UNC path then.
    //
    // This step is skipped when it is very clear that the user actually
    // intended to point at an UNC path. This is assumed when the first
    // non-empty string arguments starts with exactly two slashes followed by
    // at least one more non-slash character.
    //
    // Note that for normalize() to treat a path as an UNC path it needs to
    // have at least 2 components, so we don't filter for that here.
    // This means that the user can use join to construct UNC paths from
    // a server name and a share name; for example:
    //   path.join('//server', 'share') -> '\\\\server\\share\')
    if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
      joined = joined.replace(/^[\\\/]{2,}/, '\\');
    }

    return win32.normalize(joined);
  };


  // path.relative(from, to)
  // it will solve the relative path from 'from' to 'to', for instance:
  // from = 'C:\\orandea\\test\\aaa'
  // to = 'C:\\orandea\\impl\\bbb'
  // The output of the function should be: '..\\..\\impl\\bbb'
  win32.relative = function(from, to) {
    from = win32.resolve(from);
    to = win32.resolve(to);

    // windows is not case sensitive
    var lowerFrom = from.toLowerCase();
    var lowerTo = to.toLowerCase();

    var toParts = trimArray(to.split('\\'));

    var lowerFromParts = trimArray(lowerFrom.split('\\'));
    var lowerToParts = trimArray(lowerTo.split('\\'));

    var length = Math.min(lowerFromParts.length, lowerToParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (lowerFromParts[i] !== lowerToParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    if (samePartsLength == 0) {
      return to;
    }

    var outputParts = [];
    for (var i = samePartsLength; i < lowerFromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('\\');
  };


  win32._makeLong = function(path) {
    // Note: this will *probably* throw somewhere.
    if (!util$1.isString(path))
      return path;

    if (!path) {
      return '';
    }

    var resolvedPath = win32.resolve(path);

    if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
      // path is local filesystem path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\' + resolvedPath;
    } else if (/^\\\\[^?.]/.test(resolvedPath)) {
      // path is network UNC path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\UNC\\' + resolvedPath.substring(2);
    }

    return path;
  };


  win32.dirname = function(path) {
    var result = win32SplitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  };


  win32.basename = function(path, ext) {
    var f = win32SplitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  };


  win32.extname = function(path) {
    return win32SplitPath(path)[3];
  };


  win32.format = function(pathObject) {
    if (!util$1.isObject(pathObject)) {
      throw new TypeError(
          "Parameter 'pathObject' must be an object, not " + typeof pathObject
      );
    }

    var root = pathObject.root || '';

    if (!util$1.isString(root)) {
      throw new TypeError(
          "'pathObject.root' must be a string or undefined, not " +
          typeof pathObject.root
      );
    }

    var dir = pathObject.dir;
    var base = pathObject.base || '';
    if (!dir) {
      return base;
    }
    if (dir[dir.length - 1] === win32.sep) {
      return dir + base;
    }
    return dir + win32.sep + base;
  };


  win32.parse = function(pathString) {
    if (!util$1.isString(pathString)) {
      throw new TypeError(
          "Parameter 'pathString' must be a string, not " + typeof pathString
      );
    }
    var allParts = win32SplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };


  win32.sep = '\\';
  win32.delimiter = ';';


  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var posix = {};


  function posixSplitPath(filename) {
    return splitPathRe.exec(filename).slice(1);
  }


  // path.resolve([from ...], to)
  // posix version
  posix.resolve = function() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : process.cwd();

      // Skip empty and invalid entries
      if (!util$1.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path[0] === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(resolvedPath.split('/'),
                                  !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  };

  // path.normalize(path)
  // posix version
  posix.normalize = function(path) {
    var isAbsolute = posix.isAbsolute(path),
        trailingSlash = path && path[path.length - 1] === '/';

    // Normalize the path
    path = normalizeArray(path.split('/'), !isAbsolute).join('/');

    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isAbsolute ? '/' : '') + path;
  };

  // posix version
  posix.isAbsolute = function(path) {
    return path.charAt(0) === '/';
  };

  // posix version
  posix.join = function() {
    var path = '';
    for (var i = 0; i < arguments.length; i++) {
      var segment = arguments[i];
      if (!util$1.isString(segment)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      if (segment) {
        if (!path) {
          path += segment;
        } else {
          path += '/' + segment;
        }
      }
    }
    return posix.normalize(path);
  };


  // path.relative(from, to)
  // posix version
  posix.relative = function(from, to) {
    from = posix.resolve(from).substr(1);
    to = posix.resolve(to).substr(1);

    var fromParts = trimArray(from.split('/'));
    var toParts = trimArray(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  };


  posix._makeLong = function(path) {
    return path;
  };


  posix.dirname = function(path) {
    var result = posixSplitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  };


  posix.basename = function(path, ext) {
    var f = posixSplitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  };


  posix.extname = function(path) {
    return posixSplitPath(path)[3];
  };


  posix.format = function(pathObject) {
    if (!util$1.isObject(pathObject)) {
      throw new TypeError(
          "Parameter 'pathObject' must be an object, not " + typeof pathObject
      );
    }

    var root = pathObject.root || '';

    if (!util$1.isString(root)) {
      throw new TypeError(
          "'pathObject.root' must be a string or undefined, not " +
          typeof pathObject.root
      );
    }

    var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
    var base = pathObject.base || '';
    return dir + base;
  };


  posix.parse = function(pathString) {
    if (!util$1.isString(pathString)) {
      throw new TypeError(
          "Parameter 'pathString' must be a string, not " + typeof pathString
      );
    }
    var allParts = posixSplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    allParts[1] = allParts[1] || '';
    allParts[2] = allParts[2] || '';
    allParts[3] = allParts[3] || '';

    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };


  posix.sep = '/';
  posix.delimiter = ':';


  if (isWindows)
    module.exports = win32;
  else /* posix */
    module.exports = posix;

  module.exports.posix = posix;
  module.exports.win32 = win32;
  });
  var path_1 = path$2.posix;
  var path_2 = path$2.win32;

  /* @flow */
  /*::

  type DotenvParseOptions = {
    debug?: boolean
  }

  // keys and values from src
  type DotenvParseOutput = { [string]: string }

  type DotenvConfigOptions = {
    path?: string, // path to .env file
    encoding?: string, // encoding of .env file
    debug?: string // turn on logging for debugging purposes
  }

  type DotenvConfigOutput = {
    parsed?: DotenvParseOutput,
    error?: Error
  }

  */




  function log$1 (message /*: string */) {
    console.log(`[dotenv][DEBUG] ${message}`);
  }

  const NEWLINE = '\n';
  const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
  const RE_NEWLINES = /\\n/g;
  const NEWLINES_MATCH = /\n|\r|\r\n/;

  // Parses src into an Object
  function parse$o (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {
    const debug = Boolean(options && options.debug);
    const obj = {};

    // convert Buffers before splitting into lines and processing
    src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {
      // matching "KEY' and 'VAL' in 'KEY=VAL'
      const keyValueArr = line.match(RE_INI_KEY_VAL);
      // matched?
      if (keyValueArr != null) {
        const key = keyValueArr[1];
        // default undefined or missing values to empty string
        let val = (keyValueArr[2] || '');
        const end = val.length - 1;
        const isDoubleQuoted = val[0] === '"' && val[end] === '"';
        const isSingleQuoted = val[0] === "'" && val[end] === "'";

        // if single or double quoted, remove quotes
        if (isSingleQuoted || isDoubleQuoted) {
          val = val.substring(1, end);

          // if double quoted, expand newlines
          if (isDoubleQuoted) {
            val = val.replace(RE_NEWLINES, NEWLINE);
          }
        } else {
          // remove surrounding whitespace
          val = val.trim();
        }

        obj[key] = val;
      } else if (debug) {
        log$1(`did not match key and value when parsing line ${idx + 1}: ${line}`);
      }
    });

    return obj
  }

  // Populates process.env from .env file
  function config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {
    let dotenvPath = path$3.resolve(process.cwd(), '.env');
    let encoding /*: string */ = 'utf8';
    let debug = false;

    if (options) {
      if (options.path != null) {
        dotenvPath = options.path;
      }
      if (options.encoding != null) {
        encoding = options.encoding;
      }
      if (options.debug != null) {
        debug = true;
      }
    }

    try {
      // specifying an encoding returns a string instead of a buffer
      const parsed = parse$o(fs.readFileSync(dotenvPath, { encoding }), { debug });

      Object.keys(parsed).forEach(function (key) {
        if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
          process.env[key] = parsed[key];
        } else if (debug) {
          log$1(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
        }
      });

      return { parsed }
    } catch (e) {
      return { error: e }
    }
  }

  var config_1 = config;

  config_1();
  const config$1 = {
      httpPeerStale: 15000,
      mediasoup: {
          worker: {
              rtcMinPort: 40000,
              rtcMaxPort: 49999,
              logLevel: "info",
              logTags: ["info", "ice", "dtls", "rtp", "srtp", "rtcp"]
          },
          router: {
              mediaCodecs: [
                  {
                      kind: "audio",
                      mimeType: "audio/opus",
                      clockRate: 48000,
                      channels: 2
                  },
                  {
                      kind: "video",
                      mimeType: "video/VP8",
                      clockRate: 90000,
                      parameters: {
                      //                'x-google-start-bitrate': 1000
                      }
                  },
                  {
                      kind: "video",
                      mimeType: "video/h264",
                      clockRate: 90000,
                      parameters: {
                          "packetization-mode": 1,
                          "profile-level-id": "4d0032",
                          "level-asymmetry-allowed": 1
                      }
                  },
                  {
                      kind: "video",
                      mimeType: "video/h264",
                      clockRate: 90000,
                      parameters: {
                          "packetization-mode": 1,
                          "profile-level-id": "42e01f",
                          "level-asymmetry-allowed": 1
                      }
                  }
              ]
          },
          // rtp listenIps are the most important thing, below. you'll need
          // to set these appropriately for your network for the demo to
          // run anywhere but on localhost
          webRtcTransport: {
              listenIps: [{ ip: "127.0.0.1", announcedIp: null }],
              initialAvailableOutgoingBitrate: 800000
          }
      }
  };
  const defaultRoomState = {
      // external
      peers: {},
      activeSpeaker: { producerId: null, volume: null, peerId: null },
      // internal
      transports: {},
      producers: [],
      consumers: []
  };
  const tls = {
      cert: fs.readFileSync(path$2.resolve(__dirname, "..", process.env.CERT)),
      key: fs.readFileSync(path$2.resolve(__dirname, "..", process.env.KEY)),
      requestCert: false,
      rejectUnauthorized: false
  };
  class SocketWebRTCServerTransport {
      constructor() {
          this.expressApp = express$1();
          this.clients = [];
          this.roomState = defaultRoomState;
      }
      sendAllReliableMessages() {
          // TODO: Analyze, we might want to route messages better to only specific clients
          while (!MessageQueue.instance.outgoingReliableQueue.empty) {
              const message = MessageQueue.instance.outgoingReliableQueue.pop;
              console.log(message);
              this.socketIO.emit(MessageTypes.ReliableMessage, message);
          }
      }
      initialize(address = "127.0.0.1", port = 3001) {
          return __awaiter(this, void 0, void 0, function* () {
              config$1.mediasoup.webRtcTransport.listenIps = [{ ip: address + ":" + port, announcedIp: null }];
              yield this.startMediasoup();
              // start https server
              console.log("Starting Express");
              this.server = https.createServer(tls, this.expressApp);
              this.server.on("error", e => console.error("https server error,", e.message));
              yield new Promise(resolve => {
                  this.server.listen(port, address, () => {
                      console.log(`https server listening on port ${port}`);
                      resolve();
                  });
              });
              // Start Websockets
              console.log("Starting websockets");
              this.socketIO = lib$9(this.server);
              // every 5 seconds, check for inactive clients and send them into cyberspace
              setInterval(() => {
                  console.log("Clearing the noobs");
                  for (let id = 0; id < this.clients.length; id++)
                      if (Date.now() - this.clients[id].lastSeenTs > 10000)
                          console.log("Culling inactive user with id", id);
              }, 5000);
              this.socketIO.on(MessageTypes.ConnectionRequest, socket => {
                  console.log("User " + socket.id + " connected, there are " + this.socketIO.engine.clientsCount + " clients connected");
                  //Add a new client indexed by his id
                  this.clients.push(socket.id);
                  // Respond to initialization request with a list of clients
                  socket.emit(MessageTypes.InitializationResponse, socket.id, Object.keys(this.clients));
                  //Update everyone that the number of users has changed
                  this.socketIO.sockets.emit(MessageTypes.ClientConnected, this.socketIO.engine.clientsCount, socket.id, Object.keys(this.clients));
                  // On heartbeat received from client
                  socket.on(MessageTypes.Heartbeat, () => {
                      if (this.clients[socket.id])
                          this.clients[socket.id].lastSeenTs = Date.now();
                      else
                          console.log("Receiving message from peer who isn't in client list");
                  });
                  // Handle the disconnection
                  socket.on(MessageTypes.DisconnectionRequest, () => {
                      //Delete this client from the object
                      delete this.clients[socket.id];
                      this.socketIO.sockets.emit(MessageTypes.ClientDisconnected, socket.id, Object.keys(this.clients));
                      console.log("User " + socket.id + " diconnected, there are " + this.socketIO.engine.clientsCount + " clients connected");
                  });
                  // If a reliable message is received, add it to the queue
                  socket.on(MessageTypes.ReliableMessage, (message) => {
                      MessageQueue.instance.incomingReliableQueue.add(message);
                  });
                  //*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//
                  // Mediasoup Signaling:
                  // --> /signaling/sync
                  // client polling endpoint. send back our 'peers' data structure
                  socket.on(MessageTypes.SynchronizationRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      // make sure this peer is connected. if we've disconnected the
                      // peer because of a network outage we want the peer to know that
                      // happened, when/if it returns
                      if (!this.roomState.peers[socket.id])
                          throw new Error("not connected");
                      // update our most-recently-seem timestamp -- we're not stale!
                      this.roomState.peers[socket.id].lastSeenTs = Date.now();
                      callback({
                          peers: this.roomState.peers
                      });
                  }));
                  // --> /signaling/join-as-new-peer
                  // adds the peer to the roomState data structure and creates a
                  // transport that the peer will use for receiving media. returns
                  // router rtpCapabilities for mediasoup-client device initialization
                  socket.on(MessageTypes.JoinWorldRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const peerId = socket.id;
                      const now = Date.now();
                      console.log("Join world request", peerId);
                      this.roomState.peers[peerId] = {
                          joinTs: now,
                          lastSeenTs: now,
                          media: {},
                          consumerLayers: {},
                          stats: {}
                      };
                      callback({ routerRtpCapabilities: this.router.rtpCapabilities });
                  }));
                  // --> /signaling/leave
                  // removes the peer from the roomState data structure and and closes
                  // all associated mediasoup objects
                  socket.on(MessageTypes.LeaveWorldRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      console.log("leave", socket.id);
                      yield this.closePeer(socket.id);
                      callback({ left: true });
                  }));
                  // --> /signaling/create-transport
                  // create a mediasoup transport object and send back info needed
                  // to create a transport object on the client side
                  socket.on(MessageTypes.WebRTCTransportCreateRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const peerId = socket.id;
                      const { direction } = data;
                      console.log("WebRTCTransportCreateRequest", peerId, direction);
                      const transport = yield this.createWebRtcTransport({ peerId, direction });
                      this.roomState.transports[transport.id] = transport;
                      const { id, iceParameters, iceCandidates, dtlsParameters } = transport;
                      callback({
                          transportOptions: {
                              id,
                              iceParameters,
                              iceCandidates,
                              dtlsParameters
                          }
                      });
                  }));
                  // --> /signaling/connect-transport
                  // called from inside a client's `transport.on('connect')` event
                  // handler.
                  socket.on(MessageTypes.WebRTCTransportConnectRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { transportId, dtlsParameters } = data, transport = this.roomState.transports[transportId];
                      console.log("WebRTCTransportConnectRequest", socket.id, transport.appData);
                      yield transport.connect({ dtlsParameters });
                      callback({ connected: true });
                  }));
                  // called by a client that wants to close a single transport (for
                  // example, a client that is no longer sending any media).
                  socket.on(MessageTypes.WebRTCTransportCloseRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      console.log("close-transport", socket.id, this.transport.appData);
                      const { transportId } = data;
                      this.transport = this.roomState.transports[transportId];
                      yield this.closeTransport(this.transport);
                      callback({ closed: true });
                  }));
                  // called by a client that is no longer sending a specific track
                  socket.on(MessageTypes.WebRTCCloseProducerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { producerId } = data, producer = this.roomState.producers.find(p => p.id === producerId);
                      console.log("WebRTCCloseProducerRequest", socket.id, producer.appData);
                      yield this.closeProducerAndAllPipeProducers(producer, socket.id);
                      callback({ closed: true });
                  }));
                  // called from inside a client's `transport.on('produce')` event handler.
                  socket.on(MessageTypes.WebRTCSendTrackRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const peerId = socket.id;
                      const { transportId, kind, rtpParameters, paused = false, appData } = data, transport = this.roomState.transports[transportId];
                      const producer = yield transport.produce({
                          kind,
                          rtpParameters,
                          paused,
                          appData: Object.assign(Object.assign({}, appData), { peerID: peerId, transportId })
                      });
                      // if our associated transport closes, close ourself, too
                      producer.on("transportclose", () => {
                          console.log("producer's transport closed", producer.id);
                          this.closeProducerAndAllPipeProducers(producer, peerId);
                      });
                      this.roomState.producers.push(producer);
                      this.roomState.peers[peerId].media[appData.mediaTag] = {
                          paused,
                          encodings: rtpParameters.encodings
                      };
                      callback({ id: producer.id });
                  }));
                  // --> /signaling/recv-track
                  // create a mediasoup consumer object, hook it up to a producer here
                  // on the server side, and send back info needed to create a consumer
                  // object on the client side. always start consumers paused. client
                  // will request media to resume when the connection completes
                  socket.on(MessageTypes.WebRTCReceiveTrackRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { mediaPeerId, mediaTag, rtpCapabilities } = data;
                      const peerId = socket.id;
                      const producer = this.roomState.producers.find(p => p.appData.mediaTag === mediaTag && p.appData.peerId === mediaPeerId);
                      if (!this.router.canConsume({ producerId: producer.id, rtpCapabilities })) {
                          const msg = `client cannot consume ${mediaPeerId}:${mediaTag}`;
                          console.error(`recv-track: ${peerId} ${msg}`);
                          callback({ error: msg });
                          return;
                      }
                      const transport = Object.values(this.roomState.transports).find(t => t.appData.peerId === peerId && t.appData.clientDirection === "recv");
                      const consumer = yield transport.consume({
                          producerId: producer.id,
                          rtpCapabilities,
                          paused: true,
                          appData: { peerId, mediaPeerId, mediaTag }
                      });
                      // need both 'transportclose' and 'producerclose' event handlers,
                      // to make sure we close and clean up consumers in all
                      // circumstances
                      consumer.on("transportclose", () => {
                          console.log(`consumer's transport closed`, consumer.id);
                          this.closeConsumer(consumer);
                      });
                      consumer.on("producerclose", () => {
                          console.log(`consumer's producer closed`, consumer.id);
                          this.closeConsumer(consumer);
                      });
                      // stick this consumer in our list of consumers to keep track of,
                      // and create a data structure to track the client-relevant state
                      // of this consumer
                      this.roomState.consumers.push(consumer);
                      this.roomState.peers[peerId].consumerLayers[consumer.id] = {
                          currentLayer: null,
                          clientSelectedLayer: null
                      };
                      // update above data structure when layer changes.
                      consumer.on("layerschange", layers => {
                          console.log(`consumer layerschange ${mediaPeerId}->${peerId}`, mediaTag, layers);
                          if (this.roomState.peers[peerId] && this.roomState.peers[peerId].consumerLayers[consumer.id]) {
                              this.roomState.peers[peerId].consumerLayers[consumer.id].currentLayer = layers && layers.spatialLayer;
                          }
                      });
                      callback({
                          producerId: producer.id,
                          id: consumer.id,
                          kind: consumer.kind,
                          rtpParameters: consumer.rtpParameters,
                          type: consumer.type,
                          producerPaused: consumer.producerPaused
                      });
                  }));
                  // --> /signaling/pause-consumer
                  // called to pause receiving a track for a specific client
                  socket.on(MessageTypes.WebRTCPauseConsumerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { consumerId } = data, consumer = this.roomState.consumers.find(c => c.id === consumerId);
                      console.log("pause-consumer", consumer.appData);
                      yield consumer.pause();
                      callback({ paused: true });
                  }));
                  // --> /signaling/resume-consumer
                  // called to resume receiving a track for a specific client
                  socket.on(MessageTypes.WebRTCResumeConsumerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { consumerId } = data, consumer = this.roomState.consumers.find(c => c.id === consumerId);
                      console.log("resume-consumer", consumer.appData);
                      yield consumer.resume();
                      callback({ resumed: true });
                  }));
                  // --> /signalign/close-consumer
                  // called to stop receiving a track for a specific client. close and
                  // clean up consumer object
                  socket.on(MessageTypes.WebRTCCloseConsumerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { consumerId } = data, consumer = this.roomState.consumers.find(c => c.id === consumerId);
                      console.log("WebRTCCloseConsumerRequest", data);
                      yield this.closeConsumer(consumer);
                      callback({ closed: true });
                  }));
                  // --> /signaling/consumer-set-layers
                  // called to set the largest spatial layer that a specific client
                  // wants to receive
                  socket.on(MessageTypes.WebRTCConsumerSetLayersRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { consumerId, spatialLayer } = data, consumer = this.roomState.consumers.find(c => c.id === consumerId);
                      console.log("consumer-set-layers", spatialLayer, consumer.appData);
                      yield consumer.setPreferredLayers({ spatialLayer });
                      callback({ layersSet: true });
                  }));
                  // --> /signaling/pause-producer
                  // called to stop sending a track from a specific client
                  socket.on(MessageTypes.WebRTCCloseProducerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { producerId } = data, producer = this.roomState.producers.find(p => p.id === producerId);
                      console.log("pause-producer", producer.appData);
                      yield producer.pause();
                      this.roomState.peers[socket.id].media[producer.appData.mediaTag].paused = true;
                      callback({ paused: true });
                  }));
                  // --> /signaling/resume-producer
                  // called to resume sending a track from a specific client
                  socket.on(MessageTypes.WebRTCResumeProducerRequest, (data, callback) => __awaiter(this, void 0, void 0, function* () {
                      const { producerId } = data, producer = this.roomState.producers.find(p => p.id === producerId);
                      console.log("resume-producer", producer.appData);
                      yield producer.resume();
                      this.roomState.peers[socket.id].media[producer.appData.mediaTag].paused = false;
                      callback({ resumed: true });
                  }));
              });
          });
      }
      // start mediasoup with a single worker and router
      startMediasoup() {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("Starting mediasoup");
              // Initialize roomstate
              this.roomState = defaultRoomState;
              console.log("Worker starting");
              try {
                  this.worker = yield mediasoup.createWorker({
                      rtcMinPort: config$1.mediasoup.worker.rtcMinPort,
                      rtcMaxPort: config$1.mediasoup.worker.rtcMaxPort
                  });
              }
              catch (e) {
                  console.log("Failed jwith exception:");
                  console.log(e);
              }
              this.worker.on("died", () => {
                  console.error("mediasoup worker died (this should never happen)");
                  process.exit(1);
              });
              console.log("Worker got created");
              const mediaCodecs = config$1.mediasoup.router.mediaCodecs;
              this.router = yield this.worker.createRouter({ mediaCodecs });
              console.log("Worer created router");
          });
      }
      closePeer(peerId) {
          console.log("closing peer", peerId);
          for (const [, transport] of Object.entries(this.roomState.transports))
              if (transport.appData.peerId === peerId)
                  this.closeTransport(transport);
          delete this.roomState.peers[peerId];
      }
      closeTransport(transport) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("closing transport", transport.id, transport.appData);
              // our producer and consumer event handlers will take care of
              // calling closeProducer() and closeConsumer() on all the producers
              // and consumers associated with this transport
              yield transport.close();
              // so all we need to do, after we call transport.close(), is update
              // our roomState data structure
              delete this.roomState.transports[transport.id];
          });
      }
      closeProducer(producer) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("closing producer", producer.id, producer.appData);
              yield producer.close();
              // remove this producer from our roomState.producers list
              this.roomState.producers = this.roomState.producers.filter(p => p.id !== producer.id);
              // remove this track's info from our roomState...mediaTag bookkeeping
              if (this.roomState.peers[producer.appData.peerId])
                  delete this.roomState.peers[producer.appData.peerId].media[producer.appData.mediaTag];
          });
      }
      closeProducerAndAllPipeProducers(producer, peerId) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("closing producer", producer.id, producer.appData);
              // first, close all of the pipe producer clones
              console.log("Closing all pipe producers for peer with id", peerId);
              // remove this producer from our roomState.producers list
              this.roomState.producers = this.roomState.producers.filter(p => p.id !== producer.id);
              // finally, close the original producer
              yield producer.close();
              // remove this producer from our roomState.producers list
              this.roomState.producers = this.roomState.producers.filter(p => p.id !== producer.id);
              // remove this track's info from our roomState...mediaTag bookkeeping
              if (this.roomState.peers[producer.appData.peerId])
                  delete this.roomState.peers[producer.appData.peerId].media[producer.appData.mediaTag];
          });
      }
      closeConsumer(consumer) {
          return __awaiter(this, void 0, void 0, function* () {
              console.log("closing consumer", consumer.id, consumer.appData);
              yield consumer.close();
              // remove this consumer from our roomState.consumers list
              this.roomState.consumers = this.roomState.consumers.filter(c => c.id !== consumer.id);
              // remove layer info from from our roomState...consumerLayers bookkeeping
              if (this.roomState.peers[consumer.appData.peerId])
                  delete this.roomState.peers[consumer.appData.peerId].consumerLayers[consumer.id];
          });
      }
      createWebRtcTransport({ peerId, direction }) {
          return __awaiter(this, void 0, void 0, function* () {
              const { listenIps, initialAvailableOutgoingBitrate } = config$1.mediasoup.webRtcTransport;
              const transport = yield this.router.createWebRtcTransport({
                  listenIps: listenIps,
                  enableUdp: true,
                  enableTcp: true,
                  preferUdp: true,
                  initialAvailableOutgoingBitrate: initialAvailableOutgoingBitrate,
                  appData: { peerId, clientDirection: direction }
              });
              return transport;
          });
      }
  }

  function CreateTransport() {
      if (isBrowser)
          return new SocketWebRTCClientTransport();
      else
          return new SocketWebRTCServerTransport();
  }

  const DEFAULT_OPTIONS = {
      debug: false
  };
  // TODO: Make this a static function on InputSystem
  function initializeInputSystems(world, options = DEFAULT_OPTIONS) {
      if (options.debug)
          console.log("Initializing input systems...");
      if (!isBrowser) {
          console.error("Couldn't initialize input, are you in a browser?");
          return null;
      }
      if (options.debug) {
          console.log("Registering input systems with the following options:");
          console.log(options);
      }
      world.registerSystem(InputSystem).registerSystem(StateSystem);
      world
          .registerComponent(Input)
          .registerComponent(State)
          .registerComponent(Actor)
          .registerComponent(Subscription)
          .registerComponent(TransformComponent);
      return world;
  }
  // TODO: Make this a static function on ActorSystem
  function initializeActor(entity, options) {
      entity
          .addComponent(Input)
          .addComponent(State)
          .addComponent(Actor)
          .addComponent(Subscription)
          .addComponent(TransformComponent);
      // Custom Action Map
      if (options.inputMap) {
          console.log("Using input map:");
          console.log(options.inputMap);
          entity.getMutableComponent(Input).map = options.inputMap;
      }
      else {
          console.log("No input map provided, defaulting to default input");
          entity.getMutableComponent(Input).map = DefaultInputMap;
      }
      // Custom Action Map
      if (options.stateMap) {
          console.log("Using input map:");
          console.log(options.stateMap);
          entity.getMutableComponent(State).map = options.stateMap;
      }
      else {
          console.log("No input map provided, defaulting to default input");
          entity.getMutableComponent(State).map = DefaultStateSchema;
      }
      return entity;
  }
  // TODO: Make this a static function on NetworkSystem
  function initializeNetworking(world, transport) {
      const t = transport ? transport : CreateTransport();
      world
          .registerSystem(NetworkSystem)
          .registerComponent(NetworkObject)
          .registerComponent(NetworkPlayer);
      if (t.supportsMediaStreams)
          world.registerSystem(MediaStreamControlSystem);
      const networkSystem = world.getSystem(NetworkSystem);
      networkSystem.initializeSession(world, t);
  }

  exports.DefaultInput = DefaultInput;
  exports.DefaultInputMap = DefaultInputMap;
  exports.DefaultStateGroups = DefaultStateGroups;
  exports.DefaultStateSchema = DefaultStateSchema;
  exports.DefaultStateTypes = DefaultStateTypes;
  exports.MouseButtons = MouseButtons;
  exports.TransformComponent = TransformComponent;
  exports.addState = addState;
  exports.decelerate = decelerate;
  exports.handleGamepadAxis = handleGamepadAxis;
  exports.handleGamepadConnected = handleGamepadConnected;
  exports.handleGamepadDisconnected = handleGamepadDisconnected;
  exports.handleGamepads = handleGamepads;
  exports.handleInput = handleInput;
  exports.handleKey = handleKey;
  exports.handleMouseButton = handleMouseButton;
  exports.handleMouseMovement = handleMouseMovement;
  exports.hasState = hasState;
  exports.initializeActor = initializeActor;
  exports.initializeInputSystems = initializeInputSystems;
  exports.initializeNetworking = initializeNetworking;
  exports.jump = jump;
  exports.jumping = jumping;
  exports.move = move;
  exports.removeState = removeState;
  exports.rotateAround = rotateAround;
  exports.toggleState = toggleState;
  exports.updatePosition = updatePosition;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=armada.umd.js.map
