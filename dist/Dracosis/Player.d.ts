/// <reference types="node" />
import { WorkerInitializationResponse } from './Interfaces';
import { Scene, Renderer, BufferGeometry, CompressedTexture, MeshBasicMaterial, Mesh } from 'three';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';
export default class DracosisPlayer {
    frameRate: number;
    speed: number;
    scene: Scene;
    renderer: Renderer;
    mesh: Mesh;
    material: MeshBasicMaterial;
    bufferGeometry: BufferGeometry;
    compressedTexture: CompressedTexture;
    dracoLoader: DRACOLoader;
    private _startFrame;
    private _endFrame;
    private _numberOfFrames;
    private _currentFrame;
    private _loop;
    private _playOnStart;
    private _isinitialized;
    private _onLoaded;
    private _ringBuffer;
    private _dataBufferSize;
    private _filePath;
    private _isPlaying;
    private _fileHeader;
    private _fileReadStream;
    private _readStreamOffset;
    private _basisTextureLoader;
    private _decoderModule;
    private _encoderModule;
    private _nullBufferGeometry;
    private _nullCompressedTexture;
    private _pos;
    private _frameNumber;
    private _framesUpdated;
    private _numberOfBuffersRemoved;
    get currentFrame(): number;
    get startFrame(): number;
    set startFrame(value: number);
    get endFrame(): number;
    set endFrame(value: number);
    get loop(): boolean;
    set loop(value: boolean);
    httpGetAsync(theUrl: any, callback: any): void;
    constructor(scene: any, renderer: any, filePath: string, onLoaded: any, playOnStart?: boolean, loop?: boolean, startFrame?: number, endFrame?: number, speedMultiplier?: number, bufferSize?: number);
    decodeDracoData(rawBuffer: Buffer): BufferGeometry;
    getBufferFromDracoGeometry(uncompressedDracoMesh: any, decoder: any): BufferGeometry;
    decodeTexture(compressedTexture: any, frameNumber: any): Promise<any>;
    handleMessage(data: any): void;
    handleInitializationResponse(data: WorkerInitializationResponse): void;
    handleDataResponse(data: any): void;
    getPositionInBuffer(frameNumber: number): number;
    handleBuffers(): NodeJS.Timeout;
    update(): void;
    play(): void;
    pause(): void;
    reset(): void;
    goToFrame(frame: number, play: boolean): void;
    setSpeed(multiplyScalar: number): void;
    show(): void;
    hide(): void;
    fadeIn(stepLength: number, fadeTime: number, currentTime?: number): void;
    fadeOut(stepLength: number, fadeTime: number, currentTime?: number): void;
}
