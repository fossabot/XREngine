{"version":3,"file":"armada.js","sources":["../node_modules/ecsy/src/Utils.js","../node_modules/ecsy/src/EventDispatcher.js","../node_modules/ecsy/src/Query.js","../node_modules/ecsy/src/Component.js","../node_modules/ecsy/src/System.js","../node_modules/ecsy/src/Types.js","../node_modules/ecsy/src/RemoteDevTools/utils.js","../node_modules/ecsy/src/RemoteDevTools/index.js","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js"],"sourcesContent":["/**\n * Return the name of a component\n * @param {Component} Component\n * @private\n */\nexport function getName(Component) {\n  return Component.name;\n}\n\n/**\n * Return a valid property name for the Component\n * @param {Component} Component\n * @private\n */\nexport function componentPropertyName(Component) {\n  return getName(Component);\n}\n\n/**\n * Get a key from a list of components\n * @param {Array(Component)} Components Array of components to generate the key\n * @private\n */\nexport function queryKey(Components) {\n  var names = [];\n  for (var n = 0; n < Components.length; n++) {\n    var T = Components[n];\n    if (typeof T === \"object\") {\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\n      names.push(operator + getName(T.Component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names.sort().join(\"-\");\n}\n\n// Detector for browser's \"window\"\nexport const hasWindow = typeof window !== \"undefined\";\n\n// performance.now() \"polyfill\"\nexport const now =\n  hasWindow && typeof window.performance !== \"undefined\"\n    ? performance.now.bind(performance)\n    : Date.now.bind(Date);\n","/**\n * @private\n * @class EventDispatcher\n */\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = {};\n    this.stats = {\n      fired: 0,\n      handled: 0\n    };\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} eventName Name of the event to listen\n   * @param {Function} listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName, listener) {\n    let listeners = this._listeners;\n    if (listeners[eventName] === undefined) {\n      listeners[eventName] = [];\n    }\n\n    if (listeners[eventName].indexOf(listener) === -1) {\n      listeners[eventName].push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param {String} eventName Name of the event to check\n   * @param {Function} listener Callback for the specified event\n   */\n  hasEventListener(eventName, listener) {\n    return (\n      this._listeners[eventName] !== undefined &&\n      this._listeners[eventName].indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param {String} eventName Name of the event to remove\n   * @param {Function} listener Callback for the specified event\n   */\n  removeEventListener(eventName, listener) {\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {String} eventName Name of the event to dispatch\n   * @param {Entity} entity (Optional) Entity to emit\n   * @param {Component} component\n   */\n  dispatchEvent(eventName, entity, component) {\n    this.stats.fired++;\n\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var array = listenerArray.slice(0);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i].call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n","import EventDispatcher from \"./EventDispatcher.js\";\nimport { queryKey } from \"./Utils.js\";\n\nexport default class Query {\n  /**\n   * @param {Array(Component)} Components List of types of components to query\n   */\n  constructor(Components, manager) {\n    this.Components = [];\n    this.NotComponents = [];\n\n    Components.forEach(component => {\n      if (typeof component === \"object\") {\n        this.NotComponents.push(component.Component);\n      } else {\n        this.Components.push(component);\n      }\n    });\n\n    if (this.Components.length === 0) {\n      throw new Error(\"Can't create a query without components\");\n    }\n\n    this.entities = [];\n\n    this.eventDispatcher = new EventDispatcher();\n\n    // This query is being used by a reactive system\n    this.reactive = false;\n\n    this.key = queryKey(Components);\n\n    // Fill the query with the existing entities\n    for (var i = 0; i < manager._entities.length; i++) {\n      var entity = manager._entities[i];\n      if (this.match(entity)) {\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   * @param {Entity} entity\n   */\n  removeEntity(entity) {\n    let index = this.entities.indexOf(entity);\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(\n        Query.prototype.ENTITY_REMOVED,\n        entity\n      );\n    }\n  }\n\n  match(entity) {\n    return (\n      entity.hasAllComponents(this.Components) &&\n      !entity.hasAnyComponents(this.NotComponents)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.Components.map(C => C.name),\n        not: this.NotComponents.map(C => C.name)\n      },\n      numEntities: this.entities.length\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.Components.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\n","export class Component {\n  constructor(props) {\n    if (props !== false) {\n      const schema = this.constructor.schema;\n\n      for (const key in schema) {\n        if (props && props.hasOwnProperty(key)) {\n          this[key] = props[key];\n        } else {\n          const schemaProp = schema[key];\n          if (schemaProp.hasOwnProperty(\"default\")) {\n            this[key] = schemaProp.type.clone(schemaProp.default);\n          } else {\n            const type = schemaProp.type;\n            this[key] = type.clone(type.default);\n          }\n        }\n      }\n    }\n\n    this._pool = null;\n  }\n\n  copy(source) {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const prop = schema[key];\n\n      if (source.hasOwnProperty(key)) {\n        this[key] = prop.type.copy(source[key], this[key]);\n      }\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  reset() {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const schemaProp = schema[key];\n\n      if (schemaProp.hasOwnProperty(\"default\")) {\n        this[key] = schemaProp.type.copy(schemaProp.default, this[key]);\n      } else {\n        const type = schemaProp.type;\n        this[key] = type.copy(type.default, this[key]);\n      }\n    }\n  }\n\n  dispose() {\n    if (this._pool) {\n      this._pool.release(this);\n    }\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n}\n\nComponent.schema = {};\nComponent.isComponent = true;\nComponent.getName = function() {\n  return this.displayName || this.name;\n};\n","import Query from \"./Query.js\";\n\nexport class System {\n  canExecute() {\n    if (this._mandatoryQueries.length === 0) return true;\n\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\n      var query = this._mandatoryQueries[i];\n      if (query.entities.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n\n  constructor(world, attributes) {\n    this.world = world;\n    this.enabled = true;\n\n    // @todo Better naming :)\n    this._queries = {};\n    this.queries = {};\n\n    this.priority = 0;\n\n    // Used for stats\n    this.executeTime = 0;\n\n    if (attributes && attributes.priority) {\n      this.priority = attributes.priority;\n    }\n\n    this._mandatoryQueries = [];\n\n    this.initialized = true;\n\n    if (this.constructor.queries) {\n      for (var queryName in this.constructor.queries) {\n        var queryConfig = this.constructor.queries[queryName];\n        var Components = queryConfig.components;\n        if (!Components || Components.length === 0) {\n          throw new Error(\"'components' attribute can't be empty in a query\");\n        }\n        var query = this.world.entityManager.queryComponents(Components);\n        this._queries[queryName] = query;\n        if (queryConfig.mandatory === true) {\n          this._mandatoryQueries.push(query);\n        }\n        this.queries[queryName] = {\n          results: query.entities\n        };\n\n        // Reactive configuration added/removed/changed\n        var validEvents = [\"added\", \"removed\", \"changed\"];\n\n        const eventMapping = {\n          added: Query.prototype.ENTITY_ADDED,\n          removed: Query.prototype.ENTITY_REMOVED,\n          changed: Query.prototype.COMPONENT_CHANGED // Query.prototype.ENTITY_CHANGED\n        };\n\n        if (queryConfig.listen) {\n          validEvents.forEach(eventName => {\n            if (!this.execute) {\n              console.warn(\n                `System '${this.getName()}' has defined listen events (${validEvents.join(\n                  \", \"\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\n              );\n            }\n\n            // Is the event enabled on this system's query?\n            if (queryConfig.listen[eventName]) {\n              let event = queryConfig.listen[eventName];\n\n              if (eventName === \"changed\") {\n                query.reactive = true;\n                if (event === true) {\n                  // Any change on the entity from the components in the query\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    entity => {\n                      // Avoid duplicates\n                      if (eventList.indexOf(entity) === -1) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else if (Array.isArray(event)) {\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity, changedComponent) => {\n                      // Avoid duplicates\n                      if (\n                        event.indexOf(changedComponent.constructor) !== -1 &&\n                        eventList.indexOf(entity) === -1\n                      ) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else {\n                  /*\n                  // Checking just specific components\n                  let changedList = (this.queries[queryName][eventName] = {});\n                  event.forEach(component => {\n                    let eventList = (changedList[\n                      componentPropertyName(component)\n                    ] = []);\n                    query.eventDispatcher.addEventListener(\n                      Query.prototype.COMPONENT_CHANGED,\n                      (entity, changedComponent) => {\n                        if (\n                          changedComponent.constructor === component &&\n                          eventList.indexOf(entity) === -1\n                        ) {\n                          eventList.push(entity);\n                        }\n                      }\n                    );\n                  });\n                  */\n                }\n              } else {\n                let eventList = (this.queries[queryName][eventName] = []);\n\n                query.eventDispatcher.addEventListener(\n                  eventMapping[eventName],\n                  entity => {\n                    // @fixme overhead?\n                    if (eventList.indexOf(entity) === -1)\n                      eventList.push(entity);\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  stop() {\n    this.executeTime = 0;\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  // @question rename to clear queues?\n  clearEvents() {\n    for (let queryName in this.queries) {\n      var query = this.queries[queryName];\n      if (query.added) {\n        query.added.length = 0;\n      }\n      if (query.removed) {\n        query.removed.length = 0;\n      }\n      if (query.changed) {\n        if (Array.isArray(query.changed)) {\n          query.changed.length = 0;\n        } else {\n          for (let name in query.changed) {\n            query.changed[name].length = 0;\n          }\n        }\n      }\n    }\n  }\n\n  toJSON() {\n    var json = {\n      name: this.getName(),\n      enabled: this.enabled,\n      executeTime: this.executeTime,\n      priority: this.priority,\n      queries: {}\n    };\n\n    if (this.constructor.queries) {\n      var queries = this.constructor.queries;\n      for (let queryName in queries) {\n        let query = this.queries[queryName];\n        let queryDefinition = queries[queryName];\n        let jsonQuery = (json.queries[queryName] = {\n          key: this._queries[queryName].key\n        });\n\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\n        jsonQuery.reactive =\n          queryDefinition.listen &&\n          (queryDefinition.listen.added === true ||\n            queryDefinition.listen.removed === true ||\n            queryDefinition.listen.changed === true ||\n            Array.isArray(queryDefinition.listen.changed));\n\n        if (jsonQuery.reactive) {\n          jsonQuery.listen = {};\n\n          const methods = [\"added\", \"removed\", \"changed\"];\n          methods.forEach(method => {\n            if (query[method]) {\n              jsonQuery.listen[method] = {\n                entities: query[method].length\n              };\n            }\n          });\n        }\n      }\n    }\n\n    return json;\n  }\n}\n\nSystem.isSystem = true;\nSystem.getName = function() {\n  return this.displayName || this.name;\n};\n\nexport function Not(Component) {\n  return {\n    operator: \"not\",\n    Component: Component\n  };\n}\n","export const copyValue = src => src;\n\nexport const cloneValue = src => src;\n\nexport const copyArray = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.slice();\n  }\n\n  dest.length = 0;\n\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n\n  return dest;\n};\n\nexport const cloneArray = src => src && src.slice();\n\nexport const copyJSON = src => JSON.parse(JSON.stringify(src));\n\nexport const cloneJSON = src => JSON.parse(JSON.stringify(src));\n\nexport const copyCopyable = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.clone();\n  }\n\n  return dest.copy(src);\n};\n\nexport const cloneClonable = src => src && src.clone();\n\nexport function createType(typeDefinition) {\n  var mandatoryProperties = [\"name\", \"default\", \"copy\", \"clone\"];\n\n  var undefinedProperties = mandatoryProperties.filter(p => {\n    return !typeDefinition.hasOwnProperty(p);\n  });\n\n  if (undefinedProperties.length > 0) {\n    throw new Error(\n      `createType expects a type definition with the following properties: ${undefinedProperties.join(\n        \", \"\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n\n  return typeDefinition;\n}\n\n/**\n * Standard types\n */\nexport const Types = {\n  Number: createType({\n    name: \"Number\",\n    default: 0,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  Boolean: createType({\n    name: \"Boolean\",\n    default: false,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  String: createType({\n    name: \"String\",\n    default: \"\",\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  Array: createType({\n    name: \"Array\",\n    default: [],\n    copy: copyArray,\n    clone: cloneArray\n  }),\n\n  Ref: createType({\n    name: \"Ref\",\n    default: undefined,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  JSON: createType({\n    name: \"JSON\",\n    default: null,\n    copy: copyJSON,\n    clone: cloneJSON\n  })\n};\n","export function generateId(length) {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function injectScript(src, onLoad) {\n  var script = document.createElement(\"script\");\n  // @todo Use link to the ecsy-devtools repo?\n  script.src = src;\n  script.onload = onLoad;\n  (document.head || document.documentElement).appendChild(script);\n}\n","/* global Peer */\nimport { injectScript, generateId } from \"./utils.js\";\nimport { hasWindow } from \"../Utils.js\";\n\nfunction hookConsoleAndErrors(connection) {\n  var wrapFunctions = [\"error\", \"warning\", \"log\"];\n  wrapFunctions.forEach(key => {\n    if (typeof console[key] === \"function\") {\n      var fn = console[key].bind(console);\n      console[key] = (...args) => {\n        connection.send({\n          method: \"console\",\n          type: key,\n          args: JSON.stringify(args)\n        });\n        return fn.apply(null, args);\n      };\n    }\n  });\n\n  window.addEventListener(\"error\", error => {\n    connection.send({\n      method: \"error\",\n      error: JSON.stringify({\n        message: error.error.message,\n        stack: error.error.stack\n      })\n    });\n  });\n}\n\nfunction includeRemoteIdHTML(remoteId) {\n  let infoDiv = document.createElement(\"div\");\n  infoDiv.style.cssText = `\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  `;\n\n  infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style=\"color: #fff\">${remoteId}</b>&nbsp;<button onClick=\"generateNewCode()\">Generate new code</button>`;\n  document.body.appendChild(infoDiv);\n\n  return infoDiv;\n}\n\nexport function enableRemoteDevtools(remoteId) {\n  if (!hasWindow) {\n    console.warn(\"Remote devtools not available outside the browser\");\n    return;\n  }\n\n  window.generateNewCode = () => {\n    window.localStorage.clear();\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n    window.location.reload(false);\n  };\n\n  remoteId = remoteId || window.localStorage.getItem(\"ecsyRemoteId\");\n  if (!remoteId) {\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n  }\n\n  let infoDiv = includeRemoteIdHTML(remoteId);\n\n  window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;\n  window.__ECSY_REMOTE_DEVTOOLS = {};\n\n  let Version = \"\";\n\n  // This is used to collect the worlds created before the communication is being established\n  let worldsBeforeLoading = [];\n  let onWorldCreated = e => {\n    var world = e.detail.world;\n    Version = e.detail.version;\n    worldsBeforeLoading.push(world);\n  };\n  window.addEventListener(\"ecsy-world-created\", onWorldCreated);\n\n  let onLoaded = () => {\n    var peer = new Peer(remoteId);\n    peer.on(\"open\", (/* id */) => {\n      peer.on(\"connection\", connection => {\n        window.__ECSY_REMOTE_DEVTOOLS.connection = connection;\n        connection.on(\"open\", function() {\n          // infoDiv.style.visibility = \"hidden\";\n          infoDiv.innerHTML = \"Connected\";\n\n          // Receive messages\n          connection.on(\"data\", function(data) {\n            if (data.type === \"init\") {\n              var script = document.createElement(\"script\");\n              script.setAttribute(\"type\", \"text/javascript\");\n              script.onload = () => {\n                script.parentNode.removeChild(script);\n\n                // Once the script is injected we don't need to listen\n                window.removeEventListener(\n                  \"ecsy-world-created\",\n                  onWorldCreated\n                );\n                worldsBeforeLoading.forEach(world => {\n                  var event = new CustomEvent(\"ecsy-world-created\", {\n                    detail: { world: world, version: Version }\n                  });\n                  window.dispatchEvent(event);\n                });\n              };\n              script.innerHTML = data.script;\n              (document.head || document.documentElement).appendChild(script);\n              script.onload();\n\n              hookConsoleAndErrors(connection);\n            } else if (data.type === \"executeScript\") {\n              let value = eval(data.script);\n              if (data.returnEval) {\n                connection.send({\n                  method: \"evalReturn\",\n                  value: value\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  };\n\n  // Inject PeerJS script\n  injectScript(\n    \"https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js\",\n    onLoaded\n  );\n}\n\nif (hasWindow) {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // @todo Provide a way to disable it if needed\n  if (urlParams.has(\"enable-remote-devtools\")) {\n    enableRemoteDevtools();\n  }\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();"],"names":["getName","Component","name","queryKey","Components","names","n","length","T","operator","push","sort","join","hasWindow","window","now","performance","bind","Date","EventDispatcher","constructor","_listeners","stats","fired","handled","addEventListener","eventName","listener","listeners","undefined","indexOf","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","entity","component","array","slice","i","call","resetCounters","Query","manager","NotComponents","forEach","Error","entities","eventDispatcher","reactive","key","_entities","match","queries","addEntity","prototype","ENTITY_ADDED","removeEntity","ENTITY_REMOVED","hasAllComponents","hasAnyComponents","toJSON","components","included","map","C","not","numEntities","numComponents","COMPONENT_CHANGED","props","schema","hasOwnProperty","schemaProp","type","clone","default","_pool","copy","source","prop","reset","dispose","release","isComponent","displayName","System","canExecute","_mandatoryQueries","query","world","attributes","enabled","_queries","priority","executeTime","initialized","queryName","queryConfig","entityManager","queryComponents","mandatory","results","validEvents","eventMapping","added","removed","changed","listen","execute","console","warn","event","eventList","Array","isArray","changedComponent","stop","play","clearEvents","json","queryDefinition","jsonQuery","methods","method","isSystem","copyValue","src","cloneValue","copyArray","dest","cloneArray","copyJSON","JSON","parse","stringify","cloneJSON","createType","typeDefinition","mandatoryProperties","undefinedProperties","filter","p","isType","Types","Number","Boolean","String","Ref","generateId","result","characters","charactersLength","charAt","Math","floor","random","injectScript","onLoad","script","document","createElement","onload","head","documentElement","appendChild","hookConsoleAndErrors","connection","wrapFunctions","fn","args","send","apply","error","message","stack","includeRemoteIdHTML","remoteId","infoDiv","style","cssText","innerHTML","body","enableRemoteDevtools","generateNewCode","localStorage","clear","setItem","location","reload","getItem","__ECSY_REMOTE_DEVTOOLS_INJECTED","__ECSY_REMOTE_DEVTOOLS","Version","worldsBeforeLoading","onWorldCreated","e","detail","version","onLoaded","peer","Peer","on","data","setAttribute","parentNode","removeChild","CustomEvent","value","eval","returnEval","urlParams","URLSearchParams","search","has","EPSILON","ARRAY_TYPE","Float32Array","hypot","y","arguments","sqrt","create","out","glMatrix","a","x","z","fromValues","add","b","scale","normalize","len","dot","cross","ax","ay","az","bx","by","bz","vec","stride","offset","count","arg","l","min","set","w","setAxisAngle","axis","rad","s","sin","cos","multiply","aw","bw","slerp","t","omega","cosom","sinom","scale0","scale1","acos","fromMat3","m","fTrace","fRoot","j","k","fromEuler","halfToRad","PI","sx","cx","sy","cy","sz","cz","vec4","mul","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","c","d","setAxes","matr","mat3","view","right","up"],"mappings":"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}