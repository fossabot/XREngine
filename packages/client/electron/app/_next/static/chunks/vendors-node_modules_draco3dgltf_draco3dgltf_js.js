/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors-node_modules_draco3dgltf_draco3dgltf_js"],{

/***/ "../../node_modules/draco3dgltf/draco3dgltf.js":
/*!*****************************************************!*\
  !*** ../../node_modules/draco3dgltf/draco3dgltf.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * @fileoverview Main file for draco3d package.\n */\nvar createEncoderModule = __webpack_require__(/*! ./draco_encoder_gltf_nodejs */ \"../../node_modules/draco3dgltf/draco_encoder_gltf_nodejs.js\");\n\nvar createDecoderModule = __webpack_require__(/*! ./draco_decoder_gltf_nodejs */ \"../../node_modules/draco3dgltf/draco_decoder_gltf_nodejs.js\");\n\nmodule.exports = {\n  createEncoderModule: createEncoderModule,\n  createDecoderModule: createDecoderModule\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9kcmFjbzNkZ2x0Zi9kcmFjbzNkZ2x0Zi5qcz9hNmI2Il0sIm5hbWVzIjpbImNyZWF0ZUVuY29kZXJNb2R1bGUiLCJyZXF1aXJlIiwiY3JlYXRlRGVjb2Rlck1vZHVsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLG1CQUFtQixHQUFHQyxtQkFBTyxDQUFDLGdHQUFELENBQWpDOztBQUNBLElBQUlDLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLGdHQUFELENBQWpDOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkoscUJBQW1CLEVBQW5CQSxtQkFEZTtBQUVmRSxxQkFBbUIsRUFBbkJBO0FBRmUsQ0FBakIiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2RyYWNvM2RnbHRmL2RyYWNvM2RnbHRmLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IE1haW4gZmlsZSBmb3IgZHJhY28zZCBwYWNrYWdlLlxuICovXG5cbnZhciBjcmVhdGVFbmNvZGVyTW9kdWxlID0gcmVxdWlyZSgnLi9kcmFjb19lbmNvZGVyX2dsdGZfbm9kZWpzJyk7XG52YXIgY3JlYXRlRGVjb2Rlck1vZHVsZSA9IHJlcXVpcmUoJy4vZHJhY29fZGVjb2Rlcl9nbHRmX25vZGVqcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlRW5jb2Rlck1vZHVsZSxcbiAgY3JlYXRlRGVjb2Rlck1vZHVsZVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/draco3dgltf/draco3dgltf.js\n");

/***/ }),

/***/ "../../node_modules/draco3dgltf/draco_decoder_gltf_nodejs.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/draco3dgltf/draco_decoder_gltf_nodejs.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var __filename = \"/index.js\";\nvar __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/process/browser.js\");\nvar $jscomp = $jscomp || {};\n$jscomp.scope = {};\n\n$jscomp.arrayIteratorImpl = function (l) {\n  var n = 0;\n  return function () {\n    return n < l.length ? {\n      done: !1,\n      value: l[n++]\n    } : {\n      done: !0\n    };\n  };\n};\n\n$jscomp.arrayIterator = function (l) {\n  return {\n    next: $jscomp.arrayIteratorImpl(l)\n  };\n};\n\n$jscomp.makeIterator = function (l) {\n  var n = \"undefined\" != typeof Symbol && Symbol.iterator && l[Symbol.iterator];\n  return n ? n.call(l) : $jscomp.arrayIterator(l);\n};\n\n$jscomp.ASSUME_ES5 = !1;\n$jscomp.ASSUME_NO_NATIVE_MAP = !1;\n$jscomp.ASSUME_NO_NATIVE_SET = !1;\n$jscomp.SIMPLE_FROUND_POLYFILL = !1;\n$jscomp.ISOLATE_POLYFILLS = !1;\n$jscomp.FORCE_POLYFILL_PROMISE = !1;\n$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = !1;\n\n$jscomp.getGlobal = function (l) {\n  l = [\"object\" == typeof globalThis && globalThis, l, \"object\" == typeof window && window, \"object\" == typeof self && self, \"object\" == typeof __webpack_require__.g && __webpack_require__.g];\n\n  for (var n = 0; n < l.length; ++n) {\n    var m = l[n];\n    if (m && m.Math == Math) return m;\n  }\n\n  throw Error(\"Cannot find global object\");\n};\n\n$jscomp.global = $jscomp.getGlobal(this);\n$jscomp.defineProperty = $jscomp.ASSUME_ES5 || \"function\" == typeof Object.defineProperties ? Object.defineProperty : function (l, n, m) {\n  if (l == Array.prototype || l == Object.prototype) return l;\n  l[n] = m.value;\n  return l;\n};\n$jscomp.IS_SYMBOL_NATIVE = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol(\"x\");\n$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;\n$jscomp.polyfills = {};\n$jscomp.propertyToPolyfillSymbol = {};\n$jscomp.POLYFILL_PREFIX = \"$jscp$\";\n\nvar $jscomp$lookupPolyfilledValue = function $jscomp$lookupPolyfilledValue(l, n) {\n  var m = $jscomp.propertyToPolyfillSymbol[n];\n  if (null == m) return l[n];\n  m = l[m];\n  return void 0 !== m ? m : l[n];\n};\n\n$jscomp.polyfill = function (l, n, m, q) {\n  n && ($jscomp.ISOLATE_POLYFILLS ? $jscomp.polyfillIsolated(l, n, m, q) : $jscomp.polyfillUnisolated(l, n, m, q));\n};\n\n$jscomp.polyfillUnisolated = function (l, n, m, q) {\n  m = $jscomp.global;\n  l = l.split(\".\");\n\n  for (q = 0; q < l.length - 1; q++) {\n    var h = l[q];\n    if (!(h in m)) return;\n    m = m[h];\n  }\n\n  l = l[l.length - 1];\n  q = m[l];\n  n = n(q);\n  n != q && null != n && $jscomp.defineProperty(m, l, {\n    configurable: !0,\n    writable: !0,\n    value: n\n  });\n};\n\n$jscomp.polyfillIsolated = function (l, n, m, q) {\n  var h = l.split(\".\");\n  l = 1 === h.length;\n  q = h[0];\n  q = !l && q in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;\n\n  for (var C = 0; C < h.length - 1; C++) {\n    var f = h[C];\n    if (!(f in q)) return;\n    q = q[f];\n  }\n\n  h = h[h.length - 1];\n  m = $jscomp.IS_SYMBOL_NATIVE && \"es6\" === m ? q[h] : null;\n  n = n(m);\n  null != n && (l ? $jscomp.defineProperty($jscomp.polyfills, h, {\n    configurable: !0,\n    writable: !0,\n    value: n\n  }) : n !== m && ($jscomp.propertyToPolyfillSymbol[h] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global.Symbol(h) : $jscomp.POLYFILL_PREFIX + h, h = $jscomp.propertyToPolyfillSymbol[h], $jscomp.defineProperty(q, h, {\n    configurable: !0,\n    writable: !0,\n    value: n\n  })));\n};\n\n$jscomp.polyfill(\"Promise\", function (l) {\n  function n() {\n    this.batch_ = null;\n  }\n\n  function m(f) {\n    return f instanceof h ? f : new h(function (p, t) {\n      p(f);\n    });\n  }\n\n  if (l && (!($jscomp.FORCE_POLYFILL_PROMISE || $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION && \"undefined\" === typeof $jscomp.global.PromiseRejectionEvent) || !$jscomp.global.Promise || -1 === $jscomp.global.Promise.toString().indexOf(\"[native code]\"))) return l;\n\n  n.prototype.asyncExecute = function (f) {\n    if (null == this.batch_) {\n      this.batch_ = [];\n      var p = this;\n      this.asyncExecuteFunction(function () {\n        p.executeBatch_();\n      });\n    }\n\n    this.batch_.push(f);\n  };\n\n  var q = $jscomp.global.setTimeout;\n\n  n.prototype.asyncExecuteFunction = function (f) {\n    q(f, 0);\n  };\n\n  n.prototype.executeBatch_ = function () {\n    for (; this.batch_ && this.batch_.length;) {\n      var f = this.batch_;\n      this.batch_ = [];\n\n      for (var p = 0; p < f.length; ++p) {\n        var t = f[p];\n        f[p] = null;\n\n        try {\n          t();\n        } catch (y) {\n          this.asyncThrow_(y);\n        }\n      }\n    }\n\n    this.batch_ = null;\n  };\n\n  n.prototype.asyncThrow_ = function (f) {\n    this.asyncExecuteFunction(function () {\n      throw f;\n    });\n  };\n\n  var h = function h(f) {\n    this.state_ = 0;\n    this.result_ = void 0;\n    this.onSettledCallbacks_ = [];\n    this.isRejectionHandled_ = !1;\n    var p = this.createResolveAndReject_();\n\n    try {\n      f(p.resolve, p.reject);\n    } catch (t) {\n      p.reject(t);\n    }\n  };\n\n  h.prototype.createResolveAndReject_ = function () {\n    function f(y) {\n      return function (O) {\n        t || (t = !0, y.call(p, O));\n      };\n    }\n\n    var p = this,\n        t = !1;\n    return {\n      resolve: f(this.resolveTo_),\n      reject: f(this.reject_)\n    };\n  };\n\n  h.prototype.resolveTo_ = function (f) {\n    if (f === this) this.reject_(new TypeError(\"A Promise cannot resolve to itself\"));else if (f instanceof h) this.settleSameAsPromise_(f);else {\n      a: switch (typeof f) {\n        case \"object\":\n          var p = null != f;\n          break a;\n\n        case \"function\":\n          p = !0;\n          break a;\n\n        default:\n          p = !1;\n      }\n\n      p ? this.resolveToNonPromiseObj_(f) : this.fulfill_(f);\n    }\n  };\n\n  h.prototype.resolveToNonPromiseObj_ = function (f) {\n    var p = void 0;\n\n    try {\n      p = f.then;\n    } catch (t) {\n      this.reject_(t);\n      return;\n    }\n\n    \"function\" == typeof p ? this.settleSameAsThenable_(p, f) : this.fulfill_(f);\n  };\n\n  h.prototype.reject_ = function (f) {\n    this.settle_(2, f);\n  };\n\n  h.prototype.fulfill_ = function (f) {\n    this.settle_(1, f);\n  };\n\n  h.prototype.settle_ = function (f, p) {\n    if (0 != this.state_) throw Error(\"Cannot settle(\" + f + \", \" + p + \"): Promise already settled in state\" + this.state_);\n    this.state_ = f;\n    this.result_ = p;\n    2 === this.state_ && this.scheduleUnhandledRejectionCheck_();\n    this.executeOnSettledCallbacks_();\n  };\n\n  h.prototype.scheduleUnhandledRejectionCheck_ = function () {\n    var f = this;\n    q(function () {\n      if (f.notifyUnhandledRejection_()) {\n        var p = $jscomp.global.console;\n        \"undefined\" !== typeof p && p.error(f.result_);\n      }\n    }, 1);\n  };\n\n  h.prototype.notifyUnhandledRejection_ = function () {\n    if (this.isRejectionHandled_) return !1;\n    var f = $jscomp.global.CustomEvent,\n        p = $jscomp.global.Event,\n        t = $jscomp.global.dispatchEvent;\n    if (\"undefined\" === typeof t) return !0;\n    \"function\" === typeof f ? f = new f(\"unhandledrejection\", {\n      cancelable: !0\n    }) : \"function\" === typeof p ? f = new p(\"unhandledrejection\", {\n      cancelable: !0\n    }) : (f = $jscomp.global.document.createEvent(\"CustomEvent\"), f.initCustomEvent(\"unhandledrejection\", !1, !0, f));\n    f.promise = this;\n    f.reason = this.result_;\n    return t(f);\n  };\n\n  h.prototype.executeOnSettledCallbacks_ = function () {\n    if (null != this.onSettledCallbacks_) {\n      for (var f = 0; f < this.onSettledCallbacks_.length; ++f) {\n        C.asyncExecute(this.onSettledCallbacks_[f]);\n      }\n\n      this.onSettledCallbacks_ = null;\n    }\n  };\n\n  var C = new n();\n\n  h.prototype.settleSameAsPromise_ = function (f) {\n    var p = this.createResolveAndReject_();\n    f.callWhenSettled_(p.resolve, p.reject);\n  };\n\n  h.prototype.settleSameAsThenable_ = function (f, p) {\n    var t = this.createResolveAndReject_();\n\n    try {\n      f.call(p, t.resolve, t.reject);\n    } catch (y) {\n      t.reject(y);\n    }\n  };\n\n  h.prototype.then = function (f, p) {\n    function t(U, Q) {\n      return \"function\" == typeof U ? function (ea) {\n        try {\n          y(U(ea));\n        } catch (u) {\n          O(u);\n        }\n      } : Q;\n    }\n\n    var y,\n        O,\n        ba = new h(function (U, Q) {\n      y = U;\n      O = Q;\n    });\n    this.callWhenSettled_(t(f, y), t(p, O));\n    return ba;\n  };\n\n  h.prototype[\"catch\"] = function (f) {\n    return this.then(void 0, f);\n  };\n\n  h.prototype.callWhenSettled_ = function (f, p) {\n    function t() {\n      switch (y.state_) {\n        case 1:\n          f(y.result_);\n          break;\n\n        case 2:\n          p(y.result_);\n          break;\n\n        default:\n          throw Error(\"Unexpected state: \" + y.state_);\n      }\n    }\n\n    var y = this;\n    null == this.onSettledCallbacks_ ? C.asyncExecute(t) : this.onSettledCallbacks_.push(t);\n    this.isRejectionHandled_ = !0;\n  };\n\n  h.resolve = m;\n\n  h.reject = function (f) {\n    return new h(function (p, t) {\n      t(f);\n    });\n  };\n\n  h.race = function (f) {\n    return new h(function (p, t) {\n      for (var y = $jscomp.makeIterator(f), O = y.next(); !O.done; O = y.next()) {\n        m(O.value).callWhenSettled_(p, t);\n      }\n    });\n  };\n\n  h.all = function (f) {\n    var p = $jscomp.makeIterator(f),\n        t = p.next();\n    return t.done ? m([]) : new h(function (y, O) {\n      function ba(ea) {\n        return function (u) {\n          U[ea] = u;\n          Q--;\n          0 == Q && y(U);\n        };\n      }\n\n      var U = [],\n          Q = 0;\n\n      do {\n        U.push(void 0), Q++, m(t.value).callWhenSettled_(ba(U.length - 1), O), t = p.next();\n      } while (!t.done);\n    });\n  };\n\n  return h;\n}, \"es6\", \"es3\");\n\n$jscomp.checkEs6ConformanceViaProxy = function () {\n  try {\n    var l = {},\n        n = Object.create(new $jscomp.global.Proxy(l, {\n      get: function get(m, q, h) {\n        return m == l && \"q\" == q && h == n;\n      }\n    }));\n    return !0 === n.q;\n  } catch (m) {\n    return !1;\n  }\n};\n\n$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1;\n$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();\n\n$jscomp.owns = function (l, n) {\n  return Object.prototype.hasOwnProperty.call(l, n);\n};\n\n$jscomp.polyfill(\"Array.prototype.copyWithin\", function (l) {\n  function n(m) {\n    m = Number(m);\n    return Infinity === m || -Infinity === m ? m : m | 0;\n  }\n\n  return l ? l : function (m, q, h) {\n    var C = this.length;\n    m = n(m);\n    q = n(q);\n    h = void 0 === h ? C : n(h);\n    m = 0 > m ? Math.max(C + m, 0) : Math.min(m, C);\n    q = 0 > q ? Math.max(C + q, 0) : Math.min(q, C);\n    h = 0 > h ? Math.max(C + h, 0) : Math.min(h, C);\n    if (m < q) for (; q < h;) {\n      q in this ? this[m++] = this[q++] : (delete this[m++], q++);\n    } else for (h = Math.min(h, C + q - m), m += h - q; h > q;) {\n      --h in this ? this[--m] = this[h] : delete this[--m];\n    }\n    return this;\n  };\n}, \"es6\", \"es3\");\n\n$jscomp.typedArrayCopyWithin = function (l) {\n  return l ? l : Array.prototype.copyWithin;\n};\n\n$jscomp.polyfill(\"Int8Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint8Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint8ClampedArray.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Int16Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint16Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Int32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Float32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Float64Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n\nvar DracoDecoderModule = function () {\n  var l = \"undefined\" !== typeof document && document.currentScript ? document.currentScript.src : void 0;\n   true && (l = l || __filename);\n  return function (n) {\n    function m(e) {\n      return a.locateFile ? a.locateFile(e, V) : V + e;\n    }\n\n    function q(e, b) {\n      e || p(\"Assertion failed: \" + b);\n    }\n\n    function h(e, b) {\n      if (e) {\n        var c = oa;\n        var d = e + b;\n\n        for (b = e; c[b] && !(b >= d);) {\n          ++b;\n        }\n\n        if (16 < b - e && c.subarray && Ba) c = Ba.decode(c.subarray(e, b));else {\n          for (d = \"\"; e < b;) {\n            var g = c[e++];\n\n            if (g & 128) {\n              var v = c[e++] & 63;\n              if (192 == (g & 224)) d += String.fromCharCode((g & 31) << 6 | v);else {\n                var ia = c[e++] & 63;\n                g = 224 == (g & 240) ? (g & 15) << 12 | v << 6 | ia : (g & 7) << 18 | v << 12 | ia << 6 | c[e++] & 63;\n                65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n              }\n            } else d += String.fromCharCode(g);\n          }\n\n          c = d;\n        }\n      } else c = \"\";\n\n      return c;\n    }\n\n    function C(e, b) {\n      0 < e % b && (e += b - e % b);\n      return e;\n    }\n\n    function f(e) {\n      pa = e;\n      a.HEAP8 = Z = new Int8Array(e);\n      a.HEAP16 = new Int16Array(e);\n      a.HEAP32 = W = new Int32Array(e);\n      a.HEAPU8 = oa = new Uint8Array(e);\n      a.HEAPU16 = new Uint16Array(e);\n      a.HEAPU32 = new Uint32Array(e);\n      a.HEAPF32 = new Float32Array(e);\n      a.HEAPF64 = new Float64Array(e);\n    }\n\n    function p(e) {\n      if (a.onAbort) a.onAbort(e);\n      e += \"\";\n      ja(e);\n      Ca = !0;\n      e = new WebAssembly.RuntimeError(\"abort(\" + e + \"). Build with -s ASSERTIONS=1 for more info.\");\n      ta(e);\n      throw e;\n    }\n\n    function t(e, b) {\n      return String.prototype.startsWith ? e.startsWith(b) : 0 === e.indexOf(b);\n    }\n\n    function y() {\n      try {\n        if (ka) return new Uint8Array(ka);\n        if (qa) return qa(X);\n        throw \"both async and sync fetching of the wasm failed\";\n      } catch (e) {\n        p(e);\n      }\n    }\n\n    function O() {\n      return ka || !ra && !fa || \"function\" !== typeof fetch || t(X, \"file://\") ? Promise.resolve().then(y) : fetch(X, {\n        credentials: \"same-origin\"\n      }).then(function (e) {\n        if (!e.ok) throw \"failed to load wasm binary file at '\" + X + \"'\";\n        return e.arrayBuffer();\n      })[\"catch\"](function () {\n        return y();\n      });\n    }\n\n    function ba(e) {\n      for (; 0 < e.length;) {\n        var b = e.shift();\n        if (\"function\" == typeof b) b(a);else {\n          var c = b.func;\n          \"number\" === typeof c ? void 0 === b.arg ? ua.get(c)() : ua.get(c)(b.arg) : c(void 0 === b.arg ? null : b.arg);\n        }\n      }\n    }\n\n    function U(e) {\n      this.excPtr = e;\n      this.ptr = e - D.SIZE;\n\n      this.set_type = function (b) {\n        W[this.ptr + D.TYPE_OFFSET >> 2] = b;\n      };\n\n      this.get_type = function () {\n        return W[this.ptr + D.TYPE_OFFSET >> 2];\n      };\n\n      this.set_destructor = function (b) {\n        W[this.ptr + D.DESTRUCTOR_OFFSET >> 2] = b;\n      };\n\n      this.get_destructor = function () {\n        return W[this.ptr + D.DESTRUCTOR_OFFSET >> 2];\n      };\n\n      this.set_refcount = function (b) {\n        W[this.ptr + D.REFCOUNT_OFFSET >> 2] = b;\n      };\n\n      this.set_caught = function (b) {\n        Z[this.ptr + D.CAUGHT_OFFSET >> 0] = b ? 1 : 0;\n      };\n\n      this.get_caught = function () {\n        return 0 != Z[this.ptr + D.CAUGHT_OFFSET >> 0];\n      };\n\n      this.set_rethrown = function (b) {\n        Z[this.ptr + D.RETHROWN_OFFSET >> 0] = b ? 1 : 0;\n      };\n\n      this.get_rethrown = function () {\n        return 0 != Z[this.ptr + D.RETHROWN_OFFSET >> 0];\n      };\n\n      this.init = function (b, c) {\n        this.set_type(b);\n        this.set_destructor(c);\n        this.set_refcount(0);\n        this.set_caught(!1);\n        this.set_rethrown(!1);\n      };\n\n      this.add_ref = function () {\n        W[this.ptr + D.REFCOUNT_OFFSET >> 2] += 1;\n      };\n\n      this.release_ref = function () {\n        var b = W[this.ptr + D.REFCOUNT_OFFSET >> 2];\n        W[this.ptr + D.REFCOUNT_OFFSET >> 2] = b - 1;\n        return 1 === b;\n      };\n    }\n\n    function Q() {\n      return 0 < Q.uncaught_exceptions;\n    }\n\n    function ea(e) {\n      function b() {\n        if (!sa && (sa = !0, a.calledRun = !0, !Ca)) {\n          Da = !0;\n          ba(Ea);\n          ba(Fa);\n          Ga(a);\n          if (a.onRuntimeInitialized) a.onRuntimeInitialized();\n          if (a.postRun) for (\"function\" == typeof a.postRun && (a.postRun = [a.postRun]); a.postRun.length;) {\n            Ha.unshift(a.postRun.shift());\n          }\n          ba(Ha);\n        }\n      }\n\n      if (!(0 < ha)) {\n        if (a.preRun) for (\"function\" == typeof a.preRun && (a.preRun = [a.preRun]); a.preRun.length;) {\n          Ia.unshift(a.preRun.shift());\n        }\n        ba(Ia);\n        0 < ha || (a.setStatus ? (a.setStatus(\"Running...\"), setTimeout(function () {\n          setTimeout(function () {\n            a.setStatus(\"\");\n          }, 1);\n          b();\n        }, 1)) : b());\n      }\n    }\n\n    function u() {}\n\n    function z(e) {\n      return (e || u).__cache__;\n    }\n\n    function R(e, b) {\n      var c = z(b),\n          d = c[e];\n      if (d) return d;\n      d = Object.create((b || u).prototype);\n      d.ptr = e;\n      return c[e] = d;\n    }\n\n    function ca(e) {\n      if (\"string\" === typeof e) {\n        for (var b = 0, c = 0; c < e.length; ++c) {\n          var d = e.charCodeAt(c);\n          55296 <= d && 57343 >= d && (d = 65536 + ((d & 1023) << 10) | e.charCodeAt(++c) & 1023);\n          127 >= d ? ++b : b = 2047 >= d ? b + 2 : 65535 >= d ? b + 3 : b + 4;\n        }\n\n        b = Array(b + 1);\n        c = 0;\n        d = b.length;\n\n        if (0 < d) {\n          d = c + d - 1;\n\n          for (var g = 0; g < e.length; ++g) {\n            var v = e.charCodeAt(g);\n\n            if (55296 <= v && 57343 >= v) {\n              var ia = e.charCodeAt(++g);\n              v = 65536 + ((v & 1023) << 10) | ia & 1023;\n            }\n\n            if (127 >= v) {\n              if (c >= d) break;\n              b[c++] = v;\n            } else {\n              if (2047 >= v) {\n                if (c + 1 >= d) break;\n                b[c++] = 192 | v >> 6;\n              } else {\n                if (65535 >= v) {\n                  if (c + 2 >= d) break;\n                  b[c++] = 224 | v >> 12;\n                } else {\n                  if (c + 3 >= d) break;\n                  b[c++] = 240 | v >> 18;\n                  b[c++] = 128 | v >> 12 & 63;\n                }\n\n                b[c++] = 128 | v >> 6 & 63;\n              }\n\n              b[c++] = 128 | v & 63;\n            }\n          }\n\n          b[c] = 0;\n        }\n\n        e = r.alloc(b, Z);\n        r.copy(b, Z, e);\n        return e;\n      }\n\n      return e;\n    }\n\n    function va(e) {\n      if (\"object\" === typeof e) {\n        var b = r.alloc(e, Z);\n        r.copy(e, Z, b);\n        return b;\n      }\n\n      return e;\n    }\n\n    function aa() {\n      throw \"cannot construct a VoidPtr, no constructor in IDL\";\n    }\n\n    function S() {\n      this.ptr = Ja();\n      z(S)[this.ptr] = this;\n    }\n\n    function P() {\n      this.ptr = Ka();\n      z(P)[this.ptr] = this;\n    }\n\n    function Y() {\n      this.ptr = La();\n      z(Y)[this.ptr] = this;\n    }\n\n    function w() {\n      this.ptr = Ma();\n      z(w)[this.ptr] = this;\n    }\n\n    function B() {\n      this.ptr = Na();\n      z(B)[this.ptr] = this;\n    }\n\n    function F() {\n      this.ptr = Oa();\n      z(F)[this.ptr] = this;\n    }\n\n    function G() {\n      this.ptr = Pa();\n      z(G)[this.ptr] = this;\n    }\n\n    function E() {\n      this.ptr = Qa();\n      z(E)[this.ptr] = this;\n    }\n\n    function T() {\n      this.ptr = Ra();\n      z(T)[this.ptr] = this;\n    }\n\n    function A() {\n      throw \"cannot construct a Status, no constructor in IDL\";\n    }\n\n    function H() {\n      this.ptr = Sa();\n      z(H)[this.ptr] = this;\n    }\n\n    function I() {\n      this.ptr = Ta();\n      z(I)[this.ptr] = this;\n    }\n\n    function J() {\n      this.ptr = Ua();\n      z(J)[this.ptr] = this;\n    }\n\n    function K() {\n      this.ptr = Va();\n      z(K)[this.ptr] = this;\n    }\n\n    function L() {\n      this.ptr = Wa();\n      z(L)[this.ptr] = this;\n    }\n\n    function M() {\n      this.ptr = Xa();\n      z(M)[this.ptr] = this;\n    }\n\n    function N() {\n      this.ptr = Ya();\n      z(N)[this.ptr] = this;\n    }\n\n    function x() {\n      this.ptr = Za();\n      z(x)[this.ptr] = this;\n    }\n\n    function k() {\n      this.ptr = $a();\n      z(k)[this.ptr] = this;\n    }\n\n    n = n || {};\n    var a = \"undefined\" !== typeof n ? n : {},\n        Ga,\n        ta;\n    a.ready = new Promise(function (e, b) {\n      Ga = e;\n      ta = b;\n    });\n    var ab = !1,\n        bb = !1;\n\n    a.onRuntimeInitialized = function () {\n      ab = !0;\n      if (bb && \"function\" === typeof a.onModuleLoaded) a.onModuleLoaded(a);\n    };\n\n    a.onModuleParsed = function () {\n      bb = !0;\n      if (ab && \"function\" === typeof a.onModuleLoaded) a.onModuleLoaded(a);\n    };\n\n    a.isVersionSupported = function (e) {\n      if (\"string\" !== typeof e) return !1;\n      e = e.split(\".\");\n      return 2 > e.length || 3 < e.length ? !1 : 1 == e[0] && 0 <= e[1] && 4 >= e[1] ? !0 : 0 != e[0] || 10 < e[1] ? !1 : !0;\n    };\n\n    var la = {},\n        da;\n\n    for (da in a) {\n      a.hasOwnProperty(da) && (la[da] = a[da]);\n    }\n\n    var ra = !1,\n        fa = !1,\n        wa = !1,\n        cb = !1;\n    ra = \"object\" === typeof window;\n    fa = \"function\" === typeof importScripts;\n    wa = \"object\" === typeof process && \"object\" === typeof process.versions && \"string\" === typeof process.versions.node;\n    cb = !ra && !wa && !fa;\n    var V = \"\",\n        xa,\n        ya;\n\n    if (wa) {\n      V = fa ? __webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\").dirname(V) + \"/\" : __dirname + \"/\";\n\n      var za = function za(e, b) {\n        xa || (xa = __webpack_require__(/*! fs */ \"fs\"));\n        ya || (ya = __webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\"));\n        e = ya.normalize(e);\n        return xa.readFileSync(e, b ? null : \"utf8\");\n      };\n\n      var qa = function qa(e) {\n        e = za(e, !0);\n        e.buffer || (e = new Uint8Array(e));\n        q(e.buffer);\n        return e;\n      };\n\n      1 < process.argv.length && process.argv[1].replace(/\\\\/g, \"/\");\n      process.argv.slice(2);\n\n      a.inspect = function () {\n        return \"[Emscripten Module object]\";\n      };\n    } else if (cb) \"undefined\" != typeof read && (za = function za(e) {\n      return read(e);\n    }), qa = function qa(e) {\n      if (\"function\" === typeof readbuffer) return new Uint8Array(readbuffer(e));\n      e = read(e, \"binary\");\n      q(\"object\" === typeof e);\n      return e;\n    }, \"undefined\" !== typeof print && (\"undefined\" === typeof console && (console = {}), console.log = print, console.warn = console.error = \"undefined\" !== typeof printErr ? printErr : print);else if (ra || fa) fa ? V = self.location.href : \"undefined\" !== typeof document && document.currentScript && (V = document.currentScript.src), l && (V = l), V = 0 !== V.indexOf(\"blob:\") ? V.substr(0, V.lastIndexOf(\"/\") + 1) : \"\", za = function za(e) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", e, !1);\n      b.send(null);\n      return b.responseText;\n    }, fa && (qa = function qa(e) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", e, !1);\n      b.responseType = \"arraybuffer\";\n      b.send(null);\n      return new Uint8Array(b.response);\n    });\n\n    a.print || console.log.bind(console);\n    var ja = a.printErr || console.warn.bind(console);\n\n    for (da in la) {\n      la.hasOwnProperty(da) && (a[da] = la[da]);\n    }\n\n    la = null;\n    var ka;\n    a.wasmBinary && (ka = a.wasmBinary);\n    \"object\" !== typeof WebAssembly && p(\"no native wasm support detected\");\n    var ma,\n        Ca = !1,\n        Ba = \"undefined\" !== typeof TextDecoder ? new TextDecoder(\"utf8\") : void 0;\n    \"undefined\" !== typeof TextDecoder && new TextDecoder(\"utf-16le\");\n    var Z,\n        oa,\n        W,\n        db = a.INITIAL_MEMORY || 16777216;\n    if (ma = a.wasmMemory ? a.wasmMemory : new WebAssembly.Memory({\n      initial: db / 65536,\n      maximum: 32768\n    })) var pa = ma.buffer;\n    db = pa.byteLength;\n    f(pa);\n    var ua,\n        Ia = [],\n        Ea = [],\n        Fa = [],\n        Ha = [],\n        Da = !1,\n        ha = 0,\n        Aa = null,\n        na = null;\n    a.preloadedImages = {};\n    a.preloadedAudios = {};\n    var X = \"draco_decoder_gltf.wasm\";\n    t(X, \"data:application/octet-stream;base64,\") || (X = m(X));\n    var D = {\n      DESTRUCTOR_OFFSET: 0,\n      REFCOUNT_OFFSET: 4,\n      TYPE_OFFSET: 8,\n      CAUGHT_OFFSET: 12,\n      RETHROWN_OFFSET: 13,\n      SIZE: 16\n    };\n    Ea.push({\n      func: function func() {\n        eb();\n      }\n    });\n    var gb = {\n      __cxa_allocate_exception: function __cxa_allocate_exception(e) {\n        return fb(e + D.SIZE) + D.SIZE;\n      },\n      __cxa_throw: function __cxa_throw(e, b, c) {\n        new U(e).init(b, c);\n        \"uncaught_exception\" in Q ? Q.uncaught_exceptions++ : Q.uncaught_exceptions = 1;\n        throw e;\n      },\n      abort: function abort() {\n        p();\n      },\n      array_bounds_check_error: function array_bounds_check_error(e, b) {\n        throw \"Array index \" + e + \" out of bounds: [0,\" + b + \")\";\n      },\n      emscripten_memcpy_big: function emscripten_memcpy_big(e, b, c) {\n        oa.copyWithin(e, b, b + c);\n      },\n      emscripten_resize_heap: function emscripten_resize_heap(e) {\n        e >>>= 0;\n        var b = oa.length;\n        if (2147483648 < e) return !1;\n\n        for (var c = 1; 4 >= c; c *= 2) {\n          var d = b * (1 + .2 / c);\n          d = Math.min(d, e + 100663296);\n          d = Math.min(2147483648, C(Math.max(16777216, e, d), 65536));\n\n          a: {\n            try {\n              ma.grow(d - pa.byteLength + 65535 >>> 16);\n              f(ma.buffer);\n              var g = 1;\n              break a;\n            } catch (v) {}\n\n            g = void 0;\n          }\n\n          if (g) return !0;\n        }\n\n        return !1;\n      },\n      memory: ma\n    };\n\n    (function () {\n      function e(g, v) {\n        a.asm = g.exports;\n        ua = a.asm.__indirect_function_table;\n        ha--;\n        a.monitorRunDependencies && a.monitorRunDependencies(ha);\n        0 == ha && (null !== Aa && (clearInterval(Aa), Aa = null), na && (g = na, na = null, g()));\n      }\n\n      function b(g) {\n        e(g.instance);\n      }\n\n      function c(g) {\n        return O().then(function (v) {\n          return WebAssembly.instantiate(v, d);\n        }).then(g, function (v) {\n          ja(\"failed to asynchronously prepare wasm: \" + v);\n          p(v);\n        });\n      }\n\n      var d = {\n        env: gb,\n        wasi_snapshot_preview1: gb\n      };\n      ha++;\n      a.monitorRunDependencies && a.monitorRunDependencies(ha);\n      if (a.instantiateWasm) try {\n        return a.instantiateWasm(d, e);\n      } catch (g) {\n        return ja(\"Module.instantiateWasm callback failed with error: \" + g), !1;\n      }\n      (function () {\n        return ka || \"function\" !== typeof WebAssembly.instantiateStreaming || t(X, \"data:application/octet-stream;base64,\") || t(X, \"file://\") || \"function\" !== typeof fetch ? c(b) : fetch(X, {\n          credentials: \"same-origin\"\n        }).then(function (g) {\n          return WebAssembly.instantiateStreaming(g, d).then(b, function (v) {\n            ja(\"wasm streaming compile failed: \" + v);\n            ja(\"falling back to ArrayBuffer instantiation\");\n            return c(b);\n          });\n        });\n      })()[\"catch\"](ta);\n      return {};\n    })();\n\n    var eb = a.___wasm_call_ctors = function () {\n      return (eb = a.___wasm_call_ctors = a.asm.__wasm_call_ctors).apply(null, arguments);\n    };\n\n    a.___em_js__array_bounds_check_error = function () {\n      return (a.___em_js__array_bounds_check_error = a.asm.__em_js__array_bounds_check_error).apply(null, arguments);\n    };\n\n    var hb = a._emscripten_bind_VoidPtr___destroy___0 = function () {\n      return (hb = a._emscripten_bind_VoidPtr___destroy___0 = a.asm.emscripten_bind_VoidPtr___destroy___0).apply(null, arguments);\n    },\n        Ja = a._emscripten_bind_DecoderBuffer_DecoderBuffer_0 = function () {\n      return (Ja = a._emscripten_bind_DecoderBuffer_DecoderBuffer_0 = a.asm.emscripten_bind_DecoderBuffer_DecoderBuffer_0).apply(null, arguments);\n    },\n        ib = a._emscripten_bind_DecoderBuffer_Init_2 = function () {\n      return (ib = a._emscripten_bind_DecoderBuffer_Init_2 = a.asm.emscripten_bind_DecoderBuffer_Init_2).apply(null, arguments);\n    },\n        jb = a._emscripten_bind_DecoderBuffer___destroy___0 = function () {\n      return (jb = a._emscripten_bind_DecoderBuffer___destroy___0 = a.asm.emscripten_bind_DecoderBuffer___destroy___0).apply(null, arguments);\n    },\n        Ka = a._emscripten_bind_AttributeTransformData_AttributeTransformData_0 = function () {\n      return (Ka = a._emscripten_bind_AttributeTransformData_AttributeTransformData_0 = a.asm.emscripten_bind_AttributeTransformData_AttributeTransformData_0).apply(null, arguments);\n    },\n        kb = a._emscripten_bind_AttributeTransformData_transform_type_0 = function () {\n      return (kb = a._emscripten_bind_AttributeTransformData_transform_type_0 = a.asm.emscripten_bind_AttributeTransformData_transform_type_0).apply(null, arguments);\n    },\n        lb = a._emscripten_bind_AttributeTransformData___destroy___0 = function () {\n      return (lb = a._emscripten_bind_AttributeTransformData___destroy___0 = a.asm.emscripten_bind_AttributeTransformData___destroy___0).apply(null, arguments);\n    },\n        La = a._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = function () {\n      return (La = a._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = a.asm.emscripten_bind_GeometryAttribute_GeometryAttribute_0).apply(null, arguments);\n    },\n        mb = a._emscripten_bind_GeometryAttribute___destroy___0 = function () {\n      return (mb = a._emscripten_bind_GeometryAttribute___destroy___0 = a.asm.emscripten_bind_GeometryAttribute___destroy___0).apply(null, arguments);\n    },\n        Ma = a._emscripten_bind_PointAttribute_PointAttribute_0 = function () {\n      return (Ma = a._emscripten_bind_PointAttribute_PointAttribute_0 = a.asm.emscripten_bind_PointAttribute_PointAttribute_0).apply(null, arguments);\n    },\n        nb = a._emscripten_bind_PointAttribute_size_0 = function () {\n      return (nb = a._emscripten_bind_PointAttribute_size_0 = a.asm.emscripten_bind_PointAttribute_size_0).apply(null, arguments);\n    },\n        ob = a._emscripten_bind_PointAttribute_GetAttributeTransformData_0 = function () {\n      return (ob = a._emscripten_bind_PointAttribute_GetAttributeTransformData_0 = a.asm.emscripten_bind_PointAttribute_GetAttributeTransformData_0).apply(null, arguments);\n    },\n        pb = a._emscripten_bind_PointAttribute_attribute_type_0 = function () {\n      return (pb = a._emscripten_bind_PointAttribute_attribute_type_0 = a.asm.emscripten_bind_PointAttribute_attribute_type_0).apply(null, arguments);\n    },\n        qb = a._emscripten_bind_PointAttribute_data_type_0 = function () {\n      return (qb = a._emscripten_bind_PointAttribute_data_type_0 = a.asm.emscripten_bind_PointAttribute_data_type_0).apply(null, arguments);\n    },\n        rb = a._emscripten_bind_PointAttribute_num_components_0 = function () {\n      return (rb = a._emscripten_bind_PointAttribute_num_components_0 = a.asm.emscripten_bind_PointAttribute_num_components_0).apply(null, arguments);\n    },\n        sb = a._emscripten_bind_PointAttribute_normalized_0 = function () {\n      return (sb = a._emscripten_bind_PointAttribute_normalized_0 = a.asm.emscripten_bind_PointAttribute_normalized_0).apply(null, arguments);\n    },\n        tb = a._emscripten_bind_PointAttribute_byte_stride_0 = function () {\n      return (tb = a._emscripten_bind_PointAttribute_byte_stride_0 = a.asm.emscripten_bind_PointAttribute_byte_stride_0).apply(null, arguments);\n    },\n        ub = a._emscripten_bind_PointAttribute_byte_offset_0 = function () {\n      return (ub = a._emscripten_bind_PointAttribute_byte_offset_0 = a.asm.emscripten_bind_PointAttribute_byte_offset_0).apply(null, arguments);\n    },\n        vb = a._emscripten_bind_PointAttribute_unique_id_0 = function () {\n      return (vb = a._emscripten_bind_PointAttribute_unique_id_0 = a.asm.emscripten_bind_PointAttribute_unique_id_0).apply(null, arguments);\n    },\n        wb = a._emscripten_bind_PointAttribute___destroy___0 = function () {\n      return (wb = a._emscripten_bind_PointAttribute___destroy___0 = a.asm.emscripten_bind_PointAttribute___destroy___0).apply(null, arguments);\n    },\n        Na = a._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0 = function () {\n      return (Na = a._emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0 = a.asm.emscripten_bind_AttributeQuantizationTransform_AttributeQuantizationTransform_0).apply(null, arguments);\n    },\n        xb = a._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1 = function () {\n      return (xb = a._emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1 = a.asm.emscripten_bind_AttributeQuantizationTransform_InitFromAttribute_1).apply(null, arguments);\n    },\n        yb = a._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0 = function () {\n      return (yb = a._emscripten_bind_AttributeQuantizationTransform_quantization_bits_0 = a.asm.emscripten_bind_AttributeQuantizationTransform_quantization_bits_0).apply(null, arguments);\n    },\n        zb = a._emscripten_bind_AttributeQuantizationTransform_min_value_1 = function () {\n      return (zb = a._emscripten_bind_AttributeQuantizationTransform_min_value_1 = a.asm.emscripten_bind_AttributeQuantizationTransform_min_value_1).apply(null, arguments);\n    },\n        Ab = a._emscripten_bind_AttributeQuantizationTransform_range_0 = function () {\n      return (Ab = a._emscripten_bind_AttributeQuantizationTransform_range_0 = a.asm.emscripten_bind_AttributeQuantizationTransform_range_0).apply(null, arguments);\n    },\n        Bb = a._emscripten_bind_AttributeQuantizationTransform___destroy___0 = function () {\n      return (Bb = a._emscripten_bind_AttributeQuantizationTransform___destroy___0 = a.asm.emscripten_bind_AttributeQuantizationTransform___destroy___0).apply(null, arguments);\n    },\n        Oa = a._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0 = function () {\n      return (Oa = a._emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0 = a.asm.emscripten_bind_AttributeOctahedronTransform_AttributeOctahedronTransform_0).apply(null, arguments);\n    },\n        Cb = a._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1 = function () {\n      return (Cb = a._emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1 = a.asm.emscripten_bind_AttributeOctahedronTransform_InitFromAttribute_1).apply(null, arguments);\n    },\n        Db = a._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0 = function () {\n      return (Db = a._emscripten_bind_AttributeOctahedronTransform_quantization_bits_0 = a.asm.emscripten_bind_AttributeOctahedronTransform_quantization_bits_0).apply(null, arguments);\n    },\n        Eb = a._emscripten_bind_AttributeOctahedronTransform___destroy___0 = function () {\n      return (Eb = a._emscripten_bind_AttributeOctahedronTransform___destroy___0 = a.asm.emscripten_bind_AttributeOctahedronTransform___destroy___0).apply(null, arguments);\n    },\n        Pa = a._emscripten_bind_PointCloud_PointCloud_0 = function () {\n      return (Pa = a._emscripten_bind_PointCloud_PointCloud_0 = a.asm.emscripten_bind_PointCloud_PointCloud_0).apply(null, arguments);\n    },\n        Fb = a._emscripten_bind_PointCloud_num_attributes_0 = function () {\n      return (Fb = a._emscripten_bind_PointCloud_num_attributes_0 = a.asm.emscripten_bind_PointCloud_num_attributes_0).apply(null, arguments);\n    },\n        Gb = a._emscripten_bind_PointCloud_num_points_0 = function () {\n      return (Gb = a._emscripten_bind_PointCloud_num_points_0 = a.asm.emscripten_bind_PointCloud_num_points_0).apply(null, arguments);\n    },\n        Hb = a._emscripten_bind_PointCloud___destroy___0 = function () {\n      return (Hb = a._emscripten_bind_PointCloud___destroy___0 = a.asm.emscripten_bind_PointCloud___destroy___0).apply(null, arguments);\n    },\n        Qa = a._emscripten_bind_Mesh_Mesh_0 = function () {\n      return (Qa = a._emscripten_bind_Mesh_Mesh_0 = a.asm.emscripten_bind_Mesh_Mesh_0).apply(null, arguments);\n    },\n        Ib = a._emscripten_bind_Mesh_num_faces_0 = function () {\n      return (Ib = a._emscripten_bind_Mesh_num_faces_0 = a.asm.emscripten_bind_Mesh_num_faces_0).apply(null, arguments);\n    },\n        Jb = a._emscripten_bind_Mesh_num_attributes_0 = function () {\n      return (Jb = a._emscripten_bind_Mesh_num_attributes_0 = a.asm.emscripten_bind_Mesh_num_attributes_0).apply(null, arguments);\n    },\n        Kb = a._emscripten_bind_Mesh_num_points_0 = function () {\n      return (Kb = a._emscripten_bind_Mesh_num_points_0 = a.asm.emscripten_bind_Mesh_num_points_0).apply(null, arguments);\n    },\n        Lb = a._emscripten_bind_Mesh___destroy___0 = function () {\n      return (Lb = a._emscripten_bind_Mesh___destroy___0 = a.asm.emscripten_bind_Mesh___destroy___0).apply(null, arguments);\n    },\n        Ra = a._emscripten_bind_Metadata_Metadata_0 = function () {\n      return (Ra = a._emscripten_bind_Metadata_Metadata_0 = a.asm.emscripten_bind_Metadata_Metadata_0).apply(null, arguments);\n    },\n        Mb = a._emscripten_bind_Metadata___destroy___0 = function () {\n      return (Mb = a._emscripten_bind_Metadata___destroy___0 = a.asm.emscripten_bind_Metadata___destroy___0).apply(null, arguments);\n    },\n        Nb = a._emscripten_bind_Status_code_0 = function () {\n      return (Nb = a._emscripten_bind_Status_code_0 = a.asm.emscripten_bind_Status_code_0).apply(null, arguments);\n    },\n        Ob = a._emscripten_bind_Status_ok_0 = function () {\n      return (Ob = a._emscripten_bind_Status_ok_0 = a.asm.emscripten_bind_Status_ok_0).apply(null, arguments);\n    },\n        Pb = a._emscripten_bind_Status_error_msg_0 = function () {\n      return (Pb = a._emscripten_bind_Status_error_msg_0 = a.asm.emscripten_bind_Status_error_msg_0).apply(null, arguments);\n    },\n        Qb = a._emscripten_bind_Status___destroy___0 = function () {\n      return (Qb = a._emscripten_bind_Status___destroy___0 = a.asm.emscripten_bind_Status___destroy___0).apply(null, arguments);\n    },\n        Sa = a._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0 = function () {\n      return (Sa = a._emscripten_bind_DracoFloat32Array_DracoFloat32Array_0 = a.asm.emscripten_bind_DracoFloat32Array_DracoFloat32Array_0).apply(null, arguments);\n    },\n        Rb = a._emscripten_bind_DracoFloat32Array_GetValue_1 = function () {\n      return (Rb = a._emscripten_bind_DracoFloat32Array_GetValue_1 = a.asm.emscripten_bind_DracoFloat32Array_GetValue_1).apply(null, arguments);\n    },\n        Sb = a._emscripten_bind_DracoFloat32Array_size_0 = function () {\n      return (Sb = a._emscripten_bind_DracoFloat32Array_size_0 = a.asm.emscripten_bind_DracoFloat32Array_size_0).apply(null, arguments);\n    },\n        Tb = a._emscripten_bind_DracoFloat32Array___destroy___0 = function () {\n      return (Tb = a._emscripten_bind_DracoFloat32Array___destroy___0 = a.asm.emscripten_bind_DracoFloat32Array___destroy___0).apply(null, arguments);\n    },\n        Ta = a._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = function () {\n      return (Ta = a._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = a.asm.emscripten_bind_DracoInt8Array_DracoInt8Array_0).apply(null, arguments);\n    },\n        Ub = a._emscripten_bind_DracoInt8Array_GetValue_1 = function () {\n      return (Ub = a._emscripten_bind_DracoInt8Array_GetValue_1 = a.asm.emscripten_bind_DracoInt8Array_GetValue_1).apply(null, arguments);\n    },\n        Vb = a._emscripten_bind_DracoInt8Array_size_0 = function () {\n      return (Vb = a._emscripten_bind_DracoInt8Array_size_0 = a.asm.emscripten_bind_DracoInt8Array_size_0).apply(null, arguments);\n    },\n        Wb = a._emscripten_bind_DracoInt8Array___destroy___0 = function () {\n      return (Wb = a._emscripten_bind_DracoInt8Array___destroy___0 = a.asm.emscripten_bind_DracoInt8Array___destroy___0).apply(null, arguments);\n    },\n        Ua = a._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0 = function () {\n      return (Ua = a._emscripten_bind_DracoUInt8Array_DracoUInt8Array_0 = a.asm.emscripten_bind_DracoUInt8Array_DracoUInt8Array_0).apply(null, arguments);\n    },\n        Xb = a._emscripten_bind_DracoUInt8Array_GetValue_1 = function () {\n      return (Xb = a._emscripten_bind_DracoUInt8Array_GetValue_1 = a.asm.emscripten_bind_DracoUInt8Array_GetValue_1).apply(null, arguments);\n    },\n        Yb = a._emscripten_bind_DracoUInt8Array_size_0 = function () {\n      return (Yb = a._emscripten_bind_DracoUInt8Array_size_0 = a.asm.emscripten_bind_DracoUInt8Array_size_0).apply(null, arguments);\n    },\n        Zb = a._emscripten_bind_DracoUInt8Array___destroy___0 = function () {\n      return (Zb = a._emscripten_bind_DracoUInt8Array___destroy___0 = a.asm.emscripten_bind_DracoUInt8Array___destroy___0).apply(null, arguments);\n    },\n        Va = a._emscripten_bind_DracoInt16Array_DracoInt16Array_0 = function () {\n      return (Va = a._emscripten_bind_DracoInt16Array_DracoInt16Array_0 = a.asm.emscripten_bind_DracoInt16Array_DracoInt16Array_0).apply(null, arguments);\n    },\n        $b = a._emscripten_bind_DracoInt16Array_GetValue_1 = function () {\n      return ($b = a._emscripten_bind_DracoInt16Array_GetValue_1 = a.asm.emscripten_bind_DracoInt16Array_GetValue_1).apply(null, arguments);\n    },\n        ac = a._emscripten_bind_DracoInt16Array_size_0 = function () {\n      return (ac = a._emscripten_bind_DracoInt16Array_size_0 = a.asm.emscripten_bind_DracoInt16Array_size_0).apply(null, arguments);\n    },\n        bc = a._emscripten_bind_DracoInt16Array___destroy___0 = function () {\n      return (bc = a._emscripten_bind_DracoInt16Array___destroy___0 = a.asm.emscripten_bind_DracoInt16Array___destroy___0).apply(null, arguments);\n    },\n        Wa = a._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0 = function () {\n      return (Wa = a._emscripten_bind_DracoUInt16Array_DracoUInt16Array_0 = a.asm.emscripten_bind_DracoUInt16Array_DracoUInt16Array_0).apply(null, arguments);\n    },\n        cc = a._emscripten_bind_DracoUInt16Array_GetValue_1 = function () {\n      return (cc = a._emscripten_bind_DracoUInt16Array_GetValue_1 = a.asm.emscripten_bind_DracoUInt16Array_GetValue_1).apply(null, arguments);\n    },\n        dc = a._emscripten_bind_DracoUInt16Array_size_0 = function () {\n      return (dc = a._emscripten_bind_DracoUInt16Array_size_0 = a.asm.emscripten_bind_DracoUInt16Array_size_0).apply(null, arguments);\n    },\n        ec = a._emscripten_bind_DracoUInt16Array___destroy___0 = function () {\n      return (ec = a._emscripten_bind_DracoUInt16Array___destroy___0 = a.asm.emscripten_bind_DracoUInt16Array___destroy___0).apply(null, arguments);\n    },\n        Xa = a._emscripten_bind_DracoInt32Array_DracoInt32Array_0 = function () {\n      return (Xa = a._emscripten_bind_DracoInt32Array_DracoInt32Array_0 = a.asm.emscripten_bind_DracoInt32Array_DracoInt32Array_0).apply(null, arguments);\n    },\n        fc = a._emscripten_bind_DracoInt32Array_GetValue_1 = function () {\n      return (fc = a._emscripten_bind_DracoInt32Array_GetValue_1 = a.asm.emscripten_bind_DracoInt32Array_GetValue_1).apply(null, arguments);\n    },\n        gc = a._emscripten_bind_DracoInt32Array_size_0 = function () {\n      return (gc = a._emscripten_bind_DracoInt32Array_size_0 = a.asm.emscripten_bind_DracoInt32Array_size_0).apply(null, arguments);\n    },\n        hc = a._emscripten_bind_DracoInt32Array___destroy___0 = function () {\n      return (hc = a._emscripten_bind_DracoInt32Array___destroy___0 = a.asm.emscripten_bind_DracoInt32Array___destroy___0).apply(null, arguments);\n    },\n        Ya = a._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0 = function () {\n      return (Ya = a._emscripten_bind_DracoUInt32Array_DracoUInt32Array_0 = a.asm.emscripten_bind_DracoUInt32Array_DracoUInt32Array_0).apply(null, arguments);\n    },\n        ic = a._emscripten_bind_DracoUInt32Array_GetValue_1 = function () {\n      return (ic = a._emscripten_bind_DracoUInt32Array_GetValue_1 = a.asm.emscripten_bind_DracoUInt32Array_GetValue_1).apply(null, arguments);\n    },\n        jc = a._emscripten_bind_DracoUInt32Array_size_0 = function () {\n      return (jc = a._emscripten_bind_DracoUInt32Array_size_0 = a.asm.emscripten_bind_DracoUInt32Array_size_0).apply(null, arguments);\n    },\n        kc = a._emscripten_bind_DracoUInt32Array___destroy___0 = function () {\n      return (kc = a._emscripten_bind_DracoUInt32Array___destroy___0 = a.asm.emscripten_bind_DracoUInt32Array___destroy___0).apply(null, arguments);\n    },\n        Za = a._emscripten_bind_MetadataQuerier_MetadataQuerier_0 = function () {\n      return (Za = a._emscripten_bind_MetadataQuerier_MetadataQuerier_0 = a.asm.emscripten_bind_MetadataQuerier_MetadataQuerier_0).apply(null, arguments);\n    },\n        lc = a._emscripten_bind_MetadataQuerier_HasEntry_2 = function () {\n      return (lc = a._emscripten_bind_MetadataQuerier_HasEntry_2 = a.asm.emscripten_bind_MetadataQuerier_HasEntry_2).apply(null, arguments);\n    },\n        mc = a._emscripten_bind_MetadataQuerier_GetIntEntry_2 = function () {\n      return (mc = a._emscripten_bind_MetadataQuerier_GetIntEntry_2 = a.asm.emscripten_bind_MetadataQuerier_GetIntEntry_2).apply(null, arguments);\n    },\n        nc = a._emscripten_bind_MetadataQuerier_GetIntEntryArray_3 = function () {\n      return (nc = a._emscripten_bind_MetadataQuerier_GetIntEntryArray_3 = a.asm.emscripten_bind_MetadataQuerier_GetIntEntryArray_3).apply(null, arguments);\n    },\n        oc = a._emscripten_bind_MetadataQuerier_GetDoubleEntry_2 = function () {\n      return (oc = a._emscripten_bind_MetadataQuerier_GetDoubleEntry_2 = a.asm.emscripten_bind_MetadataQuerier_GetDoubleEntry_2).apply(null, arguments);\n    },\n        pc = a._emscripten_bind_MetadataQuerier_GetStringEntry_2 = function () {\n      return (pc = a._emscripten_bind_MetadataQuerier_GetStringEntry_2 = a.asm.emscripten_bind_MetadataQuerier_GetStringEntry_2).apply(null, arguments);\n    },\n        qc = a._emscripten_bind_MetadataQuerier_NumEntries_1 = function () {\n      return (qc = a._emscripten_bind_MetadataQuerier_NumEntries_1 = a.asm.emscripten_bind_MetadataQuerier_NumEntries_1).apply(null, arguments);\n    },\n        rc = a._emscripten_bind_MetadataQuerier_GetEntryName_2 = function () {\n      return (rc = a._emscripten_bind_MetadataQuerier_GetEntryName_2 = a.asm.emscripten_bind_MetadataQuerier_GetEntryName_2).apply(null, arguments);\n    },\n        sc = a._emscripten_bind_MetadataQuerier___destroy___0 = function () {\n      return (sc = a._emscripten_bind_MetadataQuerier___destroy___0 = a.asm.emscripten_bind_MetadataQuerier___destroy___0).apply(null, arguments);\n    },\n        $a = a._emscripten_bind_Decoder_Decoder_0 = function () {\n      return ($a = a._emscripten_bind_Decoder_Decoder_0 = a.asm.emscripten_bind_Decoder_Decoder_0).apply(null, arguments);\n    },\n        tc = a._emscripten_bind_Decoder_DecodeArrayToPointCloud_3 = function () {\n      return (tc = a._emscripten_bind_Decoder_DecodeArrayToPointCloud_3 = a.asm.emscripten_bind_Decoder_DecodeArrayToPointCloud_3).apply(null, arguments);\n    },\n        uc = a._emscripten_bind_Decoder_DecodeArrayToMesh_3 = function () {\n      return (uc = a._emscripten_bind_Decoder_DecodeArrayToMesh_3 = a.asm.emscripten_bind_Decoder_DecodeArrayToMesh_3).apply(null, arguments);\n    },\n        vc = a._emscripten_bind_Decoder_GetAttributeId_2 = function () {\n      return (vc = a._emscripten_bind_Decoder_GetAttributeId_2 = a.asm.emscripten_bind_Decoder_GetAttributeId_2).apply(null, arguments);\n    },\n        wc = a._emscripten_bind_Decoder_GetAttributeIdByName_2 = function () {\n      return (wc = a._emscripten_bind_Decoder_GetAttributeIdByName_2 = a.asm.emscripten_bind_Decoder_GetAttributeIdByName_2).apply(null, arguments);\n    },\n        xc = a._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3 = function () {\n      return (xc = a._emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3 = a.asm.emscripten_bind_Decoder_GetAttributeIdByMetadataEntry_3).apply(null, arguments);\n    },\n        yc = a._emscripten_bind_Decoder_GetAttribute_2 = function () {\n      return (yc = a._emscripten_bind_Decoder_GetAttribute_2 = a.asm.emscripten_bind_Decoder_GetAttribute_2).apply(null, arguments);\n    },\n        zc = a._emscripten_bind_Decoder_GetAttributeByUniqueId_2 = function () {\n      return (zc = a._emscripten_bind_Decoder_GetAttributeByUniqueId_2 = a.asm.emscripten_bind_Decoder_GetAttributeByUniqueId_2).apply(null, arguments);\n    },\n        Ac = a._emscripten_bind_Decoder_GetMetadata_1 = function () {\n      return (Ac = a._emscripten_bind_Decoder_GetMetadata_1 = a.asm.emscripten_bind_Decoder_GetMetadata_1).apply(null, arguments);\n    },\n        Bc = a._emscripten_bind_Decoder_GetAttributeMetadata_2 = function () {\n      return (Bc = a._emscripten_bind_Decoder_GetAttributeMetadata_2 = a.asm.emscripten_bind_Decoder_GetAttributeMetadata_2).apply(null, arguments);\n    },\n        Cc = a._emscripten_bind_Decoder_GetFaceFromMesh_3 = function () {\n      return (Cc = a._emscripten_bind_Decoder_GetFaceFromMesh_3 = a.asm.emscripten_bind_Decoder_GetFaceFromMesh_3).apply(null, arguments);\n    },\n        Dc = a._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2 = function () {\n      return (Dc = a._emscripten_bind_Decoder_GetTriangleStripsFromMesh_2 = a.asm.emscripten_bind_Decoder_GetTriangleStripsFromMesh_2).apply(null, arguments);\n    },\n        Ec = a._emscripten_bind_Decoder_GetTrianglesUInt16Array_3 = function () {\n      return (Ec = a._emscripten_bind_Decoder_GetTrianglesUInt16Array_3 = a.asm.emscripten_bind_Decoder_GetTrianglesUInt16Array_3).apply(null, arguments);\n    },\n        Fc = a._emscripten_bind_Decoder_GetTrianglesUInt32Array_3 = function () {\n      return (Fc = a._emscripten_bind_Decoder_GetTrianglesUInt32Array_3 = a.asm.emscripten_bind_Decoder_GetTrianglesUInt32Array_3).apply(null, arguments);\n    },\n        Gc = a._emscripten_bind_Decoder_GetAttributeFloat_3 = function () {\n      return (Gc = a._emscripten_bind_Decoder_GetAttributeFloat_3 = a.asm.emscripten_bind_Decoder_GetAttributeFloat_3).apply(null, arguments);\n    },\n        Hc = a._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3 = function () {\n      return (Hc = a._emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeFloatForAllPoints_3).apply(null, arguments);\n    },\n        Ic = a._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3 = function () {\n      return (Ic = a._emscripten_bind_Decoder_GetAttributeIntForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeIntForAllPoints_3).apply(null, arguments);\n    },\n        Jc = a._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3 = function () {\n      return (Jc = a._emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeInt8ForAllPoints_3).apply(null, arguments);\n    },\n        Kc = a._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3 = function () {\n      return (Kc = a._emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeUInt8ForAllPoints_3).apply(null, arguments);\n    },\n        Lc = a._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3 = function () {\n      return (Lc = a._emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeInt16ForAllPoints_3).apply(null, arguments);\n    },\n        Mc = a._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3 = function () {\n      return (Mc = a._emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeUInt16ForAllPoints_3).apply(null, arguments);\n    },\n        Nc = a._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3 = function () {\n      return (Nc = a._emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeInt32ForAllPoints_3).apply(null, arguments);\n    },\n        Oc = a._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3 = function () {\n      return (Oc = a._emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3 = a.asm.emscripten_bind_Decoder_GetAttributeUInt32ForAllPoints_3).apply(null, arguments);\n    },\n        Pc = a._emscripten_bind_Decoder_GetAttributeDataArrayForAllPoints_5 = function () {\n      return (Pc = a._emscripten_bind_Decoder_GetAttributeDataArrayForAllPoints_5 = a.asm.emscripten_bind_Decoder_GetAttributeDataArrayForAllPoints_5).apply(null, arguments);\n    },\n        Qc = a._emscripten_bind_Decoder_SkipAttributeTransform_1 = function () {\n      return (Qc = a._emscripten_bind_Decoder_SkipAttributeTransform_1 = a.asm.emscripten_bind_Decoder_SkipAttributeTransform_1).apply(null, arguments);\n    },\n        Rc = a._emscripten_bind_Decoder_GetEncodedGeometryType_Deprecated_1 = function () {\n      return (Rc = a._emscripten_bind_Decoder_GetEncodedGeometryType_Deprecated_1 = a.asm.emscripten_bind_Decoder_GetEncodedGeometryType_Deprecated_1).apply(null, arguments);\n    },\n        Sc = a._emscripten_bind_Decoder_DecodeBufferToPointCloud_2 = function () {\n      return (Sc = a._emscripten_bind_Decoder_DecodeBufferToPointCloud_2 = a.asm.emscripten_bind_Decoder_DecodeBufferToPointCloud_2).apply(null, arguments);\n    },\n        Tc = a._emscripten_bind_Decoder_DecodeBufferToMesh_2 = function () {\n      return (Tc = a._emscripten_bind_Decoder_DecodeBufferToMesh_2 = a.asm.emscripten_bind_Decoder_DecodeBufferToMesh_2).apply(null, arguments);\n    },\n        Uc = a._emscripten_bind_Decoder___destroy___0 = function () {\n      return (Uc = a._emscripten_bind_Decoder___destroy___0 = a.asm.emscripten_bind_Decoder___destroy___0).apply(null, arguments);\n    },\n        Vc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM = function () {\n      return (Vc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM = a.asm.emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_INVALID_TRANSFORM).apply(null, arguments);\n    },\n        Wc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM = function () {\n      return (Wc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM = a.asm.emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_NO_TRANSFORM).apply(null, arguments);\n    },\n        Xc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM = function () {\n      return (Xc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM = a.asm.emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_QUANTIZATION_TRANSFORM).apply(null, arguments);\n    },\n        Yc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM = function () {\n      return (Yc = a._emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM = a.asm.emscripten_enum_draco_AttributeTransformType_ATTRIBUTE_OCTAHEDRON_TRANSFORM).apply(null, arguments);\n    },\n        Zc = a._emscripten_enum_draco_GeometryAttribute_Type_INVALID = function () {\n      return (Zc = a._emscripten_enum_draco_GeometryAttribute_Type_INVALID = a.asm.emscripten_enum_draco_GeometryAttribute_Type_INVALID).apply(null, arguments);\n    },\n        $c = a._emscripten_enum_draco_GeometryAttribute_Type_POSITION = function () {\n      return ($c = a._emscripten_enum_draco_GeometryAttribute_Type_POSITION = a.asm.emscripten_enum_draco_GeometryAttribute_Type_POSITION).apply(null, arguments);\n    },\n        ad = a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = function () {\n      return (ad = a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = a.asm.emscripten_enum_draco_GeometryAttribute_Type_NORMAL).apply(null, arguments);\n    },\n        bd = a._emscripten_enum_draco_GeometryAttribute_Type_COLOR = function () {\n      return (bd = a._emscripten_enum_draco_GeometryAttribute_Type_COLOR = a.asm.emscripten_enum_draco_GeometryAttribute_Type_COLOR).apply(null, arguments);\n    },\n        cd = a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = function () {\n      return (cd = a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = a.asm.emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD).apply(null, arguments);\n    },\n        dd = a._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = function () {\n      return (dd = a._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = a.asm.emscripten_enum_draco_GeometryAttribute_Type_GENERIC).apply(null, arguments);\n    },\n        ed = a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = function () {\n      return (ed = a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = a.asm.emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE).apply(null, arguments);\n    },\n        fd = a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = function () {\n      return (fd = a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = a.asm.emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD).apply(null, arguments);\n    },\n        gd = a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = function () {\n      return (gd = a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = a.asm.emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH).apply(null, arguments);\n    },\n        hd = a._emscripten_enum_draco_DataType_DT_INVALID = function () {\n      return (hd = a._emscripten_enum_draco_DataType_DT_INVALID = a.asm.emscripten_enum_draco_DataType_DT_INVALID).apply(null, arguments);\n    },\n        id = a._emscripten_enum_draco_DataType_DT_INT8 = function () {\n      return (id = a._emscripten_enum_draco_DataType_DT_INT8 = a.asm.emscripten_enum_draco_DataType_DT_INT8).apply(null, arguments);\n    },\n        jd = a._emscripten_enum_draco_DataType_DT_UINT8 = function () {\n      return (jd = a._emscripten_enum_draco_DataType_DT_UINT8 = a.asm.emscripten_enum_draco_DataType_DT_UINT8).apply(null, arguments);\n    },\n        kd = a._emscripten_enum_draco_DataType_DT_INT16 = function () {\n      return (kd = a._emscripten_enum_draco_DataType_DT_INT16 = a.asm.emscripten_enum_draco_DataType_DT_INT16).apply(null, arguments);\n    },\n        ld = a._emscripten_enum_draco_DataType_DT_UINT16 = function () {\n      return (ld = a._emscripten_enum_draco_DataType_DT_UINT16 = a.asm.emscripten_enum_draco_DataType_DT_UINT16).apply(null, arguments);\n    },\n        md = a._emscripten_enum_draco_DataType_DT_INT32 = function () {\n      return (md = a._emscripten_enum_draco_DataType_DT_INT32 = a.asm.emscripten_enum_draco_DataType_DT_INT32).apply(null, arguments);\n    },\n        nd = a._emscripten_enum_draco_DataType_DT_UINT32 = function () {\n      return (nd = a._emscripten_enum_draco_DataType_DT_UINT32 = a.asm.emscripten_enum_draco_DataType_DT_UINT32).apply(null, arguments);\n    },\n        od = a._emscripten_enum_draco_DataType_DT_INT64 = function () {\n      return (od = a._emscripten_enum_draco_DataType_DT_INT64 = a.asm.emscripten_enum_draco_DataType_DT_INT64).apply(null, arguments);\n    },\n        pd = a._emscripten_enum_draco_DataType_DT_UINT64 = function () {\n      return (pd = a._emscripten_enum_draco_DataType_DT_UINT64 = a.asm.emscripten_enum_draco_DataType_DT_UINT64).apply(null, arguments);\n    },\n        qd = a._emscripten_enum_draco_DataType_DT_FLOAT32 = function () {\n      return (qd = a._emscripten_enum_draco_DataType_DT_FLOAT32 = a.asm.emscripten_enum_draco_DataType_DT_FLOAT32).apply(null, arguments);\n    },\n        rd = a._emscripten_enum_draco_DataType_DT_FLOAT64 = function () {\n      return (rd = a._emscripten_enum_draco_DataType_DT_FLOAT64 = a.asm.emscripten_enum_draco_DataType_DT_FLOAT64).apply(null, arguments);\n    },\n        sd = a._emscripten_enum_draco_DataType_DT_BOOL = function () {\n      return (sd = a._emscripten_enum_draco_DataType_DT_BOOL = a.asm.emscripten_enum_draco_DataType_DT_BOOL).apply(null, arguments);\n    },\n        td = a._emscripten_enum_draco_DataType_DT_TYPES_COUNT = function () {\n      return (td = a._emscripten_enum_draco_DataType_DT_TYPES_COUNT = a.asm.emscripten_enum_draco_DataType_DT_TYPES_COUNT).apply(null, arguments);\n    },\n        ud = a._emscripten_enum_draco_StatusCode_OK = function () {\n      return (ud = a._emscripten_enum_draco_StatusCode_OK = a.asm.emscripten_enum_draco_StatusCode_OK).apply(null, arguments);\n    },\n        vd = a._emscripten_enum_draco_StatusCode_DRACO_ERROR = function () {\n      return (vd = a._emscripten_enum_draco_StatusCode_DRACO_ERROR = a.asm.emscripten_enum_draco_StatusCode_DRACO_ERROR).apply(null, arguments);\n    },\n        wd = a._emscripten_enum_draco_StatusCode_IO_ERROR = function () {\n      return (wd = a._emscripten_enum_draco_StatusCode_IO_ERROR = a.asm.emscripten_enum_draco_StatusCode_IO_ERROR).apply(null, arguments);\n    },\n        xd = a._emscripten_enum_draco_StatusCode_INVALID_PARAMETER = function () {\n      return (xd = a._emscripten_enum_draco_StatusCode_INVALID_PARAMETER = a.asm.emscripten_enum_draco_StatusCode_INVALID_PARAMETER).apply(null, arguments);\n    },\n        yd = a._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION = function () {\n      return (yd = a._emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION = a.asm.emscripten_enum_draco_StatusCode_UNSUPPORTED_VERSION).apply(null, arguments);\n    },\n        zd = a._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION = function () {\n      return (zd = a._emscripten_enum_draco_StatusCode_UNKNOWN_VERSION = a.asm.emscripten_enum_draco_StatusCode_UNKNOWN_VERSION).apply(null, arguments);\n    };\n\n    a.___errno_location = function () {\n      return (a.___errno_location = a.asm.__errno_location).apply(null, arguments);\n    };\n\n    a.stackSave = function () {\n      return (a.stackSave = a.asm.stackSave).apply(null, arguments);\n    };\n\n    a.stackRestore = function () {\n      return (a.stackRestore = a.asm.stackRestore).apply(null, arguments);\n    };\n\n    a.stackAlloc = function () {\n      return (a.stackAlloc = a.asm.stackAlloc).apply(null, arguments);\n    };\n\n    a._setThrew = function () {\n      return (a._setThrew = a.asm.setThrew).apply(null, arguments);\n    };\n\n    a._free = function () {\n      return (a._free = a.asm.free).apply(null, arguments);\n    };\n\n    var fb = a._malloc = function () {\n      return (fb = a._malloc = a.asm.malloc).apply(null, arguments);\n    },\n        sa;\n\n    na = function b() {\n      sa || ea();\n      sa || (na = b);\n    };\n\n    a.run = ea;\n    if (a.preInit) for (\"function\" == typeof a.preInit && (a.preInit = [a.preInit]); 0 < a.preInit.length;) {\n      a.preInit.pop()();\n    }\n    ea();\n    u.prototype = Object.create(u.prototype);\n    u.prototype.constructor = u;\n    u.prototype.__class__ = u;\n    u.__cache__ = {};\n    a.WrapperObject = u;\n    a.getCache = z;\n    a.wrapPointer = R;\n\n    a.castObject = function (b, c) {\n      return R(b.ptr, c);\n    };\n\n    a.NULL = R(0);\n\n    a.destroy = function (b) {\n      if (!b.__destroy__) throw \"Error: Cannot destroy object. (Did you create it yourself?)\";\n\n      b.__destroy__();\n\n      delete z(b.__class__)[b.ptr];\n    };\n\n    a.compare = function (b, c) {\n      return b.ptr === c.ptr;\n    };\n\n    a.getPointer = function (b) {\n      return b.ptr;\n    };\n\n    a.getClass = function (b) {\n      return b.__class__;\n    };\n\n    var r = {\n      buffer: 0,\n      size: 0,\n      pos: 0,\n      temps: [],\n      needed: 0,\n      prepare: function prepare() {\n        if (r.needed) {\n          for (var b = 0; b < r.temps.length; b++) {\n            a._free(r.temps[b]);\n          }\n\n          r.temps.length = 0;\n\n          a._free(r.buffer);\n\n          r.buffer = 0;\n          r.size += r.needed;\n          r.needed = 0;\n        }\n\n        r.buffer || (r.size += 128, r.buffer = a._malloc(r.size), q(r.buffer));\n        r.pos = 0;\n      },\n      alloc: function alloc(b, c) {\n        q(r.buffer);\n        b = b.length * c.BYTES_PER_ELEMENT;\n        b = b + 7 & -8;\n        r.pos + b >= r.size ? (q(0 < b), r.needed += b, c = a._malloc(b), r.temps.push(c)) : (c = r.buffer + r.pos, r.pos += b);\n        return c;\n      },\n      copy: function copy(b, c, d) {\n        d >>>= 0;\n\n        switch (c.BYTES_PER_ELEMENT) {\n          case 2:\n            d >>>= 1;\n            break;\n\n          case 4:\n            d >>>= 2;\n            break;\n\n          case 8:\n            d >>>= 3;\n        }\n\n        for (var g = 0; g < b.length; g++) {\n          c[d + g] = b[g];\n        }\n      }\n    };\n    aa.prototype = Object.create(u.prototype);\n    aa.prototype.constructor = aa;\n    aa.prototype.__class__ = aa;\n    aa.__cache__ = {};\n    a.VoidPtr = aa;\n\n    aa.prototype.__destroy__ = aa.prototype.__destroy__ = function () {\n      hb(this.ptr);\n    };\n\n    S.prototype = Object.create(u.prototype);\n    S.prototype.constructor = S;\n    S.prototype.__class__ = S;\n    S.__cache__ = {};\n    a.DecoderBuffer = S;\n\n    S.prototype.Init = S.prototype.Init = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      \"object\" == typeof b && (b = va(b));\n      c && \"object\" === typeof c && (c = c.ptr);\n      ib(d, b, c);\n    };\n\n    S.prototype.__destroy__ = S.prototype.__destroy__ = function () {\n      jb(this.ptr);\n    };\n\n    P.prototype = Object.create(u.prototype);\n    P.prototype.constructor = P;\n    P.prototype.__class__ = P;\n    P.__cache__ = {};\n    a.AttributeTransformData = P;\n\n    P.prototype.transform_type = P.prototype.transform_type = function () {\n      return kb(this.ptr);\n    };\n\n    P.prototype.__destroy__ = P.prototype.__destroy__ = function () {\n      lb(this.ptr);\n    };\n\n    Y.prototype = Object.create(u.prototype);\n    Y.prototype.constructor = Y;\n    Y.prototype.__class__ = Y;\n    Y.__cache__ = {};\n    a.GeometryAttribute = Y;\n\n    Y.prototype.__destroy__ = Y.prototype.__destroy__ = function () {\n      mb(this.ptr);\n    };\n\n    w.prototype = Object.create(u.prototype);\n    w.prototype.constructor = w;\n    w.prototype.__class__ = w;\n    w.__cache__ = {};\n    a.PointAttribute = w;\n\n    w.prototype.size = w.prototype.size = function () {\n      return nb(this.ptr);\n    };\n\n    w.prototype.GetAttributeTransformData = w.prototype.GetAttributeTransformData = function () {\n      return R(ob(this.ptr), P);\n    };\n\n    w.prototype.attribute_type = w.prototype.attribute_type = function () {\n      return pb(this.ptr);\n    };\n\n    w.prototype.data_type = w.prototype.data_type = function () {\n      return qb(this.ptr);\n    };\n\n    w.prototype.num_components = w.prototype.num_components = function () {\n      return rb(this.ptr);\n    };\n\n    w.prototype.normalized = w.prototype.normalized = function () {\n      return !!sb(this.ptr);\n    };\n\n    w.prototype.byte_stride = w.prototype.byte_stride = function () {\n      return tb(this.ptr);\n    };\n\n    w.prototype.byte_offset = w.prototype.byte_offset = function () {\n      return ub(this.ptr);\n    };\n\n    w.prototype.unique_id = w.prototype.unique_id = function () {\n      return vb(this.ptr);\n    };\n\n    w.prototype.__destroy__ = w.prototype.__destroy__ = function () {\n      wb(this.ptr);\n    };\n\n    B.prototype = Object.create(u.prototype);\n    B.prototype.constructor = B;\n    B.prototype.__class__ = B;\n    B.__cache__ = {};\n    a.AttributeQuantizationTransform = B;\n\n    B.prototype.InitFromAttribute = B.prototype.InitFromAttribute = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return !!xb(c, b);\n    };\n\n    B.prototype.quantization_bits = B.prototype.quantization_bits = function () {\n      return yb(this.ptr);\n    };\n\n    B.prototype.min_value = B.prototype.min_value = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return zb(c, b);\n    };\n\n    B.prototype.range = B.prototype.range = function () {\n      return Ab(this.ptr);\n    };\n\n    B.prototype.__destroy__ = B.prototype.__destroy__ = function () {\n      Bb(this.ptr);\n    };\n\n    F.prototype = Object.create(u.prototype);\n    F.prototype.constructor = F;\n    F.prototype.__class__ = F;\n    F.__cache__ = {};\n    a.AttributeOctahedronTransform = F;\n\n    F.prototype.InitFromAttribute = F.prototype.InitFromAttribute = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return !!Cb(c, b);\n    };\n\n    F.prototype.quantization_bits = F.prototype.quantization_bits = function () {\n      return Db(this.ptr);\n    };\n\n    F.prototype.__destroy__ = F.prototype.__destroy__ = function () {\n      Eb(this.ptr);\n    };\n\n    G.prototype = Object.create(u.prototype);\n    G.prototype.constructor = G;\n    G.prototype.__class__ = G;\n    G.__cache__ = {};\n    a.PointCloud = G;\n\n    G.prototype.num_attributes = G.prototype.num_attributes = function () {\n      return Fb(this.ptr);\n    };\n\n    G.prototype.num_points = G.prototype.num_points = function () {\n      return Gb(this.ptr);\n    };\n\n    G.prototype.__destroy__ = G.prototype.__destroy__ = function () {\n      Hb(this.ptr);\n    };\n\n    E.prototype = Object.create(u.prototype);\n    E.prototype.constructor = E;\n    E.prototype.__class__ = E;\n    E.__cache__ = {};\n    a.Mesh = E;\n\n    E.prototype.num_faces = E.prototype.num_faces = function () {\n      return Ib(this.ptr);\n    };\n\n    E.prototype.num_attributes = E.prototype.num_attributes = function () {\n      return Jb(this.ptr);\n    };\n\n    E.prototype.num_points = E.prototype.num_points = function () {\n      return Kb(this.ptr);\n    };\n\n    E.prototype.__destroy__ = E.prototype.__destroy__ = function () {\n      Lb(this.ptr);\n    };\n\n    T.prototype = Object.create(u.prototype);\n    T.prototype.constructor = T;\n    T.prototype.__class__ = T;\n    T.__cache__ = {};\n    a.Metadata = T;\n\n    T.prototype.__destroy__ = T.prototype.__destroy__ = function () {\n      Mb(this.ptr);\n    };\n\n    A.prototype = Object.create(u.prototype);\n    A.prototype.constructor = A;\n    A.prototype.__class__ = A;\n    A.__cache__ = {};\n    a.Status = A;\n\n    A.prototype.code = A.prototype.code = function () {\n      return Nb(this.ptr);\n    };\n\n    A.prototype.ok = A.prototype.ok = function () {\n      return !!Ob(this.ptr);\n    };\n\n    A.prototype.error_msg = A.prototype.error_msg = function () {\n      return h(Pb(this.ptr));\n    };\n\n    A.prototype.__destroy__ = A.prototype.__destroy__ = function () {\n      Qb(this.ptr);\n    };\n\n    H.prototype = Object.create(u.prototype);\n    H.prototype.constructor = H;\n    H.prototype.__class__ = H;\n    H.__cache__ = {};\n    a.DracoFloat32Array = H;\n\n    H.prototype.GetValue = H.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return Rb(c, b);\n    };\n\n    H.prototype.size = H.prototype.size = function () {\n      return Sb(this.ptr);\n    };\n\n    H.prototype.__destroy__ = H.prototype.__destroy__ = function () {\n      Tb(this.ptr);\n    };\n\n    I.prototype = Object.create(u.prototype);\n    I.prototype.constructor = I;\n    I.prototype.__class__ = I;\n    I.__cache__ = {};\n    a.DracoInt8Array = I;\n\n    I.prototype.GetValue = I.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return Ub(c, b);\n    };\n\n    I.prototype.size = I.prototype.size = function () {\n      return Vb(this.ptr);\n    };\n\n    I.prototype.__destroy__ = I.prototype.__destroy__ = function () {\n      Wb(this.ptr);\n    };\n\n    J.prototype = Object.create(u.prototype);\n    J.prototype.constructor = J;\n    J.prototype.__class__ = J;\n    J.__cache__ = {};\n    a.DracoUInt8Array = J;\n\n    J.prototype.GetValue = J.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return Xb(c, b);\n    };\n\n    J.prototype.size = J.prototype.size = function () {\n      return Yb(this.ptr);\n    };\n\n    J.prototype.__destroy__ = J.prototype.__destroy__ = function () {\n      Zb(this.ptr);\n    };\n\n    K.prototype = Object.create(u.prototype);\n    K.prototype.constructor = K;\n    K.prototype.__class__ = K;\n    K.__cache__ = {};\n    a.DracoInt16Array = K;\n\n    K.prototype.GetValue = K.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return $b(c, b);\n    };\n\n    K.prototype.size = K.prototype.size = function () {\n      return ac(this.ptr);\n    };\n\n    K.prototype.__destroy__ = K.prototype.__destroy__ = function () {\n      bc(this.ptr);\n    };\n\n    L.prototype = Object.create(u.prototype);\n    L.prototype.constructor = L;\n    L.prototype.__class__ = L;\n    L.__cache__ = {};\n    a.DracoUInt16Array = L;\n\n    L.prototype.GetValue = L.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return cc(c, b);\n    };\n\n    L.prototype.size = L.prototype.size = function () {\n      return dc(this.ptr);\n    };\n\n    L.prototype.__destroy__ = L.prototype.__destroy__ = function () {\n      ec(this.ptr);\n    };\n\n    M.prototype = Object.create(u.prototype);\n    M.prototype.constructor = M;\n    M.prototype.__class__ = M;\n    M.__cache__ = {};\n    a.DracoInt32Array = M;\n\n    M.prototype.GetValue = M.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return fc(c, b);\n    };\n\n    M.prototype.size = M.prototype.size = function () {\n      return gc(this.ptr);\n    };\n\n    M.prototype.__destroy__ = M.prototype.__destroy__ = function () {\n      hc(this.ptr);\n    };\n\n    N.prototype = Object.create(u.prototype);\n    N.prototype.constructor = N;\n    N.prototype.__class__ = N;\n    N.__cache__ = {};\n    a.DracoUInt32Array = N;\n\n    N.prototype.GetValue = N.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return ic(c, b);\n    };\n\n    N.prototype.size = N.prototype.size = function () {\n      return jc(this.ptr);\n    };\n\n    N.prototype.__destroy__ = N.prototype.__destroy__ = function () {\n      kc(this.ptr);\n    };\n\n    x.prototype = Object.create(u.prototype);\n    x.prototype.constructor = x;\n    x.prototype.__class__ = x;\n    x.__cache__ = {};\n    a.MetadataQuerier = x;\n\n    x.prototype.HasEntry = x.prototype.HasEntry = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      return !!lc(d, b, c);\n    };\n\n    x.prototype.GetIntEntry = x.prototype.GetIntEntry = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      return mc(d, b, c);\n    };\n\n    x.prototype.GetIntEntryArray = x.prototype.GetIntEntryArray = function (b, c, d) {\n      var g = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      d && \"object\" === typeof d && (d = d.ptr);\n      nc(g, b, c, d);\n    };\n\n    x.prototype.GetDoubleEntry = x.prototype.GetDoubleEntry = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      return oc(d, b, c);\n    };\n\n    x.prototype.GetStringEntry = x.prototype.GetStringEntry = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      return h(pc(d, b, c));\n    };\n\n    x.prototype.NumEntries = x.prototype.NumEntries = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return qc(c, b);\n    };\n\n    x.prototype.GetEntryName = x.prototype.GetEntryName = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return h(rc(d, b, c));\n    };\n\n    x.prototype.__destroy__ = x.prototype.__destroy__ = function () {\n      sc(this.ptr);\n    };\n\n    k.prototype = Object.create(u.prototype);\n    k.prototype.constructor = k;\n    k.prototype.__class__ = k;\n    k.__cache__ = {};\n    a.Decoder = k;\n\n    k.prototype.DecodeArrayToPointCloud = k.prototype.DecodeArrayToPointCloud = function (b, c, d) {\n      var g = this.ptr;\n      r.prepare();\n      \"object\" == typeof b && (b = va(b));\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return R(tc(g, b, c, d), A);\n    };\n\n    k.prototype.DecodeArrayToMesh = k.prototype.DecodeArrayToMesh = function (b, c, d) {\n      var g = this.ptr;\n      r.prepare();\n      \"object\" == typeof b && (b = va(b));\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return R(uc(g, b, c, d), A);\n    };\n\n    k.prototype.GetAttributeId = k.prototype.GetAttributeId = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return vc(d, b, c);\n    };\n\n    k.prototype.GetAttributeIdByName = k.prototype.GetAttributeIdByName = function (b, c) {\n      var d = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      return wc(d, b, c);\n    };\n\n    k.prototype.GetAttributeIdByMetadataEntry = k.prototype.GetAttributeIdByMetadataEntry = function (b, c, d) {\n      var g = this.ptr;\n      r.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : ca(c);\n      d = d && \"object\" === typeof d ? d.ptr : ca(d);\n      return xc(g, b, c, d);\n    };\n\n    k.prototype.GetAttribute = k.prototype.GetAttribute = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return R(yc(d, b, c), w);\n    };\n\n    k.prototype.GetAttributeByUniqueId = k.prototype.GetAttributeByUniqueId = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return R(zc(d, b, c), w);\n    };\n\n    k.prototype.GetMetadata = k.prototype.GetMetadata = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return R(Ac(c, b), T);\n    };\n\n    k.prototype.GetAttributeMetadata = k.prototype.GetAttributeMetadata = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return R(Bc(d, b, c), T);\n    };\n\n    k.prototype.GetFaceFromMesh = k.prototype.GetFaceFromMesh = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Cc(g, b, c, d);\n    };\n\n    k.prototype.GetTriangleStripsFromMesh = k.prototype.GetTriangleStripsFromMesh = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return Dc(d, b, c);\n    };\n\n    k.prototype.GetTrianglesUInt16Array = k.prototype.GetTrianglesUInt16Array = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Ec(g, b, c, d);\n    };\n\n    k.prototype.GetTrianglesUInt32Array = k.prototype.GetTrianglesUInt32Array = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Fc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeFloat = k.prototype.GetAttributeFloat = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Gc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeFloatForAllPoints = k.prototype.GetAttributeFloatForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Hc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeIntForAllPoints = k.prototype.GetAttributeIntForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Ic(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeInt8ForAllPoints = k.prototype.GetAttributeInt8ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Jc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeUInt8ForAllPoints = k.prototype.GetAttributeUInt8ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Kc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeInt16ForAllPoints = k.prototype.GetAttributeInt16ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Lc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeUInt16ForAllPoints = k.prototype.GetAttributeUInt16ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Mc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeInt32ForAllPoints = k.prototype.GetAttributeInt32ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Nc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeUInt32ForAllPoints = k.prototype.GetAttributeUInt32ForAllPoints = function (b, c, d) {\n      var g = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Oc(g, b, c, d);\n    };\n\n    k.prototype.GetAttributeDataArrayForAllPoints = k.prototype.GetAttributeDataArrayForAllPoints = function (b, c, d, g, v) {\n      var ia = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      g && \"object\" === typeof g && (g = g.ptr);\n      v && \"object\" === typeof v && (v = v.ptr);\n      return !!Pc(ia, b, c, d, g, v);\n    };\n\n    k.prototype.SkipAttributeTransform = k.prototype.SkipAttributeTransform = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      Qc(c, b);\n    };\n\n    k.prototype.GetEncodedGeometryType_Deprecated = k.prototype.GetEncodedGeometryType_Deprecated = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return Rc(c, b);\n    };\n\n    k.prototype.DecodeBufferToPointCloud = k.prototype.DecodeBufferToPointCloud = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return R(Sc(d, b, c), A);\n    };\n\n    k.prototype.DecodeBufferToMesh = k.prototype.DecodeBufferToMesh = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return R(Tc(d, b, c), A);\n    };\n\n    k.prototype.__destroy__ = k.prototype.__destroy__ = function () {\n      Uc(this.ptr);\n    };\n\n    (function () {\n      function b() {\n        a.ATTRIBUTE_INVALID_TRANSFORM = Vc();\n        a.ATTRIBUTE_NO_TRANSFORM = Wc();\n        a.ATTRIBUTE_QUANTIZATION_TRANSFORM = Xc();\n        a.ATTRIBUTE_OCTAHEDRON_TRANSFORM = Yc();\n        a.INVALID = Zc();\n        a.POSITION = $c();\n        a.NORMAL = ad();\n        a.COLOR = bd();\n        a.TEX_COORD = cd();\n        a.GENERIC = dd();\n        a.INVALID_GEOMETRY_TYPE = ed();\n        a.POINT_CLOUD = fd();\n        a.TRIANGULAR_MESH = gd();\n        a.DT_INVALID = hd();\n        a.DT_INT8 = id();\n        a.DT_UINT8 = jd();\n        a.DT_INT16 = kd();\n        a.DT_UINT16 = ld();\n        a.DT_INT32 = md();\n        a.DT_UINT32 = nd();\n        a.DT_INT64 = od();\n        a.DT_UINT64 = pd();\n        a.DT_FLOAT32 = qd();\n        a.DT_FLOAT64 = rd();\n        a.DT_BOOL = sd();\n        a.DT_TYPES_COUNT = td();\n        a.OK = ud();\n        a.DRACO_ERROR = vd();\n        a.IO_ERROR = wd();\n        a.INVALID_PARAMETER = xd();\n        a.UNSUPPORTED_VERSION = yd();\n        a.UNKNOWN_VERSION = zd();\n      }\n\n      Da ? b() : Fa.unshift(b);\n    })();\n\n    if (\"function\" === typeof a.onModuleParsed) a.onModuleParsed();\n\n    a.Decoder.prototype.GetEncodedGeometryType = function (b) {\n      if (b.__class__ && b.__class__ === a.DecoderBuffer) return a.Decoder.prototype.GetEncodedGeometryType_Deprecated(b);\n      if (8 > b.byteLength) return a.INVALID_GEOMETRY_TYPE;\n\n      switch (b[7]) {\n        case 0:\n          return a.POINT_CLOUD;\n\n        case 1:\n          return a.TRIANGULAR_MESH;\n\n        default:\n          return a.INVALID_GEOMETRY_TYPE;\n      }\n    };\n\n    return n.ready;\n  };\n}();\n\n true ? module.exports = DracoDecoderModule : 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/draco3dgltf/draco_decoder_gltf_nodejs.js\n");

/***/ }),

/***/ "../../node_modules/draco3dgltf/draco_encoder_gltf_nodejs.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/draco3dgltf/draco_encoder_gltf_nodejs.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var __filename = \"/index.js\";\nvar __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/process/browser.js\");\nvar $jscomp = $jscomp || {};\n$jscomp.scope = {};\n\n$jscomp.arrayIteratorImpl = function (l) {\n  var p = 0;\n  return function () {\n    return p < l.length ? {\n      done: !1,\n      value: l[p++]\n    } : {\n      done: !0\n    };\n  };\n};\n\n$jscomp.arrayIterator = function (l) {\n  return {\n    next: $jscomp.arrayIteratorImpl(l)\n  };\n};\n\n$jscomp.makeIterator = function (l) {\n  var p = \"undefined\" != typeof Symbol && Symbol.iterator && l[Symbol.iterator];\n  return p ? p.call(l) : $jscomp.arrayIterator(l);\n};\n\n$jscomp.ASSUME_ES5 = !1;\n$jscomp.ASSUME_NO_NATIVE_MAP = !1;\n$jscomp.ASSUME_NO_NATIVE_SET = !1;\n$jscomp.SIMPLE_FROUND_POLYFILL = !1;\n$jscomp.ISOLATE_POLYFILLS = !1;\n$jscomp.FORCE_POLYFILL_PROMISE = !1;\n$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = !1;\n\n$jscomp.getGlobal = function (l) {\n  l = [\"object\" == typeof globalThis && globalThis, l, \"object\" == typeof window && window, \"object\" == typeof self && self, \"object\" == typeof __webpack_require__.g && __webpack_require__.g];\n\n  for (var p = 0; p < l.length; ++p) {\n    var n = l[p];\n    if (n && n.Math == Math) return n;\n  }\n\n  throw Error(\"Cannot find global object\");\n};\n\n$jscomp.global = $jscomp.getGlobal(this);\n$jscomp.defineProperty = $jscomp.ASSUME_ES5 || \"function\" == typeof Object.defineProperties ? Object.defineProperty : function (l, p, n) {\n  if (l == Array.prototype || l == Object.prototype) return l;\n  l[p] = n.value;\n  return l;\n};\n$jscomp.IS_SYMBOL_NATIVE = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol(\"x\");\n$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;\n$jscomp.polyfills = {};\n$jscomp.propertyToPolyfillSymbol = {};\n$jscomp.POLYFILL_PREFIX = \"$jscp$\";\n\nvar $jscomp$lookupPolyfilledValue = function $jscomp$lookupPolyfilledValue(l, p) {\n  var n = $jscomp.propertyToPolyfillSymbol[p];\n  if (null == n) return l[p];\n  n = l[n];\n  return void 0 !== n ? n : l[p];\n};\n\n$jscomp.polyfill = function (l, p, n, r) {\n  p && ($jscomp.ISOLATE_POLYFILLS ? $jscomp.polyfillIsolated(l, p, n, r) : $jscomp.polyfillUnisolated(l, p, n, r));\n};\n\n$jscomp.polyfillUnisolated = function (l, p, n, r) {\n  n = $jscomp.global;\n  l = l.split(\".\");\n\n  for (r = 0; r < l.length - 1; r++) {\n    var k = l[r];\n    if (!(k in n)) return;\n    n = n[k];\n  }\n\n  l = l[l.length - 1];\n  r = n[l];\n  p = p(r);\n  p != r && null != p && $jscomp.defineProperty(n, l, {\n    configurable: !0,\n    writable: !0,\n    value: p\n  });\n};\n\n$jscomp.polyfillIsolated = function (l, p, n, r) {\n  var k = l.split(\".\");\n  l = 1 === k.length;\n  r = k[0];\n  r = !l && r in $jscomp.polyfills ? $jscomp.polyfills : $jscomp.global;\n\n  for (var C = 0; C < k.length - 1; C++) {\n    var h = k[C];\n    if (!(h in r)) return;\n    r = r[h];\n  }\n\n  k = k[k.length - 1];\n  n = $jscomp.IS_SYMBOL_NATIVE && \"es6\" === n ? r[k] : null;\n  p = p(n);\n  null != p && (l ? $jscomp.defineProperty($jscomp.polyfills, k, {\n    configurable: !0,\n    writable: !0,\n    value: p\n  }) : p !== n && ($jscomp.propertyToPolyfillSymbol[k] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global.Symbol(k) : $jscomp.POLYFILL_PREFIX + k, k = $jscomp.propertyToPolyfillSymbol[k], $jscomp.defineProperty(r, k, {\n    configurable: !0,\n    writable: !0,\n    value: p\n  })));\n};\n\n$jscomp.polyfill(\"Promise\", function (l) {\n  function p() {\n    this.batch_ = null;\n  }\n\n  function n(h) {\n    return h instanceof k ? h : new k(function (q, v) {\n      q(h);\n    });\n  }\n\n  if (l && (!($jscomp.FORCE_POLYFILL_PROMISE || $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION && \"undefined\" === typeof $jscomp.global.PromiseRejectionEvent) || !$jscomp.global.Promise || -1 === $jscomp.global.Promise.toString().indexOf(\"[native code]\"))) return l;\n\n  p.prototype.asyncExecute = function (h) {\n    if (null == this.batch_) {\n      this.batch_ = [];\n      var q = this;\n      this.asyncExecuteFunction(function () {\n        q.executeBatch_();\n      });\n    }\n\n    this.batch_.push(h);\n  };\n\n  var r = $jscomp.global.setTimeout;\n\n  p.prototype.asyncExecuteFunction = function (h) {\n    r(h, 0);\n  };\n\n  p.prototype.executeBatch_ = function () {\n    for (; this.batch_ && this.batch_.length;) {\n      var h = this.batch_;\n      this.batch_ = [];\n\n      for (var q = 0; q < h.length; ++q) {\n        var v = h[q];\n        h[q] = null;\n\n        try {\n          v();\n        } catch (B) {\n          this.asyncThrow_(B);\n        }\n      }\n    }\n\n    this.batch_ = null;\n  };\n\n  p.prototype.asyncThrow_ = function (h) {\n    this.asyncExecuteFunction(function () {\n      throw h;\n    });\n  };\n\n  var k = function k(h) {\n    this.state_ = 0;\n    this.result_ = void 0;\n    this.onSettledCallbacks_ = [];\n    this.isRejectionHandled_ = !1;\n    var q = this.createResolveAndReject_();\n\n    try {\n      h(q.resolve, q.reject);\n    } catch (v) {\n      q.reject(v);\n    }\n  };\n\n  k.prototype.createResolveAndReject_ = function () {\n    function h(B) {\n      return function (G) {\n        v || (v = !0, B.call(q, G));\n      };\n    }\n\n    var q = this,\n        v = !1;\n    return {\n      resolve: h(this.resolveTo_),\n      reject: h(this.reject_)\n    };\n  };\n\n  k.prototype.resolveTo_ = function (h) {\n    if (h === this) this.reject_(new TypeError(\"A Promise cannot resolve to itself\"));else if (h instanceof k) this.settleSameAsPromise_(h);else {\n      a: switch (typeof h) {\n        case \"object\":\n          var q = null != h;\n          break a;\n\n        case \"function\":\n          q = !0;\n          break a;\n\n        default:\n          q = !1;\n      }\n\n      q ? this.resolveToNonPromiseObj_(h) : this.fulfill_(h);\n    }\n  };\n\n  k.prototype.resolveToNonPromiseObj_ = function (h) {\n    var q = void 0;\n\n    try {\n      q = h.then;\n    } catch (v) {\n      this.reject_(v);\n      return;\n    }\n\n    \"function\" == typeof q ? this.settleSameAsThenable_(q, h) : this.fulfill_(h);\n  };\n\n  k.prototype.reject_ = function (h) {\n    this.settle_(2, h);\n  };\n\n  k.prototype.fulfill_ = function (h) {\n    this.settle_(1, h);\n  };\n\n  k.prototype.settle_ = function (h, q) {\n    if (0 != this.state_) throw Error(\"Cannot settle(\" + h + \", \" + q + \"): Promise already settled in state\" + this.state_);\n    this.state_ = h;\n    this.result_ = q;\n    2 === this.state_ && this.scheduleUnhandledRejectionCheck_();\n    this.executeOnSettledCallbacks_();\n  };\n\n  k.prototype.scheduleUnhandledRejectionCheck_ = function () {\n    var h = this;\n    r(function () {\n      if (h.notifyUnhandledRejection_()) {\n        var q = $jscomp.global.console;\n        \"undefined\" !== typeof q && q.error(h.result_);\n      }\n    }, 1);\n  };\n\n  k.prototype.notifyUnhandledRejection_ = function () {\n    if (this.isRejectionHandled_) return !1;\n    var h = $jscomp.global.CustomEvent,\n        q = $jscomp.global.Event,\n        v = $jscomp.global.dispatchEvent;\n    if (\"undefined\" === typeof v) return !0;\n    \"function\" === typeof h ? h = new h(\"unhandledrejection\", {\n      cancelable: !0\n    }) : \"function\" === typeof q ? h = new q(\"unhandledrejection\", {\n      cancelable: !0\n    }) : (h = $jscomp.global.document.createEvent(\"CustomEvent\"), h.initCustomEvent(\"unhandledrejection\", !1, !0, h));\n    h.promise = this;\n    h.reason = this.result_;\n    return v(h);\n  };\n\n  k.prototype.executeOnSettledCallbacks_ = function () {\n    if (null != this.onSettledCallbacks_) {\n      for (var h = 0; h < this.onSettledCallbacks_.length; ++h) {\n        C.asyncExecute(this.onSettledCallbacks_[h]);\n      }\n\n      this.onSettledCallbacks_ = null;\n    }\n  };\n\n  var C = new p();\n\n  k.prototype.settleSameAsPromise_ = function (h) {\n    var q = this.createResolveAndReject_();\n    h.callWhenSettled_(q.resolve, q.reject);\n  };\n\n  k.prototype.settleSameAsThenable_ = function (h, q) {\n    var v = this.createResolveAndReject_();\n\n    try {\n      h.call(q, v.resolve, v.reject);\n    } catch (B) {\n      v.reject(B);\n    }\n  };\n\n  k.prototype.then = function (h, q) {\n    function v(I, M) {\n      return \"function\" == typeof I ? function (y) {\n        try {\n          B(I(y));\n        } catch (D) {\n          G(D);\n        }\n      } : M;\n    }\n\n    var B,\n        G,\n        X = new k(function (I, M) {\n      B = I;\n      G = M;\n    });\n    this.callWhenSettled_(v(h, B), v(q, G));\n    return X;\n  };\n\n  k.prototype[\"catch\"] = function (h) {\n    return this.then(void 0, h);\n  };\n\n  k.prototype.callWhenSettled_ = function (h, q) {\n    function v() {\n      switch (B.state_) {\n        case 1:\n          h(B.result_);\n          break;\n\n        case 2:\n          q(B.result_);\n          break;\n\n        default:\n          throw Error(\"Unexpected state: \" + B.state_);\n      }\n    }\n\n    var B = this;\n    null == this.onSettledCallbacks_ ? C.asyncExecute(v) : this.onSettledCallbacks_.push(v);\n    this.isRejectionHandled_ = !0;\n  };\n\n  k.resolve = n;\n\n  k.reject = function (h) {\n    return new k(function (q, v) {\n      v(h);\n    });\n  };\n\n  k.race = function (h) {\n    return new k(function (q, v) {\n      for (var B = $jscomp.makeIterator(h), G = B.next(); !G.done; G = B.next()) {\n        n(G.value).callWhenSettled_(q, v);\n      }\n    });\n  };\n\n  k.all = function (h) {\n    var q = $jscomp.makeIterator(h),\n        v = q.next();\n    return v.done ? n([]) : new k(function (B, G) {\n      function X(y) {\n        return function (D) {\n          I[y] = D;\n          M--;\n          0 == M && B(I);\n        };\n      }\n\n      var I = [],\n          M = 0;\n\n      do {\n        I.push(void 0), M++, n(v.value).callWhenSettled_(X(I.length - 1), G), v = q.next();\n      } while (!v.done);\n    });\n  };\n\n  return k;\n}, \"es6\", \"es3\");\n\n$jscomp.checkEs6ConformanceViaProxy = function () {\n  try {\n    var l = {},\n        p = Object.create(new $jscomp.global.Proxy(l, {\n      get: function get(n, r, k) {\n        return n == l && \"q\" == r && k == p;\n      }\n    }));\n    return !0 === p.q;\n  } catch (n) {\n    return !1;\n  }\n};\n\n$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = !1;\n$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();\n\n$jscomp.owns = function (l, p) {\n  return Object.prototype.hasOwnProperty.call(l, p);\n};\n\n$jscomp.polyfill(\"Array.prototype.copyWithin\", function (l) {\n  function p(n) {\n    n = Number(n);\n    return Infinity === n || -Infinity === n ? n : n | 0;\n  }\n\n  return l ? l : function (n, r, k) {\n    var C = this.length;\n    n = p(n);\n    r = p(r);\n    k = void 0 === k ? C : p(k);\n    n = 0 > n ? Math.max(C + n, 0) : Math.min(n, C);\n    r = 0 > r ? Math.max(C + r, 0) : Math.min(r, C);\n    k = 0 > k ? Math.max(C + k, 0) : Math.min(k, C);\n    if (n < r) for (; r < k;) {\n      r in this ? this[n++] = this[r++] : (delete this[n++], r++);\n    } else for (k = Math.min(k, C + r - n), n += k - r; k > r;) {\n      --k in this ? this[--n] = this[k] : delete this[--n];\n    }\n    return this;\n  };\n}, \"es6\", \"es3\");\n\n$jscomp.typedArrayCopyWithin = function (l) {\n  return l ? l : Array.prototype.copyWithin;\n};\n\n$jscomp.polyfill(\"Int8Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint8Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint8ClampedArray.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Int16Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint16Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Int32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Uint32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Float32Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n$jscomp.polyfill(\"Float64Array.prototype.copyWithin\", $jscomp.typedArrayCopyWithin, \"es6\", \"es5\");\n\nvar DracoEncoderModule = function () {\n  var l = \"undefined\" !== typeof document && document.currentScript ? document.currentScript.src : void 0;\n   true && (l = l || __filename);\n  return function (p) {\n    function n(f) {\n      return a.locateFile ? a.locateFile(f, N) : N + f;\n    }\n\n    function r(f, b) {\n      f || h(\"Assertion failed: \" + b);\n    }\n\n    function k(f, b) {\n      0 < f % b && (f += b - f % b);\n      return f;\n    }\n\n    function C(f) {\n      fa = f;\n      a.HEAP8 = R = new Int8Array(f);\n      a.HEAP16 = ma = new Int16Array(f);\n      a.HEAP32 = L = new Int32Array(f);\n      a.HEAPU8 = na = new Uint8Array(f);\n      a.HEAPU16 = new Uint16Array(f);\n      a.HEAPU32 = new Uint32Array(f);\n      a.HEAPF32 = oa = new Float32Array(f);\n      a.HEAPF64 = new Float64Array(f);\n    }\n\n    function h(f) {\n      if (a.onAbort) a.onAbort(f);\n      f += \"\";\n      Y(f);\n      xa = !0;\n      f = new WebAssembly.RuntimeError(\"abort(\" + f + \"). Build with -s ASSERTIONS=1 for more info.\");\n      pa(f);\n      throw f;\n    }\n\n    function q(f, b) {\n      return String.prototype.startsWith ? f.startsWith(b) : 0 === f.indexOf(b);\n    }\n\n    function v() {\n      try {\n        if (Z) return new Uint8Array(Z);\n        if (ha) return ha(O);\n        throw \"both async and sync fetching of the wasm failed\";\n      } catch (f) {\n        h(f);\n      }\n    }\n\n    function B() {\n      return Z || !ia && !U || \"function\" !== typeof fetch || q(O, \"file://\") ? Promise.resolve().then(v) : fetch(O, {\n        credentials: \"same-origin\"\n      }).then(function (f) {\n        if (!f.ok) throw \"failed to load wasm binary file at '\" + O + \"'\";\n        return f.arrayBuffer();\n      })[\"catch\"](function () {\n        return v();\n      });\n    }\n\n    function G(f) {\n      for (; 0 < f.length;) {\n        var b = f.shift();\n        if (\"function\" == typeof b) b(a);else {\n          var c = b.func;\n          \"number\" === typeof c ? void 0 === b.arg ? qa.get(c)() : qa.get(c)(b.arg) : c(void 0 === b.arg ? null : b.arg);\n        }\n      }\n    }\n\n    function X(f) {\n      this.excPtr = f;\n      this.ptr = f - H.SIZE;\n\n      this.set_type = function (b) {\n        L[this.ptr + H.TYPE_OFFSET >> 2] = b;\n      };\n\n      this.get_type = function () {\n        return L[this.ptr + H.TYPE_OFFSET >> 2];\n      };\n\n      this.set_destructor = function (b) {\n        L[this.ptr + H.DESTRUCTOR_OFFSET >> 2] = b;\n      };\n\n      this.get_destructor = function () {\n        return L[this.ptr + H.DESTRUCTOR_OFFSET >> 2];\n      };\n\n      this.set_refcount = function (b) {\n        L[this.ptr + H.REFCOUNT_OFFSET >> 2] = b;\n      };\n\n      this.set_caught = function (b) {\n        R[this.ptr + H.CAUGHT_OFFSET >> 0] = b ? 1 : 0;\n      };\n\n      this.get_caught = function () {\n        return 0 != R[this.ptr + H.CAUGHT_OFFSET >> 0];\n      };\n\n      this.set_rethrown = function (b) {\n        R[this.ptr + H.RETHROWN_OFFSET >> 0] = b ? 1 : 0;\n      };\n\n      this.get_rethrown = function () {\n        return 0 != R[this.ptr + H.RETHROWN_OFFSET >> 0];\n      };\n\n      this.init = function (b, c) {\n        this.set_type(b);\n        this.set_destructor(c);\n        this.set_refcount(0);\n        this.set_caught(!1);\n        this.set_rethrown(!1);\n      };\n\n      this.add_ref = function () {\n        L[this.ptr + H.REFCOUNT_OFFSET >> 2] += 1;\n      };\n\n      this.release_ref = function () {\n        var b = L[this.ptr + H.REFCOUNT_OFFSET >> 2];\n        L[this.ptr + H.REFCOUNT_OFFSET >> 2] = b - 1;\n        return 1 === b;\n      };\n    }\n\n    function I() {\n      return 0 < I.uncaught_exceptions;\n    }\n\n    function M(f) {\n      function b() {\n        if (!ja && (ja = !0, a.calledRun = !0, !xa)) {\n          ya = !0;\n          G(za);\n          G(Aa);\n          Ba(a);\n          if (a.onRuntimeInitialized) a.onRuntimeInitialized();\n          if (a.postRun) for (\"function\" == typeof a.postRun && (a.postRun = [a.postRun]); a.postRun.length;) {\n            Ca.unshift(a.postRun.shift());\n          }\n          G(Ca);\n        }\n      }\n\n      if (!(0 < V)) {\n        if (a.preRun) for (\"function\" == typeof a.preRun && (a.preRun = [a.preRun]); a.preRun.length;) {\n          Da.unshift(a.preRun.shift());\n        }\n        G(Da);\n        0 < V || (a.setStatus ? (a.setStatus(\"Running...\"), setTimeout(function () {\n          setTimeout(function () {\n            a.setStatus(\"\");\n          }, 1);\n          b();\n        }, 1)) : b());\n      }\n    }\n\n    function y() {}\n\n    function D(f) {\n      return (f || y).__cache__;\n    }\n\n    function ra(f, b) {\n      var c = D(b),\n          d = c[f];\n      if (d) return d;\n      d = Object.create((b || y).prototype);\n      d.ptr = f;\n      return c[f] = d;\n    }\n\n    function aa(f) {\n      if (\"string\" === typeof f) {\n        for (var b = 0, c = 0; c < f.length; ++c) {\n          var d = f.charCodeAt(c);\n          55296 <= d && 57343 >= d && (d = 65536 + ((d & 1023) << 10) | f.charCodeAt(++c) & 1023);\n          127 >= d ? ++b : b = 2047 >= d ? b + 2 : 65535 >= d ? b + 3 : b + 4;\n        }\n\n        b = Array(b + 1);\n        c = 0;\n        d = b.length;\n\n        if (0 < d) {\n          d = c + d - 1;\n\n          for (var e = 0; e < f.length; ++e) {\n            var g = f.charCodeAt(e);\n\n            if (55296 <= g && 57343 >= g) {\n              var t = f.charCodeAt(++e);\n              g = 65536 + ((g & 1023) << 10) | t & 1023;\n            }\n\n            if (127 >= g) {\n              if (c >= d) break;\n              b[c++] = g;\n            } else {\n              if (2047 >= g) {\n                if (c + 1 >= d) break;\n                b[c++] = 192 | g >> 6;\n              } else {\n                if (65535 >= g) {\n                  if (c + 2 >= d) break;\n                  b[c++] = 224 | g >> 12;\n                } else {\n                  if (c + 3 >= d) break;\n                  b[c++] = 240 | g >> 18;\n                  b[c++] = 128 | g >> 12 & 63;\n                }\n\n                b[c++] = 128 | g >> 6 & 63;\n              }\n\n              b[c++] = 128 | g & 63;\n            }\n          }\n\n          b[c] = 0;\n        }\n\n        f = m.alloc(b, R);\n        m.copy(b, R, f);\n        return f;\n      }\n\n      return f;\n    }\n\n    function ka(f) {\n      if (\"object\" === typeof f) {\n        var b = m.alloc(f, R);\n        m.copy(f, R, b);\n        return b;\n      }\n\n      return f;\n    }\n\n    function la(f) {\n      if (\"object\" === typeof f) {\n        var b = m.alloc(f, ma);\n        m.copy(f, ma, b);\n        return b;\n      }\n\n      return f;\n    }\n\n    function W(f) {\n      if (\"object\" === typeof f) {\n        var b = m.alloc(f, L);\n        m.copy(f, L, b);\n        return b;\n      }\n\n      return f;\n    }\n\n    function ba(f) {\n      if (\"object\" === typeof f) {\n        var b = m.alloc(f, oa);\n        m.copy(f, oa, b);\n        return b;\n      }\n\n      return f;\n    }\n\n    function S() {\n      throw \"cannot construct a VoidPtr, no constructor in IDL\";\n    }\n\n    function P() {\n      this.ptr = Ea();\n      D(P)[this.ptr] = this;\n    }\n\n    function z() {\n      this.ptr = Fa();\n      D(z)[this.ptr] = this;\n    }\n\n    function J() {\n      this.ptr = Ga();\n      D(J)[this.ptr] = this;\n    }\n\n    function E() {\n      this.ptr = Ha();\n      D(E)[this.ptr] = this;\n    }\n\n    function Q() {\n      this.ptr = Ia();\n      D(Q)[this.ptr] = this;\n    }\n\n    function K() {\n      this.ptr = Ja();\n      D(K)[this.ptr] = this;\n    }\n\n    function F() {\n      this.ptr = Ka();\n      D(F)[this.ptr] = this;\n    }\n\n    function w() {\n      this.ptr = La();\n      D(w)[this.ptr] = this;\n    }\n\n    function u() {\n      this.ptr = Ma();\n      D(u)[this.ptr] = this;\n    }\n\n    function x() {\n      this.ptr = Na();\n      D(x)[this.ptr] = this;\n    }\n\n    function A(f) {\n      f && \"object\" === typeof f && (f = f.ptr);\n      this.ptr = Oa(f);\n      D(A)[this.ptr] = this;\n    }\n\n    p = p || {};\n    var a = \"undefined\" !== typeof p ? p : {},\n        Ba,\n        pa;\n    a.ready = new Promise(function (f, b) {\n      Ba = f;\n      pa = b;\n    });\n    var Pa = !1,\n        Qa = !1;\n\n    a.onRuntimeInitialized = function () {\n      Pa = !0;\n      if (Qa && \"function\" === typeof a.onModuleLoaded) a.onModuleLoaded(a);\n    };\n\n    a.onModuleParsed = function () {\n      Qa = !0;\n      if (Pa && \"function\" === typeof a.onModuleLoaded) a.onModuleLoaded(a);\n    };\n\n    a.isVersionSupported = function (f) {\n      if (\"string\" !== typeof f) return !1;\n      f = f.split(\".\");\n      return 2 > f.length || 3 < f.length ? !1 : 1 == f[0] && 0 <= f[1] && 4 >= f[1] ? !0 : 0 != f[0] || 10 < f[1] ? !1 : !0;\n    };\n\n    var ca = {},\n        T;\n\n    for (T in a) {\n      a.hasOwnProperty(T) && (ca[T] = a[T]);\n    }\n\n    var ia = !1,\n        U = !1,\n        sa = !1,\n        Ra = !1;\n    ia = \"object\" === typeof window;\n    U = \"function\" === typeof importScripts;\n    sa = \"object\" === typeof process && \"object\" === typeof process.versions && \"string\" === typeof process.versions.node;\n    Ra = !ia && !sa && !U;\n    var N = \"\",\n        ta,\n        ua;\n\n    if (sa) {\n      N = U ? __webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\").dirname(N) + \"/\" : __dirname + \"/\";\n\n      var va = function va(f, b) {\n        ta || (ta = __webpack_require__(/*! fs */ \"fs\"));\n        ua || (ua = __webpack_require__(/*! path */ \"../../node_modules/path-browserify/index.js\"));\n        f = ua.normalize(f);\n        return ta.readFileSync(f, b ? null : \"utf8\");\n      };\n\n      var ha = function ha(f) {\n        f = va(f, !0);\n        f.buffer || (f = new Uint8Array(f));\n        r(f.buffer);\n        return f;\n      };\n\n      1 < process.argv.length && process.argv[1].replace(/\\\\/g, \"/\");\n      process.argv.slice(2);\n\n      a.inspect = function () {\n        return \"[Emscripten Module object]\";\n      };\n    } else if (Ra) \"undefined\" != typeof read && (va = function va(f) {\n      return read(f);\n    }), ha = function ha(f) {\n      if (\"function\" === typeof readbuffer) return new Uint8Array(readbuffer(f));\n      f = read(f, \"binary\");\n      r(\"object\" === typeof f);\n      return f;\n    }, \"undefined\" !== typeof print && (\"undefined\" === typeof console && (console = {}), console.log = print, console.warn = console.error = \"undefined\" !== typeof printErr ? printErr : print);else if (ia || U) U ? N = self.location.href : \"undefined\" !== typeof document && document.currentScript && (N = document.currentScript.src), l && (N = l), N = 0 !== N.indexOf(\"blob:\") ? N.substr(0, N.lastIndexOf(\"/\") + 1) : \"\", va = function va(f) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", f, !1);\n      b.send(null);\n      return b.responseText;\n    }, U && (ha = function ha(f) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", f, !1);\n      b.responseType = \"arraybuffer\";\n      b.send(null);\n      return new Uint8Array(b.response);\n    });\n\n    a.print || console.log.bind(console);\n    var Y = a.printErr || console.warn.bind(console);\n\n    for (T in ca) {\n      ca.hasOwnProperty(T) && (a[T] = ca[T]);\n    }\n\n    ca = null;\n    var Z;\n    a.wasmBinary && (Z = a.wasmBinary);\n    \"object\" !== typeof WebAssembly && h(\"no native wasm support detected\");\n    var da,\n        xa = !1;\n    \"undefined\" !== typeof TextDecoder && new TextDecoder(\"utf8\");\n    \"undefined\" !== typeof TextDecoder && new TextDecoder(\"utf-16le\");\n    var R,\n        na,\n        ma,\n        L,\n        oa,\n        Sa = a.INITIAL_MEMORY || 16777216;\n    if (da = a.wasmMemory ? a.wasmMemory : new WebAssembly.Memory({\n      initial: Sa / 65536,\n      maximum: 32768\n    })) var fa = da.buffer;\n    Sa = fa.byteLength;\n    C(fa);\n    var qa,\n        Da = [],\n        za = [],\n        Aa = [],\n        Ca = [],\n        ya = !1,\n        V = 0,\n        wa = null,\n        ea = null;\n    a.preloadedImages = {};\n    a.preloadedAudios = {};\n    var O = \"draco_encoder.wasm\";\n    q(O, \"data:application/octet-stream;base64,\") || (O = n(O));\n    var H = {\n      DESTRUCTOR_OFFSET: 0,\n      REFCOUNT_OFFSET: 4,\n      TYPE_OFFSET: 8,\n      CAUGHT_OFFSET: 12,\n      RETHROWN_OFFSET: 13,\n      SIZE: 16\n    };\n    za.push({\n      func: function func() {\n        Ta();\n      }\n    });\n    var Va = {\n      __cxa_allocate_exception: function __cxa_allocate_exception(f) {\n        return Ua(f + H.SIZE) + H.SIZE;\n      },\n      __cxa_throw: function __cxa_throw(f, b, c) {\n        new X(f).init(b, c);\n        \"uncaught_exception\" in I ? I.uncaught_exceptions++ : I.uncaught_exceptions = 1;\n        throw f;\n      },\n      abort: function abort() {\n        h();\n      },\n      array_bounds_check_error: function array_bounds_check_error(f, b) {\n        throw \"Array index \" + f + \" out of bounds: [0,\" + b + \")\";\n      },\n      emscripten_memcpy_big: function emscripten_memcpy_big(f, b, c) {\n        na.copyWithin(f, b, b + c);\n      },\n      emscripten_resize_heap: function emscripten_resize_heap(f) {\n        f >>>= 0;\n        var b = na.length;\n        if (2147483648 < f) return !1;\n\n        for (var c = 1; 4 >= c; c *= 2) {\n          var d = b * (1 + .2 / c);\n          d = Math.min(d, f + 100663296);\n          d = Math.min(2147483648, k(Math.max(16777216, f, d), 65536));\n\n          a: {\n            try {\n              da.grow(d - fa.byteLength + 65535 >>> 16);\n              C(da.buffer);\n              var e = 1;\n              break a;\n            } catch (g) {}\n\n            e = void 0;\n          }\n\n          if (e) return !0;\n        }\n\n        return !1;\n      },\n      memory: da\n    };\n\n    (function () {\n      function f(e, g) {\n        a.asm = e.exports;\n        qa = a.asm.__indirect_function_table;\n        V--;\n        a.monitorRunDependencies && a.monitorRunDependencies(V);\n        0 == V && (null !== wa && (clearInterval(wa), wa = null), ea && (e = ea, ea = null, e()));\n      }\n\n      function b(e) {\n        f(e.instance);\n      }\n\n      function c(e) {\n        return B().then(function (g) {\n          return WebAssembly.instantiate(g, d);\n        }).then(e, function (g) {\n          Y(\"failed to asynchronously prepare wasm: \" + g);\n          h(g);\n        });\n      }\n\n      var d = {\n        env: Va,\n        wasi_snapshot_preview1: Va\n      };\n      V++;\n      a.monitorRunDependencies && a.monitorRunDependencies(V);\n      if (a.instantiateWasm) try {\n        return a.instantiateWasm(d, f);\n      } catch (e) {\n        return Y(\"Module.instantiateWasm callback failed with error: \" + e), !1;\n      }\n      (function () {\n        return Z || \"function\" !== typeof WebAssembly.instantiateStreaming || q(O, \"data:application/octet-stream;base64,\") || q(O, \"file://\") || \"function\" !== typeof fetch ? c(b) : fetch(O, {\n          credentials: \"same-origin\"\n        }).then(function (e) {\n          return WebAssembly.instantiateStreaming(e, d).then(b, function (g) {\n            Y(\"wasm streaming compile failed: \" + g);\n            Y(\"falling back to ArrayBuffer instantiation\");\n            return c(b);\n          });\n        });\n      })()[\"catch\"](pa);\n      return {};\n    })();\n\n    var Ta = a.___wasm_call_ctors = function () {\n      return (Ta = a.___wasm_call_ctors = a.asm.__wasm_call_ctors).apply(null, arguments);\n    };\n\n    a.___em_js__array_bounds_check_error = function () {\n      return (a.___em_js__array_bounds_check_error = a.asm.__em_js__array_bounds_check_error).apply(null, arguments);\n    };\n\n    var Wa = a._emscripten_bind_VoidPtr___destroy___0 = function () {\n      return (Wa = a._emscripten_bind_VoidPtr___destroy___0 = a.asm.emscripten_bind_VoidPtr___destroy___0).apply(null, arguments);\n    },\n        Ea = a._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = function () {\n      return (Ea = a._emscripten_bind_GeometryAttribute_GeometryAttribute_0 = a.asm.emscripten_bind_GeometryAttribute_GeometryAttribute_0).apply(null, arguments);\n    },\n        Xa = a._emscripten_bind_GeometryAttribute___destroy___0 = function () {\n      return (Xa = a._emscripten_bind_GeometryAttribute___destroy___0 = a.asm.emscripten_bind_GeometryAttribute___destroy___0).apply(null, arguments);\n    },\n        Fa = a._emscripten_bind_PointAttribute_PointAttribute_0 = function () {\n      return (Fa = a._emscripten_bind_PointAttribute_PointAttribute_0 = a.asm.emscripten_bind_PointAttribute_PointAttribute_0).apply(null, arguments);\n    },\n        Ya = a._emscripten_bind_PointAttribute_size_0 = function () {\n      return (Ya = a._emscripten_bind_PointAttribute_size_0 = a.asm.emscripten_bind_PointAttribute_size_0).apply(null, arguments);\n    },\n        Za = a._emscripten_bind_PointAttribute_attribute_type_0 = function () {\n      return (Za = a._emscripten_bind_PointAttribute_attribute_type_0 = a.asm.emscripten_bind_PointAttribute_attribute_type_0).apply(null, arguments);\n    },\n        $a = a._emscripten_bind_PointAttribute_data_type_0 = function () {\n      return ($a = a._emscripten_bind_PointAttribute_data_type_0 = a.asm.emscripten_bind_PointAttribute_data_type_0).apply(null, arguments);\n    },\n        ab = a._emscripten_bind_PointAttribute_num_components_0 = function () {\n      return (ab = a._emscripten_bind_PointAttribute_num_components_0 = a.asm.emscripten_bind_PointAttribute_num_components_0).apply(null, arguments);\n    },\n        bb = a._emscripten_bind_PointAttribute_normalized_0 = function () {\n      return (bb = a._emscripten_bind_PointAttribute_normalized_0 = a.asm.emscripten_bind_PointAttribute_normalized_0).apply(null, arguments);\n    },\n        cb = a._emscripten_bind_PointAttribute_byte_stride_0 = function () {\n      return (cb = a._emscripten_bind_PointAttribute_byte_stride_0 = a.asm.emscripten_bind_PointAttribute_byte_stride_0).apply(null, arguments);\n    },\n        db = a._emscripten_bind_PointAttribute_byte_offset_0 = function () {\n      return (db = a._emscripten_bind_PointAttribute_byte_offset_0 = a.asm.emscripten_bind_PointAttribute_byte_offset_0).apply(null, arguments);\n    },\n        eb = a._emscripten_bind_PointAttribute_unique_id_0 = function () {\n      return (eb = a._emscripten_bind_PointAttribute_unique_id_0 = a.asm.emscripten_bind_PointAttribute_unique_id_0).apply(null, arguments);\n    },\n        fb = a._emscripten_bind_PointAttribute___destroy___0 = function () {\n      return (fb = a._emscripten_bind_PointAttribute___destroy___0 = a.asm.emscripten_bind_PointAttribute___destroy___0).apply(null, arguments);\n    },\n        Ga = a._emscripten_bind_PointCloud_PointCloud_0 = function () {\n      return (Ga = a._emscripten_bind_PointCloud_PointCloud_0 = a.asm.emscripten_bind_PointCloud_PointCloud_0).apply(null, arguments);\n    },\n        gb = a._emscripten_bind_PointCloud_num_attributes_0 = function () {\n      return (gb = a._emscripten_bind_PointCloud_num_attributes_0 = a.asm.emscripten_bind_PointCloud_num_attributes_0).apply(null, arguments);\n    },\n        hb = a._emscripten_bind_PointCloud_num_points_0 = function () {\n      return (hb = a._emscripten_bind_PointCloud_num_points_0 = a.asm.emscripten_bind_PointCloud_num_points_0).apply(null, arguments);\n    },\n        ib = a._emscripten_bind_PointCloud___destroy___0 = function () {\n      return (ib = a._emscripten_bind_PointCloud___destroy___0 = a.asm.emscripten_bind_PointCloud___destroy___0).apply(null, arguments);\n    },\n        Ha = a._emscripten_bind_Mesh_Mesh_0 = function () {\n      return (Ha = a._emscripten_bind_Mesh_Mesh_0 = a.asm.emscripten_bind_Mesh_Mesh_0).apply(null, arguments);\n    },\n        jb = a._emscripten_bind_Mesh_num_faces_0 = function () {\n      return (jb = a._emscripten_bind_Mesh_num_faces_0 = a.asm.emscripten_bind_Mesh_num_faces_0).apply(null, arguments);\n    },\n        kb = a._emscripten_bind_Mesh_num_attributes_0 = function () {\n      return (kb = a._emscripten_bind_Mesh_num_attributes_0 = a.asm.emscripten_bind_Mesh_num_attributes_0).apply(null, arguments);\n    },\n        lb = a._emscripten_bind_Mesh_num_points_0 = function () {\n      return (lb = a._emscripten_bind_Mesh_num_points_0 = a.asm.emscripten_bind_Mesh_num_points_0).apply(null, arguments);\n    },\n        mb = a._emscripten_bind_Mesh_set_num_points_1 = function () {\n      return (mb = a._emscripten_bind_Mesh_set_num_points_1 = a.asm.emscripten_bind_Mesh_set_num_points_1).apply(null, arguments);\n    },\n        nb = a._emscripten_bind_Mesh___destroy___0 = function () {\n      return (nb = a._emscripten_bind_Mesh___destroy___0 = a.asm.emscripten_bind_Mesh___destroy___0).apply(null, arguments);\n    },\n        Ia = a._emscripten_bind_Metadata_Metadata_0 = function () {\n      return (Ia = a._emscripten_bind_Metadata_Metadata_0 = a.asm.emscripten_bind_Metadata_Metadata_0).apply(null, arguments);\n    },\n        ob = a._emscripten_bind_Metadata___destroy___0 = function () {\n      return (ob = a._emscripten_bind_Metadata___destroy___0 = a.asm.emscripten_bind_Metadata___destroy___0).apply(null, arguments);\n    },\n        Ja = a._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = function () {\n      return (Ja = a._emscripten_bind_DracoInt8Array_DracoInt8Array_0 = a.asm.emscripten_bind_DracoInt8Array_DracoInt8Array_0).apply(null, arguments);\n    },\n        pb = a._emscripten_bind_DracoInt8Array_GetValue_1 = function () {\n      return (pb = a._emscripten_bind_DracoInt8Array_GetValue_1 = a.asm.emscripten_bind_DracoInt8Array_GetValue_1).apply(null, arguments);\n    },\n        qb = a._emscripten_bind_DracoInt8Array_size_0 = function () {\n      return (qb = a._emscripten_bind_DracoInt8Array_size_0 = a.asm.emscripten_bind_DracoInt8Array_size_0).apply(null, arguments);\n    },\n        rb = a._emscripten_bind_DracoInt8Array___destroy___0 = function () {\n      return (rb = a._emscripten_bind_DracoInt8Array___destroy___0 = a.asm.emscripten_bind_DracoInt8Array___destroy___0).apply(null, arguments);\n    },\n        Ka = a._emscripten_bind_MetadataBuilder_MetadataBuilder_0 = function () {\n      return (Ka = a._emscripten_bind_MetadataBuilder_MetadataBuilder_0 = a.asm.emscripten_bind_MetadataBuilder_MetadataBuilder_0).apply(null, arguments);\n    },\n        sb = a._emscripten_bind_MetadataBuilder_AddStringEntry_3 = function () {\n      return (sb = a._emscripten_bind_MetadataBuilder_AddStringEntry_3 = a.asm.emscripten_bind_MetadataBuilder_AddStringEntry_3).apply(null, arguments);\n    },\n        tb = a._emscripten_bind_MetadataBuilder_AddIntEntry_3 = function () {\n      return (tb = a._emscripten_bind_MetadataBuilder_AddIntEntry_3 = a.asm.emscripten_bind_MetadataBuilder_AddIntEntry_3).apply(null, arguments);\n    },\n        ub = a._emscripten_bind_MetadataBuilder_AddIntEntryArray_4 = function () {\n      return (ub = a._emscripten_bind_MetadataBuilder_AddIntEntryArray_4 = a.asm.emscripten_bind_MetadataBuilder_AddIntEntryArray_4).apply(null, arguments);\n    },\n        vb = a._emscripten_bind_MetadataBuilder_AddDoubleEntry_3 = function () {\n      return (vb = a._emscripten_bind_MetadataBuilder_AddDoubleEntry_3 = a.asm.emscripten_bind_MetadataBuilder_AddDoubleEntry_3).apply(null, arguments);\n    },\n        wb = a._emscripten_bind_MetadataBuilder___destroy___0 = function () {\n      return (wb = a._emscripten_bind_MetadataBuilder___destroy___0 = a.asm.emscripten_bind_MetadataBuilder___destroy___0).apply(null, arguments);\n    },\n        La = a._emscripten_bind_PointCloudBuilder_PointCloudBuilder_0 = function () {\n      return (La = a._emscripten_bind_PointCloudBuilder_PointCloudBuilder_0 = a.asm.emscripten_bind_PointCloudBuilder_PointCloudBuilder_0).apply(null, arguments);\n    },\n        xb = a._emscripten_bind_PointCloudBuilder_AddFloatAttribute_5 = function () {\n      return (xb = a._emscripten_bind_PointCloudBuilder_AddFloatAttribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddFloatAttribute_5).apply(null, arguments);\n    },\n        yb = a._emscripten_bind_PointCloudBuilder_AddInt8Attribute_5 = function () {\n      return (yb = a._emscripten_bind_PointCloudBuilder_AddInt8Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddInt8Attribute_5).apply(null, arguments);\n    },\n        zb = a._emscripten_bind_PointCloudBuilder_AddUInt8Attribute_5 = function () {\n      return (zb = a._emscripten_bind_PointCloudBuilder_AddUInt8Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddUInt8Attribute_5).apply(null, arguments);\n    },\n        Ab = a._emscripten_bind_PointCloudBuilder_AddInt16Attribute_5 = function () {\n      return (Ab = a._emscripten_bind_PointCloudBuilder_AddInt16Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddInt16Attribute_5).apply(null, arguments);\n    },\n        Bb = a._emscripten_bind_PointCloudBuilder_AddUInt16Attribute_5 = function () {\n      return (Bb = a._emscripten_bind_PointCloudBuilder_AddUInt16Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddUInt16Attribute_5).apply(null, arguments);\n    },\n        Cb = a._emscripten_bind_PointCloudBuilder_AddInt32Attribute_5 = function () {\n      return (Cb = a._emscripten_bind_PointCloudBuilder_AddInt32Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddInt32Attribute_5).apply(null, arguments);\n    },\n        Db = a._emscripten_bind_PointCloudBuilder_AddUInt32Attribute_5 = function () {\n      return (Db = a._emscripten_bind_PointCloudBuilder_AddUInt32Attribute_5 = a.asm.emscripten_bind_PointCloudBuilder_AddUInt32Attribute_5).apply(null, arguments);\n    },\n        Eb = a._emscripten_bind_PointCloudBuilder_AddMetadata_2 = function () {\n      return (Eb = a._emscripten_bind_PointCloudBuilder_AddMetadata_2 = a.asm.emscripten_bind_PointCloudBuilder_AddMetadata_2).apply(null, arguments);\n    },\n        Fb = a._emscripten_bind_PointCloudBuilder_SetMetadataForAttribute_3 = function () {\n      return (Fb = a._emscripten_bind_PointCloudBuilder_SetMetadataForAttribute_3 = a.asm.emscripten_bind_PointCloudBuilder_SetMetadataForAttribute_3).apply(null, arguments);\n    },\n        Gb = a._emscripten_bind_PointCloudBuilder___destroy___0 = function () {\n      return (Gb = a._emscripten_bind_PointCloudBuilder___destroy___0 = a.asm.emscripten_bind_PointCloudBuilder___destroy___0).apply(null, arguments);\n    },\n        Ma = a._emscripten_bind_MeshBuilder_MeshBuilder_0 = function () {\n      return (Ma = a._emscripten_bind_MeshBuilder_MeshBuilder_0 = a.asm.emscripten_bind_MeshBuilder_MeshBuilder_0).apply(null, arguments);\n    },\n        Hb = a._emscripten_bind_MeshBuilder_AddFacesToMesh_3 = function () {\n      return (Hb = a._emscripten_bind_MeshBuilder_AddFacesToMesh_3 = a.asm.emscripten_bind_MeshBuilder_AddFacesToMesh_3).apply(null, arguments);\n    },\n        Ib = a._emscripten_bind_MeshBuilder_AddFloatAttributeToMesh_5 = function () {\n      return (Ib = a._emscripten_bind_MeshBuilder_AddFloatAttributeToMesh_5 = a.asm.emscripten_bind_MeshBuilder_AddFloatAttributeToMesh_5).apply(null, arguments);\n    },\n        Jb = a._emscripten_bind_MeshBuilder_AddInt32AttributeToMesh_5 = function () {\n      return (Jb = a._emscripten_bind_MeshBuilder_AddInt32AttributeToMesh_5 = a.asm.emscripten_bind_MeshBuilder_AddInt32AttributeToMesh_5).apply(null, arguments);\n    },\n        Kb = a._emscripten_bind_MeshBuilder_AddMetadataToMesh_2 = function () {\n      return (Kb = a._emscripten_bind_MeshBuilder_AddMetadataToMesh_2 = a.asm.emscripten_bind_MeshBuilder_AddMetadataToMesh_2).apply(null, arguments);\n    },\n        Lb = a._emscripten_bind_MeshBuilder_AddFloatAttribute_5 = function () {\n      return (Lb = a._emscripten_bind_MeshBuilder_AddFloatAttribute_5 = a.asm.emscripten_bind_MeshBuilder_AddFloatAttribute_5).apply(null, arguments);\n    },\n        Mb = a._emscripten_bind_MeshBuilder_AddInt8Attribute_5 = function () {\n      return (Mb = a._emscripten_bind_MeshBuilder_AddInt8Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddInt8Attribute_5).apply(null, arguments);\n    },\n        Nb = a._emscripten_bind_MeshBuilder_AddUInt8Attribute_5 = function () {\n      return (Nb = a._emscripten_bind_MeshBuilder_AddUInt8Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddUInt8Attribute_5).apply(null, arguments);\n    },\n        Ob = a._emscripten_bind_MeshBuilder_AddInt16Attribute_5 = function () {\n      return (Ob = a._emscripten_bind_MeshBuilder_AddInt16Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddInt16Attribute_5).apply(null, arguments);\n    },\n        Pb = a._emscripten_bind_MeshBuilder_AddUInt16Attribute_5 = function () {\n      return (Pb = a._emscripten_bind_MeshBuilder_AddUInt16Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddUInt16Attribute_5).apply(null, arguments);\n    },\n        Qb = a._emscripten_bind_MeshBuilder_AddInt32Attribute_5 = function () {\n      return (Qb = a._emscripten_bind_MeshBuilder_AddInt32Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddInt32Attribute_5).apply(null, arguments);\n    },\n        Rb = a._emscripten_bind_MeshBuilder_AddUInt32Attribute_5 = function () {\n      return (Rb = a._emscripten_bind_MeshBuilder_AddUInt32Attribute_5 = a.asm.emscripten_bind_MeshBuilder_AddUInt32Attribute_5).apply(null, arguments);\n    },\n        Sb = a._emscripten_bind_MeshBuilder_AddMetadata_2 = function () {\n      return (Sb = a._emscripten_bind_MeshBuilder_AddMetadata_2 = a.asm.emscripten_bind_MeshBuilder_AddMetadata_2).apply(null, arguments);\n    },\n        Tb = a._emscripten_bind_MeshBuilder_SetMetadataForAttribute_3 = function () {\n      return (Tb = a._emscripten_bind_MeshBuilder_SetMetadataForAttribute_3 = a.asm.emscripten_bind_MeshBuilder_SetMetadataForAttribute_3).apply(null, arguments);\n    },\n        Ub = a._emscripten_bind_MeshBuilder___destroy___0 = function () {\n      return (Ub = a._emscripten_bind_MeshBuilder___destroy___0 = a.asm.emscripten_bind_MeshBuilder___destroy___0).apply(null, arguments);\n    },\n        Na = a._emscripten_bind_Encoder_Encoder_0 = function () {\n      return (Na = a._emscripten_bind_Encoder_Encoder_0 = a.asm.emscripten_bind_Encoder_Encoder_0).apply(null, arguments);\n    },\n        Vb = a._emscripten_bind_Encoder_SetEncodingMethod_1 = function () {\n      return (Vb = a._emscripten_bind_Encoder_SetEncodingMethod_1 = a.asm.emscripten_bind_Encoder_SetEncodingMethod_1).apply(null, arguments);\n    },\n        Wb = a._emscripten_bind_Encoder_SetAttributeQuantization_2 = function () {\n      return (Wb = a._emscripten_bind_Encoder_SetAttributeQuantization_2 = a.asm.emscripten_bind_Encoder_SetAttributeQuantization_2).apply(null, arguments);\n    },\n        Xb = a._emscripten_bind_Encoder_SetAttributeExplicitQuantization_5 = function () {\n      return (Xb = a._emscripten_bind_Encoder_SetAttributeExplicitQuantization_5 = a.asm.emscripten_bind_Encoder_SetAttributeExplicitQuantization_5).apply(null, arguments);\n    },\n        Yb = a._emscripten_bind_Encoder_SetSpeedOptions_2 = function () {\n      return (Yb = a._emscripten_bind_Encoder_SetSpeedOptions_2 = a.asm.emscripten_bind_Encoder_SetSpeedOptions_2).apply(null, arguments);\n    },\n        Zb = a._emscripten_bind_Encoder_SetTrackEncodedProperties_1 = function () {\n      return (Zb = a._emscripten_bind_Encoder_SetTrackEncodedProperties_1 = a.asm.emscripten_bind_Encoder_SetTrackEncodedProperties_1).apply(null, arguments);\n    },\n        $b = a._emscripten_bind_Encoder_EncodeMeshToDracoBuffer_2 = function () {\n      return ($b = a._emscripten_bind_Encoder_EncodeMeshToDracoBuffer_2 = a.asm.emscripten_bind_Encoder_EncodeMeshToDracoBuffer_2).apply(null, arguments);\n    },\n        ac = a._emscripten_bind_Encoder_EncodePointCloudToDracoBuffer_3 = function () {\n      return (ac = a._emscripten_bind_Encoder_EncodePointCloudToDracoBuffer_3 = a.asm.emscripten_bind_Encoder_EncodePointCloudToDracoBuffer_3).apply(null, arguments);\n    },\n        bc = a._emscripten_bind_Encoder_GetNumberOfEncodedPoints_0 = function () {\n      return (bc = a._emscripten_bind_Encoder_GetNumberOfEncodedPoints_0 = a.asm.emscripten_bind_Encoder_GetNumberOfEncodedPoints_0).apply(null, arguments);\n    },\n        cc = a._emscripten_bind_Encoder_GetNumberOfEncodedFaces_0 = function () {\n      return (cc = a._emscripten_bind_Encoder_GetNumberOfEncodedFaces_0 = a.asm.emscripten_bind_Encoder_GetNumberOfEncodedFaces_0).apply(null, arguments);\n    },\n        dc = a._emscripten_bind_Encoder___destroy___0 = function () {\n      return (dc = a._emscripten_bind_Encoder___destroy___0 = a.asm.emscripten_bind_Encoder___destroy___0).apply(null, arguments);\n    },\n        Oa = a._emscripten_bind_ExpertEncoder_ExpertEncoder_1 = function () {\n      return (Oa = a._emscripten_bind_ExpertEncoder_ExpertEncoder_1 = a.asm.emscripten_bind_ExpertEncoder_ExpertEncoder_1).apply(null, arguments);\n    },\n        ec = a._emscripten_bind_ExpertEncoder_SetEncodingMethod_1 = function () {\n      return (ec = a._emscripten_bind_ExpertEncoder_SetEncodingMethod_1 = a.asm.emscripten_bind_ExpertEncoder_SetEncodingMethod_1).apply(null, arguments);\n    },\n        fc = a._emscripten_bind_ExpertEncoder_SetAttributeQuantization_2 = function () {\n      return (fc = a._emscripten_bind_ExpertEncoder_SetAttributeQuantization_2 = a.asm.emscripten_bind_ExpertEncoder_SetAttributeQuantization_2).apply(null, arguments);\n    },\n        gc = a._emscripten_bind_ExpertEncoder_SetAttributeExplicitQuantization_5 = function () {\n      return (gc = a._emscripten_bind_ExpertEncoder_SetAttributeExplicitQuantization_5 = a.asm.emscripten_bind_ExpertEncoder_SetAttributeExplicitQuantization_5).apply(null, arguments);\n    },\n        hc = a._emscripten_bind_ExpertEncoder_SetSpeedOptions_2 = function () {\n      return (hc = a._emscripten_bind_ExpertEncoder_SetSpeedOptions_2 = a.asm.emscripten_bind_ExpertEncoder_SetSpeedOptions_2).apply(null, arguments);\n    },\n        ic = a._emscripten_bind_ExpertEncoder_SetTrackEncodedProperties_1 = function () {\n      return (ic = a._emscripten_bind_ExpertEncoder_SetTrackEncodedProperties_1 = a.asm.emscripten_bind_ExpertEncoder_SetTrackEncodedProperties_1).apply(null, arguments);\n    },\n        jc = a._emscripten_bind_ExpertEncoder_EncodeToDracoBuffer_2 = function () {\n      return (jc = a._emscripten_bind_ExpertEncoder_EncodeToDracoBuffer_2 = a.asm.emscripten_bind_ExpertEncoder_EncodeToDracoBuffer_2).apply(null, arguments);\n    },\n        kc = a._emscripten_bind_ExpertEncoder_GetNumberOfEncodedPoints_0 = function () {\n      return (kc = a._emscripten_bind_ExpertEncoder_GetNumberOfEncodedPoints_0 = a.asm.emscripten_bind_ExpertEncoder_GetNumberOfEncodedPoints_0).apply(null, arguments);\n    },\n        lc = a._emscripten_bind_ExpertEncoder_GetNumberOfEncodedFaces_0 = function () {\n      return (lc = a._emscripten_bind_ExpertEncoder_GetNumberOfEncodedFaces_0 = a.asm.emscripten_bind_ExpertEncoder_GetNumberOfEncodedFaces_0).apply(null, arguments);\n    },\n        mc = a._emscripten_bind_ExpertEncoder___destroy___0 = function () {\n      return (mc = a._emscripten_bind_ExpertEncoder___destroy___0 = a.asm.emscripten_bind_ExpertEncoder___destroy___0).apply(null, arguments);\n    },\n        nc = a._emscripten_enum_draco_GeometryAttribute_Type_INVALID = function () {\n      return (nc = a._emscripten_enum_draco_GeometryAttribute_Type_INVALID = a.asm.emscripten_enum_draco_GeometryAttribute_Type_INVALID).apply(null, arguments);\n    },\n        oc = a._emscripten_enum_draco_GeometryAttribute_Type_POSITION = function () {\n      return (oc = a._emscripten_enum_draco_GeometryAttribute_Type_POSITION = a.asm.emscripten_enum_draco_GeometryAttribute_Type_POSITION).apply(null, arguments);\n    },\n        pc = a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = function () {\n      return (pc = a._emscripten_enum_draco_GeometryAttribute_Type_NORMAL = a.asm.emscripten_enum_draco_GeometryAttribute_Type_NORMAL).apply(null, arguments);\n    },\n        qc = a._emscripten_enum_draco_GeometryAttribute_Type_COLOR = function () {\n      return (qc = a._emscripten_enum_draco_GeometryAttribute_Type_COLOR = a.asm.emscripten_enum_draco_GeometryAttribute_Type_COLOR).apply(null, arguments);\n    },\n        rc = a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = function () {\n      return (rc = a._emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD = a.asm.emscripten_enum_draco_GeometryAttribute_Type_TEX_COORD).apply(null, arguments);\n    },\n        sc = a._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = function () {\n      return (sc = a._emscripten_enum_draco_GeometryAttribute_Type_GENERIC = a.asm.emscripten_enum_draco_GeometryAttribute_Type_GENERIC).apply(null, arguments);\n    },\n        tc = a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = function () {\n      return (tc = a._emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE = a.asm.emscripten_enum_draco_EncodedGeometryType_INVALID_GEOMETRY_TYPE).apply(null, arguments);\n    },\n        uc = a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = function () {\n      return (uc = a._emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD = a.asm.emscripten_enum_draco_EncodedGeometryType_POINT_CLOUD).apply(null, arguments);\n    },\n        vc = a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = function () {\n      return (vc = a._emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH = a.asm.emscripten_enum_draco_EncodedGeometryType_TRIANGULAR_MESH).apply(null, arguments);\n    },\n        wc = a._emscripten_enum_draco_MeshEncoderMethod_MESH_SEQUENTIAL_ENCODING = function () {\n      return (wc = a._emscripten_enum_draco_MeshEncoderMethod_MESH_SEQUENTIAL_ENCODING = a.asm.emscripten_enum_draco_MeshEncoderMethod_MESH_SEQUENTIAL_ENCODING).apply(null, arguments);\n    },\n        xc = a._emscripten_enum_draco_MeshEncoderMethod_MESH_EDGEBREAKER_ENCODING = function () {\n      return (xc = a._emscripten_enum_draco_MeshEncoderMethod_MESH_EDGEBREAKER_ENCODING = a.asm.emscripten_enum_draco_MeshEncoderMethod_MESH_EDGEBREAKER_ENCODING).apply(null, arguments);\n    };\n\n    a.___errno_location = function () {\n      return (a.___errno_location = a.asm.__errno_location).apply(null, arguments);\n    };\n\n    a.stackSave = function () {\n      return (a.stackSave = a.asm.stackSave).apply(null, arguments);\n    };\n\n    a.stackRestore = function () {\n      return (a.stackRestore = a.asm.stackRestore).apply(null, arguments);\n    };\n\n    a.stackAlloc = function () {\n      return (a.stackAlloc = a.asm.stackAlloc).apply(null, arguments);\n    };\n\n    a._setThrew = function () {\n      return (a._setThrew = a.asm.setThrew).apply(null, arguments);\n    };\n\n    a._free = function () {\n      return (a._free = a.asm.free).apply(null, arguments);\n    };\n\n    var Ua = a._malloc = function () {\n      return (Ua = a._malloc = a.asm.malloc).apply(null, arguments);\n    },\n        ja;\n\n    ea = function b() {\n      ja || M();\n      ja || (ea = b);\n    };\n\n    a.run = M;\n    if (a.preInit) for (\"function\" == typeof a.preInit && (a.preInit = [a.preInit]); 0 < a.preInit.length;) {\n      a.preInit.pop()();\n    }\n    M();\n    y.prototype = Object.create(y.prototype);\n    y.prototype.constructor = y;\n    y.prototype.__class__ = y;\n    y.__cache__ = {};\n    a.WrapperObject = y;\n    a.getCache = D;\n    a.wrapPointer = ra;\n\n    a.castObject = function (b, c) {\n      return ra(b.ptr, c);\n    };\n\n    a.NULL = ra(0);\n\n    a.destroy = function (b) {\n      if (!b.__destroy__) throw \"Error: Cannot destroy object. (Did you create it yourself?)\";\n\n      b.__destroy__();\n\n      delete D(b.__class__)[b.ptr];\n    };\n\n    a.compare = function (b, c) {\n      return b.ptr === c.ptr;\n    };\n\n    a.getPointer = function (b) {\n      return b.ptr;\n    };\n\n    a.getClass = function (b) {\n      return b.__class__;\n    };\n\n    var m = {\n      buffer: 0,\n      size: 0,\n      pos: 0,\n      temps: [],\n      needed: 0,\n      prepare: function prepare() {\n        if (m.needed) {\n          for (var b = 0; b < m.temps.length; b++) {\n            a._free(m.temps[b]);\n          }\n\n          m.temps.length = 0;\n\n          a._free(m.buffer);\n\n          m.buffer = 0;\n          m.size += m.needed;\n          m.needed = 0;\n        }\n\n        m.buffer || (m.size += 128, m.buffer = a._malloc(m.size), r(m.buffer));\n        m.pos = 0;\n      },\n      alloc: function alloc(b, c) {\n        r(m.buffer);\n        b = b.length * c.BYTES_PER_ELEMENT;\n        b = b + 7 & -8;\n        m.pos + b >= m.size ? (r(0 < b), m.needed += b, c = a._malloc(b), m.temps.push(c)) : (c = m.buffer + m.pos, m.pos += b);\n        return c;\n      },\n      copy: function copy(b, c, d) {\n        d >>>= 0;\n\n        switch (c.BYTES_PER_ELEMENT) {\n          case 2:\n            d >>>= 1;\n            break;\n\n          case 4:\n            d >>>= 2;\n            break;\n\n          case 8:\n            d >>>= 3;\n        }\n\n        for (var e = 0; e < b.length; e++) {\n          c[d + e] = b[e];\n        }\n      }\n    };\n    S.prototype = Object.create(y.prototype);\n    S.prototype.constructor = S;\n    S.prototype.__class__ = S;\n    S.__cache__ = {};\n    a.VoidPtr = S;\n\n    S.prototype.__destroy__ = S.prototype.__destroy__ = function () {\n      Wa(this.ptr);\n    };\n\n    P.prototype = Object.create(y.prototype);\n    P.prototype.constructor = P;\n    P.prototype.__class__ = P;\n    P.__cache__ = {};\n    a.GeometryAttribute = P;\n\n    P.prototype.__destroy__ = P.prototype.__destroy__ = function () {\n      Xa(this.ptr);\n    };\n\n    z.prototype = Object.create(y.prototype);\n    z.prototype.constructor = z;\n    z.prototype.__class__ = z;\n    z.__cache__ = {};\n    a.PointAttribute = z;\n\n    z.prototype.size = z.prototype.size = function () {\n      return Ya(this.ptr);\n    };\n\n    z.prototype.attribute_type = z.prototype.attribute_type = function () {\n      return Za(this.ptr);\n    };\n\n    z.prototype.data_type = z.prototype.data_type = function () {\n      return $a(this.ptr);\n    };\n\n    z.prototype.num_components = z.prototype.num_components = function () {\n      return ab(this.ptr);\n    };\n\n    z.prototype.normalized = z.prototype.normalized = function () {\n      return !!bb(this.ptr);\n    };\n\n    z.prototype.byte_stride = z.prototype.byte_stride = function () {\n      return cb(this.ptr);\n    };\n\n    z.prototype.byte_offset = z.prototype.byte_offset = function () {\n      return db(this.ptr);\n    };\n\n    z.prototype.unique_id = z.prototype.unique_id = function () {\n      return eb(this.ptr);\n    };\n\n    z.prototype.__destroy__ = z.prototype.__destroy__ = function () {\n      fb(this.ptr);\n    };\n\n    J.prototype = Object.create(y.prototype);\n    J.prototype.constructor = J;\n    J.prototype.__class__ = J;\n    J.__cache__ = {};\n    a.PointCloud = J;\n\n    J.prototype.num_attributes = J.prototype.num_attributes = function () {\n      return gb(this.ptr);\n    };\n\n    J.prototype.num_points = J.prototype.num_points = function () {\n      return hb(this.ptr);\n    };\n\n    J.prototype.__destroy__ = J.prototype.__destroy__ = function () {\n      ib(this.ptr);\n    };\n\n    E.prototype = Object.create(y.prototype);\n    E.prototype.constructor = E;\n    E.prototype.__class__ = E;\n    E.__cache__ = {};\n    a.Mesh = E;\n\n    E.prototype.num_faces = E.prototype.num_faces = function () {\n      return jb(this.ptr);\n    };\n\n    E.prototype.num_attributes = E.prototype.num_attributes = function () {\n      return kb(this.ptr);\n    };\n\n    E.prototype.num_points = E.prototype.num_points = function () {\n      return lb(this.ptr);\n    };\n\n    E.prototype.set_num_points = E.prototype.set_num_points = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      mb(c, b);\n    };\n\n    E.prototype.__destroy__ = E.prototype.__destroy__ = function () {\n      nb(this.ptr);\n    };\n\n    Q.prototype = Object.create(y.prototype);\n    Q.prototype.constructor = Q;\n    Q.prototype.__class__ = Q;\n    Q.__cache__ = {};\n    a.Metadata = Q;\n\n    Q.prototype.__destroy__ = Q.prototype.__destroy__ = function () {\n      ob(this.ptr);\n    };\n\n    K.prototype = Object.create(y.prototype);\n    K.prototype.constructor = K;\n    K.prototype.__class__ = K;\n    K.__cache__ = {};\n    a.DracoInt8Array = K;\n\n    K.prototype.GetValue = K.prototype.GetValue = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      return pb(c, b);\n    };\n\n    K.prototype.size = K.prototype.size = function () {\n      return qb(this.ptr);\n    };\n\n    K.prototype.__destroy__ = K.prototype.__destroy__ = function () {\n      rb(this.ptr);\n    };\n\n    F.prototype = Object.create(y.prototype);\n    F.prototype.constructor = F;\n    F.prototype.__class__ = F;\n    F.__cache__ = {};\n    a.MetadataBuilder = F;\n\n    F.prototype.AddStringEntry = F.prototype.AddStringEntry = function (b, c, d) {\n      var e = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : aa(c);\n      d = d && \"object\" === typeof d ? d.ptr : aa(d);\n      return !!sb(e, b, c, d);\n    };\n\n    F.prototype.AddIntEntry = F.prototype.AddIntEntry = function (b, c, d) {\n      var e = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : aa(c);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!tb(e, b, c, d);\n    };\n\n    F.prototype.AddIntEntryArray = F.prototype.AddIntEntryArray = function (b, c, d, e) {\n      var g = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : aa(c);\n      \"object\" == typeof d && (d = W(d));\n      e && \"object\" === typeof e && (e = e.ptr);\n      return !!ub(g, b, c, d, e);\n    };\n\n    F.prototype.AddDoubleEntry = F.prototype.AddDoubleEntry = function (b, c, d) {\n      var e = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c = c && \"object\" === typeof c ? c.ptr : aa(c);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!vb(e, b, c, d);\n    };\n\n    F.prototype.__destroy__ = F.prototype.__destroy__ = function () {\n      wb(this.ptr);\n    };\n\n    w.prototype = Object.create(y.prototype);\n    w.prototype.constructor = w;\n    w.prototype.__class__ = w;\n    w.__cache__ = {};\n    a.PointCloudBuilder = w;\n\n    w.prototype.AddFloatAttribute = w.prototype.AddFloatAttribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ba(g));\n      return xb(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddInt8Attribute = w.prototype.AddInt8Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ka(g));\n      return yb(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddUInt8Attribute = w.prototype.AddUInt8Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ka(g));\n      return zb(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddInt16Attribute = w.prototype.AddInt16Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = la(g));\n      return Ab(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddUInt16Attribute = w.prototype.AddUInt16Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = la(g));\n      return Bb(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddInt32Attribute = w.prototype.AddInt32Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = W(g));\n      return Cb(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddUInt32Attribute = w.prototype.AddUInt32Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = W(g));\n      return Db(t, b, c, d, e, g);\n    };\n\n    w.prototype.AddMetadata = w.prototype.AddMetadata = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return !!Eb(d, b, c);\n    };\n\n    w.prototype.SetMetadataForAttribute = w.prototype.SetMetadataForAttribute = function (b, c, d) {\n      var e = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Fb(e, b, c, d);\n    };\n\n    w.prototype.__destroy__ = w.prototype.__destroy__ = function () {\n      Gb(this.ptr);\n    };\n\n    u.prototype = Object.create(y.prototype);\n    u.prototype.constructor = u;\n    u.prototype.__class__ = u;\n    u.__cache__ = {};\n    a.MeshBuilder = u;\n\n    u.prototype.AddFacesToMesh = u.prototype.AddFacesToMesh = function (b, c, d) {\n      var e = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      \"object\" == typeof d && (d = W(d));\n      return !!Hb(e, b, c, d);\n    };\n\n    u.prototype.AddFloatAttributeToMesh = u.prototype.AddFloatAttributeToMesh = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ba(g));\n      return Ib(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddInt32AttributeToMesh = u.prototype.AddInt32AttributeToMesh = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = W(g));\n      return Jb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddMetadataToMesh = u.prototype.AddMetadataToMesh = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return !!Kb(d, b, c);\n    };\n\n    u.prototype.AddFloatAttribute = u.prototype.AddFloatAttribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ba(g));\n      return Lb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddInt8Attribute = u.prototype.AddInt8Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ka(g));\n      return Mb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddUInt8Attribute = u.prototype.AddUInt8Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = ka(g));\n      return Nb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddInt16Attribute = u.prototype.AddInt16Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = la(g));\n      return Ob(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddUInt16Attribute = u.prototype.AddUInt16Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = la(g));\n      return Pb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddInt32Attribute = u.prototype.AddInt32Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = W(g));\n      return Qb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddUInt32Attribute = u.prototype.AddUInt32Attribute = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      e && \"object\" === typeof e && (e = e.ptr);\n      \"object\" == typeof g && (g = W(g));\n      return Rb(t, b, c, d, e, g);\n    };\n\n    u.prototype.AddMetadata = u.prototype.AddMetadata = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return !!Sb(d, b, c);\n    };\n\n    u.prototype.SetMetadataForAttribute = u.prototype.SetMetadataForAttribute = function (b, c, d) {\n      var e = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return !!Tb(e, b, c, d);\n    };\n\n    u.prototype.__destroy__ = u.prototype.__destroy__ = function () {\n      Ub(this.ptr);\n    };\n\n    x.prototype = Object.create(y.prototype);\n    x.prototype.constructor = x;\n    x.prototype.__class__ = x;\n    x.__cache__ = {};\n    a.Encoder = x;\n\n    x.prototype.SetEncodingMethod = x.prototype.SetEncodingMethod = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      Vb(c, b);\n    };\n\n    x.prototype.SetAttributeQuantization = x.prototype.SetAttributeQuantization = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      Wb(d, b, c);\n    };\n\n    x.prototype.SetAttributeExplicitQuantization = x.prototype.SetAttributeExplicitQuantization = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      \"object\" == typeof e && (e = ba(e));\n      g && \"object\" === typeof g && (g = g.ptr);\n      Xb(t, b, c, d, e, g);\n    };\n\n    x.prototype.SetSpeedOptions = x.prototype.SetSpeedOptions = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      Yb(d, b, c);\n    };\n\n    x.prototype.SetTrackEncodedProperties = x.prototype.SetTrackEncodedProperties = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      Zb(c, b);\n    };\n\n    x.prototype.EncodeMeshToDracoBuffer = x.prototype.EncodeMeshToDracoBuffer = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return $b(d, b, c);\n    };\n\n    x.prototype.EncodePointCloudToDracoBuffer = x.prototype.EncodePointCloudToDracoBuffer = function (b, c, d) {\n      var e = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      return ac(e, b, c, d);\n    };\n\n    x.prototype.GetNumberOfEncodedPoints = x.prototype.GetNumberOfEncodedPoints = function () {\n      return bc(this.ptr);\n    };\n\n    x.prototype.GetNumberOfEncodedFaces = x.prototype.GetNumberOfEncodedFaces = function () {\n      return cc(this.ptr);\n    };\n\n    x.prototype.__destroy__ = x.prototype.__destroy__ = function () {\n      dc(this.ptr);\n    };\n\n    A.prototype = Object.create(y.prototype);\n    A.prototype.constructor = A;\n    A.prototype.__class__ = A;\n    A.__cache__ = {};\n    a.ExpertEncoder = A;\n\n    A.prototype.SetEncodingMethod = A.prototype.SetEncodingMethod = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      ec(c, b);\n    };\n\n    A.prototype.SetAttributeQuantization = A.prototype.SetAttributeQuantization = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      fc(d, b, c);\n    };\n\n    A.prototype.SetAttributeExplicitQuantization = A.prototype.SetAttributeExplicitQuantization = function (b, c, d, e, g) {\n      var t = this.ptr;\n      m.prepare();\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      d && \"object\" === typeof d && (d = d.ptr);\n      \"object\" == typeof e && (e = ba(e));\n      g && \"object\" === typeof g && (g = g.ptr);\n      gc(t, b, c, d, e, g);\n    };\n\n    A.prototype.SetSpeedOptions = A.prototype.SetSpeedOptions = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      hc(d, b, c);\n    };\n\n    A.prototype.SetTrackEncodedProperties = A.prototype.SetTrackEncodedProperties = function (b) {\n      var c = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      ic(c, b);\n    };\n\n    A.prototype.EncodeToDracoBuffer = A.prototype.EncodeToDracoBuffer = function (b, c) {\n      var d = this.ptr;\n      b && \"object\" === typeof b && (b = b.ptr);\n      c && \"object\" === typeof c && (c = c.ptr);\n      return jc(d, b, c);\n    };\n\n    A.prototype.GetNumberOfEncodedPoints = A.prototype.GetNumberOfEncodedPoints = function () {\n      return kc(this.ptr);\n    };\n\n    A.prototype.GetNumberOfEncodedFaces = A.prototype.GetNumberOfEncodedFaces = function () {\n      return lc(this.ptr);\n    };\n\n    A.prototype.__destroy__ = A.prototype.__destroy__ = function () {\n      mc(this.ptr);\n    };\n\n    (function () {\n      function b() {\n        a.INVALID = nc();\n        a.POSITION = oc();\n        a.NORMAL = pc();\n        a.COLOR = qc();\n        a.TEX_COORD = rc();\n        a.GENERIC = sc();\n        a.INVALID_GEOMETRY_TYPE = tc();\n        a.POINT_CLOUD = uc();\n        a.TRIANGULAR_MESH = vc();\n        a.MESH_SEQUENTIAL_ENCODING = wc();\n        a.MESH_EDGEBREAKER_ENCODING = xc();\n      }\n\n      ya ? b() : Aa.unshift(b);\n    })();\n\n    if (\"function\" === typeof a.onModuleParsed) a.onModuleParsed();\n    return p.ready;\n  };\n}();\n\n true ? module.exports = DracoEncoderModule : 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/draco3dgltf/draco_encoder_gltf_nodejs.js\n");

/***/ }),

/***/ "../../node_modules/path-browserify/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/path-browserify/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/process/browser.js\");\n// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n        if (lastSlash === i - 1 || dots === 1) {// NOOP\n        } else if (lastSlash !== i - 1 && dots === 2) {\n          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n          /*.*/\n          || res.charCodeAt(res.length - 2) !== 46\n          /*.*/\n          ) {\n              if (res.length > 2) {\n                var lastSlashIndex = res.lastIndexOf('/');\n\n                if (lastSlashIndex !== res.length - 1) {\n                  if (lastSlashIndex === -1) {\n                    res = '';\n                    lastSegmentLength = 0;\n                  } else {\n                    res = res.slice(0, lastSlashIndex);\n                    lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                  }\n\n                  lastSlash = i;\n                  dots = 0;\n                  continue;\n                }\n              } else if (res.length === 2 || res.length === 1) {\n                res = '';\n                lastSegmentLength = 0;\n                lastSlash = i;\n                dots = 0;\n                continue;\n              }\n            }\n\n          if (allowAboveRoot) {\n            if (res.length > 0) res += '/..';else res = '..';\n            lastSegmentLength = 2;\n          }\n        } else {\n          if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n          lastSegmentLength = i - lastSlash - 1;\n        }\n\n        lastSlash = i;\n        dots = 0;\n      } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n              // We get here if `from` is the exact base path for `to`.\n              // For example: from='/foo/bar'; to='/foo/bar/baz'\n              return to.slice(toStart + i + 1);\n            } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n              // We get here if `to` is the exact base path for `from`.\n              // For example: from='/foo/bar/baz'; to='/foo/bar'\n              lastCommonSep = i;\n            } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n          if (out.length === 0) out += '..';else out += '/..';\n        }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n\n          continue;\n        }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n\n          continue;\n        }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/path-browserify/index.js\n");

/***/ })

}]);