(window.webpackJsonp=window.webpackJsonp||[]).push([[465],{2722:function(e,r,n){"use strict";n.d(r,"a",(function(){return d})),n.d(r,"b",(function(){return m}));var t=n(0),o=n.n(t);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),u=function(e){var r=o.a.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=u(e.components);return o.a.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},v=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),v=t,m=d["".concat(s,".").concat(v)]||d[v]||p[v]||l;return n?o.a.createElement(m,i(i({ref:r},c),{},{components:n})):o.a.createElement(m,i({ref:r},c))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,s=new Array(l);s[0]=v;var i={};for(var a in r)hasOwnProperty.call(r,a)&&(i[a]=r[a]);i.originalType=e,i.mdxType="string"==typeof e?e:t,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},535:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return s})),n.d(r,"metadata",(function(){return i})),n.d(r,"toc",(function(){return a})),n.d(r,"default",(function(){return u}));var t=n(3),o=n(7),l=(n(0),n(2722)),s={id:"renderer_postprocessing_materials_glsl_convolution_shader_vert",title:"Module: renderer/postprocessing/materials/glsl/convolution/shader.vert",sidebar_label:"renderer/postprocessing/materials/glsl/convolution/shader.vert",custom_edit_url:null,hide_title:!0},i={unversionedId:"docs-engine/modules/renderer_postprocessing_materials_glsl_convolution_shader_vert",id:"docs-engine/modules/renderer_postprocessing_materials_glsl_convolution_shader_vert",isDocsHomePage:!1,title:"Module: renderer/postprocessing/materials/glsl/convolution/shader.vert",description:"Module: renderer/postprocessing/materials/glsl/convolution/shader.vert",source:"@site/docs/docs-engine/modules/renderer_postprocessing_materials_glsl_convolution_shader_vert.md",slug:"/docs-engine/modules/renderer_postprocessing_materials_glsl_convolution_shader_vert",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_glsl_convolution_shader_vert",editUrl:null,version:"current",sidebar_label:"renderer/postprocessing/materials/glsl/convolution/shader.vert",sidebar:"sidebar",previous:{title:"Module: renderer/postprocessing/materials/glsl/common/shader.vert",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_glsl_common_shader_vert"},next:{title:"Module: renderer/postprocessing/materials/glsl/copy/shader.frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_glsl_copy_shader_frag"}},a=[{value:"Properties",id:"properties",children:[{value:"default",id:"default",children:[]}]}],c={toc:a};function u(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},c,n,{components:r,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"module-rendererpostprocessingmaterialsglslconvolutionshadervert"},"Module: renderer/postprocessing/materials/glsl/convolution/shader.vert"),Object(l.b)("h2",{id:"properties"},"Properties"),Object(l.b)("h3",{id:"default"},"default"),Object(l.b)("p",null,"\u2022 ",Object(l.b)("strong",{parentName:"p"},"default"),": *uniform vec2 texelSize;\nuniform vec2 halfTexelSize;\nuniform float kernel;\nuniform float scale;"),Object(l.b)("p",null,"/",Object(l.b)("em",{parentName:"p"}," Packing multiple texture coordinates into one varying and using a swizzle to\nextract them in the fragment shader still causes a dependent texture read. "),"/\nvarying vec2 vUv0;\nvarying vec2 vUv1;\nvarying vec2 vUv2;\nvarying vec2 vUv3;"),Object(l.b)("p",null,"void main() {"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"vec2 uv = position.xy * 0.5 + 0.5;\nvec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n\nvUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\nvUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\nvUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\nvUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\ngl_Position = vec4(position.xy, 1.0, 1.0);\n")),Object(l.b)("p",null,"}"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"})))}u.isMDXComponent=!0}}]);