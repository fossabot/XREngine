(window.webpackJsonp=window.webpackJsonp||[]).push([[778],{2722:function(e,r,n){"use strict";n.d(r,"a",(function(){return d})),n.d(r,"b",(function(){return f}));var t=n(0),o=n.n(t);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=o.a.createContext({}),p=function(e){var r=o.a.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},d=function(e){var r=p(e.components);return o.a.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},g=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,s=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),d=p(n),g=t,f=d["".concat(s,".").concat(g)]||d[g]||u[g]||a;return n?o.a.createElement(f,l(l({ref:r},i),{},{components:n})):o.a.createElement(f,l({ref:r},i))}));function f(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,s=new Array(a);s[0]=g;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:t,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},848:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return s})),n.d(r,"metadata",(function(){return l})),n.d(r,"toc",(function(){return c})),n.d(r,"default",(function(){return p}));var t=n(3),o=n(7),a=(n(0),n(2722)),s={id:"renderer_postprocessing_glsl_color_average_shader_frag",title:"Module: renderer/postprocessing/glsl/color-average/shader.frag",sidebar_label:"renderer/postprocessing/glsl/color-average/shader.frag",custom_edit_url:null,hide_title:!0},l={unversionedId:"docs-engine/modules/renderer_postprocessing_glsl_color_average_shader_frag",id:"docs-engine/modules/renderer_postprocessing_glsl_color_average_shader_frag",isDocsHomePage:!1,title:"Module: renderer/postprocessing/glsl/color-average/shader.frag",description:"Module: renderer/postprocessing/glsl/color-average/shader.frag",source:"@site/docs/docs-engine/modules/renderer_postprocessing_glsl_color_average_shader_frag.md",slug:"/docs-engine/modules/renderer_postprocessing_glsl_color_average_shader_frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_color_average_shader_frag",editUrl:null,version:"current",sidebar_label:"renderer/postprocessing/glsl/color-average/shader.frag",sidebar:"sidebar",previous:{title:"Module: renderer/postprocessing/glsl/chromatic-aberration/shader.vert",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_chromatic_aberration_shader_vert"},next:{title:"Module: renderer/postprocessing/glsl/color-depth/shader.frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_color_depth_shader_frag"}},c=[{value:"Properties",id:"properties",children:[{value:"default",id:"default",children:[]}]}],i={toc:c};function p(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},i,n,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"module-rendererpostprocessingglslcolor-averageshaderfrag"},"Module: renderer/postprocessing/glsl/color-average/shader.frag"),Object(a.b)("h2",{id:"properties"},"Properties"),Object(a.b)("h3",{id:"default"},"default"),Object(a.b)("p",null,"\u2022 ",Object(a.b)("strong",{parentName:"p"},"default"),": *void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"float sum = inputColor.r + inputColor.g + inputColor.b;\n\noutputColor = vec4(vec3(sum / 3.0), inputColor.a);\n")),Object(a.b)("p",null,"}"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"})))}p.isMDXComponent=!0}}]);