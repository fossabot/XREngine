(window.webpackJsonp=window.webpackJsonp||[]).push([[620],{2722:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return b}));var t=r(0),o=r.n(t);function l(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){l(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),f=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=f(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,l=e.originalType,a=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=f(r),d=t,b=p["".concat(a,".").concat(d)]||p[d]||u[d]||l;return r?o.a.createElement(b,c(c({ref:n},s),{},{components:r})):o.a.createElement(b,c({ref:n},s))}));function b(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=r.length,a=new Array(l);a[0]=d;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var s=2;s<l;s++)a[s]=r[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},690:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return c})),r.d(n,"toc",(function(){return i})),r.d(n,"default",(function(){return f}));var t=r(3),o=r(7),l=(r(0),r(2722)),a={id:"renderer_postprocessing_glsl_realistic_bokeh_shader_frag",title:"Module: renderer/postprocessing/glsl/realistic-bokeh/shader.frag",sidebar_label:"renderer/postprocessing/glsl/realistic-bokeh/shader.frag",custom_edit_url:null,hide_title:!0},c={unversionedId:"docs-engine/modules/renderer_postprocessing_glsl_realistic_bokeh_shader_frag",id:"docs-engine/modules/renderer_postprocessing_glsl_realistic_bokeh_shader_frag",isDocsHomePage:!1,title:"Module: renderer/postprocessing/glsl/realistic-bokeh/shader.frag",description:"Module: renderer/postprocessing/glsl/realistic-bokeh/shader.frag",source:"@site/docs/docs-engine/modules/renderer_postprocessing_glsl_realistic_bokeh_shader_frag.md",slug:"/docs-engine/modules/renderer_postprocessing_glsl_realistic_bokeh_shader_frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_realistic_bokeh_shader_frag",editUrl:null,version:"current",sidebar_label:"renderer/postprocessing/glsl/realistic-bokeh/shader.frag",sidebar:"sidebar",previous:{title:"Module: renderer/postprocessing/glsl/pixelation/shader.frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_pixelation_shader_frag"},next:{title:"Module: renderer/postprocessing/glsl/scanlines/shader.frag",permalink:"/docs/docs-engine/modules/renderer_postprocessing_glsl_scanlines_shader_frag"}},i=[{value:"Properties",id:"properties",children:[{value:"default",id:"default",children:[]}]}],s={toc:i};function f(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"module-rendererpostprocessingglslrealistic-bokehshaderfrag"},"Module: renderer/postprocessing/glsl/realistic-bokeh/shader.frag"),Object(l.b)("h2",{id:"properties"},"Properties"),Object(l.b)("h3",{id:"default"},"default"),Object(l.b)("p",null,"\u2022 ",Object(l.b)("strong",{parentName:"p"},"default"),": *uniform float focus;\nuniform float focalLength;\nuniform float fStop;\nuniform float maxBlur;\nuniform float luminanceThreshold;\nuniform float luminanceGain;\nuniform float bias;\nuniform float fringe;"),Object(l.b)("p",null,"#ifdef MANUAL_DOF"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"uniform vec4 dof;\n")),Object(l.b)("p",null,"#endif"),Object(l.b)("p",null,"#ifdef PENTAGON"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"float pentagon(const in vec2 coords) {\n\n    const vec4 HS0 = vec4( 1.0,          0.0,         0.0, 1.0);\n    const vec4 HS1 = vec4( 0.309016994,  0.951056516, 0.0, 1.0);\n    const vec4 HS2 = vec4(-0.809016994,  0.587785252, 0.0, 1.0);\n    const vec4 HS3 = vec4(-0.809016994, -0.587785252, 0.0, 1.0);\n    const vec4 HS4 = vec4( 0.309016994, -0.951056516, 0.0, 1.0);\n    const vec4 HS5 = vec4( 0.0,          0.0,         1.0, 1.0);\n\n    const vec4 ONE = vec4(1.0);\n\n    const float P_FEATHER = 0.4;\n    const float N_FEATHER = -P_FEATHER;\n\n    float inOrOut = -4.0;\n\n    vec4 P = vec4(coords, vec2(RINGS_FLOAT - 1.3));\n\n    vec4 dist = vec4(\n        dot(P, HS0),\n        dot(P, HS1),\n        dot(P, HS2),\n        dot(P, HS3)\n    );\n\n    dist = smoothstep(N_FEATHER, P_FEATHER, dist);\n\n    inOrOut += dot(dist, ONE);\n\n    dist.x = dot(P, HS4);\n    dist.y = HS5.w - abs(P.z);\n\n    dist = smoothstep(N_FEATHER, P_FEATHER, dist);\n    inOrOut += dist.x;\n\n    return clamp(inOrOut, 0.0, 1.0);\n\n}\n")),Object(l.b)("p",null,"#endif"),Object(l.b)("p",null,"vec3 processTexel(const in vec2 coords, const in float blur) {"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"vec2 scale = texelSize * fringe * blur;\n\nvec3 c = vec3(\n    texture2D(inputBuffer, coords + vec2(0.0, 1.0) * scale).r,\n    texture2D(inputBuffer, coords + vec2(-0.866, -0.5) * scale).g,\n    texture2D(inputBuffer, coords + vec2(0.866, -0.5) * scale).b\n);\n\n// Calculate the luminance of the constructed color.\nfloat luminance = linearToRelativeLuminance(c);\nfloat threshold = max((luminance - luminanceThreshold) * luminanceGain, 0.0);\n\nreturn c + mix(vec3(0.0), c, threshold * blur);\n")),Object(l.b)("p",null,"}"),Object(l.b)("p",null,"float gather(const in float i, const in float j, const in float ringSamples,\nconst in vec2 uv, const in vec2 blurFactor, const in float blur, inout vec3 color) {"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"float step = PI2 / ringSamples;\nvec2 wh = vec2(cos(j * step) * i, sin(j * step) * i);\n\n#ifdef PENTAGON\n\n    float p = pentagon(wh);\n\n#else\n\n    float p = 1.0;\n\n#endif\n\ncolor += processTexel(wh * blurFactor + uv, blur) * mix(1.0, i / RINGS_FLOAT, bias) * p;\n\nreturn mix(1.0, i / RINGS_FLOAT, bias) * p;\n")),Object(l.b)("p",null,"}"),Object(l.b)("p",null,"void mainImage(const in vec4 inputColor, const in vec2 uv, const in float depth, out vec4 outputColor) {"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"#ifdef PERSPECTIVE_CAMERA\n\n    float viewZ = perspectiveDepthToViewZ(depth, cameraNear, cameraFar);\n    float linearDepth = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\n\n#else\n\n    float linearDepth = depth;\n\n#endif\n\n#ifdef MANUAL_DOF\n\n    float focalPlane = linearDepth - focus;\n    float farDoF = (focalPlane - dof.z) / dof.w;\n    float nearDoF = (-focalPlane - dof.x) / dof.y;\n\n    float blur = (focalPlane > 0.0) ? farDoF : nearDoF;\n\n#else\n\n    const float CIRCLE_OF_CONFUSION = 0.03; // 35mm film = 0.03mm CoC.\n\n    float focalPlaneMM = focus * 1000.0;\n    float depthMM = linearDepth * 1000.0;\n\n    float focalPlane = (depthMM * focalLength) / (depthMM - focalLength);\n    float farDoF = (focalPlaneMM * focalLength) / (focalPlaneMM - focalLength);\n    float nearDoF = (focalPlaneMM - focalLength) / (focalPlaneMM * fStop * CIRCLE_OF_CONFUSION);\n\n    float blur = abs(focalPlane - farDoF) * nearDoF;\n\n#endif\n\nconst int MAX_RING_SAMPLES = RINGS_INT * SAMPLES_INT;\n\nblur = clamp(blur, 0.0, 1.0);\nvec3 color = inputColor.rgb;\n\nif(blur >= 0.05) {\n\n    vec2 blurFactor = blur * maxBlur * texelSize;\n\n    float s = 1.0;\n    int ringSamples;\n\n    for(int i = 1; i <= RINGS_INT; i++) {\n\n        ringSamples = i * SAMPLES_INT;\n\n        for(int j = 0; j < MAX_RING_SAMPLES; j++) {\n\n            if(j >= ringSamples) {\n\n                break;\n\n            }\n\n            s += gather(float(i), float(j), float(ringSamples), uv, blurFactor, blur, color);\n\n        }\n\n    }\n\n    color /= s;\n\n}\n\n#ifdef SHOW_FOCUS\n\n    float edge = 0.002 * linearDepth;\n    float m = clamp(smoothstep(0.0, edge, blur), 0.0, 1.0);\n    float e = clamp(smoothstep(1.0 - edge, 1.0, blur), 0.0, 1.0);\n\n    color = mix(color, vec3(1.0, 0.5, 0.0), (1.0 - m) * 0.6);\n    color = mix(color, vec3(0.0, 0.5, 1.0), ((1.0 - e) - (1.0 - m)) * 0.2);\n\n#endif\n\noutputColor = vec4(color, inputColor.a);\n")),Object(l.b)("p",null,"}"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"})))}f.isMDXComponent=!0}}]);