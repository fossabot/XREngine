(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{2722:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return u}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},b=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(r),d=n,u=b["".concat(s,".").concat(d)]||b[d]||m[d]||i;return r?a.a.createElement(u,o(o({ref:t},c),{},{components:r})):a.a.createElement(u,o({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},419:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),i=(r(0),r(2722)),s={id:"renderer_postprocessing_materials_maskmaterial",title:"Module: renderer/postprocessing/materials/MaskMaterial",sidebar_label:"renderer/postprocessing/materials/MaskMaterial",custom_edit_url:null,hide_title:!0},o={unversionedId:"docs-engine/modules/renderer_postprocessing_materials_maskmaterial",id:"docs-engine/modules/renderer_postprocessing_materials_maskmaterial",isDocsHomePage:!1,title:"Module: renderer/postprocessing/materials/MaskMaterial",description:"Module: renderer/postprocessing/materials/MaskMaterial",source:"@site/docs/docs-engine/modules/renderer_postprocessing_materials_maskmaterial.md",slug:"/docs-engine/modules/renderer_postprocessing_materials_maskmaterial",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_maskmaterial",editUrl:null,version:"current",sidebar_label:"renderer/postprocessing/materials/MaskMaterial",sidebar:"sidebar",previous:{title:"Module: renderer/postprocessing/materials/LuminanceMaterial",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_luminancematerial"},next:{title:"Module: renderer/postprocessing/materials/OutlineMaterial",permalink:"/docs/docs-engine/modules/renderer_postprocessing_materials_outlinematerial"}},l=[{value:"Table of contents",id:"table-of-contents",children:[{value:"Classes",id:"classes",children:[]}]},{value:"Variables",id:"variables",children:[{value:"MaskFunction",id:"maskfunction",children:[]}]}],c={toc:l};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"module-rendererpostprocessingmaterialsmaskmaterial"},"Module: renderer/postprocessing/materials/MaskMaterial"),Object(i.b)("h2",{id:"table-of-contents"},"Table of contents"),Object(i.b)("h3",{id:"classes"},"Classes"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"/docs/docs-engine/classes/renderer_postprocessing_materials_maskmaterial.maskmaterial"},"MaskMaterial"))),Object(i.b)("h2",{id:"variables"},"Variables"),Object(i.b)("h3",{id:"maskfunction"},"MaskFunction"),Object(i.b)("p",null,"\u2022 ",Object(i.b)("inlineCode",{parentName:"p"},"Const")," ",Object(i.b)("strong",{parentName:"p"},"MaskFunction"),": ",Object(i.b)("em",{parentName:"p"},"object")),Object(i.b)("p",null,"A mask function enumeration."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"property"))," {Number} DISCARD - Discards elements when the respective mask value is zero."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"property"))," {Number} MULTIPLY - Multiplies the input buffer with the mask texture."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"property"))," {Number} MULTIPLY_RGB_SET_ALPHA - Multiplies the input RGB values with the mask and sets alpha to the mask value."),Object(i.b)("h4",{id:"type-declaration"},"Type declaration:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"DISCARD")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"MULTIPLY")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"MULTIPLY_RGB_SET_ALPHA")),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("em",{parentName:"td"},"number"))))),Object(i.b)("p",null,"Defined in: ",Object(i.b)("a",{parentName:"p",href:"https://github.com/xr3ngine/xr3ngine/blob/716a06460/packages/engine/src/renderer/postprocessing/materials/MaskMaterial.ts#L141"},"packages/engine/src/renderer/postprocessing/materials/MaskMaterial.ts:141")))}p.isMDXComponent=!0}}]);