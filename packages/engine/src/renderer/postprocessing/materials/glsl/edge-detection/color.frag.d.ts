declare const _default: "uniform sampler2D inputBuffer;\n\nvarying vec2 vUv;\n\nvarying vec2 vUv0;\nvarying vec2 vUv1;\nvarying vec2 vUv2;\nvarying vec2 vUv3;\nvarying vec2 vUv4;\nvarying vec2 vUv5;\n\nvoid main() {\n\n\tconst vec2 threshold = vec2(EDGE_THRESHOLD);\n\n\t// Calculate color deltas.\n\tvec4 delta;\n\tvec3 c = texture2D(inputBuffer, vUv).rgb;\n\n\tvec3 cLeft = texture2D(inputBuffer, vUv0).rgb;\n\tvec3 t = abs(c - cLeft);\n\tdelta.x = max(max(t.r, t.g), t.b);\n\n\tvec3 cTop = texture2D(inputBuffer, vUv1).rgb;\n\tt = abs(c - cTop);\n\tdelta.y = max(max(t.r, t.g), t.b);\n\n\t// Use a threshold to detect significant color edges.\n\tvec2 edges = step(threshold, delta.xy);\n\n\t// Discard if there is no edge.\n\tif(dot(edges, vec2(1.0)) == 0.0) {\n\n\t\tdiscard;\n\n\t}\n\n\t// Calculate right and bottom deltas.\n\tvec3 cRight = texture2D(inputBuffer, vUv2).rgb;\n\tt = abs(c - cRight);\n\tdelta.z = max(max(t.r, t.g), t.b);\n\n\tvec3 cBottom = texture2D(inputBuffer, vUv3).rgb;\n\tt = abs(c - cBottom);\n\tdelta.w = max(max(t.r, t.g), t.b);\n\n\t// Calculate the maximum delta in the direct neighborhood.\n\tvec2 maxDelta = max(delta.xy, delta.zw);\n\n\t// Calculate left-left and top-top deltas.\n\tvec3 cLeftLeft = texture2D(inputBuffer, vUv4).rgb;\n\tt = abs(c - cLeftLeft);\n\tdelta.z = max(max(t.r, t.g), t.b);\n\n\tvec3 cTopTop = texture2D(inputBuffer, vUv5).rgb;\n\tt = abs(c - cTopTop);\n\tdelta.w = max(max(t.r, t.g), t.b);\n\n\t// Calculate the final maximum delta.\n\tmaxDelta = max(maxDelta.xy, delta.zw);\n\tfloat finalDelta = max(maxDelta.x, maxDelta.y);\n\n\t// Local contrast adaptation.\n\tedges *= step(finalDelta, LOCAL_CONTRAST_ADAPTATION_FACTOR * delta.xy);\n\n\tgl_FragColor = vec4(edges, 0.0, 1.0);\n\n}\n";
export default _default;
