declare const _default: "uniform sampler2D inputBuffer;\nuniform sampler2D cocBuffer;\n\nuniform vec2 texelSize;\nuniform float scale;\n\n#if PASS == 1\n\n\tuniform float kernel64[128];\n\n#else\n\n\tuniform float kernel16[32];\n\n#endif\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\t#ifdef FOREGROUND\n\n\t\tvec2 CoCNearFar = texture2D(cocBuffer, vUv).rg;\n\t\tfloat CoC = CoCNearFar.r * scale;\n\n\t#else\n\n\t\tfloat CoC = texture2D(cocBuffer, vUv).g * scale;\n\n\t#endif\n\n\tif(CoC == 0.0) {\n\n\t\t// Skip blurring.\n\t\tgl_FragColor = texture2D(inputBuffer, vUv);\n\n\t} else {\n\n\t\t#ifdef FOREGROUND\n\n\t\t\t// Use far CoC to avoid weak blurring around foreground objects.\n\t\t\tvec2 step = texelSize * max(CoC, CoCNearFar.g * scale);\n\n\t\t#else\n\n\t\t\tvec2 step = texelSize * CoC;\n\n\t\t#endif\n\n\t\t#if PASS == 1\n\n\t\t\tvec4 acc = vec4(0.0);\n\n\t\t\tfor(int i = 0; i < 128; i += 2) {\n\n\t\t\t\tvec2 uv = step * vec2(kernel64[i], kernel64[i + 1]) + vUv;\n\t\t\t\tacc += texture2D(inputBuffer, uv);\n\n\t\t\t}\n\n\t\t\tgl_FragColor = acc / 64.0;\n\n\t\t#else\n\n\t\t\tvec4 maxValue = texture2D(inputBuffer, vUv);\n\n\t\t\tfor(int i = 0; i < 32; i += 2) {\n\n\t\t\t\tvec2 uv = step * vec2(kernel16[i], kernel16[i + 1]) + vUv;\n\t\t\t\tmaxValue = max(texture2D(inputBuffer, uv), maxValue);\n\n\t\t\t}\n\n\t\t\tgl_FragColor = maxValue;\n\n\t\t#endif\n\n\t}\n\n}\n";
export default _default;
