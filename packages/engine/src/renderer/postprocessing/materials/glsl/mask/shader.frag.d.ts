declare const _default: "uniform sampler2D maskTexture;\nuniform sampler2D inputBuffer;\n\n#if MASK_FUNCTION != 0\n\n\tuniform float strength;\n\n#endif\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\t#if COLOR_CHANNEL == 0\n\n\t\tfloat mask = texture2D(maskTexture, vUv).r;\n\n\t#elif COLOR_CHANNEL == 1\n\n\t\tfloat mask = texture2D(maskTexture, vUv).g;\n\n\t#elif COLOR_CHANNEL == 2\n\n\t\tfloat mask = texture2D(maskTexture, vUv).b;\n\n\t#else\n\n\t\tfloat mask = texture2D(maskTexture, vUv).a;\n\n\t#endif\n\n\t#if MASK_FUNCTION == 0\n\n\t\t#ifdef INVERTED\n\n\t\t\tif(mask > 0.0) {\n\n\t\t\t\tdiscard;\n\n\t\t\t}\n\n\t\t#else\n\n\t\t\tif(mask == 0.0) {\n\n\t\t\t\tdiscard;\n\n\t\t\t}\n\n\t\t#endif\n\n\t#else\n\n\t\tmask = clamp(mask * strength, 0.0, 1.0);\n\n\t\t#ifdef INVERTED\n\n\t\t\tmask = (1.0 - mask);\n\n\t\t#endif\n\n\t\t#if MASK_FUNCTION == 1\n\n\t\t\tgl_FragColor = mask * texture2D(inputBuffer, vUv);\n\n\t\t#else\n\n\t\t\tgl_FragColor = vec4(mask * texture2D(inputBuffer, vUv).rgb, mask);\n\n\t\t#endif\n\n\t#endif\n\n}\n";
export default _default;
