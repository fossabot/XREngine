declare const _default: "#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n\nuniform sampler2D inputBuffer;\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n\n\tuniform highp sampler2D depthBuffer;\n\n#else\n\n\tuniform mediump sampler2D depthBuffer;\n\n#endif\n\nuniform vec2 resolution;\nuniform vec2 texelSize;\n\nuniform float cameraNear;\nuniform float cameraFar;\nuniform float aspect;\nuniform float time;\n\nvarying vec2 vUv;\n\nfloat readDepth(const in vec2 uv) {\n\n\t#if DEPTH_PACKING == 3201\n\n\t\treturn unpackRGBAToDepth(texture2D(depthBuffer, uv));\n\n\t#else\n\n\t\treturn texture2D(depthBuffer, uv).r;\n\n\t#endif\n\n}\n\nfloat getViewZ(const in float depth) {\n\n\t#ifdef PERSPECTIVE_CAMERA\n\n\t\treturn perspectiveDepthToViewZ(depth, cameraNear, cameraFar);\n\n\t#else\n\n\t\treturn orthographicDepthToViewZ(depth, cameraNear, cameraFar);\n\n\t#endif\n\n}\n\nFRAGMENT_HEAD\n\nvoid main() {\n\n\tFRAGMENT_MAIN_UV\n\n\tvec4 color0 = texture2D(inputBuffer, UV);\n\tvec4 color1 = vec4(0.0);\n\n\tFRAGMENT_MAIN_IMAGE\n\n\tgl_FragColor = color0;\n\n\t#ifdef ENCODE_OUTPUT\n\n\t\t#include <encodings_fragment>\n\n\t#endif\n\n\t#include <dithering_fragment>\n\n}\n";
export default _default;
