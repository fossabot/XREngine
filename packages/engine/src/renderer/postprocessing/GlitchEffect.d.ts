import { Vector2 } from 'three';
import { NoiseTexture } from './images/textures/NoiseTexture';
import { Effect } from './Effect';
/**
 * A glitch effect.
 *
 * This effect can influence the {@link ChromaticAberrationEffect}.
 *
 * Reference: https://github.com/staffantan/unityglitch
 *
 * Warning: This effect cannot be merged with convolution effects.
 */
export declare class GlitchEffect extends Effect {
    delay: Vector2;
    duration: Vector2;
    breakPoint: Vector2;
    time: number;
    seed: any;
    distortion: any;
    mode: number;
    strength: Vector2;
    ratio: number;
    chromaticAberrationOffset: any;
    /**
       * Constructs a new glitch effect.
       *
       * @param {Object} [options] - The options.
       * @param {BlendFunction} [options.blendFunction=BlendFunction.NORMAL] - The blend function of this effect.
       * @param {Vector2} [options.chromaticAberrationOffset] - A chromatic aberration offset. If provided, the glitch effect will influence this offset.
       * @param {Vector2} [options.delay] - The minimum and maximum delay between glitch activations in seconds.
       * @param {Vector2} [options.duration] - The minimum and maximum duration of a glitch in seconds.
       * @param {Vector2} [options.strength] - The strength of weak and strong glitches.
       * @param {Texture} [options.perturbationMap] - A perturbation map. If none is provided, a noise texture will be created.
       * @param {Number} [options.dtSize=64] - The size of the generated noise map. Will be ignored if a perturbation map is provided.
       * @param {Number} [options.columns=0.05] - The scale of the blocky glitch columns.
       * @param {Number} [options.ratio=0.85] - The threshold for strong glitches.
       */
    constructor({ blendFunction, chromaticAberrationOffset, delay, duration, strength, columns, ratio, perturbationMap, dtSize }?: {
        blendFunction?: number;
        chromaticAberrationOffset?: any;
        delay?: Vector2;
        duration?: Vector2;
        strength?: Vector2;
        columns?: number;
        ratio?: number;
        perturbationMap?: any;
        dtSize?: number;
    });
    /**
       * Indicates whether the glitch effect is currently active.
       *
       * @type {Boolean}
       */
    get active(): any;
    /**
       * Returns the current perturbation map.
       *
       * @return {Texture} The current perturbation map.
       */
    getPerturbationMap(): any;
    /**
       * Replaces the current perturbation map with the given one.
       *
       * The current map will be disposed if it was generated by this effect.
       *
       * @param {Texture} map - The new perturbation map.
       */
    setPerturbationMap(map: any): void;
    /**
       * Generates a perturbation map.
       *
       * @param {Number} [size=64] - The texture size.
       * @return {DataTexture} The perturbation map.
       */
    generatePerturbationMap(size?: number): NoiseTexture;
    /**
       * Updates this effect.
       *
       * @param {WebGLRenderer} renderer - The renderer.
       * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
       * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
       */
    update(renderer: any, inputBuffer: any, deltaTime: any): void;
}
/**
 * A glitch mode enumeration.
 *
 * @type {Object}
 * @property {Number} DISABLED - No glitches.
 * @property {Number} SPORADIC - Sporadic glitches.
 * @property {Number} CONSTANT_MILD - Constant mild glitches.
 * @property {Number} CONSTANT_WILD - Constant wild glitches.
 */
export declare const GlitchMode: {
    DISABLED: number;
    SPORADIC: number;
    CONSTANT_MILD: number;
    CONSTANT_WILD: number;
};
