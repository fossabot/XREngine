import { Component } from '../../../ecs/classes/Component';
import { Vector3, Group, Material, AnimationMixer, Mesh, AnimationAction } from 'three';
import { CapsuleCollider } from '../../../physics/components/CapsuleCollider';
import { VectorSpringSimulator } from '../../../physics/classes/VectorSpringSimulator';
import { RelativeSpringSimulator } from '../../../physics/classes/RelativeSpringSimulator';
import { RaycastResult, Vec3 } from 'cannon-es';
export declare const WALK_START_SPEED = 0.1;
export declare const WALK_SPEED = 2;
export declare const RUN_START_SPEED = 3;
export declare const RUN_SPEED = 5;
export declare class CharacterComponent extends Component<CharacterComponent> {
    dispose(): void;
    initialized: boolean;
    currentAnimationAction: AnimationAction;
    currentAnimationLength: number;
    timer: number;
    animationsTimeScale: number;
    height: number;
    tiltContainer: Group;
    modelContainer: Group;
    materials: Material[];
    visible: boolean;
    mixer: AnimationMixer;
    animations: any[];
    physicsEnabled: boolean;
    /**
     * desired moving direction from user inputs
     */
    localMovementDirection: Vector3;
    acceleration: Vector3;
    /**
     * this needs to be multiplied by moveSpeed to get real speed;
     * probably does not represent real physics speed
     */
    velocity: Vector3;
    arcadeVelocityInfluence: Vector3;
    velocityTarget: Vector3;
    arcadeVelocityIsAdditive: boolean;
    currentInputHash: any;
    defaultVelocitySimulatorDamping: number;
    defaultVelocitySimulatorMass: number;
    velocitySimulator: VectorSpringSimulator;
    moveSpeed: number;
    angularVelocity: number;
    orientation: Vector3;
    orientationTarget: Vector3;
    defaultRotationSimulatorDamping: number;
    defaultRotationSimulatorMass: number;
    rotationSimulator: RelativeSpringSimulator;
    viewVector: Vector3;
    actions: any;
    actorCapsule: CapsuleCollider;
    actorMass: number;
    actorHeight: number;
    capsuleRadius: number;
    capsuleSegments: number;
    capsuleFriction: number;
    capsulePosition: Vec3;
    rayResult: RaycastResult;
    rayHasHit: boolean;
    rayCastLength: number;
    raySafeOffset: number;
    wantsToJump: boolean;
    initJumpSpeed: number;
    groundImpactVelocity: Vector3;
    controlledObject: any;
    raycastBox: Mesh;
    vehicleEntryInstance: any;
    occupyingSeat: any;
    quaternion: any;
    canFindVehiclesToEnter: boolean;
    canEnterVehicles: boolean;
    canLeaveVehicles: boolean;
    alreadyJumped: boolean;
    rotationSpeed: any;
    model: any;
    options: {};
    skinnedMeshes: any[];
    flipZ: boolean;
    flipY: boolean;
    flipLeg: boolean;
    allHairBones: any[];
    hairBones: any[];
    fingerBones: any;
    tailBones: any;
    armature: any;
    skeleton: any;
    Eye_L: any;
    Eye_R: any;
    Head: any;
    Neck: any;
    Chest: any;
    Hips: any;
    Spine: any;
    Left_shoulder: any;
    Left_wrist: any;
    Left_elbow: any;
    Left_arm: any;
    Right_shoulder: any;
    Right_wrist: any;
    Right_elbow: any;
    Right_arm: any;
    modelBones: any;
    poseManager: any;
    shoulderTransforms: any;
    legsManager: any;
    inputs: any;
    shoulderWidth: any;
    leftArmLength: any;
    rightArmLength: any;
    lastModelScaleFactor: number;
    lastTimestamp: number;
    decapitated: boolean;
    modelBoneOutputs: any;
    volume: number;
    outputs: any;
    update: any;
}
