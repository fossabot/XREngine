import EventEmitter from "eventemitter3";
import { Matrix3, Vector2, Vector3, Spherical, Box3, Raycaster, Sphere, Ray, Plane, Quaternion, Layers, PerspectiveCamera } from "three";
import TransformGizmo from "../../scene/classes/TransformGizmo";
export declare const SnapMode: {
    Disabled: string;
    Grid: string;
};
export declare const TransformPivot: {
    Selection: string;
    Center: string;
    Bottom: string;
};
export declare const TransformMode: {
    Disabled: string;
    Grab: string;
    Placement: string;
    Translate: string;
    Rotate: string;
    Scale: string;
};
export declare const TransformAxis: {
    X: string;
    Y: string;
    Z: string;
    XY: string;
    YZ: string;
    XZ: string;
    XYZ: string;
};
export declare const TransformAxisConstraints: {
    X: Vector3;
    Y: Vector3;
    Z: Vector3;
    XY: Vector3;
    YZ: Vector3;
    XZ: Vector3;
    XYZ: Vector3;
};
export default class EditorControls extends EventEmitter {
    camera: PerspectiveCamera;
    editor: any;
    inputManager: any;
    flyControls: any;
    enabled: boolean;
    normalMatrix: Matrix3;
    vector: Vector3;
    delta: Vector3;
    center: Vector3;
    spherical: Spherical;
    panSpeed: number;
    zoomSpeed: number;
    orbitSpeed: number;
    lookSensitivity: number;
    selectSensitivity: number;
    boostSpeed: number;
    moveSpeed: number;
    initialLookSensitivity: any;
    initialBoostSpeed: any;
    initialMoveSpeed: any;
    distance: number;
    maxFocusDistance: number;
    raycaster: Raycaster;
    raycasterResults: any[];
    scene: any;
    box: Box3;
    sphere: Sphere;
    centerViewportPosition: Vector2;
    raycastIgnoreLayers: Layers;
    renderableLayers: Layers;
    transformGizmo: TransformGizmo;
    transformMode: string;
    multiplePlacement: boolean;
    transformModeOnCancel: string;
    transformSpace: string;
    transformPivot: string;
    transformAxis: any;
    grabHistoryCheckpoint: any;
    placementObjects: any[];
    snapMode: string;
    translationSnap: number;
    rotationSnap: number;
    scaleSnap: number;
    selectionBoundingBox: Box3;
    selectStartPosition: Vector2;
    selectEndPosition: Vector2;
    inverseGizmoQuaternion: Quaternion;
    dragOffset: Vector3;
    transformRay: Ray;
    transformPlane: Plane;
    planeIntersection: Vector3;
    planeNormal: Vector3;
    translationVector: Vector3;
    initRotationDragVector: Vector3;
    prevRotationAngle: number;
    curRotationDragVector: Vector3;
    normalizedInitRotationDragVector: Vector3;
    normalizedCurRotationDragVector: Vector3;
    initDragVector: Vector3;
    dragVector: Vector3;
    deltaDragVector: Vector3;
    prevScale: Vector3;
    curScale: Vector3;
    scaleVector: Vector3;
    dragging: boolean;
    selectionChanged: boolean;
    transformPropertyChanged: boolean;
    transformModeChanged: boolean;
    transformPivotChanged: boolean;
    transformSpaceChanged: boolean;
    flyStartTime: number;
    flyModeSensitivity: number;
    constructor(camera: any, editor: any, inputManager: any, flyControls: any);
    onSceneSet: (scene: any) => void;
    onBeforeSelectionChanged: () => void;
    onSelectionChanged: () => void;
    onObjectsChanged: (_objects: any, property: any) => void;
    enable(): void;
    disable(): void;
    update(): void;
    raycastNode(coords: any): any;
    focus(objects: any): void;
    updateTransformGizmoScale(): void;
    _raycastRecursive(object: any, excludeObjects?: any, excludeLayers?: any): void;
    getRaycastPosition(coords: any, target: any, modifier: any): void;
    setTransformMode(mode: any, multiplePlacement?: any): void;
    setTransformSpace(transformSpace: any): void;
    toggleTransformSpace(): void;
    setTransformPivot(pivot: any): void;
    transformPivotModes: string[];
    changeTransformPivot(): void;
    setSnapMode(snapMode: any): void;
    toggleSnapMode(): void;
    shouldSnap(invertSnap?: boolean): boolean;
    setTranslationSnap(value: any): void;
    setScaleSnap(value: any): void;
    setRotationSnap(value: any): void;
    cancel(): void;
}
