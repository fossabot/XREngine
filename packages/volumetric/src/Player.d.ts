import { BufferGeometry, Mesh, Renderer, Scene } from 'three';
import { KeyframeBuffer } from './Interfaces';
export default class DracosisPlayer {
    frameRate: number;
    speed: number;
    scene: Scene;
    renderer: Renderer;
    mesh: Mesh;
    meshFilePath: String;
    material: any;
    bufferGeometry: BufferGeometry;
    private _scale;
    private _prevFrame;
    private currentKeyframe;
    private _video;
    private _videoTexture;
    private _loop;
    private _isinitialized;
    private meshBuffer;
    private iframeVertexBuffer;
    fileHeader: any;
    tempBufferObject: KeyframeBuffer;
    manifestFilePath: any;
    fetchLoop: any;
    keyframesToBufferBeforeStart: number;
    numberOfKeyframes: number;
    numberOfIframes: number;
    get currentFrame(): number;
    get loop(): boolean;
    set loop(value: boolean);
    constructor({ scene, renderer, meshFilePath, videoFilePath, frameRate, loop, autoplay, scale, keyframesToBufferBeforeStart }: {
        scene: any;
        renderer: any;
        meshFilePath: any;
        videoFilePath: any;
        frameRate?: number;
        loop?: boolean;
        autoplay?: boolean;
        scale?: number;
        keyframesToBufferBeforeStart?: number;
    });
    videoUpdateHandler(now: any, metadata: any): void;
    play: () => void;
    getPositionInKeyframeBuffer(keyframeNumber: number): number;
    getPositionInIFrameBuffer(frameNumber: number): number;
}
