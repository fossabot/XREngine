import{u as e}from"./upload.8895077e.js";import{a,d as t}from"./feathers.42c2841d.js";import{C as r,n as o,o as c,p as s,q as n,s as i,t as u,u as l,v as y,w as f}from"./_app.e67b0e96.js";function g(e){return{type:o,creator:e}}function w(){return{type:r}}function m(){return{type:n}}function p(e){return async(r,o)=>{try{if(r(w()),!e){e={};let a=Math.floor(1e3*Math.random())+1;e.name="User"+a,e.username="user_"+a}r(g(await a.service("creator").create(e)))}catch(c){console.log(c),t(r,c.message)}}}function d(){return async e=>{try{e(w());e(g(await a.service("creator").find({query:{action:"current"}})))}catch(r){console.log(r),t(e,r.message)}}}function v(e){return async(e,r)=>{try{e({type:c});const t=await a.service("creator").find({query:{}});e({type:s,creators:t})}catch(o){console.log(o),t(e,o.message)}}}function h(e){return async r=>{try{r(m());r(function(e){return{type:i,creator:e}}(await a.service("creator").get(e)))}catch(o){console.log(o),t(r,o.message)}}}function q(r){return async o=>{try{if(o(w()),r.newAvatar){const a=await e(r.newAvatar,null);r.avatarId=a.file_id,delete r.newAvatar}o(g(await a.service("creator").patch(r.id,r)))}catch(c){console.log(c),t(o,c.message)}}}function I(){return async e=>{try{e(m());const t=await a.service("notifications").find({query:{action:"byCurrentCreator"}});e({type:u,notifications:t})}catch(r){console.log(r),t(e,r.message)}}}function b(e){return async r=>{try{await a.service("follow-creator").create({creatorId:e})&&r({type:l})}catch(o){console.log(o),t(r,o.message)}}}function j(e){return async r=>{try{await a.service("follow-creator").remove(e)&&r({type:y})}catch(o){console.log(o),t(r,o.message)}}}function A(e){return async r=>{try{const t=await a.service("follow-creator").find({query:{action:"followers",creatorId:e}});r((o=t.data,{type:f,creators:o}))}catch(c){console.log(c),t(r,c.message)}var o}}function C(e){return async r=>{try{const t=await a.service("follow-creator").find({query:{action:"following",creatorId:e}});r((o=t.data,{type:f,creators:o}))}catch(c){console.log(c),t(r,c.message)}var o}}export{h as a,j as b,p as c,A as d,C as e,b as f,v as g,d as h,I as i,q as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
