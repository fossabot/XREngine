import{g as e,l as t,r as n,k as r,R as i,u as o}from"./vendor.40ddfb4b.js";import{r as a,P as s,A as l}from"./index.fd7201a9.js";import{aB as u,aC as c,aD as d,b as p}from"./_app.e67b0e96.js";import{h as f,u as m}from"./service.b9355309.js";import{c as h,d as y,e as v}from"./service.d8de8161.js";import{s as g}from"./selector.8a0da25a.js";import{c as b}from"./index.1d867f8f.js";import{d as w,c as k}from"./feathers.42c2841d.js";import{s as T}from"./selector.cc63221d.js";import{T as C}from"./Typography.9d0f0940.js";import{B as E}from"./Button.31285e4e.js";import{s as S}from"./index.module.2ab36131.js";import"./selector.e2ee45bf.js";import"./service.0737f8c0.js";import"./upload.8895077e.js";import"./index.b0bd5cc1.js";import"./selector.d1cb6f6a.js";import"./Slide.1e39d9a9.js";import"./Paper.24cff5e5.js";import"./capitalize.f4eb3e2e.js";import"./Modal.c801ca2c.js";import"./Dialog.c787f71e.js";import"./Backdrop.9ef065d7.js";import"./Box.cb35bf4d.js";import"./CardMedia.d28b7db0.js";import"./makeStyles.dc74902c.js";import"./Avatar.073c615c.js";var _={},R={},I=e(u),A={},B={},D={},x={};!function(e){var t,n="undefined",r=n!==typeof Buffer&&Buffer,i=n!==typeof Uint8Array&&Uint8Array,o=n!==typeof ArrayBuffer&&ArrayBuffer,a=[0,0,0,0,0,0,0,0],s=Array.isArray||function(e){return!!e&&"[object Array]"==Object.prototype.toString.call(e)},l=4294967296;function u(s,u,w){var k=u?0:4,T=u?4:0,C=u?0:3,E=u?1:2,S=u?2:1,_=u?3:0,R=u?y:g,I=u?v:b,A=x.prototype,B="is"+s,D="_"+B;return A.buffer=void 0,A.offset=0,A[D]=!0,A.toNumber=O,A.toString=function(e){var t=this.buffer,n=this.offset,r=M(t,n+k),i=M(t,n+T),o="",a=!w&&2147483648&r;for(a&&(r=~r,i=l-i),e=e||10;;){var s=r%e*l+i;if(r=Math.floor(r/e),i=Math.floor(s/e),o=(s%e).toString(e)+o,!r&&!i)break}return a&&(o="-"+o),o},A.toJSON=O,A.toArray=c,r&&(A.toBuffer=d),i&&(A.toArrayBuffer=p),x[B]=function(e){return!(!e||!e[D])},e[s]=x,x;function x(e,r,s,u){return this instanceof x?function(e,r,s,u,c){i&&o&&(r instanceof o&&(r=new i(r)),u instanceof o&&(u=new i(u))),r||s||u||t?(f(r,s)||(c=s,u=r,s=0,r=new(t||Array)(8)),e.buffer=r,e.offset=s|=0,n!==typeof u&&("string"==typeof u?function(e,t,n,r){var i=0,o=n.length,a=0,s=0;"-"===n[0]&&i++;for(var u=i;i<o;){var c=parseInt(n[i++],r);if(!(c>=0))break;s=s*r+c,a=a*r+Math.floor(s/l),s%=l}u&&(a=~a,s?s=l-s:a++),P(e,t+k,a),P(e,t+T,s)}(r,s,u,c||10):f(u,c)?m(r,s,u,c):"number"==typeof c?(P(r,s+k,u),P(r,s+T,c)):u>0?R(r,s,u):u<0?I(r,s,u):m(r,s,a,0))):e.buffer=h(a,0)}(this,e,r,s,u):new x(e,r,s,u)}function O(){var e=this.buffer,t=this.offset,n=M(e,t+k),r=M(e,t+T);return w||(n|=0),n?n*l+r:r}function P(e,t,n){e[t+_]=255&n,n>>=8,e[t+S]=255&n,n>>=8,e[t+E]=255&n,n>>=8,e[t+C]=255&n}function M(e,t){return 16777216*e[t+C]+(e[t+E]<<16)+(e[t+S]<<8)+e[t+_]}}function c(e){var n=this.buffer,r=this.offset;return t=null,!1!==e&&0===r&&8===n.length&&s(n)?n:h(n,r)}function d(e){var n=this.buffer,i=this.offset;if(t=r,!1!==e&&0===i&&8===n.length&&Buffer.isBuffer(n))return n;var o=new r(8);return m(o,0,n,i),o}function p(e){var n=this.buffer,r=this.offset,a=n.buffer;if(t=i,!1!==e&&0===r&&a instanceof o&&8===a.byteLength)return a;var s=new i(8);return m(s,0,n,r),s.buffer}function f(e,t){var n=e&&e.length;return t|=0,n&&t+8<=n&&"string"!=typeof e[t]}function m(e,t,n,r){t|=0,r|=0;for(var i=0;i<8;i++)e[t++]=255&n[r++]}function h(e,t){return Array.prototype.slice.call(e,t,t+8)}function y(e,t,n){for(var r=t+8;r>t;)e[--r]=255&n,n/=256}function v(e,t,n){var r=t+8;for(n++;r>t;)e[--r]=255&-n^255,n/=256}function g(e,t,n){for(var r=t+8;t<r;)e[t++]=255&n,n/=256}function b(e,t,n){var r=t+8;for(n++;t<r;)e[t++]=255&-n^255,n/=256}u("Uint64BE",!0,!0),u("Int64BE",!0,!1),u("Uint64LE",!1,!0),u("Int64LE",!1,!1)}("string"!=typeof x.nodeName?x:t||{});var O={},P={128:{name:"ChapterDisplay",level:4,type:"m",multiple:!0,minver:1,webm:!0,description:"Contains all possible strings to use for the chapter display."},131:{name:"TrackType",level:3,type:"u",mandatory:!0,minver:1,range:"1-254",description:"A set of track types coded on 8 bits (1: video, 2: audio, 3: complex, 0x10: logo, 0x11: subtitle, 0x12: buttons, 0x20: control)."},133:{name:"ChapString",cppname:"ChapterString",level:5,type:"8",mandatory:!0,minver:1,webm:!0,description:"Contains the string to use as the chapter atom."},134:{name:"CodecID",level:3,type:"s",mandatory:!0,minver:1,description:"An ID corresponding to the codec, see the codec page for more info."},136:{name:"FlagDefault",cppname:"TrackFlagDefault",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if that track (audio, video or subs) SHOULD be active if no language found matches the user preference. (1 bit)"},137:{name:"ChapterTrackNumber",level:5,type:"u",mandatory:!0,multiple:!0,minver:1,webm:!1,range:"not 0",description:"UID of the Track to apply this chapter too. In the absense of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks. Absense of this element indicates that the Chapter should be applied to any currently used Tracks."},145:{name:"ChapterTimeStart",level:4,type:"u",mandatory:!0,minver:1,webm:!0,description:"Timestamp of the start of Chapter (not scaled)."},146:{name:"ChapterTimeEnd",level:4,type:"u",minver:1,webm:!1,description:"Timestamp of the end of Chapter (timestamp excluded, not scaled)."},150:{name:"CueRefTime",level:5,type:"u",mandatory:!0,minver:2,webm:!1,description:"Timestamp of the referenced Block."},151:{name:"CueRefCluster",level:5,type:"u",mandatory:!0,webm:!1,description:"The Position of the Cluster containing the referenced Block."},152:{name:"ChapterFlagHidden",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a chapter is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},16980:{name:"ContentCompAlgo",level:6,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The compression algorithm used. Algorithms that have been specified so far are: 0 - zlib,   3 - Header Stripping"},16981:{name:"ContentCompSettings",level:6,type:"b",minver:1,webm:!1,description:"Settings that might be needed by the decompressor. For Header Stripping (ContentCompAlgo=3), the bytes that were removed from the beggining of each frames of the track."},17026:{name:"DocType",level:1,type:"s",mandatory:!0,default:"matroska",minver:1,description:"A string that describes the type of document that follows this EBML header. 'matroska' in our case or 'webm' for webm files."},17029:{name:"DocTypeReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum DocType version an interpreter has to support to read this file."},17030:{name:"EBMLVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of EBML parser used to create the file."},17031:{name:"DocTypeVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of DocType interpreter used to create the file."},17476:{name:"SegmentFamily",level:2,type:"b",multiple:!0,minver:1,webm:!1,bytesize:16,description:"A randomly generated unique ID that all segments related to each other must use (128 bits)."},17505:{name:"DateUTC",level:2,type:"d",minver:1,description:"Date of the origin of timestamp (value 0), i.e. production date."},17540:{name:"TagDefault",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Indication to know if this is the default/original language to use for the given tag. (1 bit)"},17541:{name:"TagBinary",level:4,type:"b",minver:1,webm:!1,description:"The values of the Tag if it is binary. Note that this cannot be used in the same SimpleTag as TagString."},17543:{name:"TagString",level:4,type:"8",minver:1,webm:!1,description:"The value of the Element."},17545:{name:"Duration",level:2,type:"f",minver:1,range:"> 0",description:"Duration of the segment (based on TimecodeScale)."},17816:{name:"ChapterFlagEnabled",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Specify wether the chapter is enabled. It can be enabled/disabled by a Control Track. When disabled, the movie should skip all the content between the TimeStart and TimeEnd of this chapter (see flag notes). (1 bit)"},18016:{name:"FileMimeType",level:3,type:"s",mandatory:!0,minver:1,webm:!1,description:"MIME type of the file."},18017:{name:"FileUsedStartTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18018:{name:"FileUsedEndTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18037:{name:"FileReferral",level:3,type:"b",webm:!1,description:"A binary value that a track/codec can refer to when the attachment is needed."},20529:{name:"ContentEncodingOrder",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Tells when this modification was used during encoding/muxing starting with 0 and counting upwards. The decoder/demuxer has to start with the highest order number it finds and work its way down. This value has to be unique over all ContentEncodingOrder elements in the segment."},20530:{name:"ContentEncodingScope",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"A bit field that describes which elements have been modified in this way. Values (big endian) can be OR'ed. Possible values: 1 - all frame contents, 2 - the track's private data, 4 - the next ContentEncoding (next ContentEncodingOrder. Either the data inside ContentCompression and/or ContentEncryption)"},20531:{name:"ContentEncodingType",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"A value describing what kind of transformation has been done. Possible values: 0 - compression, 1 - encryption"},20532:{name:"ContentCompression",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the compression used. Must be present if the value of ContentEncodingType is 0 and absent otherwise. Each block must be decompressable even if no previous block is available in order not to prevent seeking."},20533:{name:"ContentEncryption",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the encryption used. Must be present if the value of ContentEncodingType is 1 and absent otherwise."},21368:{name:"CueBlockNumber",level:4,type:"u",minver:1,default:1,range:"not 0",description:"Number of the Block in the specified Cluster."},22100:{name:"ChapterStringUID",level:4,type:"8",mandatory:!1,minver:3,webm:!0,description:"A unique string ID to identify the Chapter. Use for WebVTT cue identifier storage."},22337:{name:"WritingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Writing application ("mkvmerge-0.3.3").'},22612:{name:"SilentTracks",cppname:"ClusterSilentTracks",level:2,type:"m",minver:1,webm:!1,description:"The list of tracks that are not used in that part of the stream. It is useful when using overlay tracks on seeking. Then you should decide what track to use."},25152:{name:"ContentEncoding",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Settings for one content encoding like compression or encryption."},25188:{name:"BitDepth",cppname:"AudioBitDepth",level:4,type:"u",minver:1,range:"not 0",description:"Bits per sample, mostly used for PCM."},25906:{name:"SignedElement",level:3,type:"b",multiple:!0,webm:!1,description:"An element ID whose data will be used to compute the signature."},26148:{name:"TrackTranslate",level:3,type:"m",multiple:!0,minver:1,webm:!1,description:"The track identification for the given Chapter Codec."},26897:{name:"ChapProcessCommand",cppname:"ChapterProcessCommand",level:5,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26914:{name:"ChapProcessTime",cppname:"ChapterProcessTime",level:6,type:"u",mandatory:!0,minver:1,webm:!1,description:"Defines when the process command should be handled (0: during the whole chapter, 1: before starting playback, 2: after playback of the chapter)."},26916:{name:"ChapterTranslate",level:2,type:"m",multiple:!0,minver:1,webm:!1,description:"A tuple of corresponding ID used by chapter codecs to represent this segment."},26931:{name:"ChapProcessData",cppname:"ChapterProcessData",level:6,type:"b",mandatory:!0,minver:1,webm:!1,description:"Contains the command information. The data should be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1, the data correspond to the binary DVD cell pre/post commands."},26948:{name:"ChapProcess",cppname:"ChapterProcess",level:4,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26965:{name:"ChapProcessCodecID",cppname:"ChapterProcessCodecID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Contains the type of the codec used for the processing. A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used. More codec IDs can be added later."},29555:{name:"Tag",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters."},29572:{name:"SegmentFilename",level:2,type:"8",minver:1,webm:!1,description:"A filename corresponding to this segment."},29766:{name:"AttachmentLink",cppname:"TrackAttachmentLink",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"The UID of an attachment that is used by this codec."},2459272:{name:"CodecName",level:3,type:"8",minver:1,description:"A human-readable string specifying the codec."},408125543:{name:"Segment",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"This element contains all other top-level (level 1) elements. Typically a Matroska file is composed of 1 segment."},17530:{name:"TagLanguage",level:4,type:"s",mandatory:!0,minver:1,webm:!1,default:"und",description:"Specifies the language of the tag specified, in the Matroska languages form."},17827:{name:"TagName",level:4,type:"8",mandatory:!0,minver:1,webm:!1,description:"The name of the Tag that is going to be stored."},26568:{name:"SimpleTag",cppname:"TagSimple",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contains general information about the target."},25542:{name:"TagAttachmentUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Attachment(s) the tags belong to. If the value is 0 at this level, the tags apply to all the attachments in the Segment."},25540:{name:"TagChapterUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Chapter(s) the tags belong to. If the value is 0 at this level, the tags apply to all chapters in the Segment."},25545:{name:"TagEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the EditionEntry(s) the tags belong to. If the value is 0 at this level, the tags apply to all editions in the Segment."},25541:{name:"TagTrackUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Track(s) the tags belong to. If the value is 0 at this level, the tags apply to all tracks in the Segment."},25546:{name:"TargetType",cppname:"TagTargetType",level:4,type:"s",minver:1,webm:!1,strong:"informational",description:'An  string that can be used to display the logical level of the target like "ALBUM", "TRACK", "MOVIE", "CHAPTER", etc (see TargetType).'},26826:{name:"TargetTypeValue",cppname:"TagTargetTypeValue",level:4,type:"u",minver:1,webm:!1,default:50,description:"A number to indicate the logical level of the target (see TargetType)."},25536:{name:"Targets",cppname:"TagTargets",level:3,type:"m",mandatory:!0,minver:1,webm:!1,description:"Contain all UIDs where the specified meta data apply. It is empty to describe everything in the segment."},307544935:{name:"Tags",level:1,type:"m",multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters. A list of valid tags can be found here."},17677:{name:"ChapProcessPrivate",cppname:"ChapterProcessPrivate",level:5,type:"b",minver:1,webm:!1,description:'Some optional data attached to the ChapProcessCodecID information. For ChapProcessCodecID = 1, it is the "DVD level" equivalent.'},17278:{name:"ChapCountry",cppname:"ChapterCountry",level:5,type:"s",multiple:!0,minver:1,webm:!1,description:"The countries corresponding to the string, same 2 octets as in Internet domains."},17276:{name:"ChapLanguage",cppname:"ChapterLanguage",level:5,type:"s",mandatory:!0,multiple:!0,minver:1,webm:!0,default:"eng",description:"The languages corresponding to the string, in the bibliographic ISO-639-2 form."},143:{name:"ChapterTrack",level:4,type:"m",minver:1,webm:!1,description:"List of tracks on which the chapter applies. If this element is not present, all tracks apply"},25539:{name:"ChapterPhysicalEquiv",level:4,type:"u",minver:1,webm:!1,description:'Specify the physical equivalent of this ChapterAtom like "DVD" (60) or "SIDE" (50), see complete list of values.'},28348:{name:"ChapterSegmentEditionUID",level:4,type:"u",minver:1,webm:!1,range:"not 0",description:"The EditionUID to play from the segment linked in ChapterSegmentUID."},28263:{name:"ChapterSegmentUID",level:4,type:"b",minver:1,webm:!1,range:">0",bytesize:16,description:"A segment to play in place of this chapter. Edition ChapterSegmentEditionUID should be used for this segment, otherwise no edition is used."},29636:{name:"ChapterUID",level:4,type:"u",mandatory:!0,minver:1,webm:!0,range:"not 0",description:"A unique ID to identify the Chapter."},182:{name:"ChapterAtom",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains the atom information to use as the chapter atom (apply to all tracks)."},17885:{name:"EditionFlagOrdered",level:3,type:"u",minver:1,webm:!1,default:0,range:"0-1",description:"Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)"},17883:{name:"EditionFlagDefault",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a flag is set (1) the edition should be used as the default one. (1 bit)"},17853:{name:"EditionFlagHidden",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If an edition is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},17852:{name:"EditionUID",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"A unique ID to identify the edition. It's useful for tagging an edition."},17849:{name:"EditionEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains all information about a segment edition."},272869232:{name:"Chapters",level:1,type:"m",minver:1,webm:!0,description:"A system to define basic menus and partition data. For more detailed information, look at the Chapters Explanation."},18094:{name:"FileUID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,range:"not 0",description:"Unique ID representing the file, as random as possible."},18012:{name:"FileData",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The data of the file."},18030:{name:"FileName",level:3,type:"8",mandatory:!0,minver:1,webm:!1,description:"Filename of the attached file."},18046:{name:"FileDescription",level:3,type:"8",minver:1,webm:!1,description:"A human-friendly name for the attached file."},24999:{name:"AttachedFile",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"An attached file."},423732329:{name:"Attachments",level:1,type:"m",minver:1,webm:!1,description:"Contain attached files."},235:{name:"CueRefCodecState",level:5,type:"u",webm:!1,default:0,description:"The position of the Codec State corresponding to this referenced element. 0 means that the data is taken from the initial Track Entry."},21343:{name:"CueRefNumber",level:5,type:"u",webm:!1,default:1,range:"not 0",description:"Number of the referenced Block of Track X in the specified Cluster."},219:{name:"CueReference",level:4,type:"m",multiple:!0,minver:2,webm:!1,description:"The Clusters containing the required referenced Blocks."},234:{name:"CueCodecState",level:4,type:"u",minver:2,webm:!1,default:0,description:"The position of the Codec State corresponding to this Cue element. 0 means that the data is taken from the initial Track Entry."},178:{name:"CueDuration",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The duration of the block according to the segment time base. If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues."},240:{name:"CueRelativePosition",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The relative position of the referenced block inside the cluster with 0 being the first possible position for an element inside that cluster.",position:"clusterRelative"},241:{name:"CueClusterPosition",level:4,type:"u",mandatory:!0,minver:1,description:"The position of the Cluster containing the required Block.",position:"segment"},247:{name:"CueTrack",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track for which a position is given."},183:{name:"CueTrackPositions",level:3,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contain positions for different tracks corresponding to the timestamp."},179:{name:"CueTime",level:3,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp according to the segment time base."},187:{name:"CuePoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains all information relative to a seek point in the segment."},475249515:{name:"Cues",level:1,type:"m",minver:1,description:'A top-level element to speed seeking access. All entries are local to the segment. Should be mandatory for non "live" streams.'},18406:{name:"ContentSigHashAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The hash algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - SHA1-160 2 - MD5"},18405:{name:"ContentSigAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - RSA"},18404:{name:"ContentSigKeyID",level:6,type:"b",minver:1,webm:!1,description:"This is the ID of the private key the data was signed with."},18403:{name:"ContentSignature",level:6,type:"b",minver:1,webm:!1,description:"A cryptographic signature of the contents."},18402:{name:"ContentEncKeyID",level:6,type:"b",minver:1,webm:!1,description:"For public key algorithms this is the ID of the public key the the data was encrypted with."},18401:{name:"ContentEncAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The encryption algorithm used. The value '0' means that the contents have not been encrypted but only signed. Predefined values: 1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 - AES"},28032:{name:"ContentEncodings",level:3,type:"m",minver:1,webm:!1,description:"Settings for several content encoding mechanisms like compression or encryption."},196:{name:"TrickMasterTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},199:{name:"TrickMasterTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},198:{name:"TrickTrackFlag",level:3,type:"u",divx:!0,default:0,description:"DivX trick track extenstions"},193:{name:"TrickTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},192:{name:"TrickTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},237:{name:"TrackJoinUID",level:5,type:"u",mandatory:!0,multiple:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of a track whose blocks are used to create this virtual track."},233:{name:"TrackJoinBlocks",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all tracks whose Blocks need to be combined to create this virtual track"},230:{name:"TrackPlaneType",level:6,type:"u",mandatory:!0,minver:3,webm:!1,description:"The kind of plane this track corresponds to (0: left eye, 1: right eye, 2: background)."},229:{name:"TrackPlaneUID",level:6,type:"u",mandatory:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of the track representing the plane."},228:{name:"TrackPlane",level:5,type:"m",mandatory:!0,multiple:!0,minver:3,webm:!1,description:"Contains a video plane track that need to be combined to create this 3D track"},227:{name:"TrackCombinePlanes",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all video plane tracks that need to be combined to create this 3D track"},226:{name:"TrackOperation",level:3,type:"m",minver:3,webm:!1,description:"Operation that needs to be applied on tracks to create this virtual track. For more details look at the Specification Notes on the subject."},32123:{name:"ChannelPositions",cppname:"AudioPosition",level:4,type:"b",webm:!1,description:"Table of horizontal angles for each successive channel, see appendix."},159:{name:"Channels",cppname:"AudioChannels",level:4,type:"u",mandatory:!0,minver:1,default:1,range:"not 0",description:"Numbers of channels in the track."},30901:{name:"OutputSamplingFrequency",cppname:"AudioOutputSamplingFreq",level:4,type:"f",minver:1,default:"Sampling Frequency",range:"> 0",description:"Real output sampling frequency in Hz (used for SBR techniques)."},181:{name:"SamplingFrequency",cppname:"AudioSamplingFreq",level:4,type:"f",mandatory:!0,minver:1,default:8e3,range:"> 0",description:"Sampling frequency in Hz."},225:{name:"Audio",cppname:"TrackAudio",level:3,type:"m",minver:1,description:"Audio settings."},2327523:{name:"FrameRate",cppname:"VideoFrameRate",level:4,type:"f",range:"> 0",strong:"Informational",description:"Number of frames per second.  only."},3126563:{name:"GammaValue",cppname:"VideoGamma",level:4,type:"f",webm:!1,range:"> 0",description:"Gamma Value."},3061028:{name:"ColourSpace",cppname:"VideoColourSpace",level:4,type:"b",minver:1,webm:!1,bytesize:4,description:"Same value as in AVI (32 bits)."},21683:{name:"AspectRatioType",cppname:"VideoAspectRatio",level:4,type:"u",minver:1,default:0,description:"Specify the possible modifications to the aspect ratio (0: free resizing, 1: keep aspect ratio, 2: fixed)."},21682:{name:"DisplayUnit",cppname:"VideoDisplayUnit",level:4,type:"u",minver:1,default:0,description:"How DisplayWidth & DisplayHeight should be interpreted (0: pixels, 1: centimeters, 2: inches, 3: Display Aspect Ratio)."},21690:{name:"DisplayHeight",cppname:"VideoDisplayHeight",level:4,type:"u",minver:1,default:"PixelHeight",range:"not 0",description:"Height of the video frames to display. The default value is only valid when DisplayUnit is 0."},21680:{name:"DisplayWidth",cppname:"VideoDisplayWidth",level:4,type:"u",minver:1,default:"PixelWidth",range:"not 0",description:"Width of the video frames to display. The default value is only valid when DisplayUnit is 0."},21725:{name:"PixelCropRight",cppname:"VideoPixelCropRight",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the right of the image."},21708:{name:"PixelCropLeft",cppname:"VideoPixelCropLeft",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the left of the image."},21691:{name:"PixelCropTop",cppname:"VideoPixelCropTop",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the top of the image."},21674:{name:"PixelCropBottom",cppname:"VideoPixelCropBottom",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the bottom of the image (for HDTV content)."},186:{name:"PixelHeight",cppname:"VideoPixelHeight",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Height of the encoded video frames in pixels."},176:{name:"PixelWidth",cppname:"VideoPixelWidth",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Width of the encoded video frames in pixels."},21433:{name:"OldStereoMode",level:4,type:"u",maxver:"0",webm:!1,divx:!1,description:"DEPRECATED, DO NOT USE. Bogus StereoMode value used in old versions of libmatroska. (0: mono, 1: right eye, 2: left eye, 3: both eyes)."},21440:{name:"AlphaMode",cppname:"VideoAlphaMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Alpha Video Mode. Presence of this element indicates that the BlockAdditional element could contain Alpha data."},21432:{name:"StereoMode",cppname:"VideoStereoMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Stereo-3D video mode (0: mono, 1: side by side (left eye is first), 2: top-bottom (right eye is first), 3: top-bottom (left eye is first), 4: checkboard (right is first), 5: checkboard (left is first), 6: row interleaved (right is first), 7: row interleaved (left is first), 8: column interleaved (right is first), 9: column interleaved (left is first), 10: anaglyph (cyan/red), 11: side by side (right eye is first), 12: anaglyph (green/magenta), 13 both eyes laced in one Block (left eye is first), 14 both eyes laced in one Block (right eye is first)) . There are some more details on 3D support in the Specification Notes."},154:{name:"FlagInterlaced",cppname:"VideoFlagInterlaced",level:4,type:"u",mandatory:!0,minver:2,webm:!0,default:0,range:"0-1",description:"Set if the video is interlaced. (1 bit)"},224:{name:"Video",cppname:"TrackVideo",level:3,type:"m",minver:1,description:"Video settings."},26277:{name:"TrackTranslateTrackID",level:4,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this track in the chapter codec data. The format depends on the ChapProcessCodecID used."},26303:{name:"TrackTranslateCodec",level:4,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},26364:{name:"TrackTranslateEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this translation applies. When not specified, it means for all editions found in the segment."},22203:{name:"SeekPreRoll",level:3,type:"u",mandatory:!0,multiple:!1,default:0,minver:4,webm:!0,description:"After a discontinuity, SeekPreRoll is the duration in nanoseconds of the data the decoder must decode before the decoded data is valid."},22186:{name:"CodecDelay",level:3,type:"u",multiple:!1,default:0,minver:4,webm:!0,description:"CodecDelay is The codec-built-in delay in nanoseconds. This value must be subtracted from each block timestamp in order to get the actual timestamp. The value should be small so the muxing of tracks with the same actual timestamp are in the same Cluster."},28587:{name:"TrackOverlay",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify that this track is an overlay track for the Track specified (in the u-integer). That means when this track has a gap (see SilentTracks) the overlay track should be used instead. The order of multiple TrackOverlay matters, the first one is the one that should be used. If not found it should be the second, etc."},170:{name:"CodecDecodeAll",level:3,type:"u",mandatory:!0,minver:2,webm:!1,default:1,range:"0-1",description:"The codec can decode potentially damaged data (1 bit)."},2536e3:{name:"CodecDownloadURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to download about the codec used."},3883072:{name:"CodecInfoURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to find information about the codec used."},3839639:{name:"CodecSettings",level:3,type:"8",webm:!1,description:"A string describing the encoding setting used."},25506:{name:"CodecPrivate",level:3,type:"b",minver:1,description:"Private data only known to the codec."},2274716:{name:"Language",cppname:"TrackLanguage",level:3,type:"s",minver:1,default:"eng",description:"Specifies the language of the track in the Matroska languages form."},21358:{name:"Name",cppname:"TrackName",level:3,type:"8",minver:1,description:"A human-readable track name."},21998:{name:"MaxBlockAdditionID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The maximum value of BlockAdditions for this track."},21375:{name:"TrackOffset",level:3,type:"i",webm:!1,default:0,description:"A value to add to the Block's Timestamp. This can be used to adjust the playback offset of a track."},2306383:{name:"TrackTimecodeScale",level:3,type:"f",mandatory:!0,minver:1,maxver:"3",webm:!1,default:1,range:"> 0",description:"DEPRECATED, DO NOT USE. The scale to apply on this track to work at normal speed in relation with other tracks (mostly used to adjust video speed when the audio length differs)."},2313850:{name:"DefaultDecodedFieldDuration",cppname:"TrackDefaultDecodedFieldDuration",level:3,type:"u",minver:4,range:"not 0",description:"The period in nanoseconds (not scaled by TimcodeScale)\nbetween two successive fields at the output of the decoding process (see the notes)"},2352003:{name:"DefaultDuration",cppname:"TrackDefaultDuration",level:3,type:"u",minver:1,range:"not 0",description:"Number of nanoseconds (not scaled via TimecodeScale) per frame ('frame' in the Matroska sense -- one element put into a (Simple)Block)."},28152:{name:"MaxCache",cppname:"TrackMaxCache",level:3,type:"u",minver:1,webm:!1,description:"The maximum cache size required to store referenced frames in and the current frame. 0 means no cache is needed."},28135:{name:"MinCache",cppname:"TrackMinCache",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The minimum number of frames a player should be able to cache during playback. If set to 0, the reference pseudo-cache system is not used."},156:{name:"FlagLacing",cppname:"TrackFlagLacing",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if the track may contain blocks using lacing. (1 bit)"},21930:{name:"FlagForced",cppname:"TrackFlagForced",level:3,type:"u",mandatory:!0,minver:1,default:0,range:"0-1",description:"Set if that track MUST be active during playback. There can be many forced track for a kind (audio, video or subs), the player should select the one which language matches the user preference or the default + forced track. Overlay MAY happen between a forced and non-forced track of the same kind. (1 bit)"},185:{name:"FlagEnabled",cppname:"TrackFlagEnabled",level:3,type:"u",mandatory:!0,minver:2,webm:!0,default:1,range:"0-1",description:"Set if the track is usable. (1 bit)"},29637:{name:"TrackUID",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"A unique ID to identify the Track. This should be kept the same when making a direct stream copy of the Track to another file."},215:{name:"TrackNumber",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track number as used in the Block Header (using more than 127 tracks is not encouraged, though the design allows an unlimited number)."},174:{name:"TrackEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Describes a track with all elements."},374648427:{name:"Tracks",level:1,type:"m",multiple:!0,minver:1,description:"A top-level block of information with many tracks described."},175:{name:"EncryptedBlock",level:2,type:"b",multiple:!0,webm:!1,description:"Similar to EncryptedBlock Structure)"},202:{name:"ReferenceTimeCode",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},201:{name:"ReferenceOffset",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},200:{name:"ReferenceFrame",level:3,type:"m",multiple:!1,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},207:{name:"SliceDuration",level:5,type:"u",default:0,description:"The (scaled) duration to apply to the element."},206:{name:"Delay",cppname:"SliceDelay",level:5,type:"u",default:0,description:"The (scaled) delay to apply to the element."},203:{name:"BlockAdditionID",cppname:"SliceBlockAddID",level:5,type:"u",default:0,description:"The ID of the BlockAdditional element (0 is the main Block)."},205:{name:"FrameNumber",cppname:"SliceFrameNumber",level:5,type:"u",default:0,description:"The number of the frame to generate from this lace with this delay (allow you to generate many frames from the same Block/Frame)."},204:{name:"LaceNumber",cppname:"SliceLaceNumber",level:5,type:"u",minver:1,default:0,divx:!1,description:"The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc). While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},232:{name:"TimeSlice",level:4,type:"m",multiple:!0,minver:1,divx:!1,description:"Contains extra time information about the data contained in the Block. While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},142:{name:"Slices",level:3,type:"m",minver:1,divx:!1,description:"Contains slices description."},30114:{name:"DiscardPadding",level:3,type:"i",minver:4,webm:!0,description:"Duration in nanoseconds of the silent data added to the Block (padding at the end of the Block for positive value, at the beginning of the Block for negative value). The duration of DiscardPadding is not calculated in the duration of the TrackEntry and should be discarded during playback."},164:{name:"CodecState",level:3,type:"b",minver:2,webm:!1,description:"The new codec state to use. Data interpretation is private to the codec. This information should always be referenced by a seek entry."},253:{name:"ReferenceVirtual",level:3,type:"i",webm:!1,description:"Relative position of the data that should be in position of the virtual block."},251:{name:"ReferenceBlock",level:3,type:"i",multiple:!0,minver:1,description:"Timestamp of another frame used as a reference (ie: B or P frame). The timestamp is relative to the block it's attached to."},250:{name:"ReferencePriority",cppname:"FlagReferenced",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"This frame is referenced and has the specified cache priority. In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced."},155:{name:"BlockDuration",level:3,type:"u",minver:1,default:"TrackDuration",description:'The duration of the Block (based on TimecodeScale). This element is mandatory when DefaultDuration is set for the track (but can be omitted as other default values). When not written and with no DefaultDuration, the value is assumed to be the difference between the timestamp of this Block and the timestamp of the next Block in "display" order (not coding order). This element can be useful at the end of a Track (as there is not other Block available), or when there is a break in a track like for subtitle tracks. When set to 0 that means the frame is not a keyframe.'},165:{name:"BlockAdditional",level:5,type:"b",mandatory:!0,minver:1,webm:!1,description:"Interpreted by the codec as it wishes (using the BlockAddID)."},238:{name:"BlockAddID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"An ID to identify the BlockAdditional level."},166:{name:"BlockMore",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contain the BlockAdditional and some parameters."},30113:{name:"BlockAdditions",level:3,type:"m",minver:1,webm:!1,description:"Contain additional blocks to complete the main one. An EBML parser that has no knowledge of the Block structure could still see and use/skip these data."},162:{name:"BlockVirtual",level:3,type:"b",webm:!1,description:"A Block with no data. It must be stored in the stream at the place the real Block should be in display order. (see Block Virtual)"},161:{name:"Block",level:3,type:"b",mandatory:!0,minver:1,description:"Block containing the actual data to be rendered and a timestamp relative to the Cluster Timecode. (see Block Structure)"},160:{name:"BlockGroup",level:2,type:"m",multiple:!0,minver:1,description:"Basic container of information containing a single Block or BlockVirtual, and information specific to that Block/VirtualBlock."},163:{name:"SimpleBlock",level:2,type:"b",multiple:!0,minver:2,webm:!0,divx:!0,description:"Similar to SimpleBlock Structure"},171:{name:"PrevSize",cppname:"ClusterPrevSize",level:2,type:"u",minver:1,description:"Size of the previous Cluster, in octets. Can be useful for backward playing.",position:"prevCluster"},167:{name:"Position",cppname:"ClusterPosition",level:2,type:"u",minver:1,webm:!1,description:"The Position of the Cluster in the segment (0 in live broadcast streams). It might help to resynchronise offset on damaged streams.",position:"segment"},22743:{name:"SilentTrackNumber",cppname:"ClusterSilentTrackNumber",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"One of the track number that are not used from now on in the stream. It could change later if not specified as silent in a further Cluster."},231:{name:"Timecode",cppname:"ClusterTimecode",level:2,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp of the cluster (based on TimecodeScale)."},524531317:{name:"Cluster",level:1,type:"m",multiple:!0,minver:1,description:"The lower level element containing the (monolithic) Block structure."},19840:{name:"MuxingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Muxing application or library ("libmatroska-0.4.3").'},31657:{name:"Title",level:2,type:"8",minver:1,webm:!1,description:"General name of the segment."},2807730:{name:"TimecodeScaleDenominator",level:2,type:"u",mandatory:!0,minver:4,default:"1000000000",description:"Timestamp scale numerator, see TimecodeScale."},2807729:{name:"TimecodeScale",level:2,type:"u",mandatory:!0,minver:1,default:"1000000",description:"Timestamp scale in nanoseconds (1.000.000 means all timestamps in the segment are expressed in milliseconds)."},27045:{name:"ChapterTranslateID",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this segment in the chapter codec data. The format depends on the ChapProcessCodecID used."},27071:{name:"ChapterTranslateCodec",level:3,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},27132:{name:"ChapterTranslateEditionUID",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this correspondance applies. When not specified, it means for all editions found in the segment."},4096955:{name:"NextFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the next segment."},4110627:{name:"NextUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the next chained segment (128 bits)."},3965867:{name:"PrevFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the previous segment."},3979555:{name:"PrevUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the previous chained segment (128 bits)."},29604:{name:"SegmentUID",level:2,type:"b",minver:1,webm:!1,range:"not 0",bytesize:16,description:"A randomly generated unique ID to identify the current segment between many others (128 bits)."},357149030:{name:"Info",level:1,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains miscellaneous general information and statistics on the file."},21420:{name:"SeekPosition",level:3,type:"u",mandatory:!0,minver:1,description:"The position of the element in the segment in octets (0 = first level 1 element).",position:"segment"},21419:{name:"SeekID",level:3,type:"b",mandatory:!0,minver:1,description:"The binary ID corresponding to the element name.",type2:"ebmlID"},19899:{name:"Seek",cppname:"SeekPoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains a single seek entry to an EBML element."},290298740:{name:"SeekHead",cppname:"SeekHeader",level:1,type:"m",multiple:!0,minver:1,description:"Contains the position of other level 1 elements."},32379:{name:"SignatureElementList",level:2,type:"m",multiple:!0,webm:!1,i:"Cluster|Block|BlockAdditional",description:"A list consists of a number of consecutive elements that represent one case where data is used in signature. Ex:  means that the BlockAdditional of all Blocks in all Clusters is used for encryption."},32347:{name:"SignatureElements",level:1,type:"m",webm:!1,description:"Contains elements that will be used to compute the signature."},32437:{name:"Signature",level:1,type:"b",webm:!1,description:"The signature of the data (until a new."},32421:{name:"SignaturePublicKey",level:1,type:"b",webm:!1,description:"The public key to use with the algorithm (in the case of a PKI-based signature)."},32410:{name:"SignatureHash",level:1,type:"u",webm:!1,description:"Hash algorithm used (1=SHA1-160, 2=MD5)."},32394:{name:"SignatureAlgo",level:1,type:"u",webm:!1,description:"Signature algorithm used (1=RSA, 2=elliptic)."},458458727:{name:"SignatureSlot",level:-1,type:"m",multiple:!0,webm:!1,description:"Contain signature of some (coming) elements in the stream."},191:{name:"CRC-32",level:-1,type:"b",minver:1,webm:!1,description:"The CRC is computed on all the data of the Master element it's in. The CRC element should be the first in it's parent master for easier reading. All level 1 elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian",crc:!0},236:{name:"Void",level:-1,type:"b",minver:1,description:"Used to void damaged data, to avoid unexpected behaviors when using damaged data. The content is discarded. Also used to reserve space in a sub-element for later use."},17139:{name:"EBMLMaxSizeLength",level:1,type:"u",mandatory:!0,default:8,minver:1,description:"The maximum length of the sizes you'll find in this file (8 or less in Matroska). This does not override the element size indicated at the beginning of an element. Elements that have an indicated size which is larger than what is allowed by EBMLMaxSizeLength shall be considered invalid."},17138:{name:"EBMLMaxIDLength",level:1,type:"u",mandatory:!0,default:4,minver:1,description:"The maximum length of the IDs you'll find in this file (4 or less in Matroska)."},17143:{name:"EBMLReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum EBML version a parser has to support to read this file."},440786851:{name:"EBML",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"Set the EBML characteristics of the data to follow. Each EBML document has to start with this."}},M={},V={byEbmlID:P,byName:M};for(var U in P){M[P[U].name.replace("-","_")]=parseInt(U,10)}var L=V;Object.defineProperty(O,"__esModule",{value:!0});var j=D,N=D,F=L.byEbmlID,z=function(){function e(){this._schema=F,this._buffers=[],this._stack=[]}return e.prototype.encode=function(e){var t=this;return j.concat(e.reduce((function(e,n){return e.concat(t.encodeChunk(n))}),[])).buffer},e.prototype.encodeChunk=function(e){return"m"===e.type?e.isEnd?this.endTag(e):this.startTag(e):this.writeTag(e),this.flush()},e.prototype.flush=function(){var e=this._buffers;return this._buffers=[],e},e.prototype.getSchemaInfo=function(e){for(var t=Object.keys(this._schema).map(Number),n=0;n<t.length;n++){var r=t[n];if(this._schema[r].name===e)return new N.Buffer(r.toString(16),"hex")}return null},e.prototype.writeTag=function(e){var t=e.name,n=this.getSchemaInfo(t),r=e.data;if(null==n)throw new Error("No schema entry found for "+t);var i=j.encodeTag(n,r);this._stack.length>0?this._stack[this._stack.length-1].children.push({tagId:n,elm:e,children:[],data:i}):this._buffers=this._buffers.concat(i)},e.prototype.startTag=function(e){var t=e.name,n=this.getSchemaInfo(t);if(null==n)throw new Error("No schema entry found for "+t);if(e.unknownSize){var r=j.encodeTag(n,new N.Buffer(0),e.unknownSize);this._buffers=this._buffers.concat(r)}else{var i={tagId:n,elm:e,children:[],data:null};this._stack.length>0&&this._stack[this._stack.length-1].children.push(i),this._stack.push(i)}},e.prototype.endTag=function(e){e.name;var t=this._stack.pop();if(null==t)throw new Error("EBML structure is broken");if(t.elm.name!==e.name)throw new Error("EBML structure is broken");var n=t.children.reduce((function(e,t){if(null===t.data)throw new Error("EBML structure is broken");return e.concat(t.data)}),[]),r=j.concat(n);"m"===t.elm.type?t.data=j.encodeTag(t.tagId,r,t.elm.unknownSize):t.data=j.encodeTag(t.tagId,r),this._stack.length<1&&(this._buffers=this._buffers.concat(t.data))},e}();O.default=z;for(var W={},q={byteLength:function(e){var t=K(e),n=t[0],r=t[1];return 3*(n+r)/4-r},toByteArray:function(e){var t,n,r=K(e),i=r[0],o=r[1],a=new X(function(e,t,n){return 3*(t+n)/4-n}(0,i,o)),s=0,l=o>0?i-4:i;for(n=0;n<l;n+=4)t=G[e.charCodeAt(n)]<<18|G[e.charCodeAt(n+1)]<<12|G[e.charCodeAt(n+2)]<<6|G[e.charCodeAt(n+3)],a[s++]=t>>16&255,a[s++]=t>>8&255,a[s++]=255&t;2===o&&(t=G[e.charCodeAt(n)]<<2|G[e.charCodeAt(n+1)]>>4,a[s++]=255&t);1===o&&(t=G[e.charCodeAt(n)]<<10|G[e.charCodeAt(n+1)]<<4|G[e.charCodeAt(n+2)]>>2,a[s++]=t>>8&255,a[s++]=255&t);return a},fromByteArray:function(e){for(var t,n=e.length,r=n%3,i=[],o=16383,a=0,s=n-r;a<s;a+=o)i.push(Q(e,a,a+o>s?s:a+o));1===r?(t=e[n-1],i.push(H[t>>2]+H[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],i.push(H[t>>10]+H[t>>4&63]+H[t<<2&63]+"="));return i.join("")}},H=[],G=[],X="undefined"!=typeof Uint8Array?Uint8Array:Array,Y="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Z=0,J=Y.length;Z<J;++Z)H[Z]=Y[Z],G[Y.charCodeAt(Z)]=Z;function K(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function Q(e,t,n){for(var r,i,o=[],a=t;a<n;a+=3)r=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(H[(i=r)>>18&63]+H[i>>12&63]+H[i>>6&63]+H[63&i]);return o.join("")}G["-".charCodeAt(0)]=62,G["_".charCodeAt(0)]=63;var $={
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
read:function(e,t,n,r,i){var o,a,s=8*i-r-1,l=(1<<s)-1,u=l>>1,c=-7,d=n?i-1:0,p=n?-1:1,f=e[t+d];for(d+=p,o=f&(1<<-c)-1,f>>=-c,c+=s;c>0;o=256*o+e[t+d],d+=p,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+e[t+d],d+=p,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,r),o-=u}return(f?-1:1)*a*Math.pow(2,o-r)},write:function(e,t,n,r,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,d=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:o-1,m=r?1:-1,h=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+d>=1?p/l:p*Math.pow(2,1-d))*l>=2&&(a++,l/=2),a+d>=c?(s=0,a=c):a+d>=1?(s=(t*l-1)*Math.pow(2,i),a+=d):(s=t*Math.pow(2,d-1)*Math.pow(2,i),a=0));i>=8;e[n+f]=255&s,f+=m,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[n+f]=255&a,f+=m,a/=256,u-=8);e[n+f-m]|=128*h}};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
!function(e){var t=q,n=$,r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=a,e.SlowBuffer=function(e){+e!=e&&(e=0);return a.alloc(+e)},e.INSPECT_MAX_BYTES=50;var i=2147483647;function o(e){if(e>i)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,a.prototype),t}function a(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return u(e)}return s(e,t,n)}function s(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!a.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|f(e,t),r=o(n),i=r.write(e,t);i!==n&&(r=r.slice(0,i));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(j(e,Uint8Array)){var t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return c(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(j(e,ArrayBuffer)||e&&j(e.buffer,ArrayBuffer))return d(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(j(e,SharedArrayBuffer)||e&&j(e.buffer,SharedArrayBuffer)))return d(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return a.from(r,t,n);var i=function(e){if(a.isBuffer(e)){var t=0|p(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||N(e.length)?o(0):c(e);if("Buffer"===e.type&&Array.isArray(e.data))return c(e.data)}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return a.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return l(e),o(e<0?0:0|p(e))}function c(e){for(var t=e.length<0?0:0|p(e.length),n=o(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function d(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,a.prototype),r}function p(e){if(e>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return 0|e}function f(e,t){if(a.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||j(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(e).length;default:if(i)return r?-1:V(e).length;t=(""+t).toLowerCase(),i=!0}}function m(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return _(this,t,n);case"latin1":case"binary":return R(this,t,n);case"base64":return C(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function h(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function y(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),N(n=+n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=a.from(t,r)),a.isBuffer(t))return 0===t.length?-1:v(e,t,n,r,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):v(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,n,r,i){var o,a=1,s=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=n;o<s;o++)if(u(e,o)===u(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===l)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+l>s&&(n=s-l),o=n;o>=0;o--){for(var d=!0,p=0;p<l;p++)if(u(e,o+p)!==u(t,p)){d=!1;break}if(d)return o}return-1}function g(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(N(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return L(V(t,e.length-n),e,n,r)}function w(e,t,n,r){return L(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function k(e,t,n,r){return L(U(t),e,n,r)}function T(e,t,n,r){return L(function(e,t){for(var n,r,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=(n=e.charCodeAt(a))>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function C(e,n,r){return 0===n&&r===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(n,r))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,a,s,l,u=e[i],c=null,d=u>239?4:u>223?3:u>191?2:1;if(i+d<=n)switch(d){case 1:u<128&&(c=u);break;case 2:128==(192&(o=e[i+1]))&&(l=(31&u)<<6|63&o)>127&&(c=l);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(l=(15&u)<<12|(63&o)<<6|63&a)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(l=(15&u)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,d=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=d}return function(e){var t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=S));return n}(r)}e.kMaxLength=i,a.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(n){return!1}}(),a.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(a.prototype,"parent",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.buffer}}),Object.defineProperty(a.prototype,"offset",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.byteOffset}}),a.poolSize=8192,a.from=function(e,t,n){return s(e,t,n)},Object.setPrototypeOf(a.prototype,Uint8Array.prototype),Object.setPrototypeOf(a,Uint8Array),a.alloc=function(e,t,n){return function(e,t,n){return l(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},a.allocUnsafe=function(e){return u(e)},a.allocUnsafeSlow=function(e){return u(e)},a.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==a.prototype},a.compare=function(e,t){if(j(e,Uint8Array)&&(e=a.from(e,e.offset,e.byteLength)),j(t,Uint8Array)&&(t=a.from(t,t.offset,t.byteLength)),!a.isBuffer(e)||!a.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return a.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=a.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(j(o,Uint8Array))i+o.length>r.length?a.from(o).copy(r,i):Uint8Array.prototype.set.call(r,o,i);else{if(!a.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i)}i+=o.length}return r},a.byteLength=f,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},a.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},a.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},a.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?E(this,0,e):m.apply(this,arguments)},a.prototype.toLocaleString=a.prototype.toString,a.prototype.equals=function(e){if(!a.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===a.compare(this,e)},a.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(t+=" ... "),"<Buffer "+t+">"},r&&(a.prototype[r]=a.prototype.inspect),a.prototype.compare=function(e,t,n,r,i){if(j(e,Uint8Array)&&(e=a.from(e,e.offset,e.byteLength)),!a.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),l=Math.min(o,s),u=this.slice(r,i),c=e.slice(t,n),d=0;d<l;++d)if(u[d]!==c[d]){o=u[d],s=c[d];break}return o<s?-1:s<o?1:0},a.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},a.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},a.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},a.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":case"latin1":case"binary":return w(this,e,t,n);case"base64":return k(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function _(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function I(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=F[e[o]];return i}function A(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length-1;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function B(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,n,r,i,o){if(!a.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function x(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function O(e,t,r,i,o){return t=+t,r>>>=0,o||x(e,0,r,4),n.write(e,t,r,i,23,4),r+4}function P(e,t,r,i,o){return t=+t,r>>>=0,o||x(e,0,r,8),n.write(e,t,r,i,52,8),r+8}a.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,a.prototype),r},a.prototype.readUintLE=a.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||B(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},a.prototype.readUintBE=a.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||B(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},a.prototype.readUint8=a.prototype.readUInt8=function(e,t){return e>>>=0,t||B(e,1,this.length),this[e]},a.prototype.readUint16LE=a.prototype.readUInt16LE=function(e,t){return e>>>=0,t||B(e,2,this.length),this[e]|this[e+1]<<8},a.prototype.readUint16BE=a.prototype.readUInt16BE=function(e,t){return e>>>=0,t||B(e,2,this.length),this[e]<<8|this[e+1]},a.prototype.readUint32LE=a.prototype.readUInt32LE=function(e,t){return e>>>=0,t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},a.prototype.readUint32BE=a.prototype.readUInt32BE=function(e,t){return e>>>=0,t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},a.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||B(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},a.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||B(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},a.prototype.readInt8=function(e,t){return e>>>=0,t||B(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},a.prototype.readInt16LE=function(e,t){e>>>=0,t||B(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(e,t){e>>>=0,t||B(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(e,t){return e>>>=0,t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},a.prototype.readInt32BE=function(e,t){return e>>>=0,t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},a.prototype.readFloatLE=function(e,t){return e>>>=0,t||B(e,4,this.length),n.read(this,e,!0,23,4)},a.prototype.readFloatBE=function(e,t){return e>>>=0,t||B(e,4,this.length),n.read(this,e,!1,23,4)},a.prototype.readDoubleLE=function(e,t){return e>>>=0,t||B(e,8,this.length),n.read(this,e,!0,52,8)},a.prototype.readDoubleBE=function(e,t){return e>>>=0,t||B(e,8,this.length),n.read(this,e,!1,52,8)},a.prototype.writeUintLE=a.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},a.prototype.writeUintBE=a.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},a.prototype.writeUint8=a.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,1,255,0),this[t]=255&e,t+1},a.prototype.writeUint16LE=a.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},a.prototype.writeUint16BE=a.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},a.prototype.writeUint32LE=a.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},a.prototype.writeUint32BE=a.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},a.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var i=Math.pow(2,8*n-1);D(this,e,t,n,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},a.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var i=Math.pow(2,8*n-1);D(this,e,t,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},a.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},a.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},a.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},a.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},a.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},a.prototype.writeFloatLE=function(e,t,n){return O(this,e,t,!0,n)},a.prototype.writeFloatBE=function(e,t,n){return O(this,e,t,!1,n)},a.prototype.writeDoubleLE=function(e,t,n){return P(this,e,t,!0,n)},a.prototype.writeDoubleBE=function(e,t,n){return P(this,e,t,!1,n)},a.prototype.copy=function(e,t,n,r){if(!a.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),i},a.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){var i=e.charCodeAt(0);("utf8"===r&&i<128||"latin1"===r)&&(e=i)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=a.isBuffer(e)?e:a.from(e,r),l=s.length;if(0===l)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<n-t;++o)this[o+t]=s[o%l]}return this};var M=/[^+/0-9A-Za-z-_]/g;function V(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function U(e){return t.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(M,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function L(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function j(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function N(e){return e!=e}var F=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,i=0;i<16;++i)t[r+i]=e[n]+e[i];return t}()}(W);var ee={readVint:function(e,t){t=t||0;for(var n=1;n<=8&&!(e[t]>=Math.pow(2,8-n));n++);if(n>8)throw new Error("Unrepresentable length: "+n+" "+e.toString("hex",t,t+n));if(t+n>e.length)return null;for(var r=e[t]&(1<<8-n)-1,i=1;i<n;i++){if(7===i&&r>=Math.pow(2,45)&&e[t+7]>0)return{length:n,value:-1};r*=Math.pow(2,8),r+=e[t+i]}return{length:n,value:r}},writeVint:function(e){if(e<0||e>Math.pow(2,53))throw new Error("Unrepresentable value: "+e);for(var t=1;t<=8&&!(e<Math.pow(2,7*t)-1);t++);for(var n=new Buffer(t),r=1;r<=t;r++){var i=255&e;n[t-r]=i,e-=i,e/=Math.pow(2,8)}return n[0]=n[0]|1<<8-t,n}},te=function(e,t,n){t=t||0;for(var r=1;r<=8&&!(e[t]>=Math.pow(2,8-r));r++);if(r>8)throw new Error("Unrepresentable length: "+r+" "+e.toString("hex",t,t+r));if(t+r>e.length)return null;var i,o=e[t]&(1<<8-r)-1;for(i=1;i<r;i++){if(7===i&&o>=Math.pow(2,45)&&e[t+7]>0)return{length:r,value:-1};o*=Math.pow(2,8),o+=e[t+i]}return n&&(o-=Math.pow(2,7*r-1)-1),{length:r,value:o}};function ne(e){this.buffer=e,this.offset=0}ne.prototype.nextInt16BE=function(){var e=this.buffer.readInt16BE(this.offset);return this.offset+=2,e},ne.prototype.nextUInt8=function(){var e=this.buffer.readUInt8(this.offset);return this.offset+=1,e},ne.prototype.nextUIntV=function(){var e=te(this.buffer,this.offset);return this.offset+=e.length,e.value},ne.prototype.nextIntV=function(){var e=te(this.buffer,this.offset,!0);return this.offset+=e.length,e.value},ne.prototype.nextBuffer=function(e){var t=e?this.buffer.slice(this.offset,this.offset+e):this.buffer.slice(this.offset);return this.offset+=e||this.length,t},Object.defineProperty(ne.prototype,"length",{get:function(){return this.buffer.length-this.offset}});var re=ne,ie=function(e){var t={},n=new re(e);t.trackNumber=n.nextUIntV(),t.timecode=n.nextInt16BE();var r=n.nextUInt8();t.invisible=!!(8&r),t.keyframe=!!(128&r),t.discardable=!!(1&r);var i=(6&r)>>1;return t.frames=function(e,t){if(!t)return[e.nextBuffer()];var n,r,i=[],o=e.nextUInt8()+1;if(2===t){if(e.length%o!=0)throw new Error("Fixed-Size Lacing Error");for(r=e.length/o,n=0;n<o;n++)i.push(e.nextBuffer(r));return i}var a=[];if(1===t)for(n=0;n<o-1;n++){var s;r=0;do{r+=s=e.nextUInt8()}while(255===s);a.push(r)}else if(3===t)for(r=e.nextUIntV(),a.push(r),n=1;n<o-1;n++)r+=e.nextIntV(),a.push(r);for(n=0;n<o-1;n++)i.push(e.nextBuffer(a[n]));return i.push(e.nextBuffer()),i}(n,i),t};!function(e){Object.defineProperty(e,"__esModule",{value:!0});var t=x,n=O,r=W,i=ee,o=ie;function a(t){return t.reduce((function(t,n){return"b"!==n.type||"SimpleBlock"!==n.name?t:e.ebmlBlock(n.data).frames.some((function(e){return"9d012a"===e.slice(3,6).toString("hex")}))?t.concat(n):t}),[])}function s(t){var n=l("VP8 ",t);return l("RIFF",m([new e.Buffer("WEBP","ascii"),n]))}function l(t,n){var r=new e.Buffer(4);return r.writeUInt32LE(n.byteLength,0),m([new e.Buffer(t.substr(0,4),"ascii"),r,n,new e.Buffer(n.byteLength%2==0?0:1)])}function u(e,t){for(var n=-1,r=0;r<t.length;r++){var i=t[r];if(i.name===e){if("m"!==i.type)return void t.splice(r,1);if(i.isEnd){if(-1==n)throw new Error("Detected "+e+" closing element before finding the start");return void t.splice(n,r-n+1)}n=r}}}function c(e,t){for(var n=[],r=-1,i=0;i<t.length;i++){var o=t[i];if(o.name===e){if("m"!==o.type){n.push(t[i]);break}if(o.isEnd){if(-1==r)throw new Error("Detected "+e+" closing element before finding the start");n=t.slice(r,i+1);break}r=i}}return n}function d(e){var t=new n.default;return e.reduce((function(e,n){return e.concat(t.encode([n]))}),[]).reduce((function(e,t){return e+t.byteLength}),0)}function p(t,n,r){var i=r.duration,o=r.clusterPtrs,a=r.cues,s=t.slice(0);if("number"==typeof i){var l=!1;s.forEach((function(e){"f"===e.type&&"Duration"===e.name&&(l=!0,e.data=v(i,8))})),l||f(s,"Info",[{name:"Duration",type:"f",data:v(i,8)}])}Array.isArray(a)&&f(s,"Cues",function(e,t){var n=[];return e.forEach((function(e){var r=e.CueTrack,i=e.CueClusterPosition,o=e.CueTime;n.push({name:"CuePoint",type:"m",isEnd:!1}),n.push({name:"CueTime",type:"u",data:h(o)}),n.push({name:"CueTrackPositions",type:"m",isEnd:!1}),n.push({name:"CueTrack",type:"u",data:h(r)}),n.push({name:"CueClusterPosition",type:"u",data:h(i+t)}),n.push({name:"CueTrackPositions",type:"m",isEnd:!0}),n.push({name:"CuePoint",type:"m",isEnd:!0})})),n}(a,n));var u=[];return Array.isArray(o)&&(console.warn("append cluster pointers to seekhead is deprecated. please use cues"),u=function(t,n){var r=[];return t.forEach((function(t){r.push({name:"Seek",type:"m",isEnd:!1}),r.push({name:"SeekID",type:"b",data:new e.Buffer([31,67,182,117])}),r.push({name:"SeekPosition",type:"u",data:h(t+n)}),r.push({name:"Seek",type:"m",isEnd:!0})})),r}(o,n)),f(s,"SeekHead",u,!0),s}function f(e,t,n,r){void 0===r&&(r=!1);for(var i=-1,o=0;o<e.length;o++){var a=e[o];if("m"===a.type&&a.name===t&&!1===a.isEnd){i=o;break}}i>=0?Array.prototype.splice.apply(e,[i+1,0].concat(n)):r?[].concat([{name:t,type:"m",isEnd:!1}],n,[{name:t,type:"m",isEnd:!0}]).reverse().forEach((function(t){e.unshift(t)})):(e.push({name:t,type:"m",isEnd:!1}),n.forEach((function(t){e.push(t)})),e.push({name:t,type:"m",isEnd:!0}))}function m(t){for(var n=0,r=0;n<t.length;++n)r+=t[n].length;var i=e.Buffer.allocUnsafe(r),o=0;for(n=0;n<t.length;++n){var a=t[n];a.copy(i,o),o+=a.length}return i}function h(n){for(var r=1;n>=Math.pow(2,8*r);r++);if(r>=7)return console.warn("7bit or more bigger uint not supported."),new t.Uint64BE(n).toBuffer();var i=new e.Buffer(r);return i.writeUIntBE(n,0,r),i}function y(n){for(var r=1;n>=Math.pow(2,8*r);r++);if(r>=7)return console.warn("7bit or more bigger uint not supported."),new t.Int64BE(n).toBuffer();var i=new e.Buffer(r);return i.writeIntBE(n,0,r),i}function v(t,n){var r;if(void 0===n&&(n=8),8===n)return(r=new e.Buffer(8)).writeDoubleBE(t,0),r;if(4===n)return(r=new e.Buffer(4)).writeFloatBE(t,0),r;throw new Error("float type bits must 4bytes or 8bytes")}e.Buffer=r.Buffer,e.readVint=i.readVint,e.writeVint=i.writeVint,e.ebmlBlock=o,e.readBlock=function(t){return e.ebmlBlock(new e.Buffer(t))},e.encodeTag=function(t,n,r){return void 0===r&&(r=!1),m([t,r?new e.Buffer("01ffffffffffffff","hex"):e.writeVint(n.length),n])},e.WebPFrameFilter=function(t){return a(t).reduce((function(t,n){return e.ebmlBlock(n.data).frames.reduce((function(e,t){var n=s(t),r=new Blob([n],{type:"image/webp"});return e.concat(r)}),t)}),[])},e.WebPBlockFilter=a,e.VP8BitStreamToRiffWebPBuffer=s,e.createRIFFChunk=l,e.makeMetadataSeekable=function(t,r,i){var o=c("EBML",t),a=d(o)+12,s=t[t.length-1].dataEnd-a,l=c("Info",t);u("Duration",l),l.splice(1,0,{name:"Duration",type:"f",data:v(r,8)});for(var p=d(l),f=c("Tracks",t),m=d(f),y=47,g=[],b=5+15*i.length,w=[],k=-1,T=function(t){var n=y,r=n+p,o=r+m,l=o+b-s;if((g=[]).push({name:"SeekHead",type:"m",isEnd:!1}),g.push({name:"Seek",type:"m",isEnd:!1}),g.push({name:"SeekID",type:"b",data:new e.Buffer([21,73,169,102])}),g.push({name:"SeekPosition",type:"u",data:h(n)}),g.push({name:"Seek",type:"m",isEnd:!0}),g.push({name:"Seek",type:"m",isEnd:!1}),g.push({name:"SeekID",type:"b",data:new e.Buffer([22,84,174,107])}),g.push({name:"SeekPosition",type:"u",data:h(r)}),g.push({name:"Seek",type:"m",isEnd:!0}),g.push({name:"Seek",type:"m",isEnd:!1}),g.push({name:"SeekID",type:"b",data:new e.Buffer([28,83,187,107])}),g.push({name:"SeekPosition",type:"u",data:h(o)}),g.push({name:"Seek",type:"m",isEnd:!0}),g.push({name:"SeekHead",type:"m",isEnd:!0}),y=d(g),(w=[]).push({name:"Cues",type:"m",isEnd:!1}),i.forEach((function(e){var t=e.CueTrack,n=e.CueClusterPosition,r=e.CueTime;w.push({name:"CuePoint",type:"m",isEnd:!1}),w.push({name:"CueTime",type:"u",data:h(r)}),w.push({name:"CueTrackPositions",type:"m",isEnd:!1}),w.push({name:"CueTrack",type:"u",data:h(t)}),n-=a,n+=l,w.push({name:"CueClusterPosition",type:"u",data:h(n)}),w.push({name:"CueTrackPositions",type:"m",isEnd:!0}),w.push({name:"CuePoint",type:"m",isEnd:!0})})),w.push({name:"Cues",type:"m",isEnd:!0}),b=d(w),k===l)return"break";if(k=l,9===t)throw new Error("Failed to converge to a stable metadata size")},C=0;C<10;C++){if("break"===T(C))break}var E=[].concat.apply([],[o,{name:"Segment",type:"m",isEnd:!1,unknownSize:!0},g,l,f,w]);return(new n.default).encode(E)},e.removeElement=u,e.extractElement=c,e.putRefinedMetaData=function(t,r){Array.isArray(r.cueInfos)&&!Array.isArray(r.cues)&&(console.warn("putRefinedMetaData: info.cueInfos property is deprecated. please use info.cues"),r.cues=r.cueInfos);for(var i=[],o=[],a=0;a<t.length;a++){var s=t[a];if("m"===s.type&&"Segment"===s.name){if(i=t.slice(0,a),o=t.slice(a),s.unknownSize){o.shift();break}throw new Error("this metadata is not streaming webm file")}}if(!(o[o.length-1].dataEnd>0))throw new Error("metadata dataEnd has wrong number");var l=o[o.length-1].dataEnd,u=i[i.length-1].dataEnd,c=(new n.default).encode(i).byteLength-u,d=l-o[0].tagStart;o[0].tagStart,o[0].tagStart;var f,m=new e.Buffer([24,83,128,103]),h=new e.Buffer("01ffffffffffffff","hex"),y=m.byteLength+h.byteLength,v=d;for(f=1;f<20;f++){var g=p(o,c+(u+y+v-l),r),b=(new n.default).encode(g).byteLength;if(b===v)return(new n.default).encode([].concat(i,[{type:"m",name:"Segment",isEnd:!1,unknownSize:!0}],g));v=b}throw new Error("unable to refine metadata, stable size could not be found in "+f+" iterations!")},e.concat=m,e.encodeValueToBuffer=function(n){var r=new e.Buffer(0);if("m"===n.type)return n;switch(n.type){case"u":r=h(n.value);break;case"i":r=y(n.value);break;case"f":r=v(n.value);break;case"s":r=new e.Buffer(n.value,"ascii");break;case"8":r=new e.Buffer(n.value,"utf8");break;case"b":r=n.value;break;case"d":r=new t.Int64BE(n.value.getTime().toString()).toBuffer()}return Object.assign({},n,{data:r})},e.createUIntBuffer=h,e.createIntBuffer=y,e.createFloatBuffer=v,e.convertEBMLDateToJSDate=function(e){return e instanceof Date?e:new Date(new Date("2001-01-01T00:00:00.000Z").getTime()+Number(e)/1e3/1e3)}}(D),Object.defineProperty(B,"__esModule",{value:!0});var oe,ae,se=D,le=x,ue=D,ce=L.byEbmlID;(ae=oe||(oe={}))[ae.STATE_TAG=1]="STATE_TAG",ae[ae.STATE_SIZE=2]="STATE_SIZE",ae[ae.STATE_CONTENT=3]="STATE_CONTENT";var de=function(){function e(){this._buffer=new se.Buffer(0),this._tag_stack=[],this._state=oe.STATE_TAG,this._cursor=0,this._total=0,this._schema=ce,this._result=[]}return e.prototype.decode=function(e){this.readChunk(e);var t=this._result;return this._result=[],t},e.prototype.readChunk=function(e){for(this._buffer=ue.concat([this._buffer,new se.Buffer(e)]);this._cursor<this._buffer.length&&(this._state!==oe.STATE_TAG||this.readTag())&&(this._state!==oe.STATE_SIZE||this.readSize())&&(this._state!==oe.STATE_CONTENT||this.readContent()););},e.prototype.getSchemaInfo=function(e){return this._schema[e]||{name:"unknown",level:-1,type:"unknown",description:"unknown"}},e.prototype.readTag=function(){if(this._cursor>=this._buffer.length)return!1;var e=se.readVint(this._buffer,this._cursor);if(null==e)return!1;var t=this._buffer.slice(this._cursor,this._cursor+e.length).reduce((function(e,t,n,r){return e+t*Math.pow(16,2*(r.length-1-n))}),0),n=this.getSchemaInfo(t),r={EBML_ID:t.toString(16),schema:n,type:n.type,name:n.name,level:n.level,tagStart:this._total,tagEnd:this._total+e.length,sizeStart:this._total+e.length,sizeEnd:null,dataStart:null,dataEnd:null,dataSize:null,data:null};return this._tag_stack.push(r),this._cursor+=e.length,this._total+=e.length,this._state=oe.STATE_SIZE,!0},e.prototype.readSize=function(){if(this._cursor>=this._buffer.length)return!1;var e=se.readVint(this._buffer,this._cursor);if(null==e)return!1;var t=this._tag_stack[this._tag_stack.length-1];return t.sizeEnd=t.sizeStart+e.length,t.dataStart=t.sizeEnd,t.dataSize=e.value,-1===e.value?(t.dataEnd=-1,"m"===t.type&&(t.unknownSize=!0)):t.dataEnd=t.sizeEnd+e.value,this._cursor+=e.length,this._total+=e.length,this._state=oe.STATE_CONTENT,!0},e.prototype.readContent=function(){var e=this._tag_stack[this._tag_stack.length-1];if("m"===e.type){if(e.isEnd=!1,this._result.push(e),this._state=oe.STATE_TAG,0===e.dataSize){var t=Object.assign({},e,{isEnd:!0});this._result.push(t),this._tag_stack.pop()}return!0}if(this._buffer.length<this._cursor+e.dataSize)return!1;var n=this._buffer.slice(this._cursor,this._cursor+e.dataSize);switch(this._buffer=this._buffer.slice(this._cursor+e.dataSize),e.data=n,e.type){case"u":e.value=n.readUIntBE(0,n.length);break;case"i":e.value=n.readIntBE(0,n.length);break;case"f":e.value=4===e.dataSize?n.readFloatBE(0):8===e.dataSize?n.readDoubleBE(0):(console.warn("cannot read "+e.dataSize+" octets float. failback to 0"),0);break;case"s":e.value=n.toString("ascii");break;case"8":e.value=n.toString("utf8");break;case"b":e.value=n;break;case"d":e.value=se.convertEBMLDateToJSDate(new le.Int64BE(n).toNumber())}if(null===e.value)throw new Error("unknown tag type:"+e.type);for(this._result.push(e),this._total+=e.dataSize,this._state=oe.STATE_TAG,this._cursor=0,this._tag_stack.pop();this._tag_stack.length>0;){var r=this._tag_stack[this._tag_stack.length-1];if(r.dataEnd<0)return this._tag_stack.pop(),!0;if(this._total<r.dataEnd)break;if("m"!==r.type)throw new Error("parent element is not master element");t=Object.assign({},r,{isEnd:!0});this._result.push(t),this._tag_stack.pop()}return!0},e}();B.default=de;var pe={};function fe(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}var me=fe;function he(e){return"function"==typeof e}function ye(e){return"object"==typeof e&&null!==e}function ve(e){return void 0===e}fe.EventEmitter=fe,fe.prototype._events=void 0,fe.prototype._maxListeners=void 0,fe.defaultMaxListeners=10,fe.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},fe.prototype.emit=function(e){var t,n,r,i,o,a;if(this._events||(this._events={}),"error"===e&&(!this._events.error||ye(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var s=new Error('Uncaught, unspecified "error" event. ('+t+")");throw s.context=t,s}if(ve(n=this._events[e]))return!1;if(he(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:i=Array.prototype.slice.call(arguments,1),n.apply(this,i)}else if(ye(n))for(i=Array.prototype.slice.call(arguments,1),r=(a=n.slice()).length,o=0;o<r;o++)a[o].apply(this,i);return!0},fe.prototype.addListener=function(e,t){var n;if(!he(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,he(t.listener)?t.listener:t),this._events[e]?ye(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,ye(this._events[e])&&!this._events[e].warned&&(n=ve(this._maxListeners)?fe.defaultMaxListeners:this._maxListeners)&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},fe.prototype.on=fe.prototype.addListener,fe.prototype.once=function(e,t){if(!he(t))throw TypeError("listener must be a function");var n=!1;function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}return r.listener=t,this.on(e,r),this},fe.prototype.removeListener=function(e,t){var n,r,i,o;if(!he(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=(n=this._events[e]).length,r=-1,n===t||he(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(ye(n)){for(o=i;o-- >0;)if(n[o]===t||n[o].listener&&n[o].listener===t){r=o;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},fe.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(he(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},fe.prototype.listeners=function(e){return this._events&&this._events[e]?he(this._events[e])?[this._events[e]]:this._events[e].slice():[]},fe.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(he(t))return 1;if(t)return t.length}return 0},fe.listenerCount=function(e,t){return e.listenerCount(t)};var ge,be=t&&t.__extends||(ge=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}ge(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(pe,"__esModule",{value:!0});var we=D,ke=function(e){function t(){var t=e.call(this)||this;return t.logGroup="",t.hasLoggingStarted=!1,t.metadataloaded=!1,t.chunks=[],t.stack=[],t.segmentOffset=0,t.last2SimpleBlockVideoTrackTimecode=[0,0],t.last2SimpleBlockAudioTrackTimecode=[0,0],t.lastClusterTimecode=0,t.lastClusterPosition=0,t.timecodeScale=1e6,t.metadataSize=0,t.metadatas=[],t.cues=[],t.firstVideoBlockRead=!1,t.firstAudioBlockRead=!1,t.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null},t.trackTypes=[],t.trackDefaultDuration=[],t.trackCodecDelay=[],t.trackInfo={type:"nothing"},t.ended=!1,t.logging=!1,t.use_duration_every_simpleblock=!1,t.use_webp=!1,t.use_segment_info=!0,t.drop_default_duration=!0,t}return be(t,e),t.prototype.stop=function(){for(this.ended=!0,this.emit_segment_info();this.stack.length;)this.stack.pop(),this.logging&&console.groupEnd();this.logging&&this.hasLoggingStarted&&this.logGroup&&console.groupEnd()},t.prototype.emit_segment_info=function(){var e=this.chunks;if(this.chunks=[],this.metadataloaded){if(!this.use_segment_info)return;var t=this.lastClusterTimecode,n=this.duration,r=this.timecodeScale;this.emit("cluster",{timecode:t,data:e}),this.emit("duration",{timecodeScale:r,duration:n})}else{this.metadataloaded=!0,this.metadatas=e;var i=this.trackTypes.indexOf(1),o=this.trackTypes.indexOf(2);if(this.trackInfo=i>=0&&o>=0?{type:"both",trackNumber:i}:i>=0?{type:"video",trackNumber:i}:o>=0?{type:"audio",trackNumber:o}:{type:"nothing"},!this.use_segment_info)return;this.emit("metadata",{data:e,metadataSize:this.metadataSize})}},t.prototype.read=function(e){var t=this,n=!1;if(!this.ended){if("m"===e.type)if(e.isEnd)this.stack.pop();else{var r=this.stack[this.stack.length-1];if(null!=r&&r.level>=e.level){this.stack.pop(),this.logging&&console.groupEnd(),r.dataEnd=e.dataEnd,r.dataSize=e.dataEnd-r.dataStart,r.unknownSize=!1;var i=Object.assign({},r,{name:r.name,type:r.type,isEnd:!0});this.chunks.push(i)}this.stack.push(e)}if("m"===e.type&&"Segment"==e.name)0!=this.segmentOffset&&console.warn("Multiple segments detected!"),this.segmentOffset=e.dataStart,this.emit("segment_offset",this.segmentOffset);else if("b"===e.type&&"SimpleBlock"===e.name){var o=we.ebmlBlock(e.data),a=o.timecode,s=o.trackNumber,l=o.frames;if(1===this.trackTypes[s]){if(!this.firstVideoBlockRead&&(this.firstVideoBlockRead=!0,"both"===this.trackInfo.type||"video"===this.trackInfo.type)){var u=this.lastClusterTimecode+a;this.cues.push({CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:u}),this.emit("cue_info",{CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:u})}this.last2SimpleBlockVideoTrackTimecode=[this.last2SimpleBlockVideoTrackTimecode[1],a]}else if(2===this.trackTypes[s]){if(!this.firstAudioBlockRead&&(this.firstAudioBlockRead=!0,"audio"===this.trackInfo.type)){u=this.lastClusterTimecode+a;this.cues.push({CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:u}),this.emit("cue_info",{CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:s,CueClusterPosition:this.lastClusterPosition,CueTime:u})}this.last2SimpleBlockAudioTrackTimecode=[this.last2SimpleBlockAudioTrackTimecode[1],a]}this.use_duration_every_simpleblock&&this.emit("duration",{timecodeScale:this.timecodeScale,duration:this.duration}),this.use_webp&&l.forEach((function(e){if("9d012a"===e.slice(3,6).toString("hex")){var n=we.VP8BitStreamToRiffWebPBuffer(e),r=new Blob([n],{type:"image/webp"}),i=t.duration;t.emit("webp",{currentTime:i,webp:r})}}))}else"m"===e.type&&"Cluster"===e.name&&!1===e.isEnd?(this.firstVideoBlockRead=!1,this.firstAudioBlockRead=!1,this.emit_segment_info(),this.emit("cluster_ptr",e.tagStart),this.lastClusterPosition=e.tagStart):"u"===e.type&&"Timecode"===e.name?this.lastClusterTimecode=e.value:"u"===e.type&&"TimecodeScale"===e.name?this.timecodeScale=e.value:"m"===e.type&&"TrackEntry"===e.name?e.isEnd?(this.trackTypes[this.currentTrack.TrackNumber]=this.currentTrack.TrackType,this.trackDefaultDuration[this.currentTrack.TrackNumber]=this.currentTrack.DefaultDuration,this.trackCodecDelay[this.currentTrack.TrackNumber]=this.currentTrack.CodecDelay):this.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null}:"u"===e.type&&"TrackType"===e.name?this.currentTrack.TrackType=e.value:"u"===e.type&&"TrackNumber"===e.name?this.currentTrack.TrackNumber=e.value:"u"===e.type&&"CodecDelay"===e.name?this.currentTrack.CodecDelay=e.value:"u"===e.type&&"DefaultDuration"===e.name?this.drop_default_duration?(console.warn("DefaultDuration detected!, remove it"),n=!0):this.currentTrack.DefaultDuration=e.value:"unknown"===e.name&&console.warn(e);!this.metadataloaded&&e.dataEnd>0&&(this.metadataSize=e.dataEnd),n||this.chunks.push(e),this.logging&&this.put(e)}},Object.defineProperty(t.prototype,"duration",{get:function(){if("nothing"===this.trackInfo.type)return console.warn("no video, no audio track"),0;var e=0,t=0,n=0,r=this.trackDefaultDuration[this.trackInfo.trackNumber];if("number"==typeof r)e=r;else if("both"===this.trackInfo.type)this.last2SimpleBlockAudioTrackTimecode[1]>this.last2SimpleBlockVideoTrackTimecode[1]?(e=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale,"number"==typeof(i=this.trackCodecDelay[this.trackTypes.indexOf(2)])&&(t=i),n=this.last2SimpleBlockAudioTrackTimecode[1]):(e=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale,"number"==typeof(i=this.trackCodecDelay[this.trackTypes.indexOf(1)])&&(t=i),n=this.last2SimpleBlockVideoTrackTimecode[1]);else if("video"===this.trackInfo.type){e=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale,"number"==typeof(i=this.trackCodecDelay[this.trackInfo.trackNumber])&&(t=i),n=this.last2SimpleBlockVideoTrackTimecode[1]}else if("audio"===this.trackInfo.type){var i;e=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale,"number"==typeof(i=this.trackCodecDelay[this.trackInfo.trackNumber])&&(t=i),n=this.last2SimpleBlockAudioTrackTimecode[1]}var o=((this.lastClusterTimecode+n)*this.timecodeScale+e-t)/this.timecodeScale;return Math.floor(o)},enumerable:!0,configurable:!0}),t.prototype.addListener=function(t,n){return e.prototype.addListener.call(this,t,n)},t.prototype.put=function(e){this.hasLoggingStarted||(this.hasLoggingStarted=!0,this.logging&&this.logGroup&&console.groupCollapsed(this.logGroup)),"m"===e.type?e.isEnd?console.groupEnd():console.group(e.name+":"+e.tagStart):"b"===e.type?console.log(e.name,e.type):console.log(e.name,e.tagStart,e.type,e.value)},t}(me.EventEmitter);pe.default=ke;var Te="2.0.2";Object.defineProperty(A,"__esModule",{value:!0});var Ce=B;A.Decoder=Ce.default;var Ee=O;A.Encoder=Ee.default;var Se=pe;A.Reader=Se.default;var _e=D;A.tools=_e;var Re=Te;A.version=Re;var Ie={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t,r=(t=n.exports)&&t.__esModule?t:{default:t};var i=function(){return r.default.createElement("div",null,"This browser is uncapable of recording video")};e.default=i}(Ie);var Ae={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t,r=(t=n.exports)&&t.__esModule?t:{default:t};var i=function(){return r.default.createElement("div",null,"Oh snap! Your browser failed to record your video.",r.default.createElement("br",null),r.default.createElement("br",null),"Please restart it and try again 👍")};e.default=i}(Ae);var Be,De={},xe={},Oe={exports:{}};
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
Be=Oe,function(){var e={}.hasOwnProperty;function t(){for(var n=[],r=0;r<arguments.length;r++){var i=arguments[r];if(i){var o=typeof i;if("string"===o||"number"===o)n.push(i);else if(Array.isArray(i)){if(i.length){var a=t.apply(null,i);a&&n.push(a)}}else if("object"===o)if(i.toString===Object.prototype.toString)for(var s in i)e.call(i,s)&&i[s]&&n.push(s);else n.push(i.toString())}}return n.join(" ")}Be.exports?(t.default=t,Be.exports=t):window.classNames=t}(),Object.defineProperty(xe,"__esModule",{value:!0});var Pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Me=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Ve=n.exports,Ue=Ne(Ve),Le=Ne(c.exports),je=Ne(Oe.exports);function Ne(e){return e&&e.__esModule?e:{default:e}}function Fe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ze(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var We={title:/<title>.*<\/title>/gi,desc:/<desc>.*<\/desc>/gi,comment:/<!--.*-->/gi,defs:/<defs>.*<\/defs>/gi,width:/ +width="\d+(\.\d+)?(px)?"/gi,height:/ +height="\d+(\.\d+)?(px)?"/gi,fill:/ +fill="(none|#[0-9a-f]+)"/gi,sketchMSShapeGroup:/ +sketch:type="MSShapeGroup"/gi,sketchMSPage:/ +sketch:type="MSPage"/gi,sketchMSLayerGroup:/ +sketch:type="MSLayerGroup"/gi},qe=function(e){function t(){return Fe(this,t),ze(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Ve.Component),Me(t,[{key:"render",value:function(){var e=this.props,n=e.className,r=e.component,i=e.svg,o=e.fill,a=e.width,s=e.accessibilityLabel,l=e.accessibilityDesc,u=e.classSuffix,c=e.cleanupExceptions,d=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["className","component","svg","fill","width","accessibilityLabel","accessibilityDesc","classSuffix","cleanupExceptions"]),p=this.props,f=p.cleanup,m=p.height;(!0===f||0===f.length&&c.length>0)&&(f=Object.keys(We)),f=f.filter((function(e){return!(c.indexOf(e)>-1)})),a&&void 0===m&&(m=a),delete d.cleanup,delete d.height;var h,y,v,g=(0,je.default)((h={SVGInline:!0,"SVGInline--cleaned":f.length},v=n,(y=n)in h?Object.defineProperty(h,y,{value:v,enumerable:!0,configurable:!0,writable:!0}):h[y]=v,h)),b=g.split(" ").join(u+" ")+u,w=t.cleanupSvg(i,f).replace(/<svg/,'<svg class="'+b+'"'+(o?' fill="'+o+'"':"")+(a||m?' style="'+(a?"width: "+a+";":"")+(m?"height: "+m+";":"")+'"':"")),k=void 0;if(l){var T=(k=/<svg(.|\n|\r\n)*?>/.exec(w)).index+k[0].length;w=w.substr(0,T)+"<desc>"+l+"</desc>"+w.substr(T)}if(s){var C=(k=k||/<svg(.|\n|\r\n)*?>/.exec(w)).index+k[0].length-1,E="SVGInline-"+t.idCount+++"-title";w=w.substr(0,C)+' role="img" aria-labelledby="'+E+'"'+w.substr(C,1)+'<title id="'+E+'">'+s+"</title>"+w.substr(C+1)}return Ue.default.createElement(r,Pe({},d,{className:g,dangerouslySetInnerHTML:{__html:w}}))}}]),t}();qe.propTypes={className:Le.default.string,classSuffix:Le.default.string,component:Le.default.oneOfType([Le.default.string,Le.default.func]),svg:Le.default.string.isRequired,fill:Le.default.string,cleanup:Le.default.oneOfType([Le.default.bool,Le.default.array]),cleanupExceptions:Le.default.array,width:Le.default.string,height:Le.default.string,accessibilityLabel:Le.default.string,accessibilityDesc:Le.default.string},qe.defaultProps={component:"span",classSuffix:"-svg",cleanup:[],cleanupExceptions:[]},qe.idCount=0,qe.cleanupSvg=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(We).filter((function(e){return t.indexOf(e)>-1})).reduce((function(e,t){return e.replace(We[t],"")}),e).trim()},xe.default=qe,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=i(n.exports),r=i(xe);function i(e){return e&&e.__esModule?e:{default:e}}var o=i(I).default.div.withConfig({displayName:"disconnected-view__SVGWrapper",componentId:"sc-1hdjm8z-0"})(["max-height:100%;max-width:100%;margin-bottom:140px;"]),a=function(){return t.default.createElement(o,null,t.default.createElement(r.default,{svg:'\n<svg width="210px" height="150px" viewBox="0 0 210 150" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n    <g transform="translate(-915.000000, -356.000000)" fill="#4D4D4D" fill-rule="nonzero">\n      <path d="M1117.31284,419.636364 C1117.31284,417.512192 1119.03367,415.79021 1121.15642,415.79021 C1123.27917,415.79021 1125,417.512192 1125,419.636364 C1125,447.023515 1111.3017,469.453876 1087.80267,485.191015 C1067.98313,498.464025 1042.15567,506 1019.49682,506 C996.229145,506 970.976604,499.222345 951.727522,486.61975 C928.403996,471.349569 915,448.691655 915,419.636364 C915,417.512192 916.720828,415.79021 918.843578,415.79021 C920.966327,415.79021 922.687155,417.512192 922.687155,419.636364 C922.687155,445.976297 934.696662,466.276987 955.936236,480.18278 C973.867198,491.922388 997.657898,498.307692 1019.49682,498.307692 C1040.66212,498.307692 1064.99852,491.20678 1083.52721,478.798245 C1105.01628,464.407157 1117.31284,444.272084 1117.31284,419.636364 Z M1079.57501,381.174825 C1072.62783,381.174825 1066.99602,375.539249 1066.99602,368.587413 C1066.99602,361.635577 1072.62783,356 1079.57501,356 C1086.52218,356 1092.15399,361.635577 1092.15399,368.587413 C1092.15399,375.539249 1086.52218,381.174825 1079.57501,381.174825 Z M962.870012,381.174825 C955.922833,381.174825 950.291031,375.539249 950.291031,368.587413 C950.291031,361.635577 955.922833,356 962.870012,356 C969.817192,356 975.448993,361.635577 975.448993,368.587413 C975.448993,375.539249 969.817192,381.174825 962.870012,381.174825 Z"></path>\n    </g>\n  </g>\n</svg>\n'}))};e.default=a}(De);var He={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=r(n.exports);function r(e){return e&&e.__esModule?e:{default:e}}var i=r(I).default.div.withConfig({displayName:"loading-view__LoadingMessage",componentId:"uxy82i-0"})(["font-family:Arial;"]),o=function(){return t.default.createElement(i,null,"Loading...")};e.default=o}(He);var Ge={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=i(n.exports),r=i(xe);function i(e){return e&&e.__esModule?e:{default:e}}var o=i(I).default.div.withConfig({displayName:"switch-camera-view__SVGWrapper",componentId:"sc-13l3hbu-0"})(["width:80px;height:80px;bottom:4px;right:4px;z-index:10;background-color:rgba(0,0,0,0.3);border-radius:50%;padding-left:8px;padding-top:10px;position:absolute;cursor:pointer;"]),a=function(e){return t.default.createElement(o,e,t.default.createElement(r.default,{svg:'\n<svg width="64px" height="64px" viewBox="0 0 1300 1300" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <path d="M1000.809 230.795h-136l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2h-306.8a31.945 31.945 0 0 0-30.1 21.2l-32.5 90.8h-136a79.978 79.978 0 0 0-80 80v456a79.978 79.978 0 0 0 80 80h704a79.978 79.978 0 0 0 80-80v-456a79.978 79.978 0 0 0-80-80zm8 536a8.023 8.023 0 0 1-8 8h-704a8.024 8.024 0 0 1-8-8v-456a8.024 8.024 0 0 1 8-8h186.7l17.1-47.8 22.9-64.2h250.5l22.9 64.2 17.1 47.8h186.8a8.024 8.024 0 0 1 8 8zm-360-400a160 160 0 1 0 160 160 159.956 159.956 0 0 0-160-160zm0 256a96 96 0 1 1 96-96 96.025 96.025 0 0 1-96 96z"/>\n  <path d="M646.53 1051.072L510.64 972.616a23.18 23.18 0 0 0-34.769 20.074v28.335c-209.332-23.19-359.49-86.314-359.49-160.553 0-19.125 9.968-37.511 28.341-54.668V710.41a317.567 317.567 0 0 0-32.93 21.447c-60.674 45.451-73.41 95.028-73.41 128.615s12.736 83.164 73.41 128.615c34.059 25.513 80.563 47.712 138.22 65.98 64.915 20.568 142.076 35.611 225.86 44.406v50.128a23.18 23.18 0 0 0 34.769 20.074l135.888-78.456a23.18 23.18 0 0 0 0-40.147zM1194.334 731.857a330.209 330.209 0 0 0-41.61-26.256v92.688c23.895 19.26 37.02 40.236 37.02 62.183 0 76.572-159.746 141.32-379.404 162.621v78.34c91.47-8.42 175.747-24.178 245.774-46.366 57.658-18.268 104.162-40.467 138.22-65.98 60.675-45.451 73.41-95.028 73.41-128.615s-12.735-83.164-73.41-128.615z"/>\n</svg>\n',fill:"white"}))};e.default=a}(Ge);var Xe={},Ye={};!function(e){var t;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=((t=I)&&t.__esModule?t:{default:t}).default.button.withConfig({displayName:"button__Button",componentId:"hkteey-0"})(["background:",";color:",";border-radius:4px;height:40px;padding:0px 18px;border:none;margin:-8px;font-size:14px;font-weight:bold;outline:none;cursor:pointer;:hover{background:#eee;}"],(function(e){return e.backgroundColor}),(function(e){return e.color}));n.defaultProps={color:"black",backgroundColor:"white"};var r=n;e.default=r}(Ye);var Ze={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=o(n.exports),r=o(I),i=o(c.exports);function o(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.default.button.withConfig({displayName:"record-button__Button",componentId:"sc-1n5amwk-0"})(["background:",";color:",";border-radius:50%;width:64px;height:64px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;z-index:5;:hover{background:#fb6d42;}"],(function(e){return e.backgroundColor}),(function(e){return e.color})),l=r.default.div.withConfig({displayName:"record-button__RecWrapper",componentId:"sc-1n5amwk-1"})(["display:flex;flex-direction:column;align-items:center;"]),u=r.default.div.withConfig({displayName:"record-button__ButtonBorder",componentId:"sc-1n5amwk-2"})(["border:8px solid rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]),d=r.default.div.withConfig({displayName:"record-button__Instructions",componentId:"sc-1n5amwk-3"})(["font-family:Arial;font-size:14px;color:#ffffff;letter-spacing:1.75px;display:flex;margin-bottom:20px;"]),p=r.default.div.withConfig({displayName:"record-button__InstuctionsHighlight",componentId:"sc-1n5amwk-4"})(["font-weight:700;color:#dc6547;padding:0 5px;"]);s.defaultProps={color:"black",backgroundColor:"white"};var f=function(e){var n=e.t,r=a(e,["t"]);return t.default.createElement(l,null,t.default.createElement(d,null,t.default.createElement("div",null,n("PRESS")," "),t.default.createElement(p,null," ",n("REC")," "),n("WHEN READY")),t.default.createElement(u,null,t.default.createElement(s,r)))};f.propTypes={t:i.default.func};var m=f;e.default=m}(Ze);var Je={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=i(n.exports),r=i(I);function i(e){return e&&e.__esModule?e:{default:e}}var o=r.default.button.withConfig({displayName:"stop-button__Button",componentId:"sc-1h536gx-0"})(["background:",";color:",";border-radius:4px;width:40px;height:40px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;margin:20px;:hover{background:#fb6d42;}"],(function(e){return e.backgroundColor}),(function(e){return e.color})),a=r.default.div.withConfig({displayName:"stop-button__Border",componentId:"sc-1h536gx-1"})(["background:rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]);o.defaultProps={color:"black",backgroundColor:"white"};e.default=function(e){return t.default.createElement(a,null,t.default.createElement(o,e))}}(Je);var Ke={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n.exports),r=o(c.exports),i=o(I);function o(e){return e&&e.__esModule?e:{default:e}}function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var i=f(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m,h,y,v=i.default.div.withConfig({displayName:"timer__Text",componentId:"avqbub-0"})(["position:absolute;top:50px;right:50px;font-family:Menlo,monospace;font-size:28px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),g=i.default.div.withConfig({displayName:"timer__RecIcon",componentId:"avqbub-1"})(["width:16px;height:16px;background:#e55226;border-radius:50%;float:left;margin:2px 8px;margin-left:0;"]),b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(a,e);var n,r,i,o=d(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),t=o.call(this,e);var n=e.timeLimit?e.timeLimit/1e3:0;return t.state=t.getState(n),t}return n=a,(r=[{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"componentDidMount",value:function(){var e=this,t=this.props.timeLimit;this.timer=setInterval((function(){var n=e.state.seconds,r=t?n-1:n+1,i=e.getState(r);e.setState(i)}),1e3)}},{key:"pad",value:function(e){var t=""+e;return"00".substring(0,"00".length-t.length)+t}},{key:"getState",value:function(e){var t=Math.floor(e/60);return{seconds:e,human:0!==t?"".concat(t,":").concat(this.pad(e-60*t)):"".concat(e-60*t,"s")}}},{key:"render",value:function(){var e=this.props.defaultText||"0:00";return t.default.createElement(v,this.props,t.default.createElement(g,null),this.state.human||e)}}])&&l(n.prototype,r),i&&l(n,i),a}(t.Component);m=b,h="propTypes",y={timeLimit:r.default.number,defaultText:r.default.string},h in m?Object.defineProperty(m,h,{value:y,enumerable:!0,configurable:!0,writable:!0}):m[h]=y;var w=b;e.default=w}(Ke);var Qe={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var s=r?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(n,i,s):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n.exports),r=i(c.exports);function i(e){return e&&e.__esModule?e:{default:e}}function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var i=f(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?p(e):t}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=i(I).default.div.withConfig({displayName:"countdown__Root",componentId:"sc-19d3j7o-0"})(["position:absolute;top:0;bottom:0;left:0;right:0;display:flex;justify-content:center;align-items:center;font-family:Menlo,monospace;font-size:100px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var n,r,i,o=u(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),m(p(t=o.call(this,e)),"updateNumber",(function(){var e=t.state.number-1;t.setState({number:e}),0!==e&&(t.timeout=setTimeout(t.updateNumber,1e3))})),t.state={number:e.countdownTime/1e3},t}return n=a,(r=[{key:"componentDidMount",value:function(){this.timeout=setTimeout(this.updateNumber,1e3)}},{key:"componentWillUnmount",value:function(){clearInterval(this.timeout)}},{key:"render",value:function(){return t.default.createElement(h,null,0!==this.state.number?this.state.number:null)}}])&&s(n.prototype,r),i&&s(n,i),a}(t.Component);e.default=y,m(y,"propTypes",{countdownTime:r.default.number})}(Qe),function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=d(n.exports),r=d(c.exports),i=d(I),o=d(Ye),a=d(Ze),s=d(Je),l=d(Ke),u=d(Qe);function d(e){return e&&e.__esModule?e:{default:e}}var p=i.default.div.withConfig({displayName:"render-actions__ActionsWrapper",componentId:"dp6lnv-0"})(["position:absolute;left:0;right:0;top:50%;display:flex;align-items:center;justify-content:center;"]),f=function(e){var n=e.t,r=e.isVideoInputSupported,i=e.isInlineRecordingSupported,c=e.thereWasAnError,d=e.isRecording,f=e.isCameraOn,m=e.streamIsReady,h=e.isConnecting,y=e.isRunningCountdown,v=e.isReplayingVideo,g=e.countdownTime,b=e.timeLimit;e.showReplayControls,e.replayVideoAutoplayAndLoopOff;var w=e.useVideoInput,k=e.onTurnOnCamera;e.onTurnOffCamera;var T=e.onOpenVideoInput,C=e.onStartRecording,E=e.onStopRecording;e.onPauseRecording,e.onResumeRecording;var S=e.onStopReplaying;e.onConfirm;var _;return t.default.createElement("div",null,d&&t.default.createElement(l.default,{timeLimit:b}),y&&t.default.createElement(u.default,{countdownTime:g}),t.default.createElement(p,null,(_=!i&&r,!i&&!r||c||h||y?null:v?t.default.createElement(o.default,{type:"button",onClick:S,"data-qa":"start-replaying"},n("Use another video")):d?t.default.createElement(s.default,{type:"button",onClick:E,"data-qa":"stop-recording"}):f&&m?t.default.createElement(a.default,{t:n,type:"button",onClick:C,"data-qa":"start-recording"}):w?t.default.createElement(o.default,{type:"button",onClick:T,"data-qa":"open-input"},n("Upload a video")):_?t.default.createElement(o.default,{type:"button",onClick:T,"data-qa":"open-input"},n("Record a video")):t.default.createElement(o.default,{type:"button",onClick:k,"data-qa":"turn-on-camera"},n("Turn my camera ON")))))};f.propTypes={t:r.default.func,isVideoInputSupported:r.default.bool,isInlineRecordingSupported:r.default.bool,thereWasAnError:r.default.bool,isRecording:r.default.bool,isCameraOn:r.default.bool,streamIsReady:r.default.bool,isConnecting:r.default.bool,isRunningCountdown:r.default.bool,countdownTime:r.default.number,timeLimit:r.default.number,showReplayControls:r.default.bool,replayVideoAutoplayAndLoopOff:r.default.bool,isReplayingVideo:r.default.bool,useVideoInput:r.default.bool,onTurnOnCamera:r.default.func,onTurnOffCamera:r.default.func,onOpenVideoInput:r.default.func,onStartRecording:r.default.func,onStopRecording:r.default.func,onPauseRecording:r.default.func,onResumeRecording:r.default.func,onStopReplaying:r.default.func,onConfirm:r.default.func};var m=f;e.default=m}(Xe);var $e={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.captureThumb=void 0;var t=function(e){return new Promise((function(t,n){var r=document.createElement("canvas");r.width=e.videoWidth,r.height=e.videoHeight,r.getContext("2d").drawImage(e,0,0,e.videoWidth,e.videoHeight),r.toBlob((function(e){t(e)}),"image/jpeg")}))};e.captureThumb=t;var n=function(e){return new Promise((function(n,r){var i=document.createElement("video");i.preload="metadata",i.muted=!0,i.defaultMuted=!0,i.playsInline=!0,i.autoplay=!0;var o=!1,a=setTimeout((function(){o=!0,n({duration:null,thumbnail:null}),i.removeEventListener&&i.removeEventListener("loadeddata",l),window.URL.revokeObjectURL(i.src)}),1e3),s=function(e){t(i).then((function(t){i.pause(),o||(clearTimeout(a),o=!0,n({duration:e,thumbnail:t})),window.URL.revokeObjectURL(i.src)})).catch((function(e){o||(clearTimeout(a),o=!0,r(e))}))},l=function(){var e=1e3*i.duration;i.duration===1/0?(i.currentTime=Number.MAX_SAFE_INTEGER,i.ontimeupdate=function(){i.ontimeupdate=null,e=1e3*i.duration,i.currentTime=0,s(e)}):s(e)};i.addEventListener("loadeddata",l),i.src=window.URL.createObjectURL(e)}))};e.default=n}($e);var et={};function tt(e){return(tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}function it(e){var t=lt();return function(){var n,r=ct(e);if(t){var i=ct(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return ot(this,n)}}function ot(e,t){return!t||"object"!==tt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function at(e){var t="function"==typeof Map?new Map:void 0;return(at=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return st(e,arguments,ct(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),ut(r,e)})(e)}function st(e,t,n){return(st=lt()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&ut(i,n.prototype),i}).apply(null,arguments)}function lt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ct(e){return(ct=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(et,"__esModule",{value:!0}),et.ReactVideoRecorderDeviceUnavailableError=et.ReactVideoRecorderMediaRecorderUnavailableError=et.ReactVideoRecorderDataAvailableTimeoutError=et.ReactVideoRecorderRecordedBlobsUnavailableError=et.ReactVideoRecorderDataIssueError=void 0;var dt=function(e){rt(n,at(Error));var t=it(n);function n(e){var r;return nt(this,n),(r=t.call(this,"Couldn't get data from event")).name="ReactVideoRecorderDataIssueError",r.event=e,r}return n}();et.ReactVideoRecorderDataIssueError=dt;var pt=function(e){rt(n,at(Error));var t=it(n);function n(e){var r;return nt(this,n),(r=t.call(this,"Couldn't get recordedBlobs")).name="ReactVideoRecorderRecordedBlobsUnavailableError",r.event=e,r}return n}();et.ReactVideoRecorderRecordedBlobsUnavailableError=pt;var ft=function(e){rt(n,at(Error));var t=it(n);function n(e){var r;return nt(this,n),(r=t.call(this,"Method mediaRecorder.ondataavailable wasn't called after ".concat(e,"ms"))).name="ReactVideoRecorderDataAvailableTimeoutError",r.dataAvailableTimeout=e,r}return n}();et.ReactVideoRecorderDataAvailableTimeoutError=ft;var mt=function(e){rt(n,at(Error));var t=it(n);function n(){var e;return nt(this,n),(e=t.call(this,"Couldn't get mediaRecorder")).name="ReactVideoRecorderMediaRecorderUnavailableError",e}return n}();et.ReactVideoRecorderMediaRecorderUnavailableError=mt;var ht=function(e){rt(n,at(Error));var t=it(n);function n(){var e;return nt(this,n),(e=t.call(this,"Couldn't get selected device")).name="ReactVideoRecorderDeviceUnavailableError",e}return n}();et.ReactVideoRecorderDeviceUnavailableError=ht,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var t=v(n.exports),r=h(c.exports),i=v(I),o=A,a=h(Ie),s=h(Ae),l=h(De),u=h(He),d=h(Ge),p=h(Xe),f=v($e),m=et;function h(e){return e&&e.__esModule?e:{default:e}}function y(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return y=function(){return e},e}function v(e){if(e&&e.__esModule)return e;if(null===e||"object"!==g(e)&&"function"!=typeof e)return{default:e};var t=y();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var o=r?Object.getOwnPropertyDescriptor(e,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){B(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function k(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var i=R(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?_(e):t}function _(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var D=['video/webm;codecs="vp8,opus"',"video/webm;codecs=h264","video/webm;codecs=vp9","video/webm","video/mp4"],x=i.default.div.withConfig({displayName:"video-recorder__Wrapper",componentId:"sc-7k20rv-0"})(["position:relative;display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;height:100%;overflow:hidden;min-height:300px;background-color:#000;color:white;box-sizing:border-box;*{box-sizing:inherit;}"]),O=i.default.div.withConfig({displayName:"video-recorder__CameraView",componentId:"sc-7k20rv-1"})(["width:100%;height:100%;"]),P=i.default.video.withConfig({displayName:"video-recorder__Video",componentId:"sc-7k20rv-2"})(["position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);min-height:100%;min-width:100%;width:100%;height:100%;object-fit:cover;",";",";"],(function(e){return e.isFlipped&&(0,i.css)(["transform:translate(-50%,-50%) scaleX(-1);"])}),(function(e){return e.onClick&&(0,i.css)(["cursor:pointer;"])})),M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(s,e);var n,r,i,a=E(s);function s(){var e;k(this,s);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return B(_(e=a.call.apply(a,[this].concat(r))),"videoInput",t.default.createRef()),B(_(e),"isComponentUnmounted",!1),B(_(e),"timeSinceInactivity",0),B(_(e),"state",{isRecording:!1,isCameraOn:!1,isConnecting:!1,isReplayingVideo:!1,isReplayVideoMuted:!0,thereWasAnError:!1,error:null,streamIsReady:!1,isInlineRecordingSupported:null,isVideoInputSupported:null,stream:void 0,currentDeviceId:null,availableDeviceIds:[]}),B(_(e),"turnOnCamera",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e.props.onTurnOnCamera&&e.props.onTurnOnCamera(),navigator.mediaDevices.enumerateDevices().then((function(n){var r=n.filter((function(e){return"videoinput"===e.kind}));if(t&&r[0]&&void 0===r.find((function(e){return e.deviceId})))return e.handleError(new m.ReactVideoRecorderDeviceUnavailableError);var i="string"==typeof t?t:r[0].deviceId;e.setState({isConnecting:!0,isReplayingVideo:!1,thereWasAnError:!1,currentDeviceId:i,availableDeviceIds:r.map((function(e){return e.deviceId})),error:null});var o={audio:!0,video:!0},a=w(w({},e.props.constraints),{},{video:{deviceId:{exact:i}}});navigator.mediaDevices.getUserMedia(a).catch((function(e){if("NotReadableError"===e.name||"OverconstrainedError"===e.name)return console.warn("Got ".concat(e.name,", trying getUserMedia again with fallback constraints")),navigator.mediaDevices.getUserMedia(o);throw e})).then(e.handleSuccess).catch(e.handleError)})).catch(e.handleError)})),B(_(e),"handleSwitchCamera",(function(){e.props.onSwitchCamera&&e.props.onSwitchCamera();var t=e.state,n=t.currentDeviceId,r=t.availableDeviceIds;e.stream&&e.stream.getTracks().forEach((function(e){return e.stop()}));var i=r.findIndex((function(e){return e===n})),o=r.length-1;return i<0?e.handleError(new m.ReactVideoRecorderDeviceUnavailableError):i+1>o?e.turnOnCamera(r[0]):e.turnOnCamera(r[i+1])})),B(_(e),"turnOffCamera",(function(){e.props.onTurnOffCamera&&e.props.onTurnOffCamera(),e.stream&&e.stream.getTracks().forEach((function(e){return e.stop()})),e.setState({isCameraOn:!1}),clearInterval(e.inactivityTimer)})),B(_(e),"handleSuccess",(function(t){e.isComponentUnmounted||(e.stream=t,e.setState({isCameraOn:!0,stream:t}),e.props.onCameraOn&&e.props.onCameraOn(),window.URL?e.cameraVideo.srcObject=t:e.cameraVideo.src=t,setTimeout((function(){e.setState({isConnecting:!1,streamIsReady:!0})}),200))})),B(_(e),"handleError",(function(t){var n=e.props.onError;n&&n(t),e.isComponentUnmounted||(console.error("Captured error",t),clearTimeout(e.timeLimitTimeout),e.setState({isConnecting:e.state.isConnecting&&!1,isRecording:!1,thereWasAnError:!0,error:t}),e.state.isCameraOn&&e.turnOffCamera())})),B(_(e),"handleDataIssue",(function(t){var n=new m.ReactVideoRecorderDataIssueError(t);return console.error(n.message,t),e.handleError(n),!1})),B(_(e),"getMimeType",(function(){if(e.props.mimeType)return e.props.mimeType;var t=window.MediaRecorder.isTypeSupported?D.find(window.MediaRecorder.isTypeSupported):"video/webm";return e.mediaRecorder&&e.mediaRecorder.mimeType||t||""})),B(_(e),"isDataHealthOK",(function(t){if(!t.data)return e.handleDataIssue(t);var n=2e3/e.props.chunkSize,r=e.recordedBlobs.length;if(r>n&&r%n==0&&new window.Blob(e.recordedBlobs,{type:e.getMimeType()}).size<=0)return e.handleDataIssue(t);return!0})),B(_(e),"tryToUnmuteReplayVideo",(function(){var t=e.replayVideo;t.muted=!1;var n=t.play();n?n.then((function(){e.setState({isReplayVideoMuted:!1}),e.props.replayVideoAutoplayAndLoopOff&&(t.pause(),t.loop=!1)})).catch((function(e){return console.warn("Could not autoplay replay video",e),t.muted=!0,t.play()})).catch((function(e){console.warn("Could play muted replay video after failed autoplay",e)})):t.muted=!0})),B(_(e),"handleDataAvailable",(function(t){e.isDataHealthOK(t)&&e.recordedBlobs.push(t.data)})),B(_(e),"handleStopRecording",(function(){e.props.onStopRecording&&e.props.onStopRecording(),e.mediaRecorder?e.mediaRecorder.stop():e.handleError(new m.ReactVideoRecorderMediaRecorderUnavailableError)})),B(_(e),"handlePauseRecording",(function(){e.props.onPauseRecording&&e.props.onPauseRecording(),e.mediaRecorder?e.mediaRecorder.pause():e.handleError(new m.ReactVideoRecorderMediaRecorderUnavailableError)})),B(_(e),"handleResumeRecording",(function(){e.props.onResumeRecording&&e.props.onResumeRecording(),e.mediaRecorder?e.mediaRecorder.resume():e.handleError(new m.ReactVideoRecorderMediaRecorderUnavailableError)})),B(_(e),"handleStartRecording",(function(){e.props.onStartRecording&&e.props.onStartRecording(),e.setState({isRunningCountdown:!0,isReplayingVideo:!1}),setTimeout((function(){return e.startRecording()}),e.props.countdownTime)})),B(_(e),"startRecording",(function(){(0,f.captureThumb)(e.cameraVideo).then((function(t){e.thumbnail=t,e.recordedBlobs=[];var n={mimeType:e.getMimeType()};try{e.setState({isRunningCountdown:!1,isRecording:!0}),e.startedAt=(new Date).getTime(),e.mediaRecorder=new window.MediaRecorder(e.stream,n),e.mediaRecorder.addEventListener("stop",e.handleStop),e.mediaRecorder.addEventListener("error",e.handleError),e.mediaRecorder.addEventListener("dataavailable",e.handleDataAvailable);var r=e.props,i=r.timeLimit,o=r.chunkSize,a=r.dataAvailableTimeout;e.mediaRecorder.start(o),i&&(e.timeLimitTimeout=setTimeout((function(){e.handleStopRecording()}),i)),Number.isInteger(a)&&setTimeout((function(){0===e.recordedBlobs.length&&e.handleError(new m.ReactVideoRecorderDataAvailableTimeoutError(a))}),a)}catch(s){console.error("Couldn't create MediaRecorder",s,n),e.handleError(s)}}))})),B(_(e),"handleStop",(function(t){var n=(new Date).getTime();if(!e.recordedBlobs||e.recordedBlobs.length<=0){var r=new m.ReactVideoRecorderRecordedBlobsUnavailableError(t);return console.error(r.message,t),void e.handleError(r)}clearTimeout(e.timeLimitTimeout);var i=1===e.recordedBlobs.length?e.recordedBlobs[0]:new window.Blob(e.recordedBlobs,{type:e.getMimeType()}),o=e.thumbnail,a=e.startedAt,s=n-a;e.mediaRecorder.ondataavailable=null,e.fixVideoMetadata(i).then((function(t){e.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,fixedVideoBlob:t,videoUrl:window.URL.createObjectURL(t)}),e.turnOffCamera(),e.props.onRecordingComplete(t,a,o,s)}))})),B(_(e),"fixVideoMetadata",(function(e){var t,n;return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)?Promise.resolve(e):(null!==(n=(t=Blob.prototype).arrayBuffer)&&void 0!==n||(t.arrayBuffer=function(){return new Response(this).arrayBuffer()}),e.arrayBuffer().then((function(t){var n,r=(new o.Decoder).decode(t),i=["m","u","i","f","s","8","b","d"];r=null===(n=r)||void 0===n?void 0:n.filter((function(e){return i.includes(e.type)}));var a=new o.Reader;a.logging=!1,a.drop_default_duration=!1,r.forEach((function(e){return a.read(e)})),a.stop();var s=o.tools.makeMetadataSeekable(a.metadatas,a.duration,a.cues),l=t.slice(a.metadataSize);return new Blob([s,l],{type:e.type})})))})),B(_(e),"handleVideoSelected",(function(t){e.state.isReplayingVideo&&e.setState({isReplayingVideo:!1});var n=t.target.files||t.dataTransfer.files;if(0!==n.length){var r=(new Date).getTime(),i=n[0];t.target.value=null;var o="video/quicktime"===i.type?"mov":void 0;(0,f.default)(i).then((function(t){var n=t.duration,a=t.thumbnail;e.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,videoBlob:i,videoUrl:window.URL.createObjectURL(i)}),e.props.onRecordingComplete(i,r,a,n,o)})).catch((function(t){e.handleError(t)}))}})),B(_(e),"handleOpenVideoInput",(function(){e.props.onOpenVideoInput&&e.props.onOpenVideoInput(),e.videoInput.current.value=null,e.videoInput.current.click(),e.videoInput.current.addEventListener("change",e.handleVideoSelected)})),B(_(e),"handleStopReplaying",(function(){if(e.props.onStopReplaying&&e.props.onStopReplaying(),e.props.useVideoInput&&e.props.isOnInitially)return e.handleOpenVideoInput();e.setState({isReplayingVideo:!1}),e.state.isInlineRecordingSupported&&e.props.isOnInitially?e.turnOnCamera():e.state.isVideoInputSupported&&e.props.isOnInitially&&e.handleOpenVideoInput()})),B(_(e),"handleReplayVideoClick",(function(){e.replayVideo.paused&&!e.props.showReplayControls&&e.replayVideo.play(),e.props.replayVideoAutoplayAndLoopOff||e.setState({isReplayVideoMuted:!e.state.isReplayVideoMuted})})),e}return n=s,(r=[{key:"componentDidMount",value:function(){var e=this,t=!!window.MediaRecorder&&!!navigator.mediaDevices,n=void 0!==document.createElement("input").capture;this.setState({isInlineRecordingSupported:t,isVideoInputSupported:n},(function(){e.props.useVideoInput&&e.props.isOnInitially?e.handleOpenVideoInput():e.state.isInlineRecordingSupported&&e.props.isOnInitially?e.turnOnCamera():e.state.isVideoInputSupported&&e.props.isOnInitially&&e.handleOpenVideoInput()}))}},{key:"componentDidUpdate",value:function(e,t){this.replayVideo&&this.state.isReplayingVideo&&!t.isReplayingVideo&&this.tryToUnmuteReplayVideo()}},{key:"componentWillUnmount",value:function(){this.turnOffCamera(),this.isComponentUnmounted=!0}},{key:"renderCameraView",value:function(){var e=this,n=this.props,r=n.cameraViewClassName,i=n.showReplayControls,o=n.videoControlsList,a=n.disablePictureInPicture,s=n.replayVideoAutoplayAndLoopOff,l=n.renderDisconnectedView,u=n.renderVideoInputView,c=n.renderUnsupportedView,p=n.renderErrorView,f=n.renderLoadingView,m=n.useVideoInput,h=n.videoClassName,y=this.state,v=y.isVideoInputSupported,g=y.isReplayingVideo,b=y.isInlineRecordingSupported,w=y.thereWasAnError,k=y.error,T=y.isCameraOn,C=y.isConnecting,E=y.isReplayVideoMuted,S=y.isRecording,_=y.availableDeviceIds,R=m||!b&&v,I=R?t.default.createElement("input",{ref:this.videoInput,key:"videoInput",type:"file",accept:"video/*",capture:m?void 0:"user",style:{display:"none"},onChange:this.handleVideoSelected}):null;if(g)return t.default.createElement(O,{key:"replay",className:r},t.default.createElement(P,{ref:function(t){return e.replayVideo=t},className:h,src:this.state.videoUrl,loop:!0,muted:E,playsInline:!0,autoPlay:!s,controls:i,onClick:this.handleReplayVideoClick,onDurationChange:this.handleDurationChange,controlsList:o,disablePictureInPicture:a}),I);if(R)return u({videoInput:I});if(!b)return c();if(w)return p({error:k});if(T){var A=_&&_.length>=2&&!S?t.default.createElement(d.default,{onClick:this.handleSwitchCamera}):null;return t.default.createElement(O,{key:"camera"},t.default.createElement(P,{isFlipped:this.props.isFlipped,ref:function(t){return e.cameraVideo=t},autoPlay:!0,muted:!0,playsInline:!0}),A)}return C?f():l()}},{key:"render",value:function(){var e=this,n=this.state,r=n.isVideoInputSupported,i=n.isInlineRecordingSupported,o=n.thereWasAnError,a=n.isRecording,s=n.isCameraOn,l=n.streamIsReady,u=n.isConnecting,c=n.isRunningCountdown,d=n.isReplayingVideo,p=n.isReplayVideoMuted,f=this.props,m=f.countdownTime,h=f.timeLimit,y=f.showReplayControls,v=f.replayVideoAutoplayAndLoopOff,g=f.renderActions,b=f.t,w=f.useVideoInput,k=f.wrapperClassName;return t.default.createElement(x,{className:k},this.renderCameraView(),g({t:b,isVideoInputSupported:r,isInlineRecordingSupported:i,thereWasAnError:o,isRecording:a,isCameraOn:s,streamIsReady:l,isConnecting:u,isRunningCountdown:c,isReplayingVideo:d,isReplayVideoMuted:p,countdownTime:m,timeLimit:h,showReplayControls:y,replayVideoAutoplayAndLoopOff:v,useVideoInput:w,onTurnOnCamera:function(){return e.turnOnCamera()},onSwitchCamera:this.handleSwitchCamera,onTurnOffCamera:this.turnOffCamera,onOpenVideoInput:this.handleOpenVideoInput,onStartRecording:this.handleStartRecording,onStopRecording:this.handleStopRecording,onPauseRecording:this.handlePauseRecording,onResumeRecording:this.handleResumeRecording,onStopReplaying:this.handleStopReplaying}))}}])&&T(n.prototype,r),i&&T(n,i),s}(t.Component);e.default=M,B(M,"propTypes",{isOnInitially:r.default.bool,isFlipped:r.default.bool,mimeType:r.default.string,countdownTime:r.default.number,timeLimit:r.default.number,showReplayControls:r.default.bool,replayVideoAutoplayAndLoopOff:r.default.bool,constraints:r.default.shape({audio:r.default.any,video:r.default.any}),chunkSize:r.default.number,dataAvailableTimeout:r.default.number,useVideoInput:r.default.bool,videoControlsList:r.default.string,disablePictureInPicture:r.default.bool,renderDisconnectedView:r.default.func,renderLoadingView:r.default.func,renderVideoInputView:r.default.func,renderUnsupportedView:r.default.func,renderErrorView:r.default.func,renderActions:r.default.func,cameraViewClassName:r.default.string,videoClassName:r.default.string,wrapperClassName:r.default.string,t:r.default.func,onCameraOn:r.default.func,onTurnOnCamera:r.default.func,onSwitchCamera:r.default.func,onTurnOffCamera:r.default.func,onStartRecording:r.default.func,onStopRecording:r.default.func,onPauseRecording:r.default.func,onResumeRecording:r.default.func,onRecordingComplete:r.default.func,onOpenVideoInput:r.default.func,onStopReplaying:r.default.func,onError:r.default.func}),B(M,"defaultProps",{renderUnsupportedView:function(){return t.default.createElement(a.default,null)},renderErrorView:function(){return t.default.createElement(s.default,null)},renderVideoInputView:function(e){var n=e.videoInput;return t.default.createElement(t.default.Fragment,null,n)},renderDisconnectedView:function(){return t.default.createElement(l.default,null)},renderLoadingView:function(){return t.default.createElement(u.default,null)},t:function(e){return e},renderActions:p.default,isFlipped:!0,countdownTime:3e3,constraints:{audio:!0,video:!0},chunkSize:250,dataAvailableTimeout:500})}(R),function(e){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}});var t,n=(t=R)&&t.__esModule?t:{default:t}}(_);var yt,vt,gt,bt,wt=r(_);(vt=yt||(yt={})).Documents="DOCUMENTS",vt.Data="DATA",vt.Cache="CACHE",vt.External="EXTERNAL",vt.ExternalStorage="EXTERNAL_STORAGE",(bt=gt||(gt={})).UTF8="utf8",bt.ASCII="ascii",bt.UTF16="utf16";const kt=a("Filesystem",{web:()=>import("./web.ba99e875.js").then((e=>new e.FilesystemWeb))}),Tt=a("Share",{web:()=>import("./web.a5f6393f.js").then((e=>new e.ShareWeb))});var Ct="_feedFormContainer_ysq8i_1",Et="_alignSection_ysq8i_14",St="_feedVideoPreview_ysq8i_19",_t="_buttonWraper_ysq8i_59",Rt="_submit_ysq8i_67",It="_videoWrapper_ysq8i_91";const At=b([e=>e.get("webxrnative")],(e=>e));function Bt(){return console.log("changeWebXrNative Service"),async e=>{try{e(d())}catch(t){console.log(t),w(e,t.message)}}}var Dt="_ldsRing_1vveq_1";const xt=({text:e})=>i.createElement("div",{className:Dt},i.createElement("div",null),i.createElement("div",null),i.createElement("div",null),i.createElement("div",null),i.createElement("span",null,e));var Ot=k((e=>({popupsState:g(e),feedsState:T(e),webxrnativeState:At(e)})),(e=>({createFeed:p(f,e),updateFeedAsAdmin:p(m,e),updateNewFeedPageState:p(h,e),updateShareFormState:p(y,e),updateArMediaState:p(v,e),changeWebXrNative:p(Bt,e)})))((({feed:e,createFeed:t,updateFeedAsAdmin:r,updateNewFeedPageState:a,updateShareFormState:l,updateArMediaState:u,popupsState:c,feedsState:d,webxrnativeState:p,changeWebXrNative:f})=>{const[m,h]=n.exports.useState(!1),[y,v]=n.exports.useState(!1),[g,b]=n.exports.useState(!1),[w,k]=n.exports.useState(e?e.title:""),[T,S]=n.exports.useState(e?e.description:""),[_,R]=n.exports.useState(null);n.exports.useState(null),n.exports.useState(null);const[I,A]=n.exports.useState(null);n.exports.useState(!1);const[B,D]=n.exports.useState(!1),[x,O]=n.exports.useState(!1);i.useRef(),i.useRef(),i.useRef();const{t:P}=o(),M=null==c?void 0:c.get("videoPath"),V=null==c?void 0:c.get("fPath"),U=null==c?void 0:c.get("nameId"),{XRPlugin:L}=s,j=p.get("webxrnative"),N=d.get("lastFeedVideoUrl");n.exports.useEffect((()=>{console.log("videoUrl",N),console.log(N)}),[N]);n.exports.useEffect((()=>{(async()=>{const e=await kt.readFile({path:V});var t=t||"",n=1024;try{var r=atob(e.data)}catch(h){alert(JSON.stringify(h))}for(var i=r.length,o=Math.ceil(i/n),a=new Array(o),s=0;s<o;++s){for(var l=s*n,u=Math.min(l+n,i),c=new Array(u-l),d=l,p=0;d<u;++p,++d)c[p]=r[d].charCodeAt(0);a[s]=new Uint8Array(c)}const f=new Blob(a,{type:t}),m=new File([f],"test.mp4");console.log(m.size),R(m),new FileReader,A(m),D(!0)})()}),[]);const F=()=>{a(!1,null,null,null),j&&f(),L.deleteVideo({videoDir:V})};n.exports.useEffect((()=>()=>{h(null)}));const z=d.get("feedsFetching");return i.createElement("section",{className:Ct},z&&i.createElement(xt,{text:"Publishing..."}),!B&&i.createElement(xt,{text:"Loading..."}),m?i.createElement(C,null,P("social:feedForm.thanks")):i.createElement("section",{className:Et},M&&i.createElement("video",{className:St,id:_,autoPlay:!1,loop:!0,muted:!1,playsInline:!0,controls:!0},i.createElement("source",{src:M,type:"video/mp4"})),i.createElement("div",{className:_t},M&&i.createElement("div",null,i.createElement(E,{variant:"contained",className:Rt,onClick:()=>(async()=>{const n={title:w.trim(),description:T.trim(),video:_,preview:I};if(console.log(n),!n.video&&!n.preview)return alert("Error! Please try again."),void F();e?r(e.id,n):await t(n),k(""),S(""),R(null),A(null),h(!0),j&&f(),L.deleteVideo({videoDir:V}),a(!1,null,null,null)})()},"Add Feed")),!!N&&i.createElement(E,{variant:"contained",className:Rt,onClick:()=>{Tt.share({title:P("social:shareForm.arcMedia"),text:P("social:shareForm.videoCreated"),url:V,dialogTitle:P("social:shareForm.shareWithBuddies")})}},"Share"),x?"":i.createElement(E,{variant:"contained",className:Rt,onClick:()=>{L.saveVideoTo({videoDir:V,nameId:U}),O(!0)}},"Save"),i.createElement(E,{variant:"contained",className:Rt,onClick:()=>F()},"Cancel")),!0===y&&i.createElement("section",{className:It},i.createElement(wt,{onRecordingComplete:e=>{R(e),b(!0)}}),g&&i.createElement(E,{variant:"contained",color:"secondary",className:Rt,onClick:()=>{v(!1),b(!1)}},P("social:feedForm.save")))))}));function Pt(){return i.createElement("div",{className:S.viewport},i.createElement(Ot,null),i.createElement(l,null))}export{Pt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
