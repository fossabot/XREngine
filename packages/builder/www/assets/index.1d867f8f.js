function n(n,r){return n===r}function r(n,r,t){if(null===r||null===t||r.length!==t.length)return!1;for(var e=r.length,u=0;u<e;u++)if(!n(r[u],t[u]))return!1;return!0}function t(n){var r=Array.isArray(n[0])?n[0]:n;if(!r.every((function(n){return"function"==typeof n}))){var t=r.map((function(n){return typeof n})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+t+"]")}return r}var e=function(n){for(var r=arguments.length,e=Array(r>1?r-1:0),u=1;u<r;u++)e[u-1]=arguments[u];return function(){for(var r=arguments.length,u=Array(r),o=0;o<r;o++)u[o]=arguments[o];var l=0,i=u.pop(),c=t(u),a=n.apply(void 0,[function(){return l++,i.apply(null,arguments)}].concat(e)),f=n((function(){for(var n=[],r=c.length,t=0;t<r;t++)n.push(c[t].apply(null,arguments));return a.apply(null,n)}));return f.resultFunc=i,f.dependencies=c,f.recomputations=function(){return l},f.resetRecomputations=function(){return l=0},f}}((function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,u=null,o=null;return function(){return r(e,u,arguments)||(o=t.apply(null,arguments)),u=arguments,o}}));export{e as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWQ4NjdmOGYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBwcmV2LCBuZXh0KSB7XG4gIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRG8gdGhpcyBpbiBhIGZvciBsb29wIChhbmQgbm90IGEgYGZvckVhY2hgIG9yIGFuIGBldmVyeWApIHNvIHdlIGNhbiBkZXRlcm1pbmUgZXF1YWxpdHkgYXMgZmFzdCBhcyBwb3NzaWJsZS5cbiAgdmFyIGxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbGl0eUNoZWNrKHByZXZbaV0sIG5leHRbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jKSB7XG4gIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RXF1YWxpdHlDaGVjaztcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgbGFzdEFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICB2YXIgbGVuZ3RoID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgYW5kIG11dGF0ZSBhIGxvY2FsIGxpc3Qgb2YgcGFyYW1zIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IucmVzdWx0RnVuYyA9IHJlc3VsdEZ1bmM7XG4gICAgc2VsZWN0b3IuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycykge1xuICB2YXIgc2VsZWN0b3JDcmVhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjcmVhdGVTZWxlY3RvcjtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKCd3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAnICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIHZhbHVlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufSJdLCJuYW1lcyI6WyJhIiwiYiIsImVxdWFsaXR5Q2hlY2siLCJwcmV2IiwibmV4dCIsImxlbmd0aCIsImkiLCJmdW5jcyIsImRlcGVuZGVuY2llcyIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiZGVwIiwiZGVwZW5kZW5jeVR5cGVzIiwibWFwIiwiam9pbiIsIkVycm9yIiwiY3JlYXRlU2VsZWN0b3IiLCJtZW1vaXplIiwiX2xlbiIsImFyZ3VtZW50cyIsIm1lbW9pemVPcHRpb25zIiwiX2tleSIsIl9sZW4yIiwiX2tleTIiLCJyZWNvbXB1dGF0aW9ucyIsInJlc3VsdEZ1bmMiLCJwb3AiLCJnZXREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJhcHBseSIsImNvbmNhdCIsInNlbGVjdG9yIiwicGFyYW1zIiwicHVzaCIsInJlc2V0UmVjb21wdXRhdGlvbnMiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJmdW5jIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbCJdLCJtYXBwaW5ncyI6IkFBQUEsV0FBOEJBLEVBQUdDLFVBQ3hCRCxJQUFNQyxFQUdmLFdBQW9DQyxFQUFlQyxFQUFNQyxNQUMxQyxPQUFURCxHQUEwQixPQUFUQyxHQUFpQkQsRUFBS0UsU0FBV0QsRUFBS0MsY0FDbEQsVUFJTEEsRUFBU0YsRUFBS0UsT0FDVEMsRUFBSSxFQUFHQSxFQUFJRCxFQUFRQyxRQUNyQkosRUFBY0MsRUFBS0csR0FBSUYsRUFBS0UsV0FDeEIsU0FJSixFQW9CVCxXQUF5QkMsT0FDbkJDLEVBQWVDLE1BQU1DLFFBQVFILEVBQU0sSUFBTUEsRUFBTSxHQUFLQSxNQUVuREMsRUFBYUcsT0FBTSxTQUFVQyxTQUNWLG1CQUFSQSxLQUNaLEtBQ0VDLEVBQWtCTCxFQUFhTSxLQUFJLFNBQVVGLGlCQUNqQ0EsS0FDYkcsS0FBSyxZQUNGLElBQUlDLE1BQU0sd0dBQWdISCxFQUFrQixZQUc3SUwsRUFpREMsSUFBQ1MsRUE5Q0osU0FBK0JDLFdBQzNCQyxFQUFPQyxVQUFVZixPQUFRZ0IsRUFBaUJaLE1BQU1VLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlHLEVBQU8sRUFBR0EsRUFBT0gsRUFBTUcsTUFDekZBLEVBQU8sR0FBS0YsVUFBVUUsVUFHaEMsbUJBQ0lDLEVBQVFILFVBQVVmLE9BQVFFLEVBQVFFLE1BQU1jLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsTUFDM0VBLEdBQVNKLFVBQVVJLE9BR3ZCQyxFQUFpQixFQUNqQkMsRUFBYW5CLEVBQU1vQixNQUNuQm5CLEVBQWVvQixFQUFnQnJCLEdBRS9Cc0IsRUFBcUJYLEVBQVFZLFdBQU0sRUFBVyxDQUFDLHNCQUcxQ0osRUFBV0ksTUFBTSxLQUFNVixhQUM3QlcsT0FBT1YsSUFHTlcsRUFBV2QsR0FBUSxtQkFDakJlLEVBQVMsR0FDVDVCLEVBQVNHLEVBQWFILE9BRWpCQyxFQUFJLEVBQUdBLEVBQUlELEVBQVFDLE1BRW5CNEIsS0FBSzFCLEVBQWFGLEdBQUd3QixNQUFNLEtBQU1WLG1CQUluQ1MsRUFBbUJDLE1BQU0sS0FBTUcsZUFHL0JQLFdBQWFBLElBQ2JsQixhQUFlQSxJQUNmaUIsZUFBaUIsa0JBQ2pCQSxLQUVBVSxvQkFBc0Isa0JBQ3RCVixFQUFpQixHQUVuQk8sR0FJaUJJLEVBOUVyQixTQUF3QkMsT0FDekJuQyxFQUFnQmtCLFVBQVVmLE9BQVMsUUFBc0IsSUFBakJlLFVBQVUsR0FBbUJBLFVBQVUsR0FBS2tCLEVBRXBGQyxFQUFXLEtBQ1hDLEVBQWEsWUFFVixrQkFDQUMsRUFBMkJ2QyxFQUFlcUMsRUFBVW5CLGVBRTFDaUIsRUFBS1AsTUFBTSxLQUFNVixjQUdyQkEsVUFDSm9CIn0=
