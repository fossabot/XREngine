var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,r=(t,n,i)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i,o=(e,o)=>{for(var s in o||(o={}))n.call(o,s)&&r(e,s,o[s]);if(t)for(var s of t(o))i.call(o,s)&&r(e,s,o[s]);return e};import{E as s}from"./EmptyLayout.6bc3f5e1.js";import{u as a,a as l,b as c,l as d,c as h,e as m,f as u,g as p,r as w,N as g,d as f}from"./service.2cb21ce4.js";import{r as _,h as y,R as v,u as E}from"./vendor.40ddfb4b.js";import{_ as C,b}from"./_app.e67b0e96.js";import{s as x}from"./selector.d1cb6f6a.js";import{c as j,S as M}from"./Paper.24cff5e5.js";import{C as N,v as R,a as H}from"./index.b0bd5cc1.js";import{c as L}from"./feathers.42c2841d.js";import{B as k}from"./Button.31285e4e.js";import{T as O}from"./TextField.cbc648d1.js";import{w as P,c as T}from"./capitalize.f4eb3e2e.js";import{u as B,F as S}from"./InputLabel.7f84de76.js";import{T as A}from"./Typography.9d0f0940.js";import"./index.1d867f8f.js";import"./Box.cb35bf4d.js";import"./IconButton.32d4e708.js";import"./createSvgIcon.f2e498dd.js";import"./useControlled.e1604cb7.js";import"./Dialog.c787f71e.js";import"./Modal.c801ca2c.js";import"./Backdrop.9ef065d7.js";import"./DialogTitle.bed0cd09.js";import"./Popover.1d8a9ca1.js";import"./List.52b49b17.js";var V=_.exports.forwardRef((function(e,t){var n=e.children,i=e.classes,r=e.className,o=e.component,s=void 0===o?"div":o,a=e.disablePointerEvents,l=void 0!==a&&a,c=e.disableTypography,d=void 0!==c&&c,h=e.position,m=e.variant,u=y(e,["children","classes","className","component","disablePointerEvents","disableTypography","position","variant"]),p=B()||{},w=m;return m&&p.variant,p&&!w&&(w=p.variant),_.exports.createElement(S.Provider,{value:null},_.exports.createElement(s,C({className:T(i.root,r,"end"===h?i.positionEnd:i.positionStart,l&&i.disablePointerEvents,p.hiddenLabel&&i.hiddenLabel,"filled"===w&&i.filled,"dense"===p.margin&&i.marginDense),ref:t},u),"string"!=typeof n||d?n:_.exports.createElement(A,{color:"textSecondary"},n)))})),I=P({root:{display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap"},filled:{"&$positionStart:not($hiddenLabel)":{marginTop:16}},positionStart:{marginRight:8},positionEnd:{marginLeft:8},disablePointerEvents:{pointerEvents:"none"},hiddenLabel:{},marginDense:{}},{name:"MuiInputAdornment"})(V),U=j(_.exports.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"})),q=j(_.exports.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"})),D=j(_.exports.createElement("path",{d:"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"})),W=j(_.exports.createElement("path",{d:"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3"})),z=j(_.exports.createElement("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}));const F=e=>v.createElement(M,o({},e),v.createElement("svg",{width:"40",height:"40",viewBox:"0 0 40 40",fill:"none",xmlns:"http://www.w3.org/2000/svg"},v.createElement("path",{d:"M40 20C40 8.9543 31.0457 0 20 0C8.9543 0 0 8.9543 0 20C0 29.9824 7.31367 38.2566 16.875 39.757V25.7813H11.7969V20H16.875V15.5938C16.875 10.5813 19.8609 7.8125 24.4293 7.8125C26.6168 7.8125 28.9062 8.20312 28.9062 8.20312V13.125H26.3844C23.9 13.125 23.125 14.6668 23.125 16.25V20H28.6719L27.7852 25.7813H23.125V39.757C32.6863 38.2566 40 29.9824 40 20Z",fill:"#1877F2"}),v.createElement("path",{d:"M27.7852 25.7812L28.6719 20H23.125V16.25C23.125 14.6684 23.9 13.125 26.3844 13.125H28.9062V8.20312C28.9062 8.20312 26.6176 7.8125 24.4293 7.8125C19.8609 7.8125 16.875 10.5813 16.875 15.5938V20H11.7969V25.7812H16.875V39.757C18.9457 40.081 21.0543 40.081 23.125 39.757V25.7812H27.7852Z",fill:"white"}))),Z=e=>v.createElement(M,o({},e),v.createElement("svg",{width:"40",height:"40",viewBox:"0 0 40 40",fill:"none",xmlns:"http://www.w3.org/2000/svg"},v.createElement("g",{clipPath:"url(#clip0)"},v.createElement("path",{d:"M39.6104 20.4604C39.6104 19.1009 39.5002 17.734 39.265 16.3965H20.4004V24.0981H31.2033C30.755 26.582 29.3146 28.7794 27.2055 30.1756V35.1729H33.6505C37.4352 31.6895 39.6104 26.5453 39.6104 20.4604Z",fill:"#4285F4"}),v.createElement("path",{d:"M20.3998 40.0015C25.7939 40.0015 30.3429 38.2305 33.6572 35.1733L27.2123 30.1761C25.4191 31.396 23.1042 32.0868 20.4072 32.0868C15.1895 32.0868 10.7654 28.5667 9.17809 23.834H2.52734V28.9856C5.92253 35.7392 12.8378 40.0015 20.3998 40.0015Z",fill:"#34A853"}),v.createElement("path",{d:"M9.17129 23.8345C8.33351 21.3506 8.33351 18.6609 9.17129 16.177V11.0254H2.52789C-0.308777 16.6767 -0.308777 23.3348 2.52789 28.9861L9.17129 23.8345Z",fill:"#FBBC04"}),v.createElement("path",{d:"M20.3998 7.9161C23.2512 7.87201 26.007 8.94494 28.0721 10.9144L33.7822 5.20436C30.1665 1.80917 25.3677 -0.0574433 20.3998 0.00134778C12.8378 0.00134778 5.92253 4.2637 2.52734 11.0247L9.17074 16.1763C10.7507 11.4362 15.1821 7.9161 20.3998 7.9161Z",fill:"#EA4335"})),v.createElement("defs",null,v.createElement("clipPath",{id:"clip0"},v.createElement("rect",{width:"40",height:"40",fill:"white"}))))),$=e=>v.createElement(M,o({},e),v.createElement("svg",{width:"40",height:"40",viewBox:"0 0 40 40",fill:"none",xmlns:"http://www.w3.org/2000/svg"},v.createElement("g",{clipPath:"url(#clip0)"},v.createElement("path",{d:"M37.0472 0H2.95278C2.16965 0 1.4186 0.311096 0.864849 0.864849C0.311096 1.4186 0 2.16965 0 2.95278V37.0472C0 37.8303 0.311096 38.5814 0.864849 39.1352C1.4186 39.6889 2.16965 40 2.95278 40H37.0472C37.8303 40 38.5814 39.6889 39.1352 39.1352C39.6889 38.5814 40 37.8303 40 37.0472V2.95278C40 2.16965 39.6889 1.4186 39.1352 0.864849C38.5814 0.311096 37.8303 0 37.0472 0ZM11.9222 34.075H5.90833V14.9722H11.9222V34.075ZM8.91111 12.325C8.22894 12.3212 7.56319 12.1153 6.99789 11.7335C6.43259 11.3516 5.99307 10.8109 5.7348 10.1795C5.47652 9.54808 5.41108 8.85432 5.54672 8.18576C5.68236 7.5172 6.013 6.90379 6.49693 6.42297C6.98085 5.94214 7.59636 5.61544 8.26578 5.4841C8.9352 5.35276 9.62852 5.42266 10.2583 5.68498C10.888 5.9473 11.4259 6.39028 11.8041 6.95802C12.1823 7.52576 12.3839 8.19282 12.3833 8.875C12.3898 9.33172 12.3042 9.78506 12.1317 10.208C11.9592 10.6309 11.7033 11.0148 11.3793 11.3368C11.0553 11.6587 10.6697 11.9121 10.2457 12.0819C9.82167 12.2517 9.36778 12.3344 8.91111 12.325ZM34.0889 34.0917H28.0778V23.6556C28.0778 20.5778 26.7694 19.6278 25.0806 19.6278C23.2972 19.6278 21.5472 20.9722 21.5472 23.7333V34.0917H15.5333V14.9861H21.3167V17.6333H21.3944C21.975 16.4583 24.0083 14.45 27.1111 14.45C30.4667 14.45 34.0917 16.4417 34.0917 22.275L34.0889 34.0917Z",fill:"#137EEA"})),v.createElement("defs",null,v.createElement("clipPath",{id:"clip0"},v.createElement("rect",{width:"40",height:"40",fill:"white"}))))),K=e=>v.createElement(M,o({},e),v.createElement("svg",{width:"40",height:"40",viewBox:"0 0 40 40",fill:"none",xmlns:"http://www.w3.org/2000/svg"},v.createElement("path",{d:"M12.5792 36.2521C27.6736 36.2521 35.9296 23.7465 35.9296 12.9017C35.9296 12.5465 35.9296 12.1929 35.9056 11.8409C37.5117 10.6791 38.8982 9.24069 40 7.59288C38.5023 8.25688 36.9134 8.69214 35.2864 8.88408C36.9997 7.85856 38.2819 6.24539 38.8944 4.34488C37.2835 5.30089 35.5211 5.97459 33.6832 6.33688C32.4459 5.02118 30.8094 4.14995 29.027 3.85802C27.2446 3.56609 25.4157 3.86974 23.8233 4.72197C22.2309 5.5742 20.9637 6.9275 20.2179 8.57246C19.4721 10.2174 19.2892 12.0623 19.6976 13.8217C16.4348 13.658 13.2429 12.8101 10.3291 11.3329C7.41526 9.85571 4.84461 7.78231 2.784 5.24728C1.73455 7.05394 1.41312 9.19266 1.88517 11.228C2.35721 13.2633 3.58724 15.0422 5.3248 16.2025C4.01872 16.1642 2.74108 15.8119 1.6 15.1753V15.2793C1.60052 17.174 2.25642 19.0103 3.45645 20.4766C4.65648 21.9428 6.32677 22.9489 8.184 23.3241C6.9758 23.6536 5.70812 23.7018 4.4784 23.4649C5.00302 25.0954 6.02405 26.5213 7.39873 27.5431C8.77342 28.5649 10.433 29.1317 12.1456 29.1641C10.4441 30.5015 8.49552 31.4904 6.41146 32.0741C4.32739 32.6578 2.14869 32.8248 0 32.5657C3.75306 34.974 8.11987 36.2515 12.5792 36.2457",fill:"#1DA1F2"}))),X="Avatar",G="ReadyPlayer",J={message:"Method not found",code:-32601},Q={message:"Server error",code:-32e3};function Y(e,t){if(void 0===t&&(t=window.location.href),"function"==typeof URL)return new URL(e,t);if("string"!=typeof e)throw new TypeError('"url" must be a string.');e.includes(":")||(e=t.startsWith("http")&&!e.startsWith("/")?t+"/"+e:t+e);const n=document.createElement("a");n.href=e;let i=(n.protocol||window.location.protocol)+"//";n.host?"http:"===n.protocol&&"80"===n.port||"https:"===n.protocol&&"443"===n.port?i+=n.hostname:i+=n.host:i+=window.location.host;let r=n.pathname;return r.startsWith("/")||(r="/"+r),{host:n.host||window.location.host,hostname:n.hostname,origin:i,protocol:n.protocol,pathname:r}}function ee(e,t){for(t=e="";e++<36;t+=51*e&52?(15^e?8^Math.random()*(20^e?16:4):4).toString(16):"-");return t}function te(e){return e&&"object"==typeof e&&"2.0"===e.jsonrpc&&e.id&&"string"==typeof e.id}function ne({listener:e,origin:t,handle:n,expectRequest:i}){if(ie(n)){const e=n;n=!1,e.then((e=>n=e))}return r=>{var o;r.source===n&&r.origin===t&&(i&&(te(o=r.data)&&Array.isArray(o.params))||!i&&function(e){return te(e)&&!!("result"in e^"error"in e)&&(!("error"in e)||(t=e.error)&&"object"==typeof t&&"number"==typeof t.code&&"string"==typeof t.message);var t}(r.data))&&e(r.data,r)}}function ie(e){try{return"function"==typeof e.then}catch(t){}return!1}
/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class re{constructor(){this.origin=null,this._handle=null,this._listener=null,this._pending=new Map}async connect(e,t){if(this._listener)throw new Error("Already connected.");t=t||{};const n=this;n.origin=Y(e).origin,n._handle=t.handle||window.parent||window.opener;const i=n._pending;return n._listener=ne({origin:n.origin,handle:n._handle,expectRequest:!1,listener:e=>{if(!i.has(e.id))return;const{resolve:t,reject:n,cancelTimeout:r}=i.get(e.id);if(r(),"result"in e)return t(e.result);n(function(e){let t;return"DOMException"===e.constructor?t=new DOMException(e.message,e.name):(t=new Error(e.message),"code"in e&&(t.code=e.code)),e.details&&(t.details=e.details),t}(e.error))}}),window.addEventListener("message",n._listener),new oe(n)}async send(e,t,{timeout:n=3e4}){if(!this._listener)throw new Error("RPC client not connected.");const i=this,r={jsonrpc:"2.0",id:ee(),method:e,params:t};if(ie(i._handle)){(await i._handle).postMessage(r,i.origin)}else i._handle.postMessage(r,i.origin);return new Promise(((e,t)=>{const o=i._pending;let s;if(n>0){const e=setTimeout((()=>{o.delete(r.id),t(new Error("RPC call timed out."))}),n);s=()=>{o.delete(r.id),clearTimeout(e)}}else s=()=>{o.delete(r.id)};o.set(r.id,{resolve:e,reject:t,cancelTimeout:s})}))}close(){if(this._listener){window.removeEventListener("message",this._listener),this._handle=this.origin=this._listener=null;for(const e of this._pending.values())e.reject(new Error("RPC client closed."));this._pending=new Map}}}class oe{constructor(e){this.client=e,this._apis=new Map}define(e,t){if(!e||"string"!=typeof e)throw new TypeError("`name` must be a non-empty string.");if(!t||"object"!=typeof t||!Array.isArray(t.functions))throw new TypeError("`definition.function` must be an array of function names or function definition objects to be defined.");const n=this,i={};return t.functions.forEach((t=>{"string"==typeof t&&(t={name:t,options:{}}),i[t.name]=async function(){return n.client.send(e+"."+t.name,[...arguments],t.options)}})),n._apis[e]=i,i}get(e,t){if(!this._apis[e]){if(t)return this.define(e,t);throw new Error(`API "${e}" has not been defined.`)}return this._apis[e]}}
/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class se{constructor({deserialize:e=(e=>e),waitUntil:t=(async()=>{})}={}){this._listeners=[],this._deserialize=e,this._waitUntil=t}async emit(e){return e=this._deserialize(e),(this._listeners[e.type]||[]).forEach((t=>t(e))),this._waitUntil(e)}addEventListener(e,t){this._listeners[e]?this._listeners[e].push(t):this._listeners[e]=[t]}removeEventListener(e,t){const n=this._listeners[e];if(!n)return;const i=n.indexOf(t);-1!==i&&n.splice(i,1)}}
/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ae{constructor(){this.origin=null,this._handle=null,this._apis=new Map}define(e,t){if(!e||"string"!=typeof e)throw new TypeError("`name` must be a non-empty string.");if(!t||"object"===t)throw new TypeError("`api` must be an object.");if(e in this._apis)throw new Error(`The "${e}" API is already defined.`);this._apis[e]=t}async listen(e,t){if(this._listener)throw new Error("Already listening.");t=t||{};const n=this;n.origin=Y(e).origin,n._handle=t.handle||window.parent||window.opener;const i="true"===t.ignoreUnknownApi||!1;n._listener=ne({origin:n.origin,handle:n._handle,expectRequest:!0,listener:e=>{const{name:t,method:r}=function(e){let[t,...n]=e.split(".");const i=n.pop();return t=[t,...n].join("."),{name:t,method:i}}(e.method),o=n._apis[t];if(r&&r.startsWith("_"))return le(n._handle,n.origin,e);if(!o&&i)return;if(!o||"function"!=typeof o[r])return le(n._handle,n.origin,e);const s=o[r];(async()=>{const t={jsonrpc:"2.0",id:e.id};try{t.result=await s.apply(o,e.params)}catch(i){t.error=function(e){const t={message:e.message};return"Error"!==e.constructor.name&&(t.constructor=e.constructor.name),"name"in e&&(t.name=e.name),t.code="code"in e?e.code:Q.code,"details"in e&&(t.details=e.details),t}(i)}n._handle&&(ie(n._handle)?n._handle.then((e=>e.postMessage(t,n.origin))):n._handle.postMessage(t,n.origin))})()}}),window.addEventListener("message",n._listener)}close(){this._listener&&(window.removeEventListener("message",this._listener),this._handle=this.origin=this._listener=null)}}function le(e,t,n){const i={jsonrpc:"2.0",id:n.id,error:Object.assign({},J)};return ie(e)?e.then((e=>e.postMessage(i,t))):e.postMessage(i,t)}
/*!
 * A WebApp is a remote application that runs in a WebAppContext.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ce{constructor(e,{timeout:t=6e4,handle:n,iframe:i,windowControl:r,className:o=null,customize:s=null}={}){if(this.visible=!1,this.dialog=null,this.iframe=null,this.handle=null,this.windowControl=null,this._ready=!1,this._private={},this._timeoutId=null,this._private._readyPromise=new Promise(((e,n)=>{this._timeoutId=setTimeout((()=>n(new DOMException("Loading Web application window timed out.","TimeoutError"))),t),this._private._resolveReady=t=>{clearTimeout(this.timeoutId),this._timeoutId=null,e(t)},this._private._rejectReady=e=>{clearTimeout(this.timeoutId),this._timeoutId=null,n(e)}})),this._private.isReady=async()=>this._private._readyPromise,this._private.destroy=()=>{this._timeoutId&&this._private._rejectReady(new DOMException("Web application window closed before ready.","AbortError")),this.dialog&&(this.dialog.parentNode.removeChild(this.dialog),this.dialog=null)},i){if("object"!=typeof i||!i.contentWindow)throw new TypeError("`options.iframe` must be an iframe element.");return this.windowControl={handle:i.contentWindow,show(){i.style.visibility="visible"},hide(){i.style.visibility="hidden"}},this.iframe=i,void(this.handle=this.iframe.contentWindow)}if(r)return this.windowControl=r,void(this.handle=this.windowControl.handle);if(n)return void(this.handle=n);this.dialog=document.createElement("dialog"),de(this.dialog,{position:"fixed",top:0,left:0,width:"100%",height:"100%","max-width":"100%","max-height":"100%",display:"none",margin:0,padding:0,border:"none",background:"transparent",color:"black","box-sizing":"border-box",overflow:"hidden","z-index":1e6}),this.dialog.className="web-app-window","string"==typeof o&&(this.dialog.className=this.dialog.className+" "+o);const a=document.createElement("style");if(a.appendChild(document.createTextNode("dialog.web-app-window::backdrop {\n        background-color: transparent;\n      }")),this.container=document.createElement("div"),de(this.container,{position:"relative",width:"100%",height:"100%",margin:0,padding:0,display:"flex","flex-direction":"column"}),this.container.className="web-app-window-backdrop",this.iframe=document.createElement("iframe"),this.iframe.src=e,this.iframe.scrolling="auto",de(this.iframe,{position:"fixed",top:0,left:0,width:"100%",height:"100%",border:"none",background:"transparent",overflow:"hidden",margin:0,padding:0,"flex-grow":1}),this.dialog.appendChild(a),this.container.appendChild(this.iframe),this.dialog.appendChild(this.container),this.dialog.addEventListener("cancel",(e=>{e.preventDefault(),this.hide()})),document.body.appendChild(this.dialog),this.handle=this.iframe.contentWindow,s)try{s({dialog:this.dialog,container:this.container,iframe:this.iframe,webAppWindow:this})}catch(l){console.error(l)}}ready(){this._ready=!0,this._private._resolveReady(!0)}show(){if(!this.visible){this.visible=!0;const e=document.querySelector("body");this._bodyOverflowStyle=e.style.overflow,e.style.overflow="hidden",this.dialog?(this.dialog.style.display="block",this.dialog.showModal&&this.dialog.showModal()):this.windowControl.show&&this.windowControl.show()}}hide(){if(this.visible){this.visible=!1;const t=document.querySelector("body");if(this._bodyOverflowStyle?t.style.overflow=this._bodyOverflowStyle:t.style.overflow="",this.dialog){if(this.dialog.style.display="none",this.dialog.close)try{this.dialog.close()}catch(e){console.error(e)}}else this.windowControl.hide&&this.windowControl.hide()}}}function de(e,t){for(const n in t)e.style[n]=t[n]}
/*!
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class he{constructor(){this.client=new re,this.server=new ae,this.injector=null,this.control=null,this.loaded=!1,this.closed=!1}async createWindow(e,{timeout:t=1e4,iframe:n,handle:i,windowControl:r,className:o,customize:s}={}){if(this.loaded)throw new Error("AppContext already loaded.");this.loaded=!0,this.control=new ce(e,{timeout:t,iframe:n,handle:i,windowControl:r,className:o,customize:s}),this.server.define("core.control",this.control);const a=Y(e).origin;return this.server.listen(a,{handle:this.control.handle,ignoreUnknownApi:!0}),await this.control._private.isReady(),this.injector=await this.client.connect(a,{handle:this.control.handle}),this.injector}close(){this.closed||(this.closed=!0,this.control._private.destroy(),this.server.close(),this.client.close())}}
/*!
 * A CredentialRequestEvent is emitted when a request has been made for
 * credentials.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class me{constructor({credentialHandler:e,credentialRequestOrigin:t,credentialRequestOptions:n,hintKey:i}){this.type="credentialrequest",this._credentialHandler=e,this.credentialRequestOrigin=t,this.credentialRequestOptions=n,this.hintKey=i}async openWindow(e){await this._credentialHandler.show();const t=new ce(e,{className:"credential-handler"});return t.ready(),t.show(),t.handle}respondWith(e){this._promise=e}}
/*!
 * A CredentialStoreEvent is emitted when a request has been made to
 * store a credential.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ue{constructor({credentialHandler:e,credentialRequestOrigin:t,credential:n,hintKey:i}){this.type="credentialstore",this._credentialHandler=e,this.credentialRequestOrigin=t,this.credential=n,this.hintKey=i}async openWindow(e){await this._credentialHandler.show();const t=new ce(e);return t.ready(),t.show(),t.handle}respondWith(e){this._promise=e}}
/*!
 * A CredentialHandlerService handles remote calls to a CredentialHandler.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class pe{constructor(e){this._credentialHandler=e}async request(e){return await this._credentialHandler._emitter.emit(new me(Object.assign({credentialHandler:this._credentialHandler},e)))}async store(e){return await this._credentialHandler._emitter.emit(new ue(Object.assign({credentialHandler:this._credentialHandler},e)))}}
/*!
 * The core CredentialHandler class.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */const we=["credentialrequest","credentialstore"];class ge extends class{constructor(e){this.relyingOrigin=Y(e).origin,this.client=null,this.injector=null,this.client=new re,this.server=new ae,this._control=null,this._connected=!1}async connect(){return this.injector=await this.client.connect(this.relyingOrigin),this._connected=!0,this._control=this.injector.define("core.control",{functions:["ready","show","hide"]}),this.server.listen(this.relyingOrigin),this.injector}async ready(){if(!this._connected)throw new Error('WebApp not connected. Did you call ".connect()"?');return await this._control.ready(),this}close(){this._connected&&(this.server.close(),this.client.close(),this._connected=!1)}async show(){if(!this._connected)throw new Error('Cannot "show" yet; not connected. Did you call ".connect()"?');return this._control.show()}async hide(){if(!this._connected)throw new Error('Cannot "hide" yet; not connected. Did you call ".connect()?"');return this._control.hide()}}
/*!
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */{constructor(e){if("string"!=typeof e)throw new TypeError('"mediatorOrigin" must be a string.');super(e),this._emitter=new se({waitUntil:async e=>e._promise||Promise.reject(new DOMException('No "credentialrequest" event handler found.',"NotFoundError"))})}async connect(){const e=await super.connect();return this.server.define("credentialHandler",new pe(this)),await this.ready(),e}addEventListener(e,t){if(!we.includes(e))throw new DOMException(`Unsupported event type "${e}"`,"NotSupportedError");return this._emitter.addEventListener(e,t)}removeEventListener(e,t){if(!we.includes(e))throw new DOMException(`Unsupported event type "${e}"`,"NotSupportedError");return this._emitter.removeEventListener(e,t)}}
/*!
 * API for managing CredentialHints.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class fe{constructor(e,t){const n=t.get("credentialHints",{functions:["delete","get","keys","has","set","clear"]});for(let i in n)"set"!==i&&(this[i]=n[i].bind(this,e));this._remoteSet=n.set.bind(this,e)}async set(e,t){t.icons=t.icons||[];const n=t.icons.map((e=>{return(t=e.src,new Promise((e=>{const n=new Image;n.crossOrigin="Anonymous",n.onload=()=>{let t=document.createElement("canvas");const i=t.getContext("2d");t.height=n.height,t.width=n.width,i.drawImage(n,0,0);const r=t.toDataURL();e(r),t=null},n.onerror=()=>e(null),n.src=t}))).then((t=>{e.fetchedImage=t}));var t;
/*!
 * A CredentialManager for a Web Credential Mediator.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */}));return await Promise.all(n),this._remoteSet(e,t)}}class _e{constructor(e,t){if(!e||"string"!=typeof e)throw new TypeError('"url" must be a non-empty string.');this.hints=new fe(e,t)}static async requestPermission(){return(await navigator.credentialsPolyfill.permissions.request({name:"credentialhandler"})).state}}
/*!
 * A CredentialHandlerRegistration provides a CredentialManager to enable Web
 * apps to register Profiles that can be presented to websites.
 *
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */class ye{constructor(e,t){if(!e||"string"!=typeof e)throw new TypeError('"url" must be a non-empty string.');this.credentialManager=new _e(e,t)}}
/*!
 * Provides an API for working with CredentialHandlerRegistrations.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */class ve{constructor(e){this._init=(async()=>{this._injector=await e,this._remote=this._injector.get("credentialHandlers",{functions:["register","unregister","getRegistration","hasRegistration"]})})()}async register(e){return await this._init,e=await this._remote.register("credential",e),new ye(e,this._injector)}async unregister(e){return await this._init,this._remote.unregister("credential",e)}async getRegistration(e){return await this._init,(e=await this._remote.getRegistration("credential",e))?new ye(e,this._injector):null}async hasRegistration(e){return await this._init,await this._remote.hasRegistration("credential",e)}}
/*!
 * A WebCredential is a Credential that can be retrieved from or stored by a
 * "credential handler" that runs in a third party Web application.
 *
 * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.
 */class Ee{constructor(e,t,{recommendedHandlerOrigins:n=[]}={}){if("string"!=typeof e)throw new TypeError('"dataType" must be a string.');this.type="web",this.dataType=e,this.data=t,this.options={recommendedHandlerOrigins:n}}}
/*!
 * Wrapper for native CredentialsContainer that uses remote Credential Mediator
 * for WebCredential-related operations.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */class Ce{constructor(e){this._nativeCredentialsContainer={get:navigator.credentials&&navigator.credentials.get&&navigator.credentials.get.bind(navigator.credentials),store:navigator.credentials&&navigator.credentials.store&&navigator.credentials.store.bind(navigator.credentials)},this._init=(async()=>{this._remote=(await e).get("credentialsContainer",{functions:[{name:"get",options:{timeout:0}},{name:"store",options:{timeout:0}}]})})()}async get(e={}){if(e.web){await this._init;const t=await this._remote.get(e);return t?new Ee(t.dataType,t.data):null}if(this._nativeCredentialsContainer.get)return this._nativeCredentialsContainer.get(e);throw new DOMException("Not implemented.","NotSupportedError")}async store(e){if(e instanceof Ee){await this._init;const t=await this._remote.store(e);return t?new Ee(t.dataType,t.data):null}if(this._nativeCredentialsContainer.store)return this._nativeCredentialsContainer.store(e);throw new DOMException("Not implemented.","NotSupportedError")}}
/*!
 * Provides an API for working with permissions.
 *
 * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.
 */class be{constructor(e){this._init=(async()=>{this._remote=(await e).get("permissionManager",{functions:["query",{name:"request",options:{timeout:0}},"revoke"]})})()}async query(e){return await this._init,await this._remote.query(e)}async request(e){return await this._init,await this._remote.request(e)}async revoke(e){return await this._init,await this._remote.revoke(e)}}
/*!
 * Credential Handler API Polyfill.
 *
 * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.
 */const xe="https://authn.io/mediator?origin="+encodeURIComponent(window.location.origin);let je;async function Me(e=xe){return je||(je=!0,async function(e=xe){const t=(new he).createWindow(e,{className:"credential-mediator",timeout:3e4}),n=document.createElement("style");n.appendChild(document.createTextNode("dialog.web-app-window.credential-mediator > .web-app-window-backdrop {\n      background-color: rgba(0, 0, 0, 0.25);\n    }")),document.body.appendChild(n);const i={};i.permissions=new be(t),i.CredentialHandlers=new ve(t),i.CredentialHandler=ge,i.CredentialManager=_e,i.credentials=new Ce(t),i.WebCredential=Ee,navigator.credentialsPolyfill=i,"credentials"in navigator?(navigator.credentials.get=i.credentials.get.bind(i.credentials),navigator.credentials.store=i.credentials.store.bind(i.credentials)):navigator.credentials=i.credentials;return window.CredentialManager=_e,window.WebCredential=Ee,i}(e))}var Ne="_primaryForeground_15nhl_6",Re="_materialIconBlock_15nhl_18",He="_menuPanel_15nhl_375",Le="_profilePanel_15nhl_393",ke="_closeButton_15nhl_401",Oe="_profileBlock_15nhl_410",Pe="_avatarBlock_15nhl_415",Te="_avatarBtn_15nhl_431",Be="_headerBlock_15nhl_450",Se="_inputBlock_15nhl_457",Ae="_usernameInput_15nhl_462",Ve="_emailPhoneSection_15nhl_523",Ie="_panelHeader_15nhl_526",Ue="_emailField_15nhl_532",qe="_walletSection_15nhl_572",De="_textBlock_15nhl_575",We="_walletBtn_15nhl_582",ze="_socialBlock_15nhl_591",Fe="_socialContainer_15nhl_591",Ze="_smallTextBlock_15nhl_618";var $e=L((e=>({authState:x(e)})),(e=>({updateUsername:b(a,e),updateUserAvatarId:b(l,e),updateUserSettings:b(c,e),loginUserByOAuth:b(d,e),loginUserByXRWallet:b(h,e),addConnectionBySms:b(m,e),addConnectionByEmail:b(u,e),logoutUser:b(p,e),removeUser:b(w,e)})))((e=>{const{authState:t,updateUsername:n,addConnectionByEmail:i,addConnectionBySms:r,loginUserByOAuth:o,loginUserByXRWallet:s,logoutUser:a,changeActiveMenu:l,setProfileMenuOpen:c,hideLogin:d}=e,{t:h}=E(),m=t.get("user")||{},[u,p]=_.exports.useState(null==m?void 0:m.name),[w,f]=_.exports.useState(""),[y,C]=_.exports.useState(!1),[b,x]=_.exports.useState(!1);let j="";_.exports.useEffect((()=>{(async()=>{try{const e=`${N.publicRuntimeConfig.mediatorServer}/mediator?origin=${encodeURIComponent(window.location.origin)}`;await Me(e),console.log("Ready to work with credentials!")}catch(e){console.error("Error loading polyfill:",e)}})()}),[]),_.exports.useEffect((()=>{m&&p(m.name)}),[m.name]);const M=e=>{e.preventDefault(),L()},L=()=>{const e=u.trim();e&&m.name.trim()!==e&&n(m.id,e)},P=()=>{if(""===w)return!1;if(R(w.trim()))j="email";else{if(!H(w.trim()))return C(!0),!1;j="sms"}return C(!1),!0},T=e=>{e.preventDefault(),P()&&("email"===j?i(w,null==m?void 0:m.id):"sms"===j&&r(w,null==m?void 0:m.id))},B=e=>{o(e.currentTarget.id)};return v.createElement("div",{className:He},v.createElement("section",{className:Le},v.createElement("section",{className:Oe},v.createElement("div",{className:Pe},v.createElement("img",{src:(S=g.instance,V=null==m?void 0:m.id,S&&V&&S.clients[V]&&(null==(J=S.clients[V].avatarDetail)?void 0:J.thumbnailURL)||"/placeholders/default-silhouette.svg")}),null!=l&&v.createElement(k,{className:Te,onClick:()=>l(X),disableRipple:!0},v.createElement(D,null))),v.createElement("div",{className:Be},v.createElement("span",{className:Se},v.createElement(O,{margin:"none",size:"small",label:h("user:usermenu.profile.lbl-username"),name:"username",variant:"outlined",value:u||"",onChange:e=>{p(e.target.value),e.target.value||x(!0)},onKeyDown:e=>{"Enter"===e.key&&M(e)},className:Ae,error:b,InputProps:{endAdornment:v.createElement(I,{position:"end"},v.createElement("a",{href:"#",className:Re,onClick:M},v.createElement(U,{className:Ne})))}})),v.createElement("h2",null,"admin"===(null==m?void 0:m.userRole)?h("user:usermenu.profile.youAreAn"):h("user:usermenu.profile.youAreA")," ",v.createElement("span",null,null==m?void 0:m.userRole),"."),v.createElement("h4",null,("user"===m.userRole||"admin"===m.userRole)&&v.createElement("div",{onClick:async e=>{null!=l?l(null):null!=c&&c(!1),await a()}},h("user:usermenu.profile.logout"))),null!=(null==m?void 0:m.inviteCode)&&v.createElement("h2",null,h("user:usermenu.profile.inviteCode"),": ",m.inviteCode))),!d&&v.createElement(v.Fragment,null,"guest"===(null==m?void 0:m.userRole)&&v.createElement("section",{className:Ve},v.createElement(A,{variant:"h1",className:Ie},h("user:usermenu.profile.connectPhone")),v.createElement("form",{onSubmit:T},v.createElement(O,{className:Ue,size:"small",placeholder:h("user:usermenu.profile.ph-phoneEmail"),variant:"outlined",onChange:e=>f(e.target.value),onBlur:P,error:y,helperText:y?h("user:usermenu.profile.phoneEmailError"):null,InputProps:{endAdornment:v.createElement(I,{position:"end",onClick:T},v.createElement("a",{href:"#",className:Re},v.createElement(z,{className:Ne})))}}))),"guest"===(null==m?void 0:m.userRole)&&v.createElement("section",{className:qe},v.createElement(A,{variant:"h3",className:De},h("user:usermenu.profile.or")),v.createElement(k,{onClick:()=>l(G),className:We},h("user:usermenu.profile.loginWithReadyPlayerMe"))),"guest"===(null==m?void 0:m.userRole)&&v.createElement("section",{className:ze},v.createElement(A,{variant:"h3",className:De},h("user:usermenu.profile.connectSocial")),v.createElement("div",{className:Fe},v.createElement("a",{href:"#",id:"facebook",onClick:B},v.createElement(F,{width:"40",height:"40",viewBox:"0 0 40 40"})),v.createElement("a",{href:"#",id:"google",onClick:B},v.createElement(Z,{width:"40",height:"40",viewBox:"0 0 40 40"})),v.createElement("a",{href:"#",id:"linkedin2",onClick:B},v.createElement($,{width:"40",height:"40",viewBox:"0 0 40 40"})),v.createElement("a",{href:"#",id:"twitter",onClick:B},v.createElement(K,{width:"40",height:"40",viewBox:"0 0 40 40"})),v.createElement("a",{href:"#",id:"github",onClick:B},v.createElement(W,null))),v.createElement(A,{variant:"h4",className:Ze},h("user:usermenu.profile.createOne"))),null!=c&&v.createElement("div",{className:ke,onClick:()=>c(!1)},v.createElement(q,null)))));var S,V,J}));const Ke=e=>{const{doLoginAuto:t}=e,{t:n}=E();return _.exports.useEffect((()=>{t(!0)}),[]),v.createElement(s,{pageTitle:n("login.pageTitle")},v.createElement("style",null," ","\n                [class*=menuPanel] {\n                    top: 75px;\n                    bottom: initial;\n                }\n            "),v.createElement($e,null))};var Xe=L((e=>({})),(e=>({doLoginAuto:b(f,e)})))(Ke);export{Ke as IndexPage,Xe as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uNjdiZTJjZDAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRBZG9ybm1lbnQvSW5wdXRBZG9ybm1lbnQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL2VzbS9DaGVjay5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvZXNtL0Nsb3NlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9lc20vQ3JlYXRlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9lc20vR2l0SHViLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9lc20vU2VuZC5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy9jb21tb24vY29tcG9uZW50cy9JY29ucy9GYWNlYm9va0ljb24udHN4IiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL2NvbW1vbi9jb21wb25lbnRzL0ljb25zL0dvb2dsZUljb24udHN4IiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL2NvbW1vbi9jb21wb25lbnRzL0ljb25zL0xpbmtlZEluSWNvbi50c3giLCIuLi8uLi8uLi9jbGllbnQtY29yZS9zcmMvY29tbW9uL2NvbXBvbmVudHMvSWNvbnMvVHdpdHRlckljb24udHN4IiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL3VzZXIvY29tcG9uZW50cy9Vc2VyTWVudS91dGlsLnRzeCIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93ZWItcmVxdWVzdC1ycGMvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2ViLXJlcXVlc3QtcnBjL0NsaWVudC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93ZWItcmVxdWVzdC1ycGMvRXZlbnRFbWl0dGVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3dlYi1yZXF1ZXN0LXJwYy9TZXJ2ZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2ViLXJlcXVlc3QtcnBjL1dlYkFwcFdpbmRvdy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93ZWItcmVxdWVzdC1ycGMvV2ViQXBwQ29udGV4dC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbFJlcXVlc3RFdmVudC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbFN0b3JlRXZlbnQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3JlZGVudGlhbC1oYW5kbGVyLXBvbHlmaWxsL0NyZWRlbnRpYWxIYW5kbGVyU2VydmljZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbEhhbmRsZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2ViLXJlcXVlc3QtcnBjL1dlYkFwcC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbEhpbnRzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NyZWRlbnRpYWwtaGFuZGxlci1wb2x5ZmlsbC9DcmVkZW50aWFsTWFuYWdlci5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbEhhbmRsZXJSZWdpc3RyYXRpb24uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3JlZGVudGlhbC1oYW5kbGVyLXBvbHlmaWxsL0NyZWRlbnRpYWxIYW5kbGVycy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvV2ViQ3JlZGVudGlhbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwvQ3JlZGVudGlhbHNDb250YWluZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3JlZGVudGlhbC1oYW5kbGVyLXBvbHlmaWxsL1Blcm1pc3Npb25NYW5hZ2VyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NyZWRlbnRpYWwtaGFuZGxlci1wb2x5ZmlsbC9pbmRleC5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy91c2VyL2NvbXBvbmVudHMvVXNlck1lbnUvbWVudXMvUHJvZmlsZU1lbnUudHN4IiwiLi4vLi4vc3JjL3BhZ2VzL2xvZ2luLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQsIHsgdXNlRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgaGVpZ2h0OiAnMC4wMWVtJyxcbiAgICAvLyBGaXggSUUgMTEgZmxleGJveCBhbGlnbm1lbnQuIFRvIHJlbW92ZSBhdCBzb21lIHBvaW50LlxuICAgIG1heEhlaWdodDogJzJlbScsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICBmaWxsZWQ6IHtcbiAgICAnJiRwb3NpdGlvblN0YXJ0Om5vdCgkaGlkZGVuTGFiZWwpJzoge1xuICAgICAgbWFyZ2luVG9wOiAxNlxuICAgIH1cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXJ0XCJgLiAqL1xuICBwb3NpdGlvblN0YXJ0OiB7XG4gICAgbWFyZ2luUmlnaHQ6IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImVuZFwiYC4gKi9cbiAgcG9zaXRpb25FbmQ6IHtcbiAgICBtYXJnaW5MZWZ0OiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVBvaW50ZXJFdmVudHM9dHJ1ZWAuICovXG4gIGRpc2FibGVQb2ludGVyRXZlbnRzOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgaWYgdGhlIGFkb3JubWVudCBpcyB1c2VkIGluc2lkZSA8Rm9ybUNvbnRyb2wgaGlkZGVuTGFiZWwgLz4uICovXG4gIGhpZGRlbkxhYmVsOiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCBpZiB0aGUgYWRvcm5tZW50IGlzIHVzZWQgaW5zaWRlIDxGb3JtQ29udHJvbCBtYXJnaW49XCJkZW5zZVwiIC8+LiAqL1xuICBtYXJnaW5EZW5zZToge31cbn07XG52YXIgSW5wdXRBZG9ybm1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEFkb3JubWVudChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVQb2ludGVyID0gcHJvcHMuZGlzYWJsZVBvaW50ZXJFdmVudHMsXG4gICAgICBkaXNhYmxlUG9pbnRlckV2ZW50cyA9IF9wcm9wcyRkaXNhYmxlUG9pbnRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBvaW50ZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPSBwcm9wcy5kaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gX3Byb3BzJGRpc2FibGVUeXBvZ3JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSxcbiAgICAgIHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICB2YXJpYW50UHJvcCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZVBvaW50ZXJFdmVudHNcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcInBvc2l0aW9uXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKSB8fCB7fTtcbiAgdmFyIHZhcmlhbnQgPSB2YXJpYW50UHJvcDtcblxuICBpZiAodmFyaWFudFByb3AgJiYgbXVpRm9ybUNvbnRyb2wudmFyaWFudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodmFyaWFudFByb3AgPT09IG11aUZvcm1Db250cm9sLnZhcmlhbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFRoZSBgSW5wdXRBZG9ybm1lbnRgIHZhcmlhbnQgaW5mZXJzIHRoZSB2YXJpYW50IHByb3AgJyArICd5b3UgZG8gbm90IGhhdmUgdG8gcHJvdmlkZSBvbmUuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG11aUZvcm1Db250cm9sICYmICF2YXJpYW50KSB7XG4gICAgdmFyaWFudCA9IG11aUZvcm1Db250cm9sLnZhcmlhbnQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGxcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBwb3NpdGlvbiA9PT0gJ2VuZCcgPyBjbGFzc2VzLnBvc2l0aW9uRW5kIDogY2xhc3Nlcy5wb3NpdGlvblN0YXJ0LCBkaXNhYmxlUG9pbnRlckV2ZW50cyAmJiBjbGFzc2VzLmRpc2FibGVQb2ludGVyRXZlbnRzLCBtdWlGb3JtQ29udHJvbC5oaWRkZW5MYWJlbCAmJiBjbGFzc2VzLmhpZGRlbkxhYmVsLCB2YXJpYW50ID09PSAnZmlsbGVkJyAmJiBjbGFzc2VzLmZpbGxlZCwgbXVpRm9ybUNvbnRyb2wubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMubWFyZ2luRGVuc2UpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJyAmJiAhZGlzYWJsZVR5cG9ncmFwaHkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCB7XG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiXG4gIH0sIGNoaWxkcmVuKSA6IGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QWRvcm5tZW50LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGBJY29uQnV0dG9uYCBvciBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgcG9pbnRlciBldmVudHMgb24gdGhlIHJvb3QuXG4gICAqIFRoaXMgYWxsb3dzIGZvciB0aGUgY29udGVudCBvZiB0aGUgYWRvcm5tZW50IHRvIGZvY3VzIHRoZSBpbnB1dCBvbiBjbGljay5cbiAgICovXG4gIGRpc2FibGVQb2ludGVyRXZlbnRzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgY2hpbGRyZW4gaXMgYSBzdHJpbmcgdGhlbiBkaXNhYmxlIHdyYXBwaW5nIGluIGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11aUZvcm1Db250cm9sOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gdGhpcyBhZG9ybm1lbnQgc2hvdWxkIGFwcGVhciByZWxhdGl2ZSB0byB0aGUgYElucHV0YC5cbiAgICovXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBOb3RlOiBJZiB5b3UgYXJlIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgb3IgdGhlIGBGb3JtQ29udHJvbGAgY29tcG9uZW50XG4gICAqIHlvdSBkbyBub3QgaGF2ZSB0byBzZXQgdGhpcyBtYW51YWxseS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEFkb3JubWVudCdcbn0pKElucHV0QWRvcm5tZW50KTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOSAxNi4xN0w0LjgzIDEybC0xLjQyIDEuNDFMOSAxOSAyMSA3bC0xLjQxLTEuNDF6XCJcbn0pLCAnQ2hlY2snKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNi40MUwxNy41OSA1IDEyIDEwLjU5IDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDEyIDEzLjQxIDE3LjU5IDE5IDE5IDE3LjU5IDEzLjQxIDEyelwiXG59KSwgJ0Nsb3NlJyk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi91dGlscy9jcmVhdGVTdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMTcuMjVWMjFoMy43NUwxNy44MSA5Ljk0bC0zLjc1LTMuNzVMMyAxNy4yNXpNMjAuNzEgNy4wNGMuMzktLjM5LjM5LTEuMDIgMC0xLjQxbC0yLjM0LTIuMzRhLjk5NTkuOTk1OSAwIDAwLTEuNDEgMGwtMS44MyAxLjgzIDMuNzUgMy43NSAxLjgzLTEuODN6XCJcbn0pLCAnQ3JlYXRlJyk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi91dGlscy9jcmVhdGVTdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIC4zYTEyIDEyIDAgMCAwLTMuOCAyMy40Yy42LjEuOC0uMy44LS42di0yYy0zLjMuNy00LTEuNi00LTEuNi0uNi0xLjQtMS40LTEuOC0xLjQtMS44LTEtLjcuMS0uNy4xLS43IDEuMiAwIDEuOSAxLjIgMS45IDEuMiAxIDEuOCAyLjggMS4zIDMuNSAxIDAtLjguNC0xLjMuNy0xLjYtMi43LS4zLTUuNS0xLjMtNS41LTYgMC0xLjIuNS0yLjMgMS4zLTMuMS0uMi0uNC0uNi0xLjYgMC0zLjIgMCAwIDEtLjMgMy40IDEuMmExMS41IDExLjUgMCAwIDEgNiAwYzIuMy0xLjUgMy4zLTEuMiAzLjMtMS4yLjYgMS42LjIgMi44IDAgMy4yLjkuOCAxLjMgMS45IDEuMyAzLjIgMCA0LjYtMi44IDUuNi01LjUgNS45LjUuNC45IDEgLjkgMi4ydjMuM2MwIC4zLjEuNy44LjZBMTIgMTIgMCAwIDAgMTIgLjNcIlxufSksICdHaXRIdWInKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMi4wMSAyMUwyMyAxMiAyLjAxIDMgMiAxMGwxNSAyLTE1IDJ6XCJcbn0pLCAnU2VuZCcpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBTdmdJY29uLCB7IFN2Z0ljb25Qcm9wcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24nXG5cbmV4cG9ydCBjb25zdCBGYWNlYm9va0ljb24gPSAocHJvcHM6IFN2Z0ljb25Qcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTdmdJY29uIHsuLi5wcm9wc30+XG4gICAgICA8c3ZnIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTQwIDIwQzQwIDguOTU0MyAzMS4wNDU3IDAgMjAgMEM4Ljk1NDMgMCAwIDguOTU0MyAwIDIwQzAgMjkuOTgyNCA3LjMxMzY3IDM4LjI1NjYgMTYuODc1IDM5Ljc1N1YyNS43ODEzSDExLjc5NjlWMjBIMTYuODc1VjE1LjU5MzhDMTYuODc1IDEwLjU4MTMgMTkuODYwOSA3LjgxMjUgMjQuNDI5MyA3LjgxMjVDMjYuNjE2OCA3LjgxMjUgMjguOTA2MiA4LjIwMzEyIDI4LjkwNjIgOC4yMDMxMlYxMy4xMjVIMjYuMzg0NEMyMy45IDEzLjEyNSAyMy4xMjUgMTQuNjY2OCAyMy4xMjUgMTYuMjVWMjBIMjguNjcxOUwyNy43ODUyIDI1Ljc4MTNIMjMuMTI1VjM5Ljc1N0MzMi42ODYzIDM4LjI1NjYgNDAgMjkuOTgyNCA0MCAyMFpcIlxuICAgICAgICAgIGZpbGw9XCIjMTg3N0YyXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTI3Ljc4NTIgMjUuNzgxMkwyOC42NzE5IDIwSDIzLjEyNVYxNi4yNUMyMy4xMjUgMTQuNjY4NCAyMy45IDEzLjEyNSAyNi4zODQ0IDEzLjEyNUgyOC45MDYyVjguMjAzMTJDMjguOTA2MiA4LjIwMzEyIDI2LjYxNzYgNy44MTI1IDI0LjQyOTMgNy44MTI1QzE5Ljg2MDkgNy44MTI1IDE2Ljg3NSAxMC41ODEzIDE2Ljg3NSAxNS41OTM4VjIwSDExLjc5NjlWMjUuNzgxMkgxNi44NzVWMzkuNzU3QzE4Ljk0NTcgNDAuMDgxIDIxLjA1NDMgNDAuMDgxIDIzLjEyNSAzOS43NTdWMjUuNzgxMkgyNy43ODUyWlwiXG4gICAgICAgICAgZmlsbD1cIndoaXRlXCJcbiAgICAgICAgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvU3ZnSWNvbj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFN2Z0ljb24sIHsgU3ZnSWNvblByb3BzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvU3ZnSWNvbidcblxuZXhwb3J0IGNvbnN0IEdvb2dsZUljb24gPSAocHJvcHM6IFN2Z0ljb25Qcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTdmdJY29uIHsuLi5wcm9wc30+XG4gICAgICA8c3ZnIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgPGcgY2xpcFBhdGg9XCJ1cmwoI2NsaXAwKVwiPlxuICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICBkPVwiTTM5LjYxMDQgMjAuNDYwNEMzOS42MTA0IDE5LjEwMDkgMzkuNTAwMiAxNy43MzQgMzkuMjY1IDE2LjM5NjVIMjAuNDAwNFYyNC4wOTgxSDMxLjIwMzNDMzAuNzU1IDI2LjU4MiAyOS4zMTQ2IDI4Ljc3OTQgMjcuMjA1NSAzMC4xNzU2VjM1LjE3MjlIMzMuNjUwNUMzNy40MzUyIDMxLjY4OTUgMzkuNjEwNCAyNi41NDUzIDM5LjYxMDQgMjAuNDYwNFpcIlxuICAgICAgICAgICAgZmlsbD1cIiM0Mjg1RjRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGQ9XCJNMjAuMzk5OCA0MC4wMDE1QzI1Ljc5MzkgNDAuMDAxNSAzMC4zNDI5IDM4LjIzMDUgMzMuNjU3MiAzNS4xNzMzTDI3LjIxMjMgMzAuMTc2MUMyNS40MTkxIDMxLjM5NiAyMy4xMDQyIDMyLjA4NjggMjAuNDA3MiAzMi4wODY4QzE1LjE4OTUgMzIuMDg2OCAxMC43NjU0IDI4LjU2NjcgOS4xNzgwOSAyMy44MzRIMi41MjczNFYyOC45ODU2QzUuOTIyNTMgMzUuNzM5MiAxMi44Mzc4IDQwLjAwMTUgMjAuMzk5OCA0MC4wMDE1WlwiXG4gICAgICAgICAgICBmaWxsPVwiIzM0QTg1M1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZD1cIk05LjE3MTI5IDIzLjgzNDVDOC4zMzM1MSAyMS4zNTA2IDguMzMzNTEgMTguNjYwOSA5LjE3MTI5IDE2LjE3N1YxMS4wMjU0SDIuNTI3ODlDLTAuMzA4Nzc3IDE2LjY3NjcgLTAuMzA4Nzc3IDIzLjMzNDggMi41Mjc4OSAyOC45ODYxTDkuMTcxMjkgMjMuODM0NVpcIlxuICAgICAgICAgICAgZmlsbD1cIiNGQkJDMDRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGQ9XCJNMjAuMzk5OCA3LjkxNjFDMjMuMjUxMiA3Ljg3MjAxIDI2LjAwNyA4Ljk0NDk0IDI4LjA3MjEgMTAuOTE0NEwzMy43ODIyIDUuMjA0MzZDMzAuMTY2NSAxLjgwOTE3IDI1LjM2NzcgLTAuMDU3NDQzMyAyMC4zOTk4IDAuMDAxMzQ3NzhDMTIuODM3OCAwLjAwMTM0Nzc4IDUuOTIyNTMgNC4yNjM3IDIuNTI3MzQgMTEuMDI0N0w5LjE3MDc0IDE2LjE3NjNDMTAuNzUwNyAxMS40MzYyIDE1LjE4MjEgNy45MTYxIDIwLjM5OTggNy45MTYxWlwiXG4gICAgICAgICAgICBmaWxsPVwiI0VBNDMzNVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9nPlxuICAgICAgICA8ZGVmcz5cbiAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjbGlwMFwiPlxuICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCI0MFwiIGhlaWdodD1cIjQwXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICAgICAgICA8L2NsaXBQYXRoPlxuICAgICAgICA8L2RlZnM+XG4gICAgICA8L3N2Zz5cbiAgICA8L1N2Z0ljb24+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBTdmdJY29uLCB7IFN2Z0ljb25Qcm9wcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24nXG5cbmV4cG9ydCBjb25zdCBMaW5rZWRJbkljb24gPSAocHJvcHM6IFN2Z0ljb25Qcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTdmdJY29uIHsuLi5wcm9wc30+XG4gICAgICA8c3ZnIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgPGcgY2xpcFBhdGg9XCJ1cmwoI2NsaXAwKVwiPlxuICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICBkPVwiTTM3LjA0NzIgMEgyLjk1Mjc4QzIuMTY5NjUgMCAxLjQxODYgMC4zMTEwOTYgMC44NjQ4NDkgMC44NjQ4NDlDMC4zMTEwOTYgMS40MTg2IDAgMi4xNjk2NSAwIDIuOTUyNzhWMzcuMDQ3MkMwIDM3LjgzMDMgMC4zMTEwOTYgMzguNTgxNCAwLjg2NDg0OSAzOS4xMzUyQzEuNDE4NiAzOS42ODg5IDIuMTY5NjUgNDAgMi45NTI3OCA0MEgzNy4wNDcyQzM3LjgzMDMgNDAgMzguNTgxNCAzOS42ODg5IDM5LjEzNTIgMzkuMTM1MkMzOS42ODg5IDM4LjU4MTQgNDAgMzcuODMwMyA0MCAzNy4wNDcyVjIuOTUyNzhDNDAgMi4xNjk2NSAzOS42ODg5IDEuNDE4NiAzOS4xMzUyIDAuODY0ODQ5QzM4LjU4MTQgMC4zMTEwOTYgMzcuODMwMyAwIDM3LjA0NzIgMFpNMTEuOTIyMiAzNC4wNzVINS45MDgzM1YxNC45NzIySDExLjkyMjJWMzQuMDc1Wk04LjkxMTExIDEyLjMyNUM4LjIyODk0IDEyLjMyMTIgNy41NjMxOSAxMi4xMTUzIDYuOTk3ODkgMTEuNzMzNUM2LjQzMjU5IDExLjM1MTYgNS45OTMwNyAxMC44MTA5IDUuNzM0OCAxMC4xNzk1QzUuNDc2NTIgOS41NDgwOCA1LjQxMTA4IDguODU0MzIgNS41NDY3MiA4LjE4NTc2QzUuNjgyMzYgNy41MTcyIDYuMDEzIDYuOTAzNzkgNi40OTY5MyA2LjQyMjk3QzYuOTgwODUgNS45NDIxNCA3LjU5NjM2IDUuNjE1NDQgOC4yNjU3OCA1LjQ4NDFDOC45MzUyIDUuMzUyNzYgOS42Mjg1MiA1LjQyMjY2IDEwLjI1ODMgNS42ODQ5OEMxMC44ODggNS45NDczIDExLjQyNTkgNi4zOTAyOCAxMS44MDQxIDYuOTU4MDJDMTIuMTgyMyA3LjUyNTc2IDEyLjM4MzkgOC4xOTI4MiAxMi4zODMzIDguODc1QzEyLjM4OTggOS4zMzE3MiAxMi4zMDQyIDkuNzg1MDYgMTIuMTMxNyAxMC4yMDhDMTEuOTU5MiAxMC42MzA5IDExLjcwMzMgMTEuMDE0OCAxMS4zNzkzIDExLjMzNjhDMTEuMDU1MyAxMS42NTg3IDEwLjY2OTcgMTEuOTEyMSAxMC4yNDU3IDEyLjA4MTlDOS44MjE2NyAxMi4yNTE3IDkuMzY3NzggMTIuMzM0NCA4LjkxMTExIDEyLjMyNVpNMzQuMDg4OSAzNC4wOTE3SDI4LjA3NzhWMjMuNjU1NkMyOC4wNzc4IDIwLjU3NzggMjYuNzY5NCAxOS42Mjc4IDI1LjA4MDYgMTkuNjI3OEMyMy4yOTcyIDE5LjYyNzggMjEuNTQ3MiAyMC45NzIyIDIxLjU0NzIgMjMuNzMzM1YzNC4wOTE3SDE1LjUzMzNWMTQuOTg2MUgyMS4zMTY3VjE3LjYzMzNIMjEuMzk0NEMyMS45NzUgMTYuNDU4MyAyNC4wMDgzIDE0LjQ1IDI3LjExMTEgMTQuNDVDMzAuNDY2NyAxNC40NSAzNC4wOTE3IDE2LjQ0MTcgMzQuMDkxNyAyMi4yNzVMMzQuMDg4OSAzNC4wOTE3WlwiXG4gICAgICAgICAgICBmaWxsPVwiIzEzN0VFQVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9nPlxuICAgICAgICA8ZGVmcz5cbiAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjbGlwMFwiPlxuICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCI0MFwiIGhlaWdodD1cIjQwXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICAgICAgICA8L2NsaXBQYXRoPlxuICAgICAgICA8L2RlZnM+XG4gICAgICA8L3N2Zz5cbiAgICA8L1N2Z0ljb24+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBTdmdJY29uLCB7IFN2Z0ljb25Qcm9wcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb24nXG5cbmV4cG9ydCBjb25zdCBUd2l0dGVySWNvbiA9IChwcm9wczogU3ZnSWNvblByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFN2Z0ljb24gey4uLnByb3BzfT5cbiAgICAgIDxzdmcgd2lkdGg9XCI0MFwiIGhlaWdodD1cIjQwXCIgdmlld0JveD1cIjAgMCA0MCA0MFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMTIuNTc5MiAzNi4yNTIxQzI3LjY3MzYgMzYuMjUyMSAzNS45Mjk2IDIzLjc0NjUgMzUuOTI5NiAxMi45MDE3QzM1LjkyOTYgMTIuNTQ2NSAzNS45Mjk2IDEyLjE5MjkgMzUuOTA1NiAxMS44NDA5QzM3LjUxMTcgMTAuNjc5MSAzOC44OTgyIDkuMjQwNjkgNDAgNy41OTI4OEMzOC41MDIzIDguMjU2ODggMzYuOTEzNCA4LjY5MjE0IDM1LjI4NjQgOC44ODQwOEMzNi45OTk3IDcuODU4NTYgMzguMjgxOSA2LjI0NTM5IDM4Ljg5NDQgNC4zNDQ4OEMzNy4yODM1IDUuMzAwODkgMzUuNTIxMSA1Ljk3NDU5IDMzLjY4MzIgNi4zMzY4OEMzMi40NDU5IDUuMDIxMTggMzAuODA5NCA0LjE0OTk1IDI5LjAyNyAzLjg1ODAyQzI3LjI0NDYgMy41NjYwOSAyNS40MTU3IDMuODY5NzQgMjMuODIzMyA0LjcyMTk3QzIyLjIzMDkgNS41NzQyIDIwLjk2MzcgNi45Mjc1IDIwLjIxNzkgOC41NzI0NkMxOS40NzIxIDEwLjIxNzQgMTkuMjg5MiAxMi4wNjIzIDE5LjY5NzYgMTMuODIxN0MxNi40MzQ4IDEzLjY1OCAxMy4yNDI5IDEyLjgxMDEgMTAuMzI5MSAxMS4zMzI5QzcuNDE1MjYgOS44NTU3MSA0Ljg0NDYxIDcuNzgyMzEgMi43ODQgNS4yNDcyOEMxLjczNDU1IDcuMDUzOTQgMS40MTMxMiA5LjE5MjY2IDEuODg1MTcgMTEuMjI4QzIuMzU3MjEgMTMuMjYzMyAzLjU4NzI0IDE1LjA0MjIgNS4zMjQ4IDE2LjIwMjVDNC4wMTg3MiAxNi4xNjQyIDIuNzQxMDggMTUuODExOSAxLjYgMTUuMTc1M1YxNS4yNzkzQzEuNjAwNTIgMTcuMTc0IDIuMjU2NDIgMTkuMDEwMyAzLjQ1NjQ1IDIwLjQ3NjZDNC42NTY0OCAyMS45NDI4IDYuMzI2NzcgMjIuOTQ4OSA4LjE4NCAyMy4zMjQxQzYuOTc1OCAyMy42NTM2IDUuNzA4MTIgMjMuNzAxOCA0LjQ3ODQgMjMuNDY0OUM1LjAwMzAyIDI1LjA5NTQgNi4wMjQwNSAyNi41MjEzIDcuMzk4NzMgMjcuNTQzMUM4Ljc3MzQyIDI4LjU2NDkgMTAuNDMzIDI5LjEzMTcgMTIuMTQ1NiAyOS4xNjQxQzEwLjQ0NDEgMzAuNTAxNSA4LjQ5NTUyIDMxLjQ5MDQgNi40MTE0NiAzMi4wNzQxQzQuMzI3MzkgMzIuNjU3OCAyLjE0ODY5IDMyLjgyNDggMCAzMi41NjU3QzMuNzUzMDYgMzQuOTc0IDguMTE5ODcgMzYuMjUxNSAxMi41NzkyIDM2LjI0NTdcIlxuICAgICAgICAgIGZpbGw9XCIjMURBMUYyXCJcbiAgICAgICAgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvU3ZnSWNvbj5cbiAgKVxufVxuIiwiaW1wb3J0IHR5cGUgeyBOZXR3b3JrIH0gZnJvbSAnQHhyZW5naW5lL2VuZ2luZS9zcmMvbmV0d29ya2luZy9jbGFzc2VzL05ldHdvcmsnXG5cbmV4cG9ydCBjb25zdCBWaWV3cyA9IHtcbiAgQ2xvc2VkOiAnJyxcbiAgUHJvZmlsZTogJ1Byb2ZpbGUnLFxuICBTZXR0aW5nczogJ1NldHRpbmdzJyxcbiAgU2hhcmU6ICdTaGFyZScsXG4gIERlbGV0ZUFjY291bnQ6ICdhY2NvdW50RGVsZXRlJyxcbiAgTG9naW46ICdsb2dpbicsXG4gIEF2YXRhclVwbG9hZDogJ0F2YXRhclVwbG9hZCcsXG4gIEF2YXRhcjogJ0F2YXRhcicsXG4gIExvY2F0aW9uOiAnTG9jYXRpb24nLFxuICBOZXdMb2NhdGlvbjogJ05ld0xvY2F0aW9uJyxcbiAgUmVhZHlQbGF5ZXI6ICdSZWFkeVBsYXllcidcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyTWVudVByb3BzIHtcbiAgbG9naW4/OiBib29sZWFuXG4gIGF1dGhTdGF0ZT86IGFueVxuICBpbnN0YW5jZUNvbm5lY3Rpb25TdGF0ZT86IGFueVxuICBsb2NhdGlvblN0YXRlPzogYW55XG4gIHVwZGF0ZVVzZXJBdmF0YXJJZD86IEZ1bmN0aW9uXG4gIHNob3dEaWFsb2c/OiBGdW5jdGlvblxuICBhbGVydFN1Y2Nlc3M/OiBGdW5jdGlvblxuICBjdXJyZW50U2NlbmU/OiBhbnlcbiAgcHJvdmlzaW9uSW5zdGFuY2VTZXJ2ZXI/OiBhbnlcbiAgdXBsb2FkQXZhdGFyTW9kZWw/OiBGdW5jdGlvblxuICBmZXRjaEF2YXRhckxpc3Q/OiBGdW5jdGlvblxuICB1cGRhdGVVc2VyU2V0dGluZ3M/OiBGdW5jdGlvblxuICByZW1vdmVBdmF0YXI/OiBGdW5jdGlvblxuICBnZXRMb2NhdGlvbnM/OiBGdW5jdGlvblxuICBlbmFibGVTaGFyaW5nPzogYm9vbGVhblxuICBoaWRlTG9naW4/OiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ01lbnVQcm9wcyB7XG4gIGFjdGl2ZU1lbnU6IGFueVxuICBzZXRBY3RpdmVNZW51PzogRnVuY3Rpb25cbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPRklMRV9JTUdfUExBQ0VIT0xERVIgPSAnL3BsYWNlaG9sZGVycy9kZWZhdWx0LXNpbGhvdWV0dGUuc3ZnJ1xuXG5leHBvcnQgY29uc3QgZ2V0QXZhdGFyVVJMRnJvbU5ldHdvcmsgPSAobmV0d29yazogTmV0d29yaywgdXNlcklkOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFuZXR3b3JrIHx8ICF1c2VySWQpIHJldHVybiBERUZBVUxUX1BST0ZJTEVfSU1HX1BMQUNFSE9MREVSXG4gIGlmICghbmV0d29yay5jbGllbnRzW3VzZXJJZF0pIHJldHVybiBERUZBVUxUX1BST0ZJTEVfSU1HX1BMQUNFSE9MREVSXG4gIHJldHVybiBuZXR3b3JrLmNsaWVudHNbdXNlcklkXS5hdmF0YXJEZXRhaWw/LnRodW1ibmFpbFVSTCB8fCBERUZBVUxUX1BST0ZJTEVfSU1HX1BMQUNFSE9MREVSXG59XG4iLCIvKiFcbiAqIFV0aWxpdGllcyBmb3IgV2ViIFJlcXVlc3QgUlBDLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4vKiBnbG9iYWwgVVJMICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBjb25zdCBSUENfRVJST1JTID0ge1xuICBQYXJzZUVycm9yOiB7XG4gICAgbWVzc2FnZTogJ1BhcnNlIGVycm9yJyxcbiAgICBjb2RlOiAtMzI3MDBcbiAgfSxcbiAgSW52YWxpZFJlcXVlc3Q6IHtcbiAgICBtZXNzYWdlOiAnSW52YWxpZCBSZXF1ZXN0JyxcbiAgICBjb2RlOiAtMzI2MDBcbiAgfSxcbiAgTWV0aG9kTm90Rm91bmQ6IHtcbiAgICBtZXNzYWdlOiAnTWV0aG9kIG5vdCBmb3VuZCcsXG4gICAgY29kZTogLTMyNjAxXG4gIH0sXG4gIEludmFsaWRQYXJhbXM6IHtcbiAgICBtZXNzYWdlOiAnSW52YWxpZCBwYXJhbXMnLFxuICAgIGNvZGU6IC0zMjYwMlxuICB9LFxuICBJbnRlcm5hbEVycm9yOiB7XG4gICAgbWVzc2FnZTogJ0ludGVybmFsIEVycm9yJyxcbiAgICBjb2RlOiAtMzI2MDNcbiAgfSxcbiAgU2VydmVyRXJyb3I6IHtcbiAgICBtZXNzYWdlOiAnU2VydmVyIGVycm9yJyxcbiAgICBjb2RlOiAtMzIwMDBcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCwgYmFzZSkge1xuICBpZihiYXNlID09PSB1bmRlZmluZWQpIHtcbiAgICBiYXNlID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIH1cblxuICBpZih0eXBlb2YgVVJMID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG5ldyBVUkwodXJsLCBiYXNlKTtcbiAgfVxuXG4gIGlmKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ1cmxcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgLy8gRklYTUU6IHJ1ZGltZW50YXJ5IHJlbGF0aXZlIFVSTCByZXNvbHV0aW9uXG4gIGlmKCF1cmwuaW5jbHVkZXMoJzonKSkge1xuICAgIGlmKGJhc2Uuc3RhcnRzV2l0aCgnaHR0cCcpICYmICF1cmwuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICB1cmwgPSBiYXNlICsgJy8nICsgdXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgPSBiYXNlICsgdXJsO1xuICAgIH1cbiAgfVxuXG4gIC8vIGBVUkxgIEFQSSBub3Qgc3VwcG9ydGVkLCB1c2UgRE9NIHRvIHBhcnNlIFVSTFxuICBjb25zdCBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIHBhcnNlci5ocmVmID0gdXJsO1xuICBsZXQgb3JpZ2luID0gKHBhcnNlci5wcm90b2NvbCB8fCB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpICsgJy8vJztcbiAgaWYocGFyc2VyLmhvc3QpIHtcbiAgICAvLyB1c2UgaG9zdG5hbWUgd2hlbiB1c2luZyBkZWZhdWx0IHBvcnRzXG4gICAgLy8gKElFIGFkZHMgYWx3YXlzIGFkZHMgcG9ydCB0byBgcGFyc2VyLmhvc3RgKVxuICAgIGlmKChwYXJzZXIucHJvdG9jb2wgPT09ICdodHRwOicgJiYgcGFyc2VyLnBvcnQgPT09ICc4MCcpIHx8XG4gICAgICAocGFyc2VyLnByb3RvY29sID09PSAnaHR0cHM6JyAmJiBwYXJzZXIucG9ydCA9PT0gJzQ0MycpKSB7XG4gICAgICBvcmlnaW4gKz0gcGFyc2VyLmhvc3RuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmlnaW4gKz0gcGFyc2VyLmhvc3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9yaWdpbiArPSB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgfVxuXG4gIC8vIGVuc3VyZSBwYXRobmFtZSBiZWdpbnMgd2l0aCBgL2BcbiAgbGV0IHBhdGhuYW1lID0gcGFyc2VyLnBhdGhuYW1lO1xuICBpZighcGF0aG5hbWUuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLy8gVE9ETzogaXMgdGhpcyBzYWZlIGZvciBnZW5lcmFsIHVzZSBvbiBldmVyeSBicm93c2VyIHRoYXQgZG9lc24ndFxuICAgIC8vICAgc3VwcG9ydCBXSEFUV0cgVVJMP1xuICAgIGhvc3Q6IHBhcnNlci5ob3N0IHx8IHdpbmRvdy5sb2NhdGlvbi5ob3N0LFxuICAgIGhvc3RuYW1lOiBwYXJzZXIuaG9zdG5hbWUsXG4gICAgb3JpZ2luOiBvcmlnaW4sXG4gICAgcHJvdG9jb2w6IHBhcnNlci5wcm90b2NvbCxcbiAgICBwYXRobmFtZTogcGF0aG5hbWVcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9yaWdpbk1hdGNoZXModXJsLCBvcmlnaW4pIHtcbiAgcmV0dXJuIHBhcnNlVXJsKHVybCwgb3JpZ2luKS5vcmlnaW4gPT09IG9yaWdpbjtcbn1cblxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vTGV2ZXJPbmUvMTMwODM2OFxuZXhwb3J0IGZ1bmN0aW9uIHV1aWR2NChhLGIpIHtcbiAgZm9yKGI9YT0nJzthKys8MzY7Yis9YSo1MSY1Mj8oYV4xNT84Xk1hdGgucmFuZG9tKCkqKGFeMjA/MTY6NCk6NCkudG9TdHJpbmcoMTYpOictJyk7cmV0dXJuIGI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkT3JpZ2luKHVybCwgb3JpZ2luKSB7XG4gIGlmKCFvcmlnaW5NYXRjaGVzKHVybCwgb3JpZ2luKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBPcmlnaW4gbWlzbWF0Y2guIFVybCBcIiR7dXJsfVwiIGRvZXMgbm90IGhhdmUgYW4gb3JpZ2luIG9mIFwiJHtvcmlnaW59XCIuYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIChcbiAgICBtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlID09PSAnb2JqZWN0JyAmJlxuICAgIG1lc3NhZ2UuanNvbnJwYyA9PT0gJzIuMCcgJiZcbiAgICBtZXNzYWdlLmlkICYmIHR5cGVvZiBtZXNzYWdlLmlkID09PSAnc3RyaW5nJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUmVxdWVzdChtZXNzYWdlKSB7XG4gIHJldHVybiBpc1ZhbGlkTWVzc2FnZShtZXNzYWdlKSAmJiBBcnJheS5pc0FycmF5KG1lc3NhZ2UucGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRSZXNwb25zZShtZXNzYWdlKSB7XG4gIHJldHVybiAoXG4gICAgaXNWYWxpZE1lc3NhZ2UobWVzc2FnZSkgJiZcbiAgICAhISgncmVzdWx0JyBpbiBtZXNzYWdlIF4gJ2Vycm9yJyBpbiBtZXNzYWdlKSAmJlxuICAgICghKCdlcnJvcicgaW4gbWVzc2FnZSkgfHwgaXNWYWxpZEVycm9yKG1lc3NhZ2UuZXJyb3IpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIChcbiAgICBlcnJvciAmJiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIGVycm9yLmNvZGUgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUVycm9yKGVycm9yKSB7XG4gIGNvbnN0IGVyciA9IHtcbiAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gIH07XG4gIGlmKGVycm9yLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdFcnJvcicpIHtcbiAgICBlcnIuY29uc3RydWN0b3IgPSBlcnJvci5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGlmKCduYW1lJyBpbiBlcnJvcikge1xuICAgIGVyci5uYW1lID0gZXJyb3IubmFtZTtcbiAgfVxuICBpZignY29kZScgaW4gZXJyb3IpIHtcbiAgICBlcnIuY29kZSA9IGVycm9yLmNvZGU7XG4gIH0gZWxzZSB7XG4gICAgZXJyLmNvZGUgPSBSUENfRVJST1JTLlNlcnZlckVycm9yLmNvZGU7XG4gIH1cbiAgaWYoJ2RldGFpbHMnIGluIGVycm9yKSB7XG4gICAgZXJyLmRldGFpbHMgPSBlcnJvci5kZXRhaWxzO1xuICB9XG4gIHJldHVybiBlcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9yKGVycm9yKSB7XG4gIGxldCBlcnI7XG4gIC8vIHNwZWNpYWwgY2FzZSBrbm93biB0eXBlcywgb3RoZXJ3aXNlIHVzZSBnZW5lcmljIEVycm9yXG4gIGlmKGVycm9yLmNvbnN0cnVjdG9yID09PSAnRE9NRXhjZXB0aW9uJykge1xuICAgIGVyciA9IG5ldyBET01FeGNlcHRpb24oZXJyb3IubWVzc2FnZSwgZXJyb3IubmFtZSlcbiAgICAvLyBpZ25vcmUgY29kZSwgbmFtZSB3aWxsIHNldCBpdFxuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICBpZignY29kZScgaW4gZXJyb3IpIHtcbiAgICAgIGVyci5jb2RlID0gZXJyb3IuY29kZTtcbiAgICB9XG4gIH1cbiAgaWYoZXJyb3IuZGV0YWlscykge1xuICAgIGVyci5kZXRhaWxzID0gZXJyb3IuZGV0YWlscztcbiAgfVxuICByZXR1cm4gZXJyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUxpc3RlbmVyKFxuICB7bGlzdGVuZXIsIG9yaWdpbiwgaGFuZGxlLCBleHBlY3RSZXF1ZXN0fSkge1xuICAvLyBIQUNLOiB3ZSBjYW4ndCBqdXN0IGBQcm9taXNlLnJlc29sdmUoaGFuZGxlKWAgYmVjYXVzZSBDaHJvbWUgaGFzXG4gIC8vIGEgYnVnIHRoYXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgaGFuZGxlIGlzIGNyb3NzIGRvbWFpblxuICBpZihpc0hhbmRsZVByb21pc2UoaGFuZGxlKSkge1xuICAgIGNvbnN0IHByb21pc2UgPSBoYW5kbGU7XG4gICAgaGFuZGxlID0gZmFsc2U7XG4gICAgcHJvbWlzZS50aGVuKGggPT4gaGFuZGxlID0gaCk7XG4gIH1cbiAgcmV0dXJuIGUgPT4ge1xuICAgIC8vIGlnbm9yZSBtZXNzYWdlcyBmcm9tIGEgbm9uLW1hdGNoaW5nIGhhbmRsZSBvciBvcmlnaW5cbiAgICAvLyBvciB0aGF0IGRvbid0IGZvbGxvdyB0aGUgcHJvdG9jb2xcbiAgICBpZighKGUuc291cmNlID09PSBoYW5kbGUgJiYgZS5vcmlnaW4gPT09IG9yaWdpbiAmJlxuICAgICAgKChleHBlY3RSZXF1ZXN0ICYmIGlzVmFsaWRSZXF1ZXN0KGUuZGF0YSkpIHx8XG4gICAgICAgICghZXhwZWN0UmVxdWVzdCAmJiBpc1ZhbGlkUmVzcG9uc2UoZS5kYXRhKSkpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaXN0ZW5lcihlLmRhdGEsIGUpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJ1Y3R1cmVNZXRob2ROYW1lKGZxTWV0aG9kTmFtZSkge1xuICAvLyBmdWxseS1xdWFsaWZpZWQgbWV0aG9kIG5hbWUgaXM6IGA8YXBpLW5hbWU+LjxtZXRob2QtbmFtZT5gXG4gIC8vIHdoZXJlIGA8YXBpLW5hbWU+YCBpcyBhbGwgYnV0IHRoZSBsYXN0IGRvdC1kZWxpbWl0ZWQgc2VnbWVudCBhbmRcbiAgLy8gYDxtZXRob2QtbmFtZT5gIGlzIHRoZSBsYXN0IGRvdC1kZWxpbWl0ZWQgc2VnbWVudFxuICBsZXQgW25hbWUsIC4uLnJlc3RdID0gZnFNZXRob2ROYW1lLnNwbGl0KCcuJyk7XG4gIGNvbnN0IG1ldGhvZCA9IHJlc3QucG9wKCk7XG4gIG5hbWUgPSBbbmFtZSwgLi4ucmVzdF0uam9pbignLicpO1xuICByZXR1cm4ge25hbWUsIG1ldGhvZH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hhbmRsZVByb21pc2UoaGFuZGxlKSB7XG4gIHRyeSB7XG4gICAgLy8gSEFDSzogd2UgY2FuJ3QganVzdCBgUHJvbWlzZS5yZXNvbHZlKGhhbmRsZSlgIGJlY2F1c2UgQ2hyb21lIGhhc1xuICAgIC8vIGEgYnVnIHRoYXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgaGFuZGxlIGlzIGNyb3NzIGRvbWFpblxuICAgIHJldHVybiB0eXBlb2YgaGFuZGxlLnRoZW4gPT09ICdmdW5jdGlvbic7XG4gIH0gY2F0Y2goZSkge31cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcblxuLy8gMzAgc2Vjb25kIGRlZmF1bHQgdGltZW91dFxuY29uc3QgUlBDX0NMSUVOVF9DQUxMX1RJTUVPVVQgPSAzMDAwMDtcblxuZXhwb3J0IGNsYXNzIENsaWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3JpZ2luID0gbnVsbDtcbiAgICB0aGlzLl9oYW5kbGUgPSBudWxsO1xuICAgIHRoaXMuX2xpc3RlbmVyID0gbnVsbDtcbiAgICAvLyBhbGwgcGVuZGluZyByZXF1ZXN0c1xuICAgIHRoaXMuX3BlbmRpbmcgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdHMgdG8gYSBXZWIgUmVxdWVzdCBSUEMgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgUHJvbWlzZSB3aWxsIHJlc29sdmUgdG8gYW4gUlBDIGluamVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2V0IG9yXG4gICAqIGRlZmluZSBBUElzIHRvIGVuYWJsZSBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIG9yaWdpbiB0aGUgb3JpZ2luIHRvIHNlbmQgbWVzc2FnZXMgdG8uXG4gICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAgICogICAgICAgICAgW2hhbmRsZV0gYSBoYW5kbGUgdG8gdGhlIHdpbmRvdyAob3IgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG9cbiAgICogICAgICAgICAgICBhIGhhbmRsZSkgdG8gc2VuZCBtZXNzYWdlcyB0b1xuICAgKiAgICAgICAgICAgIChkZWZhdWx0cyB0byBgd2luZG93LnBhcmVudCB8fCB3aW5kb3cub3BlbmVyYCkuXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gUlBDIGluamVjdG9yIG9uY2UgY29ubmVjdGVkLlxuICAgKi9cbiAgYXN5bmMgY29ubmVjdChvcmlnaW4sIG9wdGlvbnMpIHtcbiAgICBpZih0aGlzLl9saXN0ZW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IGNvbm5lY3RlZC4nKTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIFRPRE86IHZhbGlkYXRlIGBvcmlnaW5gIGFuZCBgb3B0aW9ucy5oYW5kbGVgXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgc2VsZi5vcmlnaW4gPSB1dGlscy5wYXJzZVVybChvcmlnaW4pLm9yaWdpbjtcbiAgICBzZWxmLl9oYW5kbGUgPSBvcHRpb25zLmhhbmRsZSB8fCB3aW5kb3cucGFyZW50IHx8IHdpbmRvdy5vcGVuZXI7XG5cbiAgICBjb25zdCBwZW5kaW5nID0gc2VsZi5fcGVuZGluZztcbiAgICBzZWxmLl9saXN0ZW5lciA9IHV0aWxzLmNyZWF0ZU1lc3NhZ2VMaXN0ZW5lcih7XG4gICAgICBvcmlnaW46IHNlbGYub3JpZ2luLFxuICAgICAgaGFuZGxlOiBzZWxmLl9oYW5kbGUsXG4gICAgICBleHBlY3RSZXF1ZXN0OiBmYWxzZSxcbiAgICAgIGxpc3RlbmVyOiBtZXNzYWdlID0+IHtcbiAgICAgICAgLy8gaWdub3JlIG1lc3NhZ2VzIHRoYXQgaGF2ZSBubyBtYXRjaGluZywgcGVuZGluZyByZXF1ZXN0XG4gICAgICAgIGlmKCFwZW5kaW5nLmhhcyhtZXNzYWdlLmlkKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc29sdmUgb3IgcmVqZWN0IFByb21pc2UgYXNzb2NpYXRlZCB3aXRoIG1lc3NhZ2VcbiAgICAgICAgY29uc3Qge3Jlc29sdmUsIHJlamVjdCwgY2FuY2VsVGltZW91dH0gPSBwZW5kaW5nLmdldChtZXNzYWdlLmlkKTtcbiAgICAgICAgY2FuY2VsVGltZW91dCgpO1xuICAgICAgICBpZigncmVzdWx0JyBpbiBtZXNzYWdlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZS5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCh1dGlscy5kZXNlcmlhbGl6ZUVycm9yKG1lc3NhZ2UuZXJyb3IpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHNlbGYuX2xpc3RlbmVyKTtcblxuICAgIHJldHVybiBuZXcgSW5qZWN0b3Ioc2VsZik7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBSUEMgYnkgc2VuZGluZyBhIG1lc3NhZ2UgdG8gdGhlIFdlYiBSZXF1ZXN0IFJQQyBzZXJ2ZXIgYW5kXG4gICAqIGF3YWl0aW5nIGEgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSBxdWFsaWZpZWRNZXRob2ROYW1lIHRoZSBmdWxseS1xdWFsaWZpZWQgbmFtZSBvZiB0aGUgbWV0aG9kIHRvIGNhbGwuXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1c2U6XG4gICAqICAgICAgICAgIFt0aW1lb3V0XSBhIHRpbWVvdXQsIGluIG1pbGxpc2Vjb25kcywgZm9yIGF3YWl0aW5nIGEgcmVzcG9uc2U7XG4gICAqICAgICAgICAgICAgYSBub24tcG9zaXRpdmUgdGltZW91dCAoPD0gMCkgd2lsbCBjYXVzZSBhbiBpbmRlZmluaXRlIHdhaXQuXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCAob3IgZXJyb3IpIG9mIHRoZSBjYWxsLlxuICAgKi9cbiAgYXN5bmMgc2VuZChxdWFsaWZpZWRNZXRob2ROYW1lLCBwYXJhbWV0ZXJzLCB7XG4gICAgdGltZW91dCA9IFJQQ19DTElFTlRfQ0FMTF9USU1FT1VUXG4gIH0pIHtcbiAgICBpZighdGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUlBDIGNsaWVudCBub3QgY29ubmVjdGVkLicpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgaWQ6IHV0aWxzLnV1aWR2NCgpLFxuICAgICAgbWV0aG9kOiBxdWFsaWZpZWRNZXRob2ROYW1lLFxuICAgICAgcGFyYW1zOiBwYXJhbWV0ZXJzXG4gICAgfTtcblxuICAgIC8vIEhBQ0s6IHdlIGNhbid0IGp1c3QgYFByb21pc2UucmVzb2x2ZShoYW5kbGUpYCBiZWNhdXNlIENocm9tZSBoYXNcbiAgICAvLyBhIGJ1ZyB0aGF0IHRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIGhhbmRsZSBpcyBjcm9zcyBkb21haW5cbiAgICBpZih1dGlscy5pc0hhbmRsZVByb21pc2Uoc2VsZi5faGFuZGxlKSkge1xuICAgICAgY29uc3QgaGFuZGxlID0gYXdhaXQgc2VsZi5faGFuZGxlO1xuICAgICAgaGFuZGxlLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHNlbGYub3JpZ2luKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5faGFuZGxlLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHNlbGYub3JpZ2luKTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gUHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbmNlIGEgcmVzcG9uc2UgbWVzc2FnZSBoYXMgYmVlblxuICAgIC8vIHJlY2VpdmVkIG9yIG9uY2UgYSB0aW1lb3V0IG9jY3Vyc1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBwZW5kaW5nID0gc2VsZi5fcGVuZGluZztcbiAgICAgIGxldCBjYW5jZWxUaW1lb3V0O1xuICAgICAgaWYodGltZW91dCA+IDApIHtcbiAgICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgcGVuZGluZy5kZWxldGUobWVzc2FnZS5pZCk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUlBDIGNhbGwgdGltZWQgb3V0LicpKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIGNhbmNlbFRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgcGVuZGluZy5kZWxldGUobWVzc2FnZS5pZCk7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW5jZWxUaW1lb3V0ID0gKCkgPT4ge1xuICAgICAgICAgIHBlbmRpbmcuZGVsZXRlKG1lc3NhZ2UuaWQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcGVuZGluZy5zZXQobWVzc2FnZS5pZCwge3Jlc29sdmUsIHJlamVjdCwgY2FuY2VsVGltZW91dH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGZyb20gdGhlIHJlbW90ZSBXZWIgUmVxdWVzdCBSUEMgc2VydmVyIGFuZCBjbG9zZXMgZG93biB0aGlzXG4gICAqIGNsaWVudC5cbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGlmKHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgIHRoaXMuX2hhbmRsZSA9IHRoaXMub3JpZ2luID0gdGhpcy5fbGlzdGVuZXIgPSBudWxsO1xuICAgICAgLy8gcmVqZWN0IGFsbCBwZW5kaW5nIGNhbGxzXG4gICAgICBmb3IoY29uc3QgdmFsdWUgb2YgdGhpcy5fcGVuZGluZy52YWx1ZXMoKSkge1xuICAgICAgICB2YWx1ZS5yZWplY3QobmV3IEVycm9yKCdSUEMgY2xpZW50IGNsb3NlZC4nKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wZW5kaW5nID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBJbmplY3RvciB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX2FwaXMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lcyBhIG5hbWVkIEFQSSB0aGF0IHdpbGwgdXNlIGFuIFJQQyBjbGllbnQgdG8gaW1wbGVtZW50IGl0c1xuICAgKiBmdW5jdGlvbnMuIEVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgYXN5bmNocm9ub3VzIGFuZCByZXR1cm4gYVxuICAgKiBQcm9taXNlIHdpdGggdGhlIHJlc3VsdCBmcm9tIHRoZSBSUEMgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGFuIGludGVyZmFjZSB3aXRoIGZ1bmN0aW9ucyBkZWZpbmVkIGFjY29yZGluZ1xuICAgKiB0byB0aG9zZSBwcm92aWRlZCBpbiB0aGUgZ2l2ZW4gYGRlZmluaXRpb25gLiBUaGUgYG5hbWVgIHBhcmFtZXRlciBjYW4gYmVcbiAgICogdXNlZCB0byBvYnRhaW4gdGhpcyBjYWNoZWQgaW50ZXJmYWNlIHZpYSBgLmdldChuYW1lKWAuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBBUEkuXG4gICAqIEBwYXJhbSBkZWZpbml0aW9uIHRoZSBkZWZpbml0aW9uIGZvciB0aGUgQVBJLCBpbmNsdWRpbmc6XG4gICAqICAgICAgICAgIGZ1bmN0aW9uczogYW4gYXJyYXkgb2YgZnVuY3Rpb24gbmFtZXMgKGFzIHN0cmluZ3MpIG9yIG9iamVjdHNcbiAgICogICAgICAgICAgICBjb250YWluaW5nOiB7bmFtZTogPGZ1bmN0aW9uTmFtZT4sIG9wdGlvbnM6IDxycGNDbGllbnRPcHRpb25zPn0uXG4gICAqXG4gICAqIEByZXR1cm4gYW4gaW50ZXJmYWNlIHdpdGggdGhlIGZ1bmN0aW9ucyBwcm92aWRlZCB2aWEgYGRlZmluaXRpb25gIHRoYXRcbiAgICogICAgICAgICAgIHdpbGwgbWFrZSBSUEMgY2FsbHMgdG8gYW4gUlBDIHNlcnZlciB0byBwcm92aWRlIHRoZWlyXG4gICAqICAgICAgICAgICBpbXBsZW1lbnRhdGlvbi5cbiAgICovXG4gIGRlZmluZShuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgaWYoIShuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BuYW1lYCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICB9XG4gICAgLy8gVE9ETzogc3VwcG9ydCBXZWIgSURMIGFzIGEgZGVmaW5pdGlvbiBmb3JtYXQ/XG4gICAgaWYoIShkZWZpbml0aW9uICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgQXJyYXkuaXNBcnJheShkZWZpbml0aW9uLmZ1bmN0aW9ucykpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnYGRlZmluaXRpb24uZnVuY3Rpb25gIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb24gbmFtZXMgb3IgJyArXG4gICAgICAgICdmdW5jdGlvbiBkZWZpbml0aW9uIG9iamVjdHMgdG8gYmUgZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBhcGkgPSB7fTtcblxuICAgIGRlZmluaXRpb24uZnVuY3Rpb25zLmZvckVhY2goZm4gPT4ge1xuICAgICAgaWYodHlwZW9mIGZuID09PSAnc3RyaW5nJykge1xuICAgICAgICBmbiA9IHtuYW1lOiBmbiwgb3B0aW9uczoge319O1xuICAgICAgfVxuICAgICAgYXBpW2ZuLm5hbWVdID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmNsaWVudC5zZW5kKFxuICAgICAgICAgIG5hbWUgKyAnLicgKyBmbi5uYW1lLCBbLi4uYXJndW1lbnRzXSwgZm4ub3B0aW9ucyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgc2VsZi5fYXBpc1tuYW1lXSA9IGFwaTtcbiAgICByZXR1cm4gYXBpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIG5hbWVkIEFQSSwgZGVmaW5pbmcgaXQgaWYgbmVjZXNzYXJ5IHdoZW4gYSBkZWZpbml0aW9uIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSB0aGUgbmFtZSBvZiB0aGUgQVBJLlxuICAgKiBAcGFyYW0gW2RlZmluaXRpb25dIHRoZSBkZWZpbml0aW9uIGZvciB0aGUgQVBJOyBpZiB0aGUgQVBJIGlzIGFscmVhZHlcbiAgICogICAgICAgICAgZGVmaW5lZCwgdGhpcyBkZWZpbml0aW9uIGlzIGlnbm9yZWQuXG4gICAqXG4gICAqIEByZXR1cm4gdGhlIGludGVyZmFjZS5cbiAgICovXG4gIGdldChuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgY29uc3QgYXBpID0gdGhpcy5fYXBpc1tuYW1lXTtcbiAgICBpZighYXBpKSB7XG4gICAgICBpZihkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluZShuYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIFwiJHtuYW1lfVwiIGhhcyBub3QgYmVlbiBkZWZpbmVkLmApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXBpc1tuYW1lXTtcbiAgfVxufVxuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Ioe2Rlc2VyaWFsaXplID0gZSA9PiBlLCB3YWl0VW50aWwgPSBhc3luYyAoKSA9PiB7fX0gPSB7fSkge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuX2Rlc2VyaWFsaXplID0gZGVzZXJpYWxpemU7XG4gICAgdGhpcy5fd2FpdFVudGlsID0gd2FpdFVudGlsO1xuICB9XG5cbiAgYXN5bmMgZW1pdChldmVudCkge1xuICAgIGV2ZW50ID0gdGhpcy5fZGVzZXJpYWxpemUoZXZlbnQpO1xuICAgICh0aGlzLl9saXN0ZW5lcnNbZXZlbnQudHlwZV0gfHwgW10pLmZvckVhY2gobCA9PiBsKGV2ZW50KSk7XG4gICAgcmV0dXJuIHRoaXMuX3dhaXRVbnRpbChldmVudCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZm4pIHtcbiAgICBpZighdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdID0gW2ZuXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0ucHVzaChmbik7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGZuKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgaWYoIWxpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpZHggPSBsaXN0ZW5lcnMuaW5kZXhPZihmbik7XG4gICAgaWYoaWR4ICE9PSAtMSkge1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgIH1cbiAgfVxufVxuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNsYXNzIFNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3JpZ2luID0gbnVsbDtcbiAgICB0aGlzLl9oYW5kbGUgPSBudWxsO1xuICAgIHRoaXMuX2FwaXMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gZm9yIGEgbmFtZWQgQVBJLiBBbGwgZnVuY3Rpb25zIGluIHRoZSBnaXZlblxuICAgKiBBUEkgd2lsbCBiZSBtYWRlIGNhbGxhYmxlIHZpYSBSUEMgY2xpZW50cyBjb25uZWN0ZWQgdG8gdGhpcyBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBBUEkuXG4gICAqIEBwYXJhbSBhcGkgdGhlIEFQSSB0byBhZGQuXG4gICAqL1xuICBkZWZpbmUobmFtZSwgYXBpKSB7XG4gICAgaWYoIShuYW1lICYmIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BuYW1lYCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKTtcbiAgICB9XG4gICAgaWYoIShhcGkgJiYgYXBpICE9PSAnb2JqZWN0JykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhcGlgIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgIH1cbiAgICBpZihuYW1lIGluIHRoaXMuX2FwaXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIFwiJHtuYW1lfVwiIEFQSSBpcyBhbHJlYWR5IGRlZmluZWQuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5fYXBpc1tuYW1lXSA9IGFwaTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5zIGZvciBSUEMgbWVzc2FnZXMgZnJvbSBjbGllbnRzIGZyb20gYSBwYXJ0aWN1bGFyIG9yaWdpbiBhbmRcbiAgICogd2luZG93IGhhbmRsZSBhbmQgdXNlcyB0aGVtIHRvIGV4ZWN1dGUgQVBJIGNhbGxzIGJhc2VkIG9uIHByZWRlZmluZWRcbiAgICogQVBJcy5cbiAgICpcbiAgICogSWYgbWVzc2FnZXMgYXJlIG5vdCBmcm9tIHRoZSBnaXZlbiBvcmlnaW4gb3Igd2luZG93IGhhbmRsZSwgdGhleSBhcmVcbiAgICogaWdub3JlZC4gSWYgdGhlIG1lc3NhZ2VzIHJlZmVyIHRvIG5hbWVkIEFQSXMgdGhhdCBoYXZlIG5vdCBiZWVuIGRlZmluZWRcbiAgICogdGhlbiBhbiBlcnJvciBtZXNzYWdlIGlzIHNlbnQgaW4gcmVzcG9uc2UuIFRoZXNlIGVycm9yIG1lc3NhZ2VzIGNhblxuICAgKiBiZSBzdXBwcmVzc2VkIGJ5IHVzaW5nIHRoZSBgaWdub3JlVW5rbm93bkFwaWAgb3B0aW9uLlxuICAgKlxuICAgKiBJZiBhIG1lc3NhZ2UgcmVmZXJzIHRvIGFuIHVua25vd24gbWV0aG9kIG9uIGEga25vd24gbmFtZWQgQVBJLCB0aGVuIGFuXG4gICAqIGVycm9yIG1lc3NhZ2UgaXMgc2VudCBpbiByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIG9yaWdpbiB0aGUgb3JpZ2luIHRvIGxpc3RlbiBmb3IuXG4gICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAgICogICAgICAgICAgW2hhbmRsZV0gYSBoYW5kbGUgdG8gdGhlIHdpbmRvdyAob3IgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG9cbiAgICogICAgICAgICAgICBhIGhhbmRsZSkgdG8gbGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tXG4gICAqICAgICAgICAgICAgKGRlZmF1bHRzIHRvIGB3aW5kb3cucGFyZW50IHx8IHdpbmRvdy5vcGVuZXJgKS5cbiAgICogICAgICAgICAgW2lnbm9yZVVua25vd25BcGldIGB0cnVlYCB0byBpZ25vcmUgdW5rbm93biBBUEkgbWVzc2FnZXMuXG4gICAqL1xuICBhc3luYyBsaXN0ZW4ob3JpZ2luLCBvcHRpb25zKSB7XG4gICAgaWYodGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSBsaXN0ZW5pbmcuJyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBUT0RPOiB2YWxpZGF0ZSBgb3JpZ2luYCBhbmQgYG9wdGlvbnMuaGFuZGxlYFxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYub3JpZ2luID0gdXRpbHMucGFyc2VVcmwob3JpZ2luKS5vcmlnaW47XG4gICAgc2VsZi5faGFuZGxlID0gb3B0aW9ucy5oYW5kbGUgfHwgd2luZG93LnBhcmVudCB8fCB3aW5kb3cub3BlbmVyO1xuXG4gICAgY29uc3QgaWdub3JlVW5rbm93bkFwaSA9IChvcHRpb25zLmlnbm9yZVVua25vd25BcGkgPT09ICd0cnVlJykgfHwgZmFsc2U7XG5cbiAgICBzZWxmLl9saXN0ZW5lciA9IHV0aWxzLmNyZWF0ZU1lc3NhZ2VMaXN0ZW5lcih7XG4gICAgICBvcmlnaW46IHNlbGYub3JpZ2luLFxuICAgICAgaGFuZGxlOiBzZWxmLl9oYW5kbGUsXG4gICAgICBleHBlY3RSZXF1ZXN0OiB0cnVlLFxuICAgICAgbGlzdGVuZXI6IG1lc3NhZ2UgPT4ge1xuICAgICAgICBjb25zdCB7bmFtZSwgbWV0aG9kfSA9IHV0aWxzLmRlc3RydWN0dXJlTWV0aG9kTmFtZShtZXNzYWdlLm1ldGhvZCk7XG4gICAgICAgIGNvbnN0IGFwaSA9IHNlbGYuX2FwaXNbbmFtZV07XG5cbiAgICAgICAgLy8gZG8gbm90IGFsbG93IGNhbGxpbmcgXCJwcml2YXRlXCIgbWV0aG9kcyAoc3RhcnRzIHdpdGggYF9gKVxuICAgICAgICBpZihtZXRob2QgJiYgbWV0aG9kLnN0YXJ0c1dpdGgoJ18nKSkge1xuICAgICAgICAgIHJldHVybiBzZW5kTWV0aG9kTm90Rm91bmQoc2VsZi5faGFuZGxlLCBzZWxmLm9yaWdpbiwgbWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBUEkgbm90IGZvdW5kIGJ1dCBpZ25vcmUgZmxhZyBpcyBvblxuICAgICAgICBpZighYXBpICYmIGlnbm9yZVVua25vd25BcGkpIHtcbiAgICAgICAgICAvLyBBUEkgbm90IHJlZ2lzdGVyZWQsIGlnbm9yZSB0aGUgbWVzc2FnZSByYXRoZXIgdGhhbiByYWlzZSBlcnJvclxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIGlnbm9yZSBmbGFnIGFuZCB1bmtub3duIEFQSSBvciB1bmtub3duIHNwZWNpZmljIG1ldGhvZFxuICAgICAgICBpZighYXBpIHx8IHR5cGVvZiBhcGlbbWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBzZW5kTWV0aG9kTm90Rm91bmQoc2VsZi5faGFuZGxlLCBzZWxmLm9yaWdpbiwgbWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBUEkgYW5kIHNwZWNpZmljIGZ1bmN0aW9uIGZvdW5kXG4gICAgICAgIGNvbnN0IGZuID0gYXBpW21ldGhvZF07XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgIGlkOiBtZXNzYWdlLmlkXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0ID0gYXdhaXQgZm4uYXBwbHkoYXBpLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICByZXNwb25zZS5lcnJvciA9IHV0aWxzLnNlcmlhbGl6ZUVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpZiBzZXJ2ZXIgZGlkIG5vdCBgY2xvc2VgIHdoaWxlIHdlIHdhaXRlZCBmb3IgYSByZXNwb25zZVxuICAgICAgICAgIGlmKHNlbGYuX2hhbmRsZSkge1xuICAgICAgICAgICAgLy8gSEFDSzogd2UgY2FuJ3QganVzdCBgUHJvbWlzZS5yZXNvbHZlKGhhbmRsZSlgIGJlY2F1c2UgQ2hyb21lIGhhc1xuICAgICAgICAgICAgLy8gYSBidWcgdGhhdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSBoYW5kbGUgaXMgY3Jvc3MgZG9tYWluXG4gICAgICAgICAgICBpZih1dGlscy5pc0hhbmRsZVByb21pc2Uoc2VsZi5faGFuZGxlKSkge1xuICAgICAgICAgICAgICBzZWxmLl9oYW5kbGUudGhlbihoID0+IGgucG9zdE1lc3NhZ2UocmVzcG9uc2UsIHNlbGYub3JpZ2luKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLl9oYW5kbGUucG9zdE1lc3NhZ2UocmVzcG9uc2UsIHNlbGYub3JpZ2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBzZWxmLl9saXN0ZW5lcik7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBpZih0aGlzLl9saXN0ZW5lcikge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9saXN0ZW5lcik7XG4gICAgICB0aGlzLl9oYW5kbGUgPSB0aGlzLm9yaWdpbiA9IHRoaXMuX2xpc3RlbmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VuZE1ldGhvZE5vdEZvdW5kKGhhbmRsZSwgb3JpZ2luLCBtZXNzYWdlKSB7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIGpzb25ycGM6ICcyLjAnLFxuICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgIGVycm9yOiBPYmplY3QuYXNzaWduKHt9LCB1dGlscy5SUENfRVJST1JTLk1ldGhvZE5vdEZvdW5kKVxuICB9O1xuICAvLyBIQUNLOiB3ZSBjYW4ndCBqdXN0IGBQcm9taXNlLnJlc29sdmUoaGFuZGxlKWAgYmVjYXVzZSBDaHJvbWUgaGFzXG4gIC8vIGEgYnVnIHRoYXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgaGFuZGxlIGlzIGNyb3NzIGRvbWFpblxuICBpZih1dGlscy5pc0hhbmRsZVByb21pc2UoaGFuZGxlKSkge1xuICAgIHJldHVybiBoYW5kbGUudGhlbihoID0+IGgucG9zdE1lc3NhZ2UocmVzcG9uc2UsIG9yaWdpbikpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYW5kbGUucG9zdE1lc3NhZ2UocmVzcG9uc2UsIG9yaWdpbik7XG4gIH1cbn1cbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBkZWZhdWx0IHRpbWVvdXQgaXMgNjAgc2Vjb25kc1xuY29uc3QgTE9BRF9XSU5ET1dfVElNRU9VVCA9IDYwMDAwO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgd2luZG93IGFuZCBBUEkgZm9yIHJlbW90ZSBXZWIgYXBwbGljYXRpb25zLiBUaGlzIEFQSSBpcyB0eXBpY2FsbHlcbiAqIHVzZWQgYnkgUlBDIFdlYkFwcHMgdGhhdCBydW4gaW4gYSBXZWJBcHBDb250ZXh0IHRvIGluZGljYXRlIHdoZW4gdGhleSBhcmVcbiAqIHJlYWR5IGFuZCB0byBzaG93L2hpZGUgdGhlaXIgVUkuXG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJBcHBXaW5kb3cge1xuICBjb25zdHJ1Y3RvcihcbiAgICB1cmwsIHtcbiAgICAgIHRpbWVvdXQgPSBMT0FEX1dJTkRPV19USU1FT1VULFxuICAgICAgaGFuZGxlLFxuICAgICAgaWZyYW1lLFxuICAgICAgd2luZG93Q29udHJvbCxcbiAgICAgIGNsYXNzTmFtZSA9IG51bGwsXG4gICAgICBjdXN0b21pemUgPSBudWxsXG4gICAgfSA9IHt9KSB7XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5kaWFsb2cgPSBudWxsO1xuICAgIHRoaXMuaWZyYW1lID0gbnVsbDtcbiAgICB0aGlzLmhhbmRsZSA9IG51bGw7XG4gICAgdGhpcy53aW5kb3dDb250cm9sID0gbnVsbDtcbiAgICB0aGlzLl9yZWFkeSA9IGZhbHNlO1xuICAgIHRoaXMuX3ByaXZhdGUgPSB7fTtcbiAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuXG4gICAgLy8gcHJpdmF0ZSB0byBhbGxvdyBjYWxsZXIgdG8gdHJhY2sgcmVhZGluZXNzXG4gICAgdGhpcy5fcHJpdmF0ZS5fcmVhZHlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gcmVqZWN0IGlmIHRpbWVvdXQgcmVhY2hlZFxuICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ0xvYWRpbmcgV2ViIGFwcGxpY2F0aW9uIHdpbmRvdyB0aW1lZCBvdXQuJywgJ1RpbWVvdXRFcnJvcicpKSxcbiAgICAgICAgdGltZW91dCk7XG4gICAgICB0aGlzLl9wcml2YXRlLl9yZXNvbHZlUmVhZHkgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX3ByaXZhdGUuX3JlamVjdFJlYWR5ID0gZXJyID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICAgICAgdGhpcy5fdGltZW91dElkID0gbnVsbDtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMuX3ByaXZhdGUuaXNSZWFkeSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9wcml2YXRlLl9yZWFkeVByb21pc2U7XG4gICAgfTtcblxuICAgIC8vIHByaXZhdGUgdG8gZGlzYWxsb3cgZGVzdHJ1Y3Rpb24gdmlhIGNsaWVudFxuICAgIHRoaXMuX3ByaXZhdGUuZGVzdHJveSA9ICgpID0+IHtcbiAgICAgIC8vIHdpbmRvdyBub3QgcmVhZHkgeWV0LCBidXQgZGVzdHJveWVkXG4gICAgICBpZih0aGlzLl90aW1lb3V0SWQpIHtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZS5fcmVqZWN0UmVhZHkobmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnV2ViIGFwcGxpY2F0aW9uIHdpbmRvdyBjbG9zZWQgYmVmb3JlIHJlYWR5LicsICdBYm9ydEVycm9yJykpO1xuICAgICAgfVxuICAgICAgaWYodGhpcy5kaWFsb2cpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRpYWxvZyk7XG4gICAgICAgIHRoaXMuZGlhbG9nID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYoaWZyYW1lKSB7XG4gICAgICAvLyBUT0RPOiB2YWxpZGF0ZSBgaWZyYW1lYCBvcHRpb24gYXMgbXVjaCBhcyBwb3NzaWJsZVxuICAgICAgaWYoISh0eXBlb2YgaWZyYW1lID09PSAnb2JqZWN0JyAmJiBpZnJhbWUuY29udGVudFdpbmRvdykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYG9wdGlvbnMuaWZyYW1lYCBtdXN0IGJlIGFuIGlmcmFtZSBlbGVtZW50LicpO1xuICAgICAgfVxuICAgICAgdGhpcy53aW5kb3dDb250cm9sID0ge1xuICAgICAgICBoYW5kbGU6IGlmcmFtZS5jb250ZW50V2luZG93LFxuICAgICAgICBzaG93KCkge1xuICAgICAgICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9LFxuICAgICAgICBoaWRlKCkge1xuICAgICAgICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICAgIHRoaXMuaGFuZGxlID0gdGhpcy5pZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZih3aW5kb3dDb250cm9sKSB7XG4gICAgICAvLyBUT0RPOiB2YWxpZGF0ZSBgd2luZG93Q29udHJvbGBcbiAgICAgIHRoaXMud2luZG93Q29udHJvbCA9IHdpbmRvd0NvbnRyb2w7XG4gICAgICB0aGlzLmhhbmRsZSA9IHRoaXMud2luZG93Q29udHJvbC5oYW5kbGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoaGFuZGxlKSB7XG4gICAgICAvLyBUT0RPOiB2YWxpZGF0ZSBgaGFuZGxlYFxuICAgICAgdGhpcy5oYW5kbGUgPSBoYW5kbGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoY3VzdG9taXplKSB7XG4gICAgICBpZighdHlwZW9mIGN1c3RvbWl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgb3B0aW9ucy5jdXN0b21pemVgIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSB0b3AtbGV2ZWwgZGlhbG9nIG92ZXJsYXlcbiAgICB0aGlzLmRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpYWxvZycpO1xuICAgIGFwcGx5U3R5bGUodGhpcy5kaWFsb2csIHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICdtYXgtd2lkdGgnOiAnMTAwJScsXG4gICAgICAnbWF4LWhlaWdodCc6ICcxMDAlJyxcbiAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICdib3gtc2l6aW5nJzogJ2JvcmRlci1ib3gnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgJ3otaW5kZXgnOiAxMDAwMDAwXG4gICAgfSk7XG4gICAgdGhpcy5kaWFsb2cuY2xhc3NOYW1lID0gJ3dlYi1hcHAtd2luZG93JztcbiAgICBpZih0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5kaWFsb2cuY2xhc3NOYW1lID0gdGhpcy5kaWFsb2cuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgIH1cblxuICAgIC8vIGVuc3VyZSBiYWNrZHJvcCBpcyB0cmFuc3BhcmVudCBieSBkZWZhdWx0XG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKFxuICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYGRpYWxvZy53ZWItYXBwLXdpbmRvdzo6YmFja2Ryb3Age1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1gKSk7XG5cbiAgICAvLyBjcmVhdGUgZmxleCBjb250YWluZXIgZm9yIGlmcmFtZVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYXBwbHlTdHlsZSh0aGlzLmNvbnRhaW5lciwge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgJ2ZsZXgtZGlyZWN0aW9uJzogJ2NvbHVtbidcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAnd2ViLWFwcC13aW5kb3ctYmFja2Ryb3AnO1xuXG4gICAgLy8gY3JlYXRlIGlmcmFtZVxuICAgIHRoaXMuaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgdGhpcy5pZnJhbWUuc3JjID0gdXJsO1xuICAgIHRoaXMuaWZyYW1lLnNjcm9sbGluZyA9ICdhdXRvJztcbiAgICBhcHBseVN0eWxlKHRoaXMuaWZyYW1lLCB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJ2ZsZXgtZ3Jvdyc6IDFcbiAgICB9KTtcblxuICAgIC8vIGFzc2VtYmxlIGRpYWxvZ1xuICAgIHRoaXMuZGlhbG9nLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgdGhpcy5kaWFsb2cuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuXG4gICAgLy8gaGFuZGxlIGNhbmNlbCAodXNlciBwcmVzc2VkIGVzY2FwZSlcbiAgICB0aGlzLmRpYWxvZy5hZGRFdmVudExpc3RlbmVyKCdjYW5jZWwnLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gYXR0YWNoIHRvIERPTVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kaWFsb2cpO1xuICAgIHRoaXMuaGFuZGxlID0gdGhpcy5pZnJhbWUuY29udGVudFdpbmRvdztcblxuICAgIGlmKGN1c3RvbWl6ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY3VzdG9taXplKHtcbiAgICAgICAgICBkaWFsb2c6IHRoaXMuZGlhbG9nLFxuICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgaWZyYW1lOiB0aGlzLmlmcmFtZSxcbiAgICAgICAgICB3ZWJBcHBXaW5kb3c6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IHRoZSBjbGllbnQgd2hlbiBpdCBpcyByZWFkeSB0byByZWNlaXZlIG1lc3NhZ2VzLlxuICAgKi9cbiAgcmVhZHkoKSB7XG4gICAgdGhpcy5fcmVhZHkgPSB0cnVlO1xuICAgIHRoaXMuX3ByaXZhdGUuX3Jlc29sdmVSZWFkeSh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYnkgdGhlIGNsaWVudCB3aGVuIGl0IHdhbnRzIHRvIHNob3cgVUkuXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmKCF0aGlzLnZpc2libGUpIHtcbiAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAvLyBkaXNhYmxlIHNjcm9sbGluZyBvbiBib2R5XG4gICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuICAgICAgdGhpcy5fYm9keU92ZXJmbG93U3R5bGUgPSBib2R5LnN0eWxlLm92ZXJmbG93O1xuICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgaWYodGhpcy5kaWFsb2cpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGlmKHRoaXMuZGlhbG9nLnNob3dNb2RhbCkge1xuICAgICAgICAgIHRoaXMuZGlhbG9nLnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYodGhpcy53aW5kb3dDb250cm9sLnNob3cpIHtcbiAgICAgICAgdGhpcy53aW5kb3dDb250cm9sLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IHRoZSBjbGllbnQgd2hlbiBpdCB3YW50cyB0byBoaWRlIFVJLlxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICBpZih0aGlzLnZpc2libGUpIHtcbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgLy8gcmVzdG9yZSBgb3ZlcmZsb3dgIHN0eWxlIG9uIGJvZHlcbiAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICBpZih0aGlzLl9ib2R5T3ZlcmZsb3dTdHlsZSkge1xuICAgICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5fYm9keU92ZXJmbG93U3R5bGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICB9XG4gICAgICBpZih0aGlzLmRpYWxvZykge1xuICAgICAgICB0aGlzLmRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBpZih0aGlzLmRpYWxvZy5jbG9zZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZih0aGlzLndpbmRvd0NvbnRyb2wuaGlkZSkge1xuICAgICAgICB0aGlzLndpbmRvd0NvbnRyb2wuaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XG4gIGZvcihjb25zdCBuYW1lIGluIHN0eWxlKSB7XG4gICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHN0eWxlW25hbWVdO1xuICB9XG59XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Q2xpZW50fSBmcm9tICcuL0NsaWVudC5qcyc7XG5pbXBvcnQge1NlcnZlcn0gZnJvbSAnLi9TZXJ2ZXIuanMnO1xuaW1wb3J0IHtXZWJBcHBXaW5kb3d9IGZyb20gJy4vV2ViQXBwV2luZG93LmpzJztcbmltcG9ydCB7cGFyc2VVcmx9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vLyAxMCBzZWNvbmRzXG5jb25zdCBXRUJfQVBQX0NPTlRFWFRfTE9BRF9USU1FT1VUID0gMTAwMDA7XG5cbmV4cG9ydCBjbGFzcyBXZWJBcHBDb250ZXh0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KCk7XG4gICAgdGhpcy5zZXJ2ZXIgPSBuZXcgU2VydmVyKCk7XG4gICAgdGhpcy5pbmplY3RvciA9IG51bGw7XG4gICAgdGhpcy5jb250cm9sID0gbnVsbDtcbiAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHdpbmRvdyAob3IgYXR0YWNoZXMgdG8gYW4gZXhpc3Rpbmcgb25lKSB0aGF0IGxvYWRzIGEgcGFnZSB0aGF0XG4gICAqIGlzIGV4cGVjdGVkIHRvIHVuZGVyc3RhbmQgdGhlIHdlYiByZXF1ZXN0IFJQQyBwcm90b2NvbC4gVGhpcyBtZXRob2RcbiAgICogcmV0dXJucyBhIFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb25jZSB0aGUgcGFnZSB1c2VzIFJQQyB0byBpbmRpY2F0ZVxuICAgKiB0aGF0IGl0IGlzIHJlYWR5IHRvIGJlIGNvbW11bmljYXRlZCB3aXRoIG9yIG9uY2UgYSB0aW1lb3V0IG9jY3Vycy5cbiAgICpcbiAgICogVGhlIFByb21pc2Ugd2lsbCByZXNvbHZlIHRvIGFuIFJQQyBpbmplY3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIGdldCBvclxuICAgKiBkZWZpbmUgQVBJcyB0byBlbmFibGUgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBXZWJBcHAgcnVubmluZyBpbiB0aGVcbiAgICogV2ViQXBwQ29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHVybCB0aGUgVVJMIHRvIHRoZSBwYWdlIHRvIGNvbm5lY3QgdG8uXG4gICAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIHRvIHVzZTpcbiAgICogICAgICAgICAgW3RpbWVvdXRdIHRoZSB0aW1lb3V0IGZvciB3YWl0aW5nIGZvciB0aGUgY2xpZW50IHRvIGJlIHJlYWR5LlxuICAgKiAgICAgICAgICBbaGFuZGxlXSBhIHdpbmRvdyBoYW5kbGUgdG8gY29ubmVjdCB0bzsgbWF5IGJlIGEgUHJvbWlzZSB0aGF0XG4gICAqICAgICAgICAgICAgdGhhdCByZXNvbHZlcyB0byBhIGhhbmRsZS5cbiAgICogICAgICAgICAgW2lmcmFtZV0gYW4gaWZyYW1lIGVsZW1lbnQgdG8gY29ubmVjdCB0by5cbiAgICogICAgICAgICAgW3dpbmRvd0NvbnRyb2xdIGEgd2luZG93IGNvbnRyb2wgaW50ZXJmYWNlIHRvIGNvbm5lY3QgdG8uXG4gICAqICAgICAgICAgIFtjbGFzc05hbWVdIGEgY2xhc3NOYW1lIHRvIGFzc2lnbiB0byB0aGUgd2luZG93IGZvciBDU1MgcHVycG9zZXMuXG4gICAqICAgICAgICAgIFtjdXN0b21pemUob3B0aW9ucyldIGEgZnVuY3Rpb24gdG8gY3VzdG9taXplIHRoZSBkaWFsb2cgdGhhdFxuICAgKiAgICAgICAgICAgIGxvYWRzIHRoZSB3aW5kb3cgYWZ0ZXIgaXRzIGNvbnN0cnVjdGlvbi5cbiAgICpcbiAgICogQHJldHVybiBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBSUEMgaW5qZWN0b3Igb25jZSB0aGUgd2luZG93IGlzXG4gICAqICAgICAgICAgICByZWFkeS5cbiAgICovXG4gIGFzeW5jIGNyZWF0ZVdpbmRvdyhcbiAgICB1cmwsIHtcbiAgICAgIHRpbWVvdXQgPSBXRUJfQVBQX0NPTlRFWFRfTE9BRF9USU1FT1VULFxuICAgICAgaWZyYW1lLFxuICAgICAgaGFuZGxlLFxuICAgICAgd2luZG93Q29udHJvbCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGN1c3RvbWl6ZVxuICAgIH0gPSB7fSkge1xuICAgIC8vIGRpc2FsbG93IGxvYWRpbmcgdGhlIHNhbWUgV2ViQXBwQ29udGV4dCBtb3JlIHRoYW4gb25jZVxuICAgIGlmKHRoaXMubG9hZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FwcENvbnRleHQgYWxyZWFkeSBsb2FkZWQuJyk7XG4gICAgfVxuICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcblxuICAgIC8vIGNyZWF0ZSBjb250cm9sIEFQSSBmb3IgV2ViQXBwIHRvIGNhbGwgdmlhIGl0cyBvd24gUlBDIGNsaWVudFxuICAgIHRoaXMuY29udHJvbCA9IG5ldyBXZWJBcHBXaW5kb3codXJsLCB7XG4gICAgICB0aW1lb3V0LFxuICAgICAgaWZyYW1lLFxuICAgICAgaGFuZGxlLFxuICAgICAgd2luZG93Q29udHJvbCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGN1c3RvbWl6ZVxuICAgIH0pO1xuXG4gICAgLy8gZGVmaW5lIGNvbnRyb2wgY2xhc3M7IHRoaXMgZW5hYmxlcyB0aGUgV2ViQXBwIHRoYXQgaXMgcnVubmluZyBpbiB0aGVcbiAgICAvLyBXZWJBcHBDb250ZXh0IHRvIGNvbnRyb2wgaXRzIFVJIG9yIGNsb3NlIGl0c2VsZiBkb3duXG4gICAgdGhpcy5zZXJ2ZXIuZGVmaW5lKCdjb3JlLmNvbnRyb2wnLCB0aGlzLmNvbnRyb2wpO1xuXG4gICAgLy8gbGlzdGVuIGZvciBjYWxscyBmcm9tIHRoZSB3aW5kb3csIGlnbm9yaW5nIGNhbGxzIHRvIHVua25vd24gQVBJc1xuICAgIC8vIHRvIGFsbG93IHRob3NlIHRvIGJlIGhhbmRsZWQgYnkgb3RoZXIgc2VydmVyc1xuICAgIGNvbnN0IG9yaWdpbiA9IHBhcnNlVXJsKHVybCkub3JpZ2luO1xuICAgIHRoaXMuc2VydmVyLmxpc3RlbihvcmlnaW4sIHtcbiAgICAgIGhhbmRsZTogdGhpcy5jb250cm9sLmhhbmRsZSxcbiAgICAgIGlnbm9yZVVua25vd25BcGk6IHRydWVcbiAgICB9KTtcblxuICAgIC8vIHdhaXQgZm9yIGNvbnRyb2wgdG8gYmUgcmVhZHlcbiAgICBhd2FpdCB0aGlzLmNvbnRyb2wuX3ByaXZhdGUuaXNSZWFkeSgpO1xuXG4gICAgLy8gY29ubmVjdCB0byB0aGUgV2ViQXBwQ29udGV4dCBhbmQgcmV0dXJuIHRoZSBpbmplY3RvclxuICAgIHRoaXMuaW5qZWN0b3IgPSBhd2FpdCB0aGlzLmNsaWVudC5jb25uZWN0KG9yaWdpbiwge1xuICAgICAgaGFuZGxlOiB0aGlzLmNvbnRyb2wuaGFuZGxlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0b3I7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBpZighdGhpcy5jbG9zZWQpIHtcbiAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY29udHJvbC5fcHJpdmF0ZS5kZXN0cm95KCk7XG4gICAgICB0aGlzLnNlcnZlci5jbG9zZSgpO1xuICAgICAgdGhpcy5jbGllbnQuY2xvc2UoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIVxuICogQSBDcmVkZW50aWFsUmVxdWVzdEV2ZW50IGlzIGVtaXR0ZWQgd2hlbiBhIHJlcXVlc3QgaGFzIGJlZW4gbWFkZSBmb3JcbiAqIGNyZWRlbnRpYWxzLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4vKiBnbG9iYWwgRXZlbnQgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgcnBjIGZyb20gJ3dlYi1yZXF1ZXN0LXJwYyc7XG5cbi8vIGNhbid0IHVzZSBcIkV4dGVuZGFibGVFdmVudFwiOyBvbmx5IGFjY2Vzc2libGUgZnJvbSBXb3JrZXJzXG4vLyBUT0RPOiBtYXkgbm90IGJlIGFibGUgdG8gZXZlbiBleHRlbmQgYEV2ZW50YCBoZXJlOyBjb3VsZCBwcm9kdWNlIFwiaW5jb3JyZWN0XCJcbi8vICAgY29yZSBhdHRyaWJ1dGVzXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbFJlcXVlc3RFdmVudCAvKmV4dGVuZHMgRXZlbnQqLyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBjcmVkZW50aWFsSGFuZGxlcixcbiAgICBjcmVkZW50aWFsUmVxdWVzdE9yaWdpbixcbiAgICBjcmVkZW50aWFsUmVxdWVzdE9wdGlvbnMsXG4gICAgaGludEtleVxuICB9KSB7XG4gICAgLy9zdXBlcignY3JlZGVudGlhbHJlcXVlc3QnKTtcbiAgICB0aGlzLnR5cGUgPSAnY3JlZGVudGlhbHJlcXVlc3QnO1xuICAgIHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyID0gY3JlZGVudGlhbEhhbmRsZXI7XG4gICAgdGhpcy5jcmVkZW50aWFsUmVxdWVzdE9yaWdpbiA9IGNyZWRlbnRpYWxSZXF1ZXN0T3JpZ2luO1xuICAgIHRoaXMuY3JlZGVudGlhbFJlcXVlc3RPcHRpb25zID0gY3JlZGVudGlhbFJlcXVlc3RPcHRpb25zO1xuICAgIHRoaXMuaGludEtleSA9IGhpbnRLZXk7XG4gIH1cblxuICBhc3luYyBvcGVuV2luZG93KHVybCkge1xuICAgIC8vIFRPRE86IGRpc2FsbG93IG1vcmUgdGhhbiBvbmUgY2FsbFxuXG4gICAgLy8gVE9ETzogZW5zdXJlIGB1cmxgIGlzIHRvIHRoZSBzYW1lIG9yaWdpblxuICAgIGF3YWl0IHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyLnNob3coKTtcbiAgICBjb25zdCBhcHBXaW5kb3cgPSBuZXcgcnBjLldlYkFwcFdpbmRvdyh1cmwsIHtcbiAgICAgIGNsYXNzTmFtZTogJ2NyZWRlbnRpYWwtaGFuZGxlcidcbiAgICB9KTtcbiAgICBhcHBXaW5kb3cucmVhZHkoKTtcbiAgICBhcHBXaW5kb3cuc2hvdygpO1xuICAgIC8vIFRPRE86IG5vdGUgdGhhdCBgYXBwV2luZG93LmhhbmRsZWAgaXMgbm90IGEgU2VydmljZVdvcmtlclxuICAgIC8vICAgYFdpbmRvd0NsaWVudGAgcG9seWZpbGwuLi4gY291bGQgYmUgY29uZnVzaW5nIGhlcmUsIHNob3VsZCB3ZVxuICAgIC8vICAgaW1wbGVtZW50IG9uZSB0byB3cmFwIGl0PyAtLSB0aGVyZSBpcywgZm9yIGV4YW1wbGUsIGFcbiAgICAvLyAgIGBuYXZpZ2F0ZWAgY2FsbCBvbiBgV2luZG93Q2xpZW50YCB0aGF0IGVuZm9yY2VzIHNhbWUgb3JpZ2luLCB3b3VsZFxuICAgIC8vICAgbmVlZCB0byBhdHRlbXB0IHRvIGFkZCBvciBhcHByb3hpbWF0ZSB0aGF0XG4gICAgcmV0dXJuIGFwcFdpbmRvdy5oYW5kbGU7XG4gIH1cblxuICByZXNwb25kV2l0aChoYW5kbGVyUmVzcG9uc2UpIHtcbiAgICAvLyBUT0RPOiB0aHJvdyBleGNlcHRpb24gaWYgYF9wcm9taXNlYCBpcyBhbHJlYWR5IHNldFxuXG4gICAgLy8gVE9ETzogdmFsaWRhdGUgaGFuZGxlclJlc3BvbnNlXG4gICAgdGhpcy5fcHJvbWlzZSA9IGhhbmRsZXJSZXNwb25zZTtcbiAgfVxufVxuIiwiLyohXG4gKiBBIENyZWRlbnRpYWxTdG9yZUV2ZW50IGlzIGVtaXR0ZWQgd2hlbiBhIHJlcXVlc3QgaGFzIGJlZW4gbWFkZSB0b1xuICogc3RvcmUgYSBjcmVkZW50aWFsLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4vKiBnbG9iYWwgRXZlbnQgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgcnBjIGZyb20gJ3dlYi1yZXF1ZXN0LXJwYyc7XG5cbi8vIGNhbid0IHVzZSBcIkV4dGVuZGFibGVFdmVudFwiOyBvbmx5IGFjY2Vzc2libGUgZnJvbSBXb3JrZXJzXG4vLyBUT0RPOiBtYXkgbm90IGJlIGFibGUgdG8gZXZlbiBleHRlbmQgYEV2ZW50YCBoZXJlOyBjb3VsZCBwcm9kdWNlIFwiaW5jb3JyZWN0XCJcbi8vICAgY29yZSBhdHRyaWJ1dGVzXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbFN0b3JlRXZlbnQgLypleHRlbmRzIEV2ZW50Ki8ge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY3JlZGVudGlhbEhhbmRsZXIsXG4gICAgY3JlZGVudGlhbFJlcXVlc3RPcmlnaW4sXG4gICAgY3JlZGVudGlhbCxcbiAgICBoaW50S2V5XG4gIH0pIHtcbiAgICAvL3N1cGVyKCdjcmVkZW50aWFsc3RvcmUnKTtcbiAgICB0aGlzLnR5cGUgPSAnY3JlZGVudGlhbHN0b3JlJztcbiAgICB0aGlzLl9jcmVkZW50aWFsSGFuZGxlciA9IGNyZWRlbnRpYWxIYW5kbGVyO1xuICAgIHRoaXMuY3JlZGVudGlhbFJlcXVlc3RPcmlnaW4gPSBjcmVkZW50aWFsUmVxdWVzdE9yaWdpbjtcbiAgICB0aGlzLmNyZWRlbnRpYWwgPSBjcmVkZW50aWFsO1xuICAgIHRoaXMuaGludEtleSA9IGhpbnRLZXk7XG4gIH1cblxuICBhc3luYyBvcGVuV2luZG93KHVybCkge1xuICAgIC8vIFRPRE86IGRpc2FsbG93IG1vcmUgdGhhbiBvbmUgY2FsbFxuXG4gICAgLy8gVE9ETzogZW5zdXJlIGB1cmxgIGlzIHRvIHRoZSBzYW1lIG9yaWdpblxuICAgIGF3YWl0IHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyLnNob3coKTtcbiAgICBjb25zdCBhcHBXaW5kb3cgPSBuZXcgcnBjLldlYkFwcFdpbmRvdyh1cmwpO1xuICAgIGFwcFdpbmRvdy5yZWFkeSgpO1xuICAgIGFwcFdpbmRvdy5zaG93KCk7XG4gICAgLy8gVE9ETzogbm90ZSB0aGF0IGBhcHBXaW5kb3cuaGFuZGxlYCBpcyBub3QgYSBTZXJ2aWNlV29ya2VyXG4gICAgLy8gICBgV2luZG93Q2xpZW50YCBwb2x5ZmlsbC4uLiBjb3VsZCBiZSBjb25mdXNpbmcgaGVyZSwgc2hvdWxkIHdlXG4gICAgLy8gICBpbXBsZW1lbnQgb25lIHRvIHdyYXAgaXQ/IC0tIHRoZXJlIGlzLCBmb3IgZXhhbXBsZSwgYVxuICAgIC8vICAgYG5hdmlnYXRlYCBjYWxsIG9uIGBXaW5kb3dDbGllbnRgIHRoYXQgZW5mb3JjZXMgc2FtZSBvcmlnaW4sIHdvdWxkXG4gICAgLy8gICBuZWVkIHRvIGF0dGVtcHQgdG8gYWRkIG9yIGFwcHJveGltYXRlIHRoYXRcbiAgICByZXR1cm4gYXBwV2luZG93LmhhbmRsZTtcbiAgfVxuXG4gIHJlc3BvbmRXaXRoKGhhbmRsZXJSZXNwb25zZSkge1xuICAgIC8vIFRPRE86IHRocm93IGV4Y2VwdGlvbiBpZiBgX3Byb21pc2VgIGlzIGFscmVhZHkgc2V0XG5cbiAgICAvLyBUT0RPOiB2YWxpZGF0ZSBoYW5kbGVyUmVzcG9uc2VcbiAgICB0aGlzLl9wcm9taXNlID0gaGFuZGxlclJlc3BvbnNlO1xuICB9XG59XG4iLCIvKiFcbiAqIEEgQ3JlZGVudGlhbEhhbmRsZXJTZXJ2aWNlIGhhbmRsZXMgcmVtb3RlIGNhbGxzIHRvIGEgQ3JlZGVudGlhbEhhbmRsZXIuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtDcmVkZW50aWFsUmVxdWVzdEV2ZW50fSBmcm9tICcuL0NyZWRlbnRpYWxSZXF1ZXN0RXZlbnQuanMnO1xuaW1wb3J0IHtDcmVkZW50aWFsU3RvcmVFdmVudH0gZnJvbSAnLi9DcmVkZW50aWFsU3RvcmVFdmVudC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsSGFuZGxlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFsSGFuZGxlcikge1xuICAgIHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyID0gY3JlZGVudGlhbEhhbmRsZXI7XG4gIH1cblxuICBhc3luYyByZXF1ZXN0KGNyZWRlbnRpYWxSZXF1ZXN0RXZlbnQpIHtcbiAgICAvLyBUT0RPOiB2YWxpZGF0ZSBjcmVkZW50aWFsUmVxdWVzdEV2ZW50XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyLl9lbWl0dGVyLmVtaXQoXG4gICAgICBuZXcgQ3JlZGVudGlhbFJlcXVlc3RFdmVudChPYmplY3QuYXNzaWduKFxuICAgICAgICB7Y3JlZGVudGlhbEhhbmRsZXI6IHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyfSwgY3JlZGVudGlhbFJlcXVlc3RFdmVudCkpKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3JlKGNyZWRlbnRpYWxTdG9yZUV2ZW50KSB7XG4gICAgLy8gVE9ETzogdmFsaWRhdGUgY3JlZGVudGlhbFN0b3JlRXZlbnRcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fY3JlZGVudGlhbEhhbmRsZXIuX2VtaXR0ZXIuZW1pdChcbiAgICAgIG5ldyBDcmVkZW50aWFsU3RvcmVFdmVudChPYmplY3QuYXNzaWduKFxuICAgICAgICB7Y3JlZGVudGlhbEhhbmRsZXI6IHRoaXMuX2NyZWRlbnRpYWxIYW5kbGVyfSwgY3JlZGVudGlhbFN0b3JlRXZlbnQpKSk7XG4gIH1cbn1cbiIsIi8qIVxuICogVGhlIGNvcmUgQ3JlZGVudGlhbEhhbmRsZXIgY2xhc3MuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbi8qIGdsb2JhbCBET01FeGNlcHRpb24gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgcnBjIGZyb20gJ3dlYi1yZXF1ZXN0LXJwYyc7XG5cbmltcG9ydCB7Q3JlZGVudGlhbEhhbmRsZXJTZXJ2aWNlfSBmcm9tICcuL0NyZWRlbnRpYWxIYW5kbGVyU2VydmljZS5qcyc7XG5cbmNvbnN0IEVWRU5UX1RZUEVTID0gWydjcmVkZW50aWFscmVxdWVzdCcsICdjcmVkZW50aWFsc3RvcmUnXTtcblxuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxIYW5kbGVyIGV4dGVuZHMgcnBjLldlYkFwcCB7XG4gIGNvbnN0cnVjdG9yKG1lZGlhdG9yT3JpZ2luKSB7XG4gICAgaWYodHlwZW9mIG1lZGlhdG9yT3JpZ2luICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJtZWRpYXRvck9yaWdpblwiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgfVxuICAgIHN1cGVyKG1lZGlhdG9yT3JpZ2luKTtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IHJwYy5FdmVudEVtaXR0ZXIoe1xuICAgICAgYXN5bmMgd2FpdFVudGlsKGV2ZW50KSB7XG4gICAgICAgIC8vIFRPRE86IG1heSBuZWVkIHRvIGRvIGB0aGlzLmhpZGUoKWAgYWZ0ZXIgdGhpcyBwcm9taXNlIHJlc29sdmVzXG4gICAgICAgIC8vICAgdG8gaGFuZGxlIGNhc2Ugd2hlcmUgZS5vcGVuV2luZG93KCkgd2FzIGNhbGxlZFxuICAgICAgICByZXR1cm4gZXZlbnQuX3Byb21pc2UgfHwgUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAgICdObyBcImNyZWRlbnRpYWxyZXF1ZXN0XCIgZXZlbnQgaGFuZGxlciBmb3VuZC4nLCAnTm90Rm91bmRFcnJvcicpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3QoKSB7XG4gICAgY29uc3QgaW5qZWN0b3IgPSBhd2FpdCBzdXBlci5jb25uZWN0KCk7XG5cbiAgICAvLyBkZWZpbmUgQVBJIHRoYXQgQ3JlZGVudGlhbE1lZGlhdG9yIGNhbiBjYWxsIG9uIHRoaXMgY3JlZGVudGlhbCBoYW5kbGVyXG4gICAgdGhpcy5zZXJ2ZXIuZGVmaW5lKCdjcmVkZW50aWFsSGFuZGxlcicsIG5ldyBDcmVkZW50aWFsSGFuZGxlclNlcnZpY2UodGhpcykpO1xuXG4gICAgLy8gYXV0by1jYWxsIGByZWFkeWBcbiAgICBhd2FpdCB0aGlzLnJlYWR5KCk7XG5cbiAgICByZXR1cm4gaW5qZWN0b3I7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZm4pIHtcbiAgICBpZighRVZFTlRfVFlQRVMuaW5jbHVkZXMoZXZlbnRUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgYFVuc3VwcG9ydGVkIGV2ZW50IHR5cGUgXCIke2V2ZW50VHlwZX1cImAsICdOb3RTdXBwb3J0ZWRFcnJvcicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZm4pO1xuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGZuKSB7XG4gICAgaWYoIUVWRU5UX1RZUEVTLmluY2x1ZGVzKGV2ZW50VHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgIGBVbnN1cHBvcnRlZCBldmVudCB0eXBlIFwiJHtldmVudFR5cGV9XCJgLCAnTm90U3VwcG9ydGVkRXJyb3InKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2VtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGZuKTtcbiAgfVxufVxuIiwiLyohXG4gKiBBIFdlYkFwcCBpcyBhIHJlbW90ZSBhcHBsaWNhdGlvbiB0aGF0IHJ1bnMgaW4gYSBXZWJBcHBDb250ZXh0LlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Q2xpZW50fSBmcm9tICcuL0NsaWVudC5qcyc7XG5pbXBvcnQge1NlcnZlcn0gZnJvbSAnLi9TZXJ2ZXIuanMnO1xuaW1wb3J0IHtwYXJzZVVybH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBXZWJBcHAge1xuICBjb25zdHJ1Y3RvcihyZWx5aW5nT3JpZ2luKSB7XG4gICAgLy8gdGhpcyBpcyB0aGUgb3JpZ2luIHRoYXQgY3JlYXRlZCB0aGUgV2ViQXBwQ29udGV4dCB0byBydW4gaXQgaW5cbiAgICAvLyBUT0RPOiBiZXR0ZXIgbmFtZT8gYGNvbnRleHRPcmlnaW5gP1xuICAgIHRoaXMucmVseWluZ09yaWdpbiA9IHBhcnNlVXJsKHJlbHlpbmdPcmlnaW4pLm9yaWdpbjtcbiAgICB0aGlzLmNsaWVudCA9IG51bGw7XG4gICAgdGhpcy5pbmplY3RvciA9IG51bGw7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KCk7XG4gICAgdGhpcy5zZXJ2ZXIgPSBuZXcgU2VydmVyKCk7XG5cbiAgICB0aGlzLl9jb250cm9sID0gbnVsbDtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25uZWN0cyB0aGlzIFdlYkFwcCB0byB0aGUgcmVseWluZyBvcmlnaW4gdGhhdCBpbnN0YW50aWF0ZWQgaXQuIE9uY2VcbiAgICogY29ubmVjdGVkLCB0aGUgV2ViQXBwIGNhbiBzdGFydCBzZXJ2aWNpbmcgY2FsbHMgZnJvbSB0aGF0IG9yaWdpbi5cbiAgICpcbiAgICogQHJldHVybiBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBpbmplY3RvciBmb3IgY3JlYXRpbmcgY3VzdG9tIGNsaWVudFxuICAgKiAgICAgICAgICAgQVBJcyBvbmNlIHRoZSBjb25uZWN0aW9uIGlzIHJlYWR5LlxuICAgKi9cbiAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICB0aGlzLmluamVjdG9yID0gYXdhaXQgdGhpcy5jbGllbnQuY29ubmVjdCh0aGlzLnJlbHlpbmdPcmlnaW4pO1xuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgdGhpcy5fY29udHJvbCA9IHRoaXMuaW5qZWN0b3IuZGVmaW5lKCdjb3JlLmNvbnRyb2wnLCB7XG4gICAgICBmdW5jdGlvbnM6IFsncmVhZHknLCAnc2hvdycsICdoaWRlJ11cbiAgICB9KTtcbiAgICB0aGlzLnNlcnZlci5saXN0ZW4odGhpcy5yZWx5aW5nT3JpZ2luKTtcbiAgICByZXR1cm4gdGhpcy5pbmplY3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdXN0IGJlIGNhbGxlZCBhZnRlciBgY29ubmVjdGAgd2hlbiB0aGlzIFdlYkFwcCBpcyByZWFkeSB0byBzdGFydFxuICAgKiByZWNlaXZpbmcgY2FsbHMgZnJvbSB0aGUgcmVtb3RlIGVuZC5cbiAgICovXG4gIGFzeW5jIHJlYWR5KCkge1xuICAgIGlmKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2ViQXBwIG5vdCBjb25uZWN0ZWQuIERpZCB5b3UgY2FsbCBcIi5jb25uZWN0KClcIj8nKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fY29udHJvbC5yZWFkeSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGlzIFdlYkFwcCdzIGNvbm5lY3Rpb24gdG8gdGhlIHJlbHlpbmcgb3JpZ2luLlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYodGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnNlcnZlci5jbG9zZSgpO1xuICAgICAgdGhpcy5jbGllbnQuY2xvc2UoKTtcbiAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyB0aGUgVUkgZm9yIHRoaXMgV2ViQXBwIG9uIHRoZSByZWx5aW5nIG9yaWdpbi5cbiAgICovXG4gIGFzeW5jIHNob3coKSB7XG4gICAgaWYoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IFwic2hvd1wiIHlldDsgbm90IGNvbm5lY3RlZC4gRGlkIHlvdSBjYWxsIFwiLmNvbm5lY3QoKVwiPycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udHJvbC5zaG93KCk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIFVJIGZvciB0aGlzIFdlYkFwcCBvbiB0aGUgcmVseWluZyBvcmlnaW4uXG4gICAqL1xuICBhc3luYyBoaWRlKCkge1xuICAgIGlmKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBcImhpZGVcIiB5ZXQ7IG5vdCBjb25uZWN0ZWQuIERpZCB5b3UgY2FsbCBcIi5jb25uZWN0KCk/XCInKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2wuaGlkZSgpO1xuICB9XG59XG4iLCIvKiFcbiAqIEFQSSBmb3IgbWFuYWdpbmcgQ3JlZGVudGlhbEhpbnRzLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4vKiBnbG9iYWwgSW1hZ2UgKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxIaW50cyB7XG4gIGNvbnN0cnVjdG9yKHVybCwgaW5qZWN0b3IpIHtcbiAgICBjb25zdCByZW1vdGUgPSBpbmplY3Rvci5nZXQoJ2NyZWRlbnRpYWxIaW50cycsIHtcbiAgICAgIGZ1bmN0aW9uczogWydkZWxldGUnLCAnZ2V0JywgJ2tleXMnLCAnaGFzJywgJ3NldCcsICdjbGVhciddXG4gICAgfSk7XG4gICAgZm9yKGxldCBtZXRob2ROYW1lIGluIHJlbW90ZSkge1xuICAgICAgaWYobWV0aG9kTmFtZSAhPT0gJ3NldCcpIHtcbiAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHJlbW90ZVttZXRob2ROYW1lXS5iaW5kKHRoaXMsIHVybCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3JlbW90ZVNldCA9IHJlbW90ZS5zZXQuYmluZCh0aGlzLCB1cmwpO1xuICB9XG5cbiAgYXN5bmMgc2V0KGhpbnRLZXksIGNyZWRlbnRpYWxIaW50KSB7XG4gICAgLy8gVE9ETzogdmFsaWRhdGUgY3JlZGVudGlhbCBoaW50XG5cbiAgICAvLyBlbnN1cmUgaW1hZ2VzIGFyZSBwcmVmZXRjaGVkIHNvIHRoYXQgdGhleSB3aWxsIG5vdCBsZWFrIGluZm9ybWF0aW9uXG4gICAgLy8gd2hlbiBmZXRjaGVkIGxhdGVyXG4gICAgY3JlZGVudGlhbEhpbnQuaWNvbnMgPSBjcmVkZW50aWFsSGludC5pY29ucyB8fCBbXTtcbiAgICBjb25zdCBwcm9taXNlcyA9IGNyZWRlbnRpYWxIaW50Lmljb25zLm1hcChpY29uID0+XG4gICAgICBpbWFnZVRvRGF0YVVybChpY29uLnNyYykudGhlbihmZXRjaGVkSW1hZ2UgPT4ge1xuICAgICAgICBpY29uLmZldGNoZWRJbWFnZSA9IGZldGNoZWRJbWFnZTtcbiAgICAgIH0pKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgcmV0dXJuIHRoaXMuX3JlbW90ZVNldChoaW50S2V5LCBjcmVkZW50aWFsSGludCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW1hZ2VUb0RhdGFVcmwodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnQW5vbnltb3VzJztcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwKTtcbiAgICAgIGNvbnN0IGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICByZXNvbHZlKGRhdGFVcmwpO1xuICAgICAgY2FudmFzID0gbnVsbDtcbiAgICB9O1xuICAgIC8vIFRPRE86IGByZWplY3RgIGFzIGFuIGVycm9yIGFuZCBmYWlsIGAuc2V0YD9cbiAgICBpbWcub25lcnJvciA9ICgpID0+IHJlc29sdmUobnVsbCk7XG4gICAgaW1nLnNyYyA9IHVybDtcbiAgfSk7XG59XG4iLCIvKiFcbiAqIEEgQ3JlZGVudGlhbE1hbmFnZXIgZm9yIGEgV2ViIENyZWRlbnRpYWwgTWVkaWF0b3IuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuLyogZ2xvYmFsIG5hdmlnYXRvciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge0NyZWRlbnRpYWxIaW50c30gZnJvbSAnLi9DcmVkZW50aWFsSGludHMuanMnO1xuXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbE1hbmFnZXIge1xuICBjb25zdHJ1Y3Rvcih1cmwsIGluamVjdG9yKSB7XG4gICAgaWYoISh1cmwgJiYgdHlwZW9mIHVybCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInVybFwiIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLicpO1xuICAgIH1cbiAgICB0aGlzLmhpbnRzID0gbmV3IENyZWRlbnRpYWxIaW50cyh1cmwsIGluamVjdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyB0aGF0IHRoZSB1c2VyIGdyYW50ICdjcmVkZW50aWFsaGFuZGxlcicgcGVybWlzc2lvbiB0byB0aGUgY3VycmVudFxuICAgKiBvcmlnaW4uXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIG5ldyBQZXJtaXNzaW9uU3RhdGUgb2YgdGhlXG4gICAqICAgICAgICAgICBwZXJtaXNzaW9uIChlLmcuICdncmFudGVkJy8nZGVuaWVkJykuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgcmVxdWVzdFBlcm1pc3Npb24oKSB7XG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzUG9seWZpbGwucGVybWlzc2lvbnMucmVxdWVzdChcbiAgICAgIHtuYW1lOiAnY3JlZGVudGlhbGhhbmRsZXInfSk7XG4gICAgcmV0dXJuIHN0YXR1cy5zdGF0ZTtcbiAgfVxufVxuIiwiLyohXG4gKiBBIENyZWRlbnRpYWxIYW5kbGVyUmVnaXN0cmF0aW9uIHByb3ZpZGVzIGEgQ3JlZGVudGlhbE1hbmFnZXIgdG8gZW5hYmxlIFdlYlxuICogYXBwcyB0byByZWdpc3RlciBQcm9maWxlcyB0aGF0IGNhbiBiZSBwcmVzZW50ZWQgdG8gd2Vic2l0ZXMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtDcmVkZW50aWFsTWFuYWdlcn0gZnJvbSAnLi9DcmVkZW50aWFsTWFuYWdlci5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsSGFuZGxlclJlZ2lzdHJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHVybCwgaW5qZWN0b3IpIHtcbiAgICBpZighKHVybCAmJiB0eXBlb2YgdXJsID09PSAnc3RyaW5nJykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widXJsXCIgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcuJyk7XG4gICAgfVxuICAgIHRoaXMuY3JlZGVudGlhbE1hbmFnZXIgPSBuZXcgQ3JlZGVudGlhbE1hbmFnZXIodXJsLCBpbmplY3Rvcik7XG4gIH1cbn1cbiIsIi8qIVxuICogUHJvdmlkZXMgYW4gQVBJIGZvciB3b3JraW5nIHdpdGggQ3JlZGVudGlhbEhhbmRsZXJSZWdpc3RyYXRpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtDcmVkZW50aWFsSGFuZGxlclJlZ2lzdHJhdGlvbn1cbiAgZnJvbSAnLi9DcmVkZW50aWFsSGFuZGxlclJlZ2lzdHJhdGlvbi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsSGFuZGxlcnMge1xuICBjb25zdHJ1Y3RvcihpbmplY3Rvcikge1xuICAgIHRoaXMuX2luaXQgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5faW5qZWN0b3IgPSBhd2FpdCBpbmplY3RvcjtcbiAgICAgIHRoaXMuX3JlbW90ZSA9IHRoaXMuX2luamVjdG9yLmdldCgnY3JlZGVudGlhbEhhbmRsZXJzJywge1xuICAgICAgICBmdW5jdGlvbnM6IFtcbiAgICAgICAgICAncmVnaXN0ZXInLCAndW5yZWdpc3RlcicsICdnZXRSZWdpc3RyYXRpb24nLCAnaGFzUmVnaXN0cmF0aW9uJ11cbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgaGFuZGxlciByZWdpc3RyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB1cmwgdGhlIHVuaXF1ZSBVUkwgZm9yIHRoZSBjcmVkZW50aWFsIGhhbmRsZXIuXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIENyZWRlbnRpYWxIYW5kbGVyUmVnaXN0cmF0aW9uLlxuICAgKi9cbiAgYXN5bmMgcmVnaXN0ZXIodXJsKSB7XG4gICAgYXdhaXQgdGhpcy5faW5pdDtcbiAgICAvLyByZWdpc3RlciB3aXRoIGNyZWRlbnRpYWwgbWVkaWF0b3JcbiAgICB1cmwgPSBhd2FpdCB0aGlzLl9yZW1vdGUucmVnaXN0ZXIoJ2NyZWRlbnRpYWwnLCB1cmwpO1xuICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbEhhbmRsZXJSZWdpc3RyYXRpb24odXJsLCB0aGlzLl9pbmplY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYSBjcmVkZW50aWFsIGhhbmRsZXIsIGRlc3Ryb3lpbmcgaXRzIHJlZ2lzdHJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVybCB0aGUgdW5pcXVlIFVSTCBmb3IgdGhlIGNyZWRlbnRpYWwgaGFuZGxlci5cbiAgICpcbiAgICogQHJldHVybiBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBgdHJ1ZWAgaWYgdGhlIGhhbmRsZXIgd2FzIHJlZ2lzdGVyZWRcbiAgICogICAgICAgICAgIGFuZCBgZmFsc2VgIGlmIG5vdC5cbiAgICovXG4gIGFzeW5jIHVucmVnaXN0ZXIodXJsKSB7XG4gICAgYXdhaXQgdGhpcy5faW5pdDtcbiAgICAvLyB1bnJlZ2lzdGVyIHdpdGggY3JlZGVudGlhbCBtZWRpYXRvclxuICAgIHJldHVybiB0aGlzLl9yZW1vdGUudW5yZWdpc3RlcignY3JlZGVudGlhbCcsIHVybCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBleGlzdGluZyBjcmVkZW50aWFsIGhhbmRsZXIgcmVnaXN0cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIHRoZSBVUkwgZm9yIHRoZSBjcmVkZW50aWFsIGhhbmRsZXIuXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIENyZWRlbnRpYWxIYW5kbGVyUmVnaXN0cmF0aW9uIG9yXG4gICAqICAgICAgICAgICBgbnVsbGAgaWYgbm8gc3VjaCByZWdpc3RyYXRpb24gZXhpc3RzLlxuICAgKi9cbiAgYXN5bmMgZ2V0UmVnaXN0cmF0aW9uKHVybCkge1xuICAgIGF3YWl0IHRoaXMuX2luaXQ7XG4gICAgdXJsID0gYXdhaXQgdGhpcy5fcmVtb3RlLmdldFJlZ2lzdHJhdGlvbignY3JlZGVudGlhbCcsIHVybCk7XG4gICAgaWYoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbEhhbmRsZXJSZWdpc3RyYXRpb24odXJsLCB0aGlzLl9pbmplY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBjcmVkZW50aWFsIGhhbmRsZXIgaGFzIGJlZW4gcmVnaXN0ZXJlZCBhbmRcbiAgICogZmFsc2UgaWYgbm90LlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIHRoZSBVUkwgZm9yIHRoZSBjcmVkZW50aWFsIGhhbmRsZXIuXG4gICAqXG4gICAqIEByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYHRydWVgIGlmIHRoZSByZWdpc3RyYXRpb24gZXhpc3RzIGFuZFxuICAgKiAgICAgICAgICAgYGZhbHNlYCBpZiBub3QuXG4gICAqL1xuICBhc3luYyBoYXNSZWdpc3RyYXRpb24odXJsKSB7XG4gICAgYXdhaXQgdGhpcy5faW5pdDtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVtb3RlLmhhc1JlZ2lzdHJhdGlvbignY3JlZGVudGlhbCcsIHVybCk7XG4gIH1cbn1cbiIsIi8qIVxuICogQSBXZWJDcmVkZW50aWFsIGlzIGEgQ3JlZGVudGlhbCB0aGF0IGNhbiBiZSByZXRyaWV2ZWQgZnJvbSBvciBzdG9yZWQgYnkgYVxuICogXCJjcmVkZW50aWFsIGhhbmRsZXJcIiB0aGF0IHJ1bnMgaW4gYSB0aGlyZCBwYXJ0eSBXZWIgYXBwbGljYXRpb24uXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYkNyZWRlbnRpYWwge1xuICBjb25zdHJ1Y3RvcihkYXRhVHlwZSwgZGF0YSwge3JlY29tbWVuZGVkSGFuZGxlck9yaWdpbnMgPSBbXX0gPSB7fSkge1xuICAgIGlmKHR5cGVvZiBkYXRhVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZGF0YVR5cGVcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbiAgICB0aGlzLnR5cGUgPSAnd2ViJztcbiAgICB0aGlzLmRhdGFUeXBlID0gZGF0YVR5cGU7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7cmVjb21tZW5kZWRIYW5kbGVyT3JpZ2luc307XG4gIH1cbn1cbiIsIi8qIVxuICogV3JhcHBlciBmb3IgbmF0aXZlIENyZWRlbnRpYWxzQ29udGFpbmVyIHRoYXQgdXNlcyByZW1vdGUgQ3JlZGVudGlhbCBNZWRpYXRvclxuICogZm9yIFdlYkNyZWRlbnRpYWwtcmVsYXRlZCBvcGVyYXRpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbi8qIGdsb2JhbCBuYXZpZ2F0b3IsIERPTUV4Y2VwdGlvbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1dlYkNyZWRlbnRpYWx9IGZyb20gJy4vV2ViQ3JlZGVudGlhbC5qcyc7XG5cbi8vIFJQQyB0aW1lb3V0cywgMCA9IGluZGVmaW5pdGVcbmNvbnN0IENSRURFTlRJQUxfR0VUX1RJTUVPVVQgPSAwO1xuY29uc3QgQ1JFREVOVElBTF9TVE9SRV9USU1FT1VUID0gMDtcblxuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxzQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoaW5qZWN0b3IpIHtcbiAgICB0aGlzLl9uYXRpdmVDcmVkZW50aWFsc0NvbnRhaW5lciA9IHtcbiAgICAgIGdldDogbmF2aWdhdG9yLmNyZWRlbnRpYWxzICYmIG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQgJiZcbiAgICAgICAgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldC5iaW5kKG5hdmlnYXRvci5jcmVkZW50aWFscyksXG4gICAgICBzdG9yZTogbmF2aWdhdG9yLmNyZWRlbnRpYWxzICYmIG5hdmlnYXRvci5jcmVkZW50aWFscy5zdG9yZSAmJlxuICAgICAgICBuYXZpZ2F0b3IuY3JlZGVudGlhbHMuc3RvcmUuYmluZChuYXZpZ2F0b3IuY3JlZGVudGlhbHMpLFxuICAgIH07XG5cbiAgICB0aGlzLl9pbml0ID0gKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuX3JlbW90ZSA9IChhd2FpdCBpbmplY3RvcikuZ2V0KCdjcmVkZW50aWFsc0NvbnRhaW5lcicsIHtcbiAgICAgICAgZnVuY3Rpb25zOiBbXG4gICAgICAgICAge25hbWU6ICdnZXQnLCBvcHRpb25zOiB7dGltZW91dDogQ1JFREVOVElBTF9HRVRfVElNRU9VVH19LFxuICAgICAgICAgIHtuYW1lOiAnc3RvcmUnLCBvcHRpb25zOiB7dGltZW91dDogQ1JFREVOVElBTF9TVE9SRV9USU1FT1VUfX1cbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIGFzeW5jIGdldCgvKkNyZWRlbnRpYWxSZXF1ZXN0T3B0aW9ucyovIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmKG9wdGlvbnMud2ViKSB7XG4gICAgICBhd2FpdCB0aGlzLl9pbml0O1xuICAgICAgY29uc3QgY3JlZGVudGlhbCA9IGF3YWl0IHRoaXMuX3JlbW90ZS5nZXQob3B0aW9ucyk7XG4gICAgICBpZighY3JlZGVudGlhbCkge1xuICAgICAgICAvLyBubyBjcmVkZW50aWFsIHNlbGVjdGVkXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogdmFsaWRhdGUgY3JlZGVudGlhbFxuICAgICAgcmV0dXJuIG5ldyBXZWJDcmVkZW50aWFsKGNyZWRlbnRpYWwuZGF0YVR5cGUsIGNyZWRlbnRpYWwuZGF0YSk7XG4gICAgfVxuICAgIGlmKHRoaXMuX25hdGl2ZUNyZWRlbnRpYWxzQ29udGFpbmVyLmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hdGl2ZUNyZWRlbnRpYWxzQ29udGFpbmVyLmdldChvcHRpb25zKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignTm90IGltcGxlbWVudGVkLicsICdOb3RTdXBwb3J0ZWRFcnJvcicpO1xuICB9XG5cbiAgYXN5bmMgc3RvcmUoY3JlZGVudGlhbCkge1xuICAgIGlmKGNyZWRlbnRpYWwgaW5zdGFuY2VvZiBXZWJDcmVkZW50aWFsKSB7XG4gICAgICBhd2FpdCB0aGlzLl9pbml0O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcmVtb3RlLnN0b3JlKGNyZWRlbnRpYWwpO1xuICAgICAgaWYoIXJlc3VsdCkge1xuICAgICAgICAvLyBub3RoaW5nIHN0b3JlZFxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IHZhbGlkYXRlIHJlc3VsdFxuICAgICAgcmV0dXJuIG5ldyBXZWJDcmVkZW50aWFsKHJlc3VsdC5kYXRhVHlwZSwgcmVzdWx0LmRhdGEpO1xuICAgIH1cbiAgICBpZih0aGlzLl9uYXRpdmVDcmVkZW50aWFsc0NvbnRhaW5lci5zdG9yZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hdGl2ZUNyZWRlbnRpYWxzQ29udGFpbmVyLnN0b3JlKGNyZWRlbnRpYWwpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdOb3QgaW1wbGVtZW50ZWQuJywgJ05vdFN1cHBvcnRlZEVycm9yJyk7XG4gIH1cbn1cbiIsIi8qIVxuICogUHJvdmlkZXMgYW4gQVBJIGZvciB3b3JraW5nIHdpdGggcGVybWlzc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBSUEMgdGltZW91dHMsIDAgPSBpbmRlZmluaXRlXG5jb25zdCBQRVJNSVNTSU9OX1JFUVVFU1RfVElNRU9VVCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGluamVjdG9yKSB7XG4gICAgdGhpcy5faW5pdCA9IChhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLl9yZW1vdGUgPSAoYXdhaXQgaW5qZWN0b3IpLmdldCgncGVybWlzc2lvbk1hbmFnZXInLCB7XG4gICAgICAgIGZ1bmN0aW9uczogW1xuICAgICAgICAgICdxdWVyeScsXG4gICAgICAgICAge25hbWU6ICdyZXF1ZXN0Jywgb3B0aW9uczoge3RpbWVvdXQ6IFBFUk1JU1NJT05fUkVRVUVTVF9USU1FT1VUfX0sXG4gICAgICAgICAgJ3Jldm9rZSddXG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgYXN5bmMgcXVlcnkocGVybWlzc2lvbkRlc2MpIHtcbiAgICBhd2FpdCB0aGlzLl9pbml0O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZW1vdGUucXVlcnkocGVybWlzc2lvbkRlc2MpO1xuICB9XG5cbiAgYXN5bmMgcmVxdWVzdChwZXJtaXNzaW9uRGVzYykge1xuICAgIGF3YWl0IHRoaXMuX2luaXQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlbW90ZS5yZXF1ZXN0KHBlcm1pc3Npb25EZXNjKTtcbiAgfVxuXG4gIGFzeW5jIHJldm9rZShwZXJtaXNzaW9uRGVzYykge1xuICAgIGF3YWl0IHRoaXMuX2luaXQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlbW90ZS5yZXZva2UocGVybWlzc2lvbkRlc2MpO1xuICB9XG59XG4iLCIvKiFcbiAqIENyZWRlbnRpYWwgSGFuZGxlciBBUEkgUG9seWZpbGwuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuLyogZ2xvYmFsIG5hdmlnYXRvciwgd2luZG93ICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHJwYyBmcm9tICd3ZWItcmVxdWVzdC1ycGMnO1xuXG5pbXBvcnQge0NyZWRlbnRpYWxIYW5kbGVyfSBmcm9tICcuL0NyZWRlbnRpYWxIYW5kbGVyLmpzJztcbmltcG9ydCB7Q3JlZGVudGlhbEhhbmRsZXJzfSBmcm9tICcuL0NyZWRlbnRpYWxIYW5kbGVycy5qcyc7XG5pbXBvcnQge0NyZWRlbnRpYWxNYW5hZ2VyfSBmcm9tICcuL0NyZWRlbnRpYWxNYW5hZ2VyLmpzJztcbmltcG9ydCB7Q3JlZGVudGlhbHNDb250YWluZXJ9IGZyb20gJy4vQ3JlZGVudGlhbHNDb250YWluZXIuanMnO1xuaW1wb3J0IHtQZXJtaXNzaW9uTWFuYWdlcn0gZnJvbSAnLi9QZXJtaXNzaW9uTWFuYWdlci5qcyc7XG5pbXBvcnQge1dlYkNyZWRlbnRpYWx9IGZyb20gJy4vV2ViQ3JlZGVudGlhbC5qcyc7XG5cbmNvbnN0IERFRkFVTFRfTUVESUFUT1IgPSAnaHR0cHM6Ly9hdXRobi5pby9tZWRpYXRvcicgKyAnP29yaWdpbj0nICtcbiAgZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO1xuXG4vLyBleHBvcnQgY2xhc3NlcyBmb3IgdGVzdGluZy9UeXBlU2NyaXB0XG5leHBvcnQge1xuICBDcmVkZW50aWFsSGFuZGxlcixcbiAgQ3JlZGVudGlhbE1hbmFnZXIsXG4gIFdlYkNyZWRlbnRpYWxcbn07XG5cbmxldCBsb2FkZWQ7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZE9uY2UobWVkaWF0b3JVcmwgPSBERUZBVUxUX01FRElBVE9SKSB7XG4gIGlmKGxvYWRlZCkge1xuICAgIHJldHVybiBsb2FkZWQ7XG4gIH1cblxuICBsb2FkZWQgPSB0cnVlO1xuICByZXR1cm4gbG9hZChtZWRpYXRvclVybCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkKG1lZGlhdG9yVXJsID0gREVGQVVMVF9NRURJQVRPUikge1xuICBjb25zdCBhcHBDb250ZXh0ID0gbmV3IHJwYy5XZWJBcHBDb250ZXh0KCk7XG4gIGNvbnN0IGluamVjdG9yID0gYXBwQ29udGV4dC5jcmVhdGVXaW5kb3cobWVkaWF0b3JVcmwsIHtcbiAgICBjbGFzc05hbWU6ICdjcmVkZW50aWFsLW1lZGlhdG9yJyxcbiAgICAvLyAzMCBzZWNvbmQgdGltZW91dCBmb3IgbG9hZGluZyB0aGUgbWVkaWF0b3JcbiAgICB0aW1lb3V0OiAzMDAwMFxuICB9KTtcbiAgLy8gZW5zdXJlIGJhY2tkcm9wIGlzIHRyYW5zcGFyZW50IGJ5IGRlZmF1bHRcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcbiAgICBgZGlhbG9nLndlYi1hcHAtd2luZG93LmNyZWRlbnRpYWwtbWVkaWF0b3IgPiAud2ViLWFwcC13aW5kb3ctYmFja2Ryb3Age1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcbiAgICB9YCkpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0eWxlKTtcblxuICBjb25zdCBwb2x5ZmlsbCA9IHt9O1xuXG4gIC8vIFRPRE86IG9ubHkgZXhwb3NlIGNlcnRhaW4gQVBJcyB3aGVuIGFwcHJvcHJpYXRlXG4gIHBvbHlmaWxsLnBlcm1pc3Npb25zID0gbmV3IFBlcm1pc3Npb25NYW5hZ2VyKGluamVjdG9yKTtcbiAgcG9seWZpbGwuQ3JlZGVudGlhbEhhbmRsZXJzID0gbmV3IENyZWRlbnRpYWxIYW5kbGVycyhpbmplY3Rvcik7XG4gIHBvbHlmaWxsLkNyZWRlbnRpYWxIYW5kbGVyID0gQ3JlZGVudGlhbEhhbmRsZXI7XG4gIHBvbHlmaWxsLkNyZWRlbnRpYWxNYW5hZ2VyID0gQ3JlZGVudGlhbE1hbmFnZXI7XG4gIHBvbHlmaWxsLmNyZWRlbnRpYWxzID0gbmV3IENyZWRlbnRpYWxzQ29udGFpbmVyKGluamVjdG9yKTtcbiAgcG9seWZpbGwuV2ViQ3JlZGVudGlhbCA9IFdlYkNyZWRlbnRpYWw7XG5cbiAgLy8gZXhwb3NlIHBvbHlmaWxsXG4gIG5hdmlnYXRvci5jcmVkZW50aWFsc1BvbHlmaWxsID0gcG9seWZpbGw7XG5cbiAgLy8gcG9seWZpbGxcbiAgaWYoJ2NyZWRlbnRpYWxzJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICBuYXZpZ2F0b3IuY3JlZGVudGlhbHMuZ2V0ID0gcG9seWZpbGwuY3JlZGVudGlhbHMuZ2V0LmJpbmQoXG4gICAgICBwb2x5ZmlsbC5jcmVkZW50aWFscyk7XG4gICAgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLnN0b3JlID0gcG9seWZpbGwuY3JlZGVudGlhbHMuc3RvcmUuYmluZChcbiAgICAgIHBvbHlmaWxsLmNyZWRlbnRpYWxzKTtcbiAgfSBlbHNlIHtcbiAgICBuYXZpZ2F0b3IuY3JlZGVudGlhbHMgPSBwb2x5ZmlsbC5jcmVkZW50aWFscztcbiAgfVxuICB3aW5kb3cuQ3JlZGVudGlhbE1hbmFnZXIgPSBDcmVkZW50aWFsTWFuYWdlcjtcbiAgd2luZG93LldlYkNyZWRlbnRpYWwgPSBXZWJDcmVkZW50aWFsO1xuXG4gIHJldHVybiBwb2x5ZmlsbDtcbn1cbiIsImltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuaW1wb3J0IElucHV0QWRvcm5tZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QWRvcm5tZW50J1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5J1xuaW1wb3J0IHsgQ2hlY2ssIENsb3NlLCBDcmVhdGUsIEdpdEh1YiwgU2VuZCB9IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucydcbmltcG9ydCB7IHNlbGVjdEF1dGhTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL2F1dGgvc2VsZWN0b3InXG5pbXBvcnQge1xuICBhZGRDb25uZWN0aW9uQnlFbWFpbCxcbiAgYWRkQ29ubmVjdGlvbkJ5U21zLFxuICBsb2dpblVzZXJCeU9BdXRoLFxuICBsb2dpblVzZXJCeVhSV2FsbGV0LFxuICBsb2dvdXRVc2VyLFxuICByZW1vdmVVc2VyLFxuICB1cGRhdGVVc2VyQXZhdGFySWQsXG4gIHVwZGF0ZVVzZXJuYW1lLFxuICB1cGRhdGVVc2VyU2V0dGluZ3Ncbn0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvYXV0aC9zZXJ2aWNlJ1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ0B4cmVuZ2luZS9lbmdpbmUvc3JjL25ldHdvcmtpbmcvY2xhc3Nlcy9OZXR3b3JrJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IEZhY2Vib29rSWNvbiB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnRzL0ljb25zL0ZhY2Vib29rSWNvbidcbmltcG9ydCB7IEdvb2dsZUljb24gfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vY29tcG9uZW50cy9JY29ucy9Hb29nbGVJY29uJ1xuaW1wb3J0IHsgTGlua2VkSW5JY29uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tbW9uL2NvbXBvbmVudHMvSWNvbnMvTGlua2VkSW5JY29uJ1xuaW1wb3J0IHsgVHdpdHRlckljb24gfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vY29tcG9uZW50cy9JY29ucy9Ud2l0dGVySWNvbidcbmltcG9ydCB7IGdldEF2YXRhclVSTEZyb21OZXR3b3JrLCBWaWV3cyB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBDb25maWcsIHZhbGlkYXRlRW1haWwsIHZhbGlkYXRlUGhvbmVOdW1iZXIgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9jb25maWcnXG5pbXBvcnQgKiBhcyBwb2x5ZmlsbCBmcm9tICdjcmVkZW50aWFsLWhhbmRsZXItcG9seWZpbGwnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uL1VzZXJNZW51Lm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjaGFuZ2VBY3RpdmVNZW51PzogYW55XG4gIHNldFByb2ZpbGVNZW51T3Blbj86IGFueVxuICBhdXRoU3RhdGU/OiBhbnlcbiAgdXBkYXRlVXNlcm5hbWU/OiBhbnlcbiAgdXBkYXRlVXNlckF2YXRhcklkPzogYW55XG4gIHVwZGF0ZVVzZXJTZXR0aW5ncz86IGFueVxuICBsb2dpblVzZXJCeU9BdXRoPzogYW55XG4gIGxvZ2luVXNlckJ5WFJXYWxsZXQ/OiBhbnlcbiAgYWRkQ29ubmVjdGlvbkJ5U21zPzogYW55XG4gIGFkZENvbm5lY3Rpb25CeUVtYWlsPzogYW55XG4gIGxvZ291dFVzZXI/OiBhbnlcbiAgcmVtb3ZlVXNlcj86IGFueVxuICBoaWRlTG9naW4/OiBhbnlcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBhbnkpOiBhbnkgPT4ge1xuICByZXR1cm4ge1xuICAgIGF1dGhTdGF0ZTogc2VsZWN0QXV0aFN0YXRlKHN0YXRlKVxuICB9XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4gKHtcbiAgdXBkYXRlVXNlcm5hbWU6IGJpbmRBY3Rpb25DcmVhdG9ycyh1cGRhdGVVc2VybmFtZSwgZGlzcGF0Y2gpLFxuICB1cGRhdGVVc2VyQXZhdGFySWQ6IGJpbmRBY3Rpb25DcmVhdG9ycyh1cGRhdGVVc2VyQXZhdGFySWQsIGRpc3BhdGNoKSxcbiAgdXBkYXRlVXNlclNldHRpbmdzOiBiaW5kQWN0aW9uQ3JlYXRvcnModXBkYXRlVXNlclNldHRpbmdzLCBkaXNwYXRjaCksXG4gIGxvZ2luVXNlckJ5T0F1dGg6IGJpbmRBY3Rpb25DcmVhdG9ycyhsb2dpblVzZXJCeU9BdXRoLCBkaXNwYXRjaCksXG4gIGxvZ2luVXNlckJ5WFJXYWxsZXQ6IGJpbmRBY3Rpb25DcmVhdG9ycyhsb2dpblVzZXJCeVhSV2FsbGV0LCBkaXNwYXRjaCksXG4gIGFkZENvbm5lY3Rpb25CeVNtczogYmluZEFjdGlvbkNyZWF0b3JzKGFkZENvbm5lY3Rpb25CeVNtcywgZGlzcGF0Y2gpLFxuICBhZGRDb25uZWN0aW9uQnlFbWFpbDogYmluZEFjdGlvbkNyZWF0b3JzKGFkZENvbm5lY3Rpb25CeUVtYWlsLCBkaXNwYXRjaCksXG4gIGxvZ291dFVzZXI6IGJpbmRBY3Rpb25DcmVhdG9ycyhsb2dvdXRVc2VyLCBkaXNwYXRjaCksXG4gIHJlbW92ZVVzZXI6IGJpbmRBY3Rpb25DcmVhdG9ycyhyZW1vdmVVc2VyLCBkaXNwYXRjaClcbn0pXG5cbmNvbnN0IFByb2ZpbGVNZW51ID0gKHByb3BzOiBQcm9wcyk6IGFueSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhdXRoU3RhdGUsXG4gICAgdXBkYXRlVXNlcm5hbWUsXG4gICAgYWRkQ29ubmVjdGlvbkJ5RW1haWwsXG4gICAgYWRkQ29ubmVjdGlvbkJ5U21zLFxuICAgIGxvZ2luVXNlckJ5T0F1dGgsXG4gICAgbG9naW5Vc2VyQnlYUldhbGxldCxcbiAgICBsb2dvdXRVc2VyLFxuICAgIGNoYW5nZUFjdGl2ZU1lbnUsXG4gICAgc2V0UHJvZmlsZU1lbnVPcGVuLFxuICAgIGhpZGVMb2dpblxuICB9ID0gcHJvcHNcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3Qgc2VsZlVzZXIgPSBhdXRoU3RhdGUuZ2V0KCd1c2VyJykgfHwge31cblxuICBjb25zdCBbdXNlcm5hbWUsIHNldFVzZXJuYW1lXSA9IHVzZVN0YXRlKHNlbGZVc2VyPy5uYW1lKVxuICBjb25zdCBbZW1haWxQaG9uZSwgc2V0RW1haWxQaG9uZV0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW2Vycm9yVXNlcm5hbWUsIHNldEVycm9yVXNlcm5hbWVdID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgbGV0IHR5cGUgPSAnJ1xuXG4gIGNvbnN0IGxvYWRDcmVkZW50aWFsSGFuZGxlciA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWVkaWF0b3IgPSBgJHtDb25maWcucHVibGljUnVudGltZUNvbmZpZy5tZWRpYXRvclNlcnZlcn0vbWVkaWF0b3I/b3JpZ2luPSR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICApfWBcblxuICAgICAgYXdhaXQgcG9seWZpbGwubG9hZE9uY2UobWVkaWF0b3IpXG4gICAgICBjb25zb2xlLmxvZygnUmVhZHkgdG8gd29yayB3aXRoIGNyZWRlbnRpYWxzIScpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBwb2x5ZmlsbDonLCBlKVxuICAgIH1cbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbG9hZENyZWRlbnRpYWxIYW5kbGVyKClcbiAgfSwgW10pIC8vIE9ubHkgcnVuIG9uY2VcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNlbGZVc2VyICYmIHNldFVzZXJuYW1lKHNlbGZVc2VyLm5hbWUpXG4gIH0sIFtzZWxmVXNlci5uYW1lXSlcblxuICBjb25zdCB1cGRhdGVVc2VyTmFtZSA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaGFuZGxlVXBkYXRlVXNlcm5hbWUoKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlVXNlcm5hbWVDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHNldFVzZXJuYW1lKGUudGFyZ2V0LnZhbHVlKVxuICAgIGlmICghZS50YXJnZXQudmFsdWUpIHNldEVycm9yVXNlcm5hbWUodHJ1ZSlcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZVVwZGF0ZVVzZXJuYW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSB1c2VybmFtZS50cmltKClcbiAgICBpZiAoIW5hbWUpIHJldHVyblxuICAgIGlmIChzZWxmVXNlci5uYW1lLnRyaW0oKSAhPT0gbmFtZSkge1xuICAgICAgdXBkYXRlVXNlcm5hbWUoc2VsZlVzZXIuaWQsIG5hbWUpXG4gICAgfVxuICB9XG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGUpID0+IHNldEVtYWlsUGhvbmUoZS50YXJnZXQudmFsdWUpXG5cbiAgY29uc3QgdmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgaWYgKGVtYWlsUGhvbmUgPT09ICcnKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodmFsaWRhdGVFbWFpbChlbWFpbFBob25lLnRyaW0oKSkpIHR5cGUgPSAnZW1haWwnXG4gICAgZWxzZSBpZiAodmFsaWRhdGVQaG9uZU51bWJlcihlbWFpbFBob25lLnRyaW0oKSkpIHR5cGUgPSAnc21zJ1xuICAgIGVsc2Uge1xuICAgICAgc2V0RXJyb3IodHJ1ZSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHNldEVycm9yKGZhbHNlKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoZTogYW55KTogYW55ID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoIXZhbGlkYXRlKCkpIHJldHVyblxuICAgIGlmICh0eXBlID09PSAnZW1haWwnKSBhZGRDb25uZWN0aW9uQnlFbWFpbChlbWFpbFBob25lLCBzZWxmVXNlcj8uaWQpXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ3NtcycpIGFkZENvbm5lY3Rpb25CeVNtcyhlbWFpbFBob25lLCBzZWxmVXNlcj8uaWQpXG5cbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZU9BdXRoU2VydmljZUNsaWNrID0gKGUpID0+IHtcbiAgICBsb2dpblVzZXJCeU9BdXRoKGUuY3VycmVudFRhcmdldC5pZClcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUxvZ291dCA9IGFzeW5jIChlKSA9PiB7XG4gICAgaWYgKGNoYW5nZUFjdGl2ZU1lbnUgIT0gbnVsbCkgY2hhbmdlQWN0aXZlTWVudShudWxsKVxuICAgIGVsc2UgaWYgKHNldFByb2ZpbGVNZW51T3BlbiAhPSBudWxsKSBzZXRQcm9maWxlTWVudU9wZW4oZmFsc2UpXG4gICAgYXdhaXQgbG9nb3V0VXNlcigpXG4gICAgLy8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gIH1cblxuICBjb25zdCBoYW5kbGVXYWxsZXRMb2dpbkNsaWNrID0gYXN5bmMgKGUpID0+IHtcbiAgICBjb25zdCBkb21haW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgY29uc3QgY2hhbGxlbmdlID0gJzk5NjEyYjI0LTYzZDktMTFlYS1iOTlmLTRmNjZmM2U0ZjgxYScgLy8gVE9ETzogZ2VuZXJhdGVcblxuICAgIGNvbnNvbGUubG9nKCdTZW5kaW5nIERJREF1dGggcXVlcnkuLi4nKVxuXG4gICAgY29uc3QgZGlkQXV0aFF1ZXJ5OiBhbnkgPSB7XG4gICAgICB3ZWI6IHtcbiAgICAgICAgVmVyaWZpYWJsZVByZXNlbnRhdGlvbjoge1xuICAgICAgICAgIHF1ZXJ5OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdESURBdXRoJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgY2hhbGxlbmdlLFxuICAgICAgICAgIGRvbWFpbiAvLyBlLmcuOiByZXF1ZXN0aW5ncGFydHkuZXhhbXBsZS5jb21cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVzZSBDcmVkZW50aWFsIEhhbmRsZXIgQVBJIHRvIGF1dGhlbnRpY2F0ZVxuICAgIGNvbnN0IHJlc3VsdDogYW55ID0gYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldChkaWRBdXRoUXVlcnkpXG4gICAgY29uc29sZS5sb2cocmVzdWx0KVxuXG4gICAgbG9naW5Vc2VyQnlYUldhbGxldChyZXN1bHQpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWVudVBhbmVsfT5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLnByb2ZpbGVQYW5lbH0+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLnByb2ZpbGVCbG9ja30+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hdmF0YXJCbG9ja30+XG4gICAgICAgICAgICA8aW1nIHNyYz17Z2V0QXZhdGFyVVJMRnJvbU5ldHdvcmsoTmV0d29yay5pbnN0YW5jZSwgc2VsZlVzZXI/LmlkKX0gLz5cbiAgICAgICAgICAgIHtjaGFuZ2VBY3RpdmVNZW51ICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17c3R5bGVzLmF2YXRhckJ0bn0gb25DbGljaz17KCkgPT4gY2hhbmdlQWN0aXZlTWVudShWaWV3cy5BdmF0YXIpfSBkaXNhYmxlUmlwcGxlPlxuICAgICAgICAgICAgICAgIDxDcmVhdGUgLz5cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGVyQmxvY2t9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuaW5wdXRCbG9ja30+XG4gICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICBtYXJnaW49XCJub25lXCJcbiAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCd1c2VyOnVzZXJtZW51LnByb2ZpbGUubGJsLXVzZXJuYW1lJyl9XG4gICAgICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt1c2VybmFtZSB8fCAnJ31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlVXNlcm5hbWVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB1cGRhdGVVc2VyTmFtZShlKVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMudXNlcm5hbWVJbnB1dH1cbiAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3JVc2VybmFtZX1cbiAgICAgICAgICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICBlbmRBZG9ybm1lbnQ6IChcbiAgICAgICAgICAgICAgICAgICAgPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwiZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzc05hbWU9e3N0eWxlcy5tYXRlcmlhbEljb25CbG9ja30gb25DbGljaz17dXBkYXRlVXNlck5hbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrIGNsYXNzTmFtZT17c3R5bGVzLnByaW1hcnlGb3JlZ3JvdW5kfSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEFkb3JubWVudD5cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPGgyPlxuICAgICAgICAgICAgICB7c2VsZlVzZXI/LnVzZXJSb2xlID09PSAnYWRtaW4nXG4gICAgICAgICAgICAgICAgPyB0KCd1c2VyOnVzZXJtZW51LnByb2ZpbGUueW91QXJlQW4nKVxuICAgICAgICAgICAgICAgIDogdCgndXNlcjp1c2VybWVudS5wcm9maWxlLnlvdUFyZUEnKX17JyAnfVxuICAgICAgICAgICAgICA8c3Bhbj57c2VsZlVzZXI/LnVzZXJSb2xlfTwvc3Bhbj4uXG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICB7KHNlbGZVc2VyLnVzZXJSb2xlID09PSAndXNlcicgfHwgc2VsZlVzZXIudXNlclJvbGUgPT09ICdhZG1pbicpICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e2hhbmRsZUxvZ291dH0+e3QoJ3VzZXI6dXNlcm1lbnUucHJvZmlsZS5sb2dvdXQnKX08L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICB7c2VsZlVzZXI/Lmludml0ZUNvZGUgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgICAgIDxoMj5cbiAgICAgICAgICAgICAgICB7dCgndXNlcjp1c2VybWVudS5wcm9maWxlLmludml0ZUNvZGUnKX06IHtzZWxmVXNlci5pbnZpdGVDb2RlfVxuICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICB7IWhpZGVMb2dpbiAmJiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHtzZWxmVXNlcj8udXNlclJvbGUgPT09ICdndWVzdCcgJiYgKFxuICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5lbWFpbFBob25lU2VjdGlvbn0+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImgxXCIgY2xhc3NOYW1lPXtzdHlsZXMucGFuZWxIZWFkZXJ9PlxuICAgICAgICAgICAgICAgICAge3QoJ3VzZXI6dXNlcm1lbnUucHJvZmlsZS5jb25uZWN0UGhvbmUnKX1cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG5cbiAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZW1haWxGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ3VzZXI6dXNlcm1lbnUucHJvZmlsZS5waC1waG9uZUVtYWlsJyl9XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXt2YWxpZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvciA/IHQoJ3VzZXI6dXNlcm1lbnUucHJvZmlsZS5waG9uZUVtYWlsRXJyb3InKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIElucHV0UHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICBlbmRBZG9ybm1lbnQ6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEFkb3JubWVudCBwb3NpdGlvbj1cImVuZFwiIG9uQ2xpY2s9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3NOYW1lPXtzdHlsZXMubWF0ZXJpYWxJY29uQmxvY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZW5kIGNsYXNzTmFtZT17c3R5bGVzLnByaW1hcnlGb3JlZ3JvdW5kfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3NlbGZVc2VyPy51c2VyUm9sZSA9PT0gJ2d1ZXN0JyAmJiAoXG4gICAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLndhbGxldFNlY3Rpb259PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoM1wiIGNsYXNzTmFtZT17c3R5bGVzLnRleHRCbG9ja30+XG4gICAgICAgICAgICAgICAgICB7dCgndXNlcjp1c2VybWVudS5wcm9maWxlLm9yJyl9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIHsvKjxCdXR0b24gb25DbGljaz17aGFuZGxlV2FsbGV0TG9naW5DbGlja30gY2xhc3NOYW1lPXtzdHlsZXMud2FsbGV0QnRufT5cbiAgICAgICAgICAgICAgICAgIHt0KCd1c2VyOnVzZXJtZW51LnByb2ZpbGUubGJsLXdhbGxldCcpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxici8+Ki99XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBjaGFuZ2VBY3RpdmVNZW51KFZpZXdzLlJlYWR5UGxheWVyKX0gY2xhc3NOYW1lPXtzdHlsZXMud2FsbGV0QnRufT5cbiAgICAgICAgICAgICAgICAgIHt0KCd1c2VyOnVzZXJtZW51LnByb2ZpbGUubG9naW5XaXRoUmVhZHlQbGF5ZXJNZScpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7c2VsZlVzZXI/LnVzZXJSb2xlID09PSAnZ3Vlc3QnICYmIChcbiAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuc29jaWFsQmxvY2t9PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoM1wiIGNsYXNzTmFtZT17c3R5bGVzLnRleHRCbG9ja30+XG4gICAgICAgICAgICAgICAgICB7dCgndXNlcjp1c2VybWVudS5wcm9maWxlLmNvbm5lY3RTb2NpYWwnKX1cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zb2NpYWxDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBpZD1cImZhY2Vib29rXCIgb25DbGljaz17aGFuZGxlT0F1dGhTZXJ2aWNlQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICA8RmFjZWJvb2tJY29uIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBpZD1cImdvb2dsZVwiIG9uQ2xpY2s9e2hhbmRsZU9BdXRoU2VydmljZUNsaWNrfT5cbiAgICAgICAgICAgICAgICAgICAgPEdvb2dsZUljb24gd2lkdGg9XCI0MFwiIGhlaWdodD1cIjQwXCIgdmlld0JveD1cIjAgMCA0MCA0MFwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGlkPVwibGlua2VkaW4yXCIgb25DbGljaz17aGFuZGxlT0F1dGhTZXJ2aWNlQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICA8TGlua2VkSW5JY29uIHdpZHRoPVwiNDBcIiBoZWlnaHQ9XCI0MFwiIHZpZXdCb3g9XCIwIDAgNDAgNDBcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBpZD1cInR3aXR0ZXJcIiBvbkNsaWNrPXtoYW5kbGVPQXV0aFNlcnZpY2VDbGlja30+XG4gICAgICAgICAgICAgICAgICAgIDxUd2l0dGVySWNvbiB3aWR0aD1cIjQwXCIgaGVpZ2h0PVwiNDBcIiB2aWV3Qm94PVwiMCAwIDQwIDQwXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgaWQ9XCJnaXRodWJcIiBvbkNsaWNrPXtoYW5kbGVPQXV0aFNlcnZpY2VDbGlja30+XG4gICAgICAgICAgICAgICAgICAgIDxHaXRIdWIgLz5cbiAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDRcIiBjbGFzc05hbWU9e3N0eWxlcy5zbWFsbFRleHRCbG9ja30+XG4gICAgICAgICAgICAgICAgICB7dCgndXNlcjp1c2VybWVudS5wcm9maWxlLmNyZWF0ZU9uZScpfVxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtzZXRQcm9maWxlTWVudU9wZW4gIT0gbnVsbCAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2xvc2VCdXR0b259IG9uQ2xpY2s9eygpID0+IHNldFByb2ZpbGVNZW51T3BlbihmYWxzZSl9PlxuICAgICAgICAgICAgICAgIDxDbG9zZSAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoUHJvZmlsZU1lbnUpXG4iLCJpbXBvcnQgeyBFbXB0eUxheW91dCB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvY29tbW9uL2NvbXBvbmVudHMvTGF5b3V0L0VtcHR5TGF5b3V0J1xuaW1wb3J0IHsgZG9Mb2dpbkF1dG8gfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3VzZXIvcmVkdWNlcnMvYXV0aC9zZXJ2aWNlJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IFByb2ZpbGVNZW51IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvdXNlci9jb21wb25lbnRzL1VzZXJNZW51L21lbnVzL1Byb2ZpbGVNZW51J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBkb0xvZ2luQXV0bz86IGFueVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IGFueSk6IGFueSA9PiB7XG4gIHJldHVybiB7fVxufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoKTogYW55ID0+ICh7XG4gIGRvTG9naW5BdXRvOiBiaW5kQWN0aW9uQ3JlYXRvcnMoZG9Mb2dpbkF1dG8sIGRpc3BhdGNoKVxufSlcblxuZXhwb3J0IGNvbnN0IEluZGV4UGFnZSA9IChwcm9wczogUHJvcHMpOiBhbnkgPT4ge1xuICBjb25zdCB7IGRvTG9naW5BdXRvIH0gPSBwcm9wc1xuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvTG9naW5BdXRvKHRydWUpXG4gIH0sIFtdKVxuXG4gIC8vIDxCdXR0b24gY2xhc3NOYW1lPVwicmlnaHQtYm90dG9tXCIgdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwic2Vjb25kYXJ5XCIgYXJpYS1sYWJlbD1cInNjZW5lXCIgb25DbGljaz17KGUpID0+IHsgc2V0U2NlbmVWaXNpYmxlKCFzY2VuZUlzVmlzaWJsZSk7IGUuY3VycmVudFRhcmdldC5ibHVyKCk7IH19PnNjZW5lPC9CdXR0b24+XG5cbiAgcmV0dXJuIChcbiAgICA8RW1wdHlMYXlvdXQgcGFnZVRpdGxlPXt0KCdsb2dpbi5wYWdlVGl0bGUnKX0+XG4gICAgICA8c3R5bGU+XG4gICAgICAgIHsnICd9XG4gICAgICAgIHtgXG4gICAgICAgICAgICAgICAgW2NsYXNzKj1tZW51UGFuZWxdIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA3NXB4O1xuICAgICAgICAgICAgICAgICAgICBib3R0b206IGluaXRpYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgICA8UHJvZmlsZU1lbnUgLz5cbiAgICA8L0VtcHR5TGF5b3V0PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEluZGV4UGFnZSlcbiJdLCJuYW1lcyI6WyJJbnB1dEFkb3JubWVudCIsInByb3BzIiwicmVmIiwiY2hpbGRyZW4iLCJjbGFzc2VzIiwiY2xhc3NOYW1lIiwiX3Byb3BzJGNvbXBvbmVudCIsImNvbXBvbmVudCIsIkNvbXBvbmVudCIsIl9wcm9wcyRkaXNhYmxlUG9pbnRlciIsImRpc2FibGVQb2ludGVyRXZlbnRzIiwiX3Byb3BzJGRpc2FibGVUeXBvZ3JhIiwiZGlzYWJsZVR5cG9ncmFwaHkiLCJwb3NpdGlvbiIsInZhcmlhbnRQcm9wIiwidmFyaWFudCIsIm90aGVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwibXVpRm9ybUNvbnRyb2wiLCJ1c2VGb3JtQ29udHJvbCIsIkZvcm1Db250cm9sQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJfZXh0ZW5kcyIsImNsc3giLCJyb290IiwicG9zaXRpb25FbmQiLCJwb3NpdGlvblN0YXJ0IiwiaGlkZGVuTGFiZWwiLCJmaWxsZWQiLCJtYXJnaW4iLCJtYXJnaW5EZW5zZSIsIlR5cG9ncmFwaHkiLCJjb2xvciIsIndpdGhTdHlsZXMiLCJkaXNwbGF5IiwiaGVpZ2h0IiwibWF4SGVpZ2h0IiwiYWxpZ25JdGVtcyIsIndoaXRlU3BhY2UiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkxlZnQiLCJwb2ludGVyRXZlbnRzIiwibmFtZSIsImNyZWF0ZVN2Z0ljb24iLCJkIiwiRmFjZWJvb2tJY29uIiwiU3ZnSWNvbiIsIl9fc3ByZWFkVmFsdWVzIiwid2lkdGgiLCJ2aWV3Qm94IiwiZmlsbCIsInhtbG5zIiwiR29vZ2xlSWNvbiIsImNsaXBQYXRoIiwiaWQiLCJMaW5rZWRJbkljb24iLCJUd2l0dGVySWNvbiIsIlZpZXdzIiwiUlBDX0VSUk9SUyIsIm1lc3NhZ2UiLCJjb2RlIiwidXJsIiwiYmFzZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsIlVSTCIsIlR5cGVFcnJvciIsImluY2x1ZGVzIiwic3RhcnRzV2l0aCIsInBhcnNlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9yaWdpbiIsInByb3RvY29sIiwiaG9zdCIsInBvcnQiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwiYSIsImIiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJqc29ucnBjIiwibGlzdGVuZXIiLCJoYW5kbGUiLCJleHBlY3RSZXF1ZXN0IiwiaXNIYW5kbGVQcm9taXNlIiwicHJvbWlzZSIsInRoZW4iLCJoIiwic291cmNlIiwiZSIsImlzVmFsaWRNZXNzYWdlIiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsInBhcmFtcyIsImVycm9yIiwiaXNWYWxpZFJlc3BvbnNlIiwiY29uc3RydWN0b3IiLCJfaGFuZGxlIiwiX2xpc3RlbmVyIiwiX3BlbmRpbmciLCJNYXAiLCJvcHRpb25zIiwidGhpcyIsIkVycm9yIiwic2VsZiIsInV0aWxzLnBhcnNlVXJsIiwicGFyZW50Iiwib3BlbmVyIiwicGVuZGluZyIsInV0aWxzLmNyZWF0ZU1lc3NhZ2VMaXN0ZW5lciIsImhhcyIsInJlc29sdmUiLCJyZWplY3QiLCJjYW5jZWxUaW1lb3V0IiwiZ2V0IiwicmVzdWx0IiwiZXJyIiwiRE9NRXhjZXB0aW9uIiwiZGV0YWlscyIsInV0aWxzLmRlc2VyaWFsaXplRXJyb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiSW5qZWN0b3IiLCJxdWFsaWZpZWRNZXRob2ROYW1lIiwicGFyYW1ldGVycyIsInRpbWVvdXQiLCJ1dGlscy51dWlkdjQiLCJtZXRob2QiLCJ1dGlscy5pc0hhbmRsZVByb21pc2UiLCJwb3N0TWVzc2FnZSIsIlByb21pc2UiLCJ0aW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiZGVsZXRlIiwic2V0IiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidmFsdWVzIiwiY2xpZW50IiwiX2FwaXMiLCJkZWZpbmUiLCJkZWZpbml0aW9uIiwiZnVuY3Rpb25zIiwiYXBpIiwiZm9yRWFjaCIsImZuIiwiYXN5bmMiLCJzZW5kIiwiYXJndW1lbnRzIiwiZGVzZXJpYWxpemUiLCJ3YWl0VW50aWwiLCJfbGlzdGVuZXJzIiwiX2Rlc2VyaWFsaXplIiwiX3dhaXRVbnRpbCIsImV2ZW50IiwidHlwZSIsImwiLCJldmVudFR5cGUiLCJwdXNoIiwibGlzdGVuZXJzIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImlnbm9yZVVua25vd25BcGkiLCJmcU1ldGhvZE5hbWUiLCJyZXN0Iiwic3BsaXQiLCJwb3AiLCJqb2luIiwidXRpbHMuZGVzdHJ1Y3R1cmVNZXRob2ROYW1lIiwic2VuZE1ldGhvZE5vdEZvdW5kIiwicmVzcG9uc2UiLCJhcHBseSIsInV0aWxzLnNlcmlhbGl6ZUVycm9yIiwiT2JqZWN0IiwiYXNzaWduIiwidXRpbHMuUlBDX0VSUk9SUyIsImlmcmFtZSIsIndpbmRvd0NvbnRyb2wiLCJjdXN0b21pemUiLCJ2aXNpYmxlIiwiZGlhbG9nIiwiX3JlYWR5IiwiX3ByaXZhdGUiLCJfdGltZW91dElkIiwiX3JlYWR5UHJvbWlzZSIsIl9yZXNvbHZlUmVhZHkiLCJfcmVqZWN0UmVhZHkiLCJpc1JlYWR5IiwiZGVzdHJveSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJzaG93Iiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiaGlkZSIsInRvcCIsImxlZnQiLCJwYWRkaW5nIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsIm92ZXJmbG93IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNvbnRhaW5lciIsInNyYyIsInNjcm9sbGluZyIsInByZXZlbnREZWZhdWx0IiwiYm9keSIsIndlYkFwcFdpbmRvdyIsInJlYWR5IiwicXVlcnlTZWxlY3RvciIsIl9ib2R5T3ZlcmZsb3dTdHlsZSIsInNob3dNb2RhbCIsImVsZW1lbnQiLCJDbGllbnQiLCJzZXJ2ZXIiLCJTZXJ2ZXIiLCJpbmplY3RvciIsImNvbnRyb2wiLCJsb2FkZWQiLCJjbG9zZWQiLCJXZWJBcHBXaW5kb3ciLCJwYXJzZVVybCIsImxpc3RlbiIsImNvbm5lY3QiLCJjcmVkZW50aWFsSGFuZGxlciIsImNyZWRlbnRpYWxSZXF1ZXN0T3JpZ2luIiwiY3JlZGVudGlhbFJlcXVlc3RPcHRpb25zIiwiaGludEtleSIsIl9jcmVkZW50aWFsSGFuZGxlciIsImFwcFdpbmRvdyIsInJwYy5XZWJBcHBXaW5kb3ciLCJyZXNwb25kV2l0aCIsImhhbmRsZXJSZXNwb25zZSIsIl9wcm9taXNlIiwiY3JlZGVudGlhbCIsImNyZWRlbnRpYWxSZXF1ZXN0RXZlbnQiLCJfZW1pdHRlciIsImVtaXQiLCJDcmVkZW50aWFsUmVxdWVzdEV2ZW50IiwiY3JlZGVudGlhbFN0b3JlRXZlbnQiLCJDcmVkZW50aWFsU3RvcmVFdmVudCIsIkVWRU5UX1RZUEVTIiwicmVseWluZ09yaWdpbiIsIl9jb250cm9sIiwiX2Nvbm5lY3RlZCIsIm1lZGlhdG9yT3JpZ2luIiwicnBjLkV2ZW50RW1pdHRlciIsInN1cGVyIiwiQ3JlZGVudGlhbEhhbmRsZXJTZXJ2aWNlIiwicmVtb3RlIiwibWV0aG9kTmFtZSIsImJpbmQiLCJfcmVtb3RlU2V0IiwiY3JlZGVudGlhbEhpbnQiLCJpY29ucyIsInByb21pc2VzIiwibWFwIiwiaW1hZ2VUb0RhdGFVcmwiLCJpY29uIiwiaW1nIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJkYXRhVXJsIiwidG9EYXRhVVJMIiwib25lcnJvciIsImZldGNoZWRJbWFnZSIsImFsbCIsImhpbnRzIiwiQ3JlZGVudGlhbEhpbnRzIiwibmF2aWdhdG9yIiwiY3JlZGVudGlhbHNQb2x5ZmlsbCIsInBlcm1pc3Npb25zIiwicmVxdWVzdCIsInN0YXRlIiwiY3JlZGVudGlhbE1hbmFnZXIiLCJDcmVkZW50aWFsTWFuYWdlciIsIl9pbml0IiwiX2luamVjdG9yIiwiX3JlbW90ZSIsInJlZ2lzdGVyIiwiQ3JlZGVudGlhbEhhbmRsZXJSZWdpc3RyYXRpb24iLCJ1bnJlZ2lzdGVyIiwiZ2V0UmVnaXN0cmF0aW9uIiwiaGFzUmVnaXN0cmF0aW9uIiwiZGF0YVR5cGUiLCJyZWNvbW1lbmRlZEhhbmRsZXJPcmlnaW5zIiwiX25hdGl2ZUNyZWRlbnRpYWxzQ29udGFpbmVyIiwiY3JlZGVudGlhbHMiLCJzdG9yZSIsIndlYiIsIldlYkNyZWRlbnRpYWwiLCJwZXJtaXNzaW9uRGVzYyIsInF1ZXJ5IiwicmV2b2tlIiwiREVGQVVMVF9NRURJQVRPUiIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1lZGlhdG9yVXJsIiwicnBjLldlYkFwcENvbnRleHQiLCJjcmVhdGVXaW5kb3ciLCJwb2x5ZmlsbCIsIlBlcm1pc3Npb25NYW5hZ2VyIiwiQ3JlZGVudGlhbEhhbmRsZXJzIiwiQ3JlZGVudGlhbEhhbmRsZXIiLCJDcmVkZW50aWFsc0NvbnRhaW5lciIsImxvYWQiLCJhdXRoU3RhdGUiLCJzZWxlY3RBdXRoU3RhdGUiLCJkaXNwYXRjaCIsInVwZGF0ZVVzZXJuYW1lIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwidXBkYXRlVXNlckF2YXRhcklkIiwidXBkYXRlVXNlclNldHRpbmdzIiwibG9naW5Vc2VyQnlPQXV0aCIsImxvZ2luVXNlckJ5WFJXYWxsZXQiLCJhZGRDb25uZWN0aW9uQnlTbXMiLCJhZGRDb25uZWN0aW9uQnlFbWFpbCIsImxvZ291dFVzZXIiLCJyZW1vdmVVc2VyIiwiY2hhbmdlQWN0aXZlTWVudSIsInNldFByb2ZpbGVNZW51T3BlbiIsImhpZGVMb2dpbiIsInQiLCJ1c2VUcmFuc2xhdGlvbiIsInNlbGZVc2VyIiwidXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsInVzZVN0YXRlIiwiZW1haWxQaG9uZSIsInNldEVtYWlsUGhvbmUiLCJzZXRFcnJvciIsImVycm9yVXNlcm5hbWUiLCJzZXRFcnJvclVzZXJuYW1lIiwibWVkaWF0b3IiLCJDb25maWciLCJwdWJsaWNSdW50aW1lQ29uZmlnIiwibWVkaWF0b3JTZXJ2ZXIiLCJwb2x5ZmlsbC5sb2FkT25jZSIsImxvZyIsInVwZGF0ZVVzZXJOYW1lIiwiaGFuZGxlVXBkYXRlVXNlcm5hbWUiLCJ0cmltIiwidmFsaWRhdGUiLCJ2YWxpZGF0ZUVtYWlsIiwidmFsaWRhdGVQaG9uZU51bWJlciIsImhhbmRsZVN1Ym1pdCIsImhhbmRsZU9BdXRoU2VydmljZUNsaWNrIiwiY3VycmVudFRhcmdldCIsInN0eWxlcyIsIm5ldHdvcmsiLCJOZXR3b3JrIiwiaW5zdGFuY2UiLCJ1c2VySWQiLCJjbGllbnRzIiwiYXZhdGFyRGV0YWlsIiwidGh1bWJuYWlsVVJMIiwiQnV0dG9uIiwib25DbGljayIsImRpc2FibGVSaXBwbGUiLCJDcmVhdGUiLCJUZXh0RmllbGQiLCJzaXplIiwibGFiZWwiLCJvbkNoYW5nZSIsInRhcmdldCIsIm9uS2V5RG93biIsImtleSIsIklucHV0UHJvcHMiLCJlbmRBZG9ybm1lbnQiLCJDaGVjayIsInVzZXJSb2xlIiwibG9nb3V0VXNlcjIiLCJpbnZpdGVDb2RlIiwib25TdWJtaXQiLCJwbGFjZWhvbGRlciIsIm9uQmx1ciIsImhlbHBlclRleHQiLCJTZW5kIiwiR2l0SHViIiwiQ2xvc2UiLCJJbmRleFBhZ2UiLCJkb0xvZ2luQXV0byIsIkVtcHR5TGF5b3V0IiwicGFnZVRpdGxlIiwiUHJvZmlsZU1lbnUiXSwibWFwcGluZ3MiOiJ5MENBUU8sSUF1Q0hBLHdCQUErQyxTQUF3QkMsRUFBT0MsT0FDNUVDLEVBQVdGLEVBQU1FLFNBQ2pCQyxFQUFVSCxFQUFNRyxRQUNoQkMsRUFBWUosRUFBTUksVUFDbEJDLEVBQW1CTCxFQUFNTSxVQUN6QkMsT0FBaUMsSUFBckJGLEVBQThCLE1BQVFBLEVBQ2xERyxFQUF3QlIsRUFBTVMscUJBQzlCQSxPQUFpRCxJQUExQkQsR0FBMkNBLEVBQ2xFRSxFQUF3QlYsRUFBTVcsa0JBQzlCQSxPQUE4QyxJQUExQkQsR0FBMkNBLEVBQy9ERSxFQUFXWixFQUFNWSxTQUNqQkMsRUFBY2IsRUFBTWMsUUFDcEJDLEVBQVFDLEVBQXlCaEIsRUFBTyxDQUFDLFdBQVksVUFBVyxZQUFhLFlBQWEsdUJBQXdCLG9CQUFxQixXQUFZLFlBRW5KaUIsRUFBaUJDLEtBQW9CLEdBQ3JDSixFQUFVRCxTQUVWQSxHQUFlSSxFQUFlSCxRQVE5QkcsSUFBbUJILE1BQ1hHLEVBQWVILGlDQUdhSyxFQUFtQkMsU0FBVSxDQUNuRUMsTUFBTyw4QkFDMkJkLEVBQVdlLEVBQVMsQ0FDdERsQixVQUFXbUIsRUFBS3BCLEVBQVFxQixLQUFNcEIsRUFBd0IsUUFBYlEsRUFBcUJULEVBQVFzQixZQUFjdEIsRUFBUXVCLGNBQWVqQixHQUF3Qk4sRUFBUU0scUJBQXNCUSxFQUFlVSxhQUFleEIsRUFBUXdCLFlBQXlCLFdBQVpiLEdBQXdCWCxFQUFReUIsT0FBa0MsVUFBMUJYLEVBQWVZLFFBQXNCMUIsRUFBUTJCLGFBQ3pTN0IsSUFBQUEsR0FDQ2MsR0FBNEIsaUJBQWJiLEdBQTBCUyxFQUU3QlQsMEJBRmtGNkIsRUFBWSxDQUMzR0MsTUFBTyxpQkFDTjlCLFVBdURVK0IsRUFsSUssQ0FFbEJULEtBQU0sQ0FDSlUsUUFBUyxPQUNUQyxPQUFRLFNBRVJDLFVBQVcsTUFDWEMsV0FBWSxTQUNaQyxXQUFZLFVBSWRWLE9BQVEsQ0FDTixvQ0FBcUMsQ0FDbkNXLFVBQVcsS0FLZmIsY0FBZSxDQUNiYyxZQUFhLEdBSWZmLFlBQWEsQ0FDWGdCLFdBQVksR0FJZGhDLHFCQUFzQixDQUNwQmlDLGNBQWUsUUFJakJmLFlBQWEsR0FHYkcsWUFBYSxJQTZGbUIsQ0FDaENhLEtBQU0scUJBRE9WLENBRVpsQyxLQzFJWTZDLDBCQUFnRCxPQUFRLENBQ3JFQyxFQUFHLHlEQ0RVRCwwQkFBZ0QsT0FBUSxDQUNyRUMsRUFBRyw2R0NEVUQsMEJBQWdELE9BQVEsQ0FDckVDLEVBQUcsMkpDRFVELDBCQUFnRCxPQUFRLENBQ3JFQyxFQUFHLGdaQ0RVRCwwQkFBZ0QsT0FBUSxDQUNyRUMsRUFBRyxpRENBUUMsRUFBZ0I5QyxtQkFFeEIrQyxFQUFEQyxLQUFhaEQsbUJBQ1YsTUFBRCxDQUFLaUQsTUFBTSxLQUFLZCxPQUFPLEtBQUtlLFFBQVEsWUFBWUMsS0FBSyxPQUFPQyxNQUFNLDhDQUMvRCxPQUFELENBQ0VQLEVBQUUsaVdBQ0ZNLEtBQUssNEJBRU4sT0FBRCxDQUNFTixFQUFFLDhSQUNGTSxLQUFLLFlDVkZFLEVBQWNyRCxtQkFFdEIrQyxFQUFEQyxLQUFhaEQsbUJBQ1YsTUFBRCxDQUFLaUQsTUFBTSxLQUFLZCxPQUFPLEtBQUtlLFFBQVEsWUFBWUMsS0FBSyxPQUFPQyxNQUFNLDhDQUMvRCxJQUFELENBQUdFLFNBQVMsK0JBQ1QsT0FBRCxDQUNFVCxFQUFFLHdNQUNGTSxLQUFLLDRCQUVOLE9BQUQsQ0FDRU4sRUFBRSxrUEFDRk0sS0FBSyw0QkFFTixPQUFELENBQ0VOLEVBQUUsdUpBQ0ZNLEtBQUssNEJBRU4sT0FBRCxDQUNFTixFQUFFLHdQQUNGTSxLQUFLLDZCQUdSLE9BQUQscUJBQ0csV0FBRCxDQUFVSSxHQUFHLHlCQUNWLE9BQUQsQ0FBTU4sTUFBTSxLQUFLZCxPQUFPLEtBQUtnQixLQUFLLGNDeEJqQ0ssRUFBZ0J4RCxtQkFFeEIrQyxFQUFEQyxLQUFhaEQsbUJBQ1YsTUFBRCxDQUFLaUQsTUFBTSxLQUFLZCxPQUFPLEtBQUtlLFFBQVEsWUFBWUMsS0FBSyxPQUFPQyxNQUFNLDhDQUMvRCxJQUFELENBQUdFLFNBQVMsK0JBQ1QsT0FBRCxDQUNFVCxFQUFFLDR2Q0FDRk0sS0FBSyw2QkFHUixPQUFELHFCQUNHLFdBQUQsQ0FBVUksR0FBRyx5QkFDVixPQUFELENBQU1OLE1BQU0sS0FBS2QsT0FBTyxLQUFLZ0IsS0FBSyxjQ1pqQ00sRUFBZXpELG1CQUV2QitDLEVBQURDLEtBQWFoRCxtQkFDVixNQUFELENBQUtpRCxNQUFNLEtBQUtkLE9BQU8sS0FBS2UsUUFBUSxZQUFZQyxLQUFLLE9BQU9DLE1BQU0sOENBQy9ELE9BQUQsQ0FDRVAsRUFBRSw2a0NBQ0ZNLEtBQUssY0NQRk8sRUFRSCxTQVJHQSxFQVdFLGNDTEZDLEVBU0ssQ0FDZEMsUUFBUyxtQkFDVEMsYUFYU0YsRUFxQkUsQ0FDWEMsUUFBUyxlQUNUQyxZQUlHLFdBQWtCQyxFQUFLQyxXQUNoQixJQUFUQSxNQUNNQyxPQUFPQyxTQUFTQyxNQUdQLG1CQUFSQyxXQUNELElBQUlBLElBQUlMLEVBQUtDLE1BR0osaUJBQVJELFFBQ0YsSUFBSU0sVUFBVSwyQkFJbEJOLEVBQUlPLFNBQVMsU0FDWk4sRUFBS08sV0FBVyxVQUFZUixFQUFJUSxXQUFXLEtBQ3RDUCxFQUFPLElBQU1ELEVBRWJDLEVBQU9ELFNBS1hTLEVBQVNDLFNBQVNDLGNBQWMsT0FDL0JQLEtBQU9KLE1BQ1ZZLEtBQWlCQyxVQUFZWCxPQUFPQyxTQUFTVSxVQUFZLEtBQzFESixFQUFPSyxLQUdnQixVQUFwQkwsRUFBT0ksVUFBd0MsT0FBaEJKLEVBQU9NLE1BQ25CLFdBQXBCTixFQUFPSSxVQUF5QyxRQUFoQkosRUFBT00sUUFDOUJOLEVBQU9PLFlBRVBQLEVBQU9LLFFBR1RaLE9BQU9DLFNBQVNXLFNBSXhCRyxFQUFXUixFQUFPUSxnQkFDbEJBLEVBQVNULFdBQVcsU0FDWCxJQUFNUyxHQUdaLENBR0xILEtBQU1MLEVBQU9LLE1BQVFaLE9BQU9DLFNBQVNXLEtBQ3JDRSxTQUFVUCxFQUFPTyxTQUNqQkosT0FBQUEsRUFDQUMsU0FBVUosRUFBT0ksU0FDakJJLFNBQUFBLEdBU0csWUFBZ0JDLEVBQUVDLE9BQ25CQSxFQUFFRCxFQUFFLEdBQUdBLElBQUksR0FBR0MsR0FBSyxHQUFGRCxFQUFLLElBQU0sS0FBRyxFQUFFRSxLQUFLQyxVQUFZLEtBQUcsR0FBRyxHQUFHLEdBQUdDLFNBQVMsSUFBSSxZQUFZSCxFQVV0RixZQUF3QnJCLFVBRTNCQSxHQUE4QixpQkFBWkEsR0FDRSxRQUFwQkEsRUFBUXlCLFNBQ1J6QixFQUFRTCxJQUE0QixpQkFBZkssRUFBUUwsR0E0RDFCLGFBQ0wrQixTQUFDQSxTQUFVWixTQUFRYSxnQkFBUUMsT0FHeEJDLEdBQWdCRixHQUFTLE9BQ3BCRyxFQUFVSCxLQUNQLElBQ0RJLFNBQVVKLEVBQVNLLGVBaEV4QixJQUF3QmhDLElBcUVwQmlDLFNBQVdOLEdBQVVPLEVBQUVwQixTQUFXQSxRQXBFcENxQixHQURzQm5DLEVBc0VTa0MsRUFBRUUsT0FyRU5DLE1BQU1DLFFBQVF0QyxFQUFRdUMsV0FzRWhEWCxHQW5FSCxTQUF5QjVCLFVBRTVCbUMsR0FBZW5DLGtCQUNBQSxFQUFVLFVBQVdBLGlCQUN0QkEsS0FHV3dDLEVBSGN4QyxFQUFRd0MsUUFLckIsaUJBQVZBLEdBQ00saUJBQWZBLEVBQU12QyxNQUNZLGlCQUFsQnVDLEVBQU14QyxTQUpWLElBQXNCd0MsRUE0REZDLENBQWdCUCxFQUFFRSxVQUdoQ0YsRUFBRUUsS0FBTUYsSUFjZCxZQUF5QlAsYUFJRSxtQkFBaEJBLEVBQU9JLFdBQ2ZHLFdBQ0Q7OztHQ3RNRixTQUNMUSxtQkFDTzVCLE9BQVMsVUFDVDZCLFFBQVUsVUFDVkMsVUFBWSxVQUVaQyxTQUFXLElBQUlDLGtCQWlCUmhDLEVBQVFpQyxNQUNqQkMsS0FBS0osZ0JBQ0EsSUFBSUssTUFBTSx3QkFHUkYsR0FBVyxTQUdmRyxFQUFPRixPQUNSbEMsT0FBU3FDLEVBQWVyQyxHQUFRQSxTQUNoQzZCLFFBQVVJLEVBQVFwQixRQUFVdkIsT0FBT2dELFFBQVVoRCxPQUFPaUQsYUFFbkRDLEVBQVVKLEVBQUtMLGtCQUNoQkQsVUFBWVcsR0FBNEIsQ0FDM0N6QyxPQUFRb0MsRUFBS3BDLE9BQ2JhLE9BQVF1QixFQUFLUCxRQUNiZixlQUFlLEVBQ2ZGLGlCQUVNNEIsRUFBUUUsSUFBSXhELEVBQVFMLGlCQUtsQjhELFFBQUNBLFNBQVNDLGdCQUFRQyxHQUFpQkwsRUFBUU0sSUFBSTVELEVBQVFMLFdBRTFELFdBQVlLLFNBQ055RCxFQUFRekQsRUFBUTZELFVENkYxQixTQUEwQnJCLE9BQzNCc0IsUUFFcUIsaUJBQXRCdEIsRUFBTUUsY0FDRCxJQUFJcUIsYUFBYXZCLEVBQU14QyxRQUFTd0MsRUFBTXpELFNBR3RDLElBQUlrRSxNQUFNVCxFQUFNeEMsU0FDbkIsU0FBVXdDLE1BQ1B2QyxLQUFPdUMsRUFBTXZDLE9BR2xCdUMsRUFBTXdCLFlBQ0hBLFFBQVV4QixFQUFNd0IsU0FFZkYsRUMxR01HLENBQXVCakUsRUFBUXdDLGtCQUduQzBCLGlCQUFpQixVQUFXaEIsRUFBS04sV0FFakMsSUFBSXVCLEdBQVNqQixjQWVYa0IsRUFBcUJDLEdBQVlDLFFBQzFDQSxFQTNFNEIsVUE2RXhCdEIsS0FBS0osZ0JBQ0QsSUFBSUssTUFBTSxtQ0FHWkMsRUFBT0YsS0FFUGhELEVBQVUsQ0FDZHlCLFFBQVMsTUFDVDlCLEdBQUk0RSxLQUNKQyxPQUFRSixFQUNSN0IsT0FBUThCLE1BS1BJLEdBQXNCdkIsRUFBS1AsU0FBVSxRQUNqQk8sRUFBS1AsU0FDbkIrQixZQUFZMUUsRUFBU2tELEVBQUtwQyxlQUU1QjZCLFFBQVErQixZQUFZMUUsRUFBU2tELEVBQUtwQyxlQUtsQyxJQUFJNkQsU0FBUSxDQUFDbEIsRUFBU0MsV0FDckJKLEVBQVVKLEVBQUtMLGFBQ2pCYyxLQUNEVyxFQUFVLEVBQUcsT0FDUk0sRUFBWUMsWUFBVyxPQUNuQkMsT0FBTzlFLEVBQVFMLE1BQ2hCLElBQUlzRCxNQUFNLDBCQUNoQnFCLEtBQ2EsT0FDTlEsT0FBTzlFLEVBQVFMLGlCQUNWaUYsV0FHQyxPQUNORSxPQUFPOUUsRUFBUUwsT0FHbkJvRixJQUFJL0UsRUFBUUwsR0FBSSxDQUFDOEQsUUFBQUEsRUFBU0MsT0FBQUEsRUFBUUMsY0FBQUEsT0FROUNxQixXQUNLaEMsS0FBS0osVUFBVyxRQUNWcUMsb0JBQW9CLFVBQVdqQyxLQUFLSixnQkFDdENELFFBQVVLLEtBQUtsQyxPQUFTa0MsS0FBS0osVUFBWSxlQUVwQ25GLEtBQVN1RixLQUFLSCxTQUFTcUMsV0FDekJ4QixPQUFPLElBQUlULE1BQU0sNEJBRXBCSixTQUFXLElBQUlDLE1BSzFCLFNBQ0VKLFlBQVl5QyxRQUNMQSxPQUFTQSxPQUNUQyxNQUFRLElBQUl0QyxJQXFCbkJ1QyxPQUFPdEcsRUFBTXVHLFVBQ2tCLGlCQUFUdkcsUUFDWixJQUFJeUIsVUFBVSw2Q0FHbUIsaUJBQWY4RSxJQUN4QmpELE1BQU1DLFFBQVFnRCxFQUFXQyxpQkFDbkIsSUFBSS9FLFVBQ1IsZ0hBSUUwQyxFQUFPRixLQUNQd0MsRUFBTSxZQUVERCxVQUFVRSxhQUNGLGlCQUFQQyxNQUNILENBQUMzRyxLQUFNMkcsRUFBSTNDLFFBQVMsT0FFdkIyQyxFQUFHM0csTUFBUTRHLHdCQUNOekMsRUFBS2lDLE9BQU9TLEtBQ2pCN0csRUFBTyxJQUFNMkcsRUFBRzNHLEtBQU0sSUFBSThHLFdBQVlILEVBQUczQyxlQUkxQ3FDLE1BQU1yRyxHQUFReUcsRUFDWkEsRUFZVDVCLElBQUk3RSxFQUFNdUcsT0FDSXRDLEtBQUtvQyxNQUFNckcsR0FDZCxJQUNKdUcsU0FDTXRDLEtBQUtxQyxPQUFPdEcsRUFBTXVHLFNBRXJCLElBQUlyQyxNQUFNLFFBQVFsRSxtQ0FFbkJpRSxLQUFLb0MsTUFBTXJHOzs7R0NwTmYsU0FDTDJELGFBQVlvRCxZQUFDQSxFQUFjLElBQUs1RCxhQUFHNkQsRUFBWUosZUFBa0IsU0FDMURLLFdBQWEsUUFDYkMsYUFBZUgsT0FDZkksV0FBYUgsYUFHVEksWUFDRG5ELEtBQUtpRCxhQUFhRSxTQUNwQkgsV0FBV0csRUFBTUMsT0FBUyxJQUFJWCxZQUFhWSxFQUFFRixLQUM1Q25ELEtBQUtrRCxXQUFXQyxHQUd6QmpDLGlCQUFpQm9DLEVBQVdaLEdBQ3RCMUMsS0FBS2dELFdBQVdNLFFBR2JOLFdBQVdNLEdBQVdDLEtBQUtiLFFBRjNCTSxXQUFXTSxHQUFhLENBQUNaLEdBTWxDVCxvQkFBb0JxQixFQUFXWixTQUN2QmMsRUFBWXhELEtBQUtnRCxXQUFXTSxPQUM5QkUsZUFHRUMsRUFBTUQsRUFBVUUsUUFBUWhCLFFBQzNCZSxLQUNTRSxPQUFPRixFQUFLOzs7R0MxQnJCLFNBQ0wvRCxtQkFDTzVCLE9BQVMsVUFDVDZCLFFBQVUsVUFDVnlDLE1BQVEsSUFBSXRDLElBVW5CdUMsT0FBT3RHLEVBQU15RyxVQUNrQixpQkFBVHpHLFFBQ1osSUFBSXlCLFVBQVUsNkNBRUYsV0FBUmdGLFFBQ0osSUFBSWhGLFVBQVUsK0JBRW5CekIsS0FBUWlFLEtBQUtvQyxZQUNSLElBQUluQyxNQUFNLFFBQVFsRSxtQ0FHckJxRyxNQUFNckcsR0FBUXlHLGVBdUJSMUUsRUFBUWlDLE1BQ2hCQyxLQUFLSixnQkFDQSxJQUFJSyxNQUFNLHdCQUdSRixHQUFXLFNBR2ZHLEVBQU9GLE9BQ1JsQyxPQUFTcUMsRUFBZXJDLEdBQVFBLFNBQ2hDNkIsUUFBVUksRUFBUXBCLFFBQVV2QixPQUFPZ0QsUUFBVWhELE9BQU9pRCxhQUVuRHVELEVBQWlELFNBQTdCN0QsRUFBUTZELG1CQUFnQyxJQUU3RGhFLFVBQVlXLEdBQTRCLENBQzNDekMsT0FBUW9DLEVBQUtwQyxPQUNiYSxPQUFRdUIsRUFBS1AsUUFDYmYsZUFBZSxFQUNmRixtQkFDUTNDLEtBQUNBLFNBQU15RixHSHNIZCxTQUErQnFDLE9BSS9COUgsS0FBUytILEdBQVFELEVBQWFFLE1BQU0sV0FDbkN2QyxFQUFTc0MsRUFBS0UsZUFDYixDQUFDakksS0FBUytILEdBQU1HLEtBQUssS0FDckIsQ0FBQ2xJLEtBQUFBLEVBQU15RixPQUFBQSxHRzdIZTBDLENBQTRCbEgsRUFBUXdFLFFBQ3JEZ0IsRUFBTXRDLEVBQUtrQyxNQUFNckcsTUFHcEJ5RixHQUFVQSxFQUFPOUQsV0FBVyxZQUN0QnlHLEdBQW1CakUsRUFBS1AsUUFBU08sRUFBS3BDLE9BQVFkLE9BSW5Ed0YsR0FBT29CLGFBTVBwQixHQUE4QixtQkFBaEJBLEVBQUloQixVQUNiMkMsR0FBbUJqRSxFQUFLUCxRQUFTTyxFQUFLcEMsT0FBUWQsU0FJakQwRixFQUFLRixFQUFJaEIsR0FDZCxpQkFDTzRDLEVBQVcsQ0FDZjNGLFFBQVMsTUFDVDlCLEdBQUlLLEVBQVFMLFVBR0hrRSxhQUFlNkIsRUFBRzJCLE1BQU03QixFQUFLeEYsRUFBUXVDLGNBQ3hDTCxLQUNHTSxNSDZCZCxTQUF3QkEsU0FDdkJzQixFQUFNLENBQ1Y5RCxRQUFTd0MsRUFBTXhDLGVBRWEsVUFBM0J3QyxFQUFNRSxZQUFZM0QsU0FDZjJELFlBQWNGLEVBQU1FLFlBQVkzRCxNQUVuQyxTQUFVeUQsTUFDUHpELEtBQU95RCxFQUFNekQsUUFHYmtCLEtBREgsU0FBVXVDLEVBQ0FBLEVBQU12QyxLQUVORixFQUF1QkUsS0FFakMsWUFBYXVDLE1BQ1Z3QixRQUFVeEIsRUFBTXdCLFNBRWZGLEVHL0NvQndELENBQXFCcEYsR0FHckNnQixFQUFLUCxVQUdIOEIsR0FBc0J2QixFQUFLUCxXQUN2QkEsUUFBUVosU0FBVUMsRUFBRTBDLFlBQVkwQyxFQUFVbEUsRUFBS3BDLFlBRS9DNkIsUUFBUStCLFlBQVkwQyxFQUFVbEUsRUFBS3BDLFVBakI3QyxhQXVCRW9ELGlCQUFpQixVQUFXaEIsRUFBS04sV0FHMUNvQyxRQUNLaEMsS0FBS0osbUJBQ0NxQyxvQkFBb0IsVUFBV2pDLEtBQUtKLGdCQUN0Q0QsUUFBVUssS0FBS2xDLE9BQVNrQyxLQUFLSixVQUFZLE9BS3BELFlBQTRCakIsRUFBUWIsRUFBUWQsU0FDcENvSCxFQUFXLENBQ2YzRixRQUFTLE1BQ1Q5QixHQUFJSyxFQUFRTCxHQUNaNkMsTUFBTytFLE9BQU9DLE9BQU8sR0FBSUMsV0FJeEJoRCxHQUFzQjlDLEdBQ2hCQSxFQUFPSSxTQUFVQyxFQUFFMEMsWUFBWTBDLEVBQVV0RyxLQUV6Q2EsRUFBTytDLFlBQVkwQyxFQUFVdEc7Ozs7O0dDL0hqQyxTQUNMNEIsWUFDRXhDLEdBQUtvRSxRQUNIQSxFQVZzQixXQVd0QjNDLFNBQ0ErRixnQkFDQUMsWUFDQW5MLEVBQVksZUFDWm9MLEVBQVksTUFDVixZQUNDQyxTQUFVLE9BQ1ZDLE9BQVMsVUFDVEosT0FBUyxVQUNUL0YsT0FBUyxVQUNUZ0csY0FBZ0IsVUFDaEJJLFFBQVMsT0FDVEMsU0FBVyxRQUNYQyxXQUFhLFVBR2JELFNBQVNFLGNBQWdCLElBQUl2RCxTQUFRLENBQUNsQixFQUFTQyxVQUU3Q3VFLFdBQWFwRCxZQUNoQixJQUFNbkIsRUFBTyxJQUFJSyxhQUNmLDRDQUE2QyxrQkFDL0NPLFFBQ0cwRCxTQUFTRywrQkFDQ25GLEtBQUs0QixnQkFDYnFELFdBQWEsT0FDVnhLLFNBRUx1SyxTQUFTSSw4QkFDQ3BGLEtBQUs0QixnQkFDYnFELFdBQWEsT0FDWG5FLFlBR05rRSxTQUFTSyxRQUFVMUMsU0FDZjNDLEtBQUtnRixTQUFTRSxtQkFJbEJGLFNBQVNNLFFBQVUsS0FFbkJ0RixLQUFLaUYsaUJBQ0RELFNBQVNJLGFBQWEsSUFBSXJFLGFBQzdCLDhDQUErQyxlQUVoRGYsS0FBSzhFLGNBQ0RBLE9BQU9TLFdBQVdDLFlBQVl4RixLQUFLOEUsYUFDbkNBLE9BQVMsT0FJZkosRUFBUSxJQUVjLGlCQUFYQSxJQUF1QkEsRUFBT2Usb0JBQ2xDLElBQUlqSSxVQUFVLDJEQUVqQm1ILGNBQWdCLENBQ25CaEcsT0FBUStGLEVBQU9lLGNBQ2ZDLFNBQ1NDLE1BQU1DLFdBQWEsV0FFNUJDLFNBQ1NGLE1BQU1DLFdBQWEsZ0JBR3pCbEIsT0FBU0EsWUFDVC9GLE9BQVNxQixLQUFLMEUsT0FBT2Usa0JBSXpCZCxjQUVJQSxjQUFnQkEsWUFDaEJoRyxPQUFTcUIsS0FBSzJFLGNBQWNoRyxXQUloQ0EsbUJBRUlBLE9BQVNBLFFBV1htRyxPQUFTbEgsU0FBU0MsY0FBYyxhQUMxQm1DLEtBQUs4RSxPQUFRLENBQ3RCOUssU0FBVSxRQUNWOEwsSUFBSyxFQUNMQyxLQUFNLEVBQ04xSixNQUFPLE9BQ1BkLE9BQVEsT0FDUixZQUFhLE9BQ2IsYUFBYyxPQUNkRCxRQUFTLE9BQ1RMLE9BQVEsRUFDUitLLFFBQVMsRUFDVEMsT0FBUSxPQUNSQyxXQUFZLGNBQ1o5SyxNQUFPLFFBQ1AsYUFBYyxhQUNkK0ssU0FBVSxTQUNWLFVBQVcsV0FFUnJCLE9BQU90TCxVQUFZLGlCQUNBLGlCQUFkQSxTQUNIc0wsT0FBT3RMLFVBQVl3RyxLQUFLOEUsT0FBT3RMLFVBQVksSUFBTUEsU0FJbERtTSxFQUFRL0gsU0FBU0MsY0FBYyxjQUMvQnVJLFlBQ0p4SSxTQUFTeUksZUFBZSw0RkFLckJDLFVBQVkxSSxTQUFTQyxjQUFjLFVBQzdCbUMsS0FBS3NHLFVBQVcsQ0FDekJ0TSxTQUFVLFdBQ1ZxQyxNQUFPLE9BQ1BkLE9BQVEsT0FDUk4sT0FBUSxFQUNSK0ssUUFBUyxFQUNUMUssUUFBUyxPQUNULGlCQUFrQixnQkFFZmdMLFVBQVU5TSxVQUFZLCtCQUd0QmtMLE9BQVM5RyxTQUFTQyxjQUFjLGVBQ2hDNkcsT0FBTzZCLElBQU1ySixPQUNid0gsT0FBTzhCLFVBQVksVUFDYnhHLEtBQUswRSxPQUFRLENBQ3RCMUssU0FBVSxRQUNWOEwsSUFBSyxFQUNMQyxLQUFNLEVBQ04xSixNQUFPLE9BQ1BkLE9BQVEsT0FDUjBLLE9BQVEsT0FDUkMsV0FBWSxjQUNaQyxTQUFVLFNBQ1ZsTCxPQUFRLEVBQ1IrSyxRQUFTLEVBQ1QsWUFBYSxTQUlWbEIsT0FBT3NCLFlBQVlULFFBQ25CVyxVQUFVRixZQUFZcEcsS0FBSzBFLGFBQzNCSSxPQUFPc0IsWUFBWXBHLEtBQUtzRyxnQkFHeEJ4QixPQUFPNUQsaUJBQWlCLGdCQUN6QnVGLHNCQUNHWixtQkFJRWEsS0FBS04sWUFBWXBHLEtBQUs4RSxhQUMxQm5HLE9BQVNxQixLQUFLMEUsT0FBT2UsY0FFdkJiLFFBRVcsQ0FDUkUsT0FBUTlFLEtBQUs4RSxPQUNid0IsVUFBV3RHLEtBQUtzRyxVQUNoQjVCLE9BQVExRSxLQUFLMEUsT0FDYmlDLGFBQWMzRyxhQUVWZCxXQUNFTSxNQUFNTixJQVFwQjBILGFBQ083QixRQUFTLE9BQ1RDLFNBQVNHLGVBQWMsR0FNOUJPLFdBQ00xRixLQUFLNkUsUUFBUyxNQUNYQSxTQUFVLFFBRVQ2QixFQUFPOUksU0FBU2lKLGNBQWMsYUFDL0JDLG1CQUFxQkosRUFBS2YsTUFBTVEsV0FDaENSLE1BQU1RLFNBQVcsU0FDbkJuRyxLQUFLOEUsYUFDREEsT0FBT2EsTUFBTXJLLFFBQVUsUUFDekIwRSxLQUFLOEUsT0FBT2lDLGdCQUNSakMsT0FBT2lDLGFBRU4vRyxLQUFLMkUsY0FBY2UsV0FDdEJmLGNBQWNlLFFBUXpCRyxVQUNLN0YsS0FBSzZFLFFBQVMsTUFDVkEsU0FBVSxRQUVUNkIsRUFBTzlJLFNBQVNpSixjQUFjLFdBQ2pDN0csS0FBSzhHLHFCQUNEbkIsTUFBTVEsU0FBV25HLEtBQUs4RyxxQkFFdEJuQixNQUFNUSxTQUFXLEdBRXJCbkcsS0FBSzhFLGdCQUNEQSxPQUFPYSxNQUFNckssUUFBVSxPQUN6QjBFLEtBQUs4RSxPQUFPOUMsZUFFTjhDLE9BQU85QyxjQUNOOUMsV0FDRU0sTUFBTU4sU0FHVmMsS0FBSzJFLGNBQWNrQixXQUN0QmxCLGNBQWNrQixTQU0zQixZQUFvQm1CLEVBQVNyQixhQUNqQjVKLEtBQVE0SixJQUNSQSxNQUFNNUosR0FBUTRKLEVBQU01Sjs7O0dDcFB6QixTQUNMMkQsbUJBQ095QyxPQUFTLElBQUk4RSxRQUNiQyxPQUFTLElBQUlDLFFBQ2JDLFNBQVcsVUFDWEMsUUFBVSxVQUNWQyxRQUFTLE9BQ1RDLFFBQVMscUJBNEJkckssR0FBS29FLFFBQ0hBLEVBdEMrQixXQXVDL0JvRCxTQUNBL0YsZ0JBQ0FnRyxZQUNBbkwsWUFDQW9MLEdBQ0UsT0FFRDVFLEtBQUtzSCxhQUNBLElBQUlySCxNQUFNLG1DQUVicUgsUUFBUyxPQUdURCxRQUFVLElBQUlHLEdBQWF0SyxFQUFLLENBQ25Db0UsUUFBQUEsRUFDQW9ELE9BQUFBLEVBQ0EvRixPQUFBQSxFQUNBZ0csY0FBQUEsRUFDQW5MLFVBQUFBLEVBQ0FvTCxVQUFBQSxTQUtHc0MsT0FBTzdFLE9BQU8sZUFBZ0JyQyxLQUFLcUgsZUFJbEN2SixFQUFTMkosRUFBU3ZLLEdBQUtZLG1CQUN4Qm9KLE9BQU9RLE9BQU81SixFQUFRLENBQ3pCYSxPQUFRcUIsS0FBS3FILFFBQVExSSxPQUNyQmlGLGtCQUFrQixVQUlkNUQsS0FBS3FILFFBQVFyQyxTQUFTSyxlQUd2QitCLGVBQWlCcEgsS0FBS21DLE9BQU93RixRQUFRN0osRUFBUSxDQUNoRGEsT0FBUXFCLEtBQUtxSCxRQUFRMUksU0FFaEJxQixLQUFLb0gsU0FHZHBGLFFBQ01oQyxLQUFLdUgsY0FDRkEsUUFBUyxPQUNURixRQUFRckMsU0FBU00sZUFDakI0QixPQUFPbEYsYUFDUEcsT0FBT0g7Ozs7OztHQ3JGWCxTQUNMdEMsYUFBWWtJLGtCQUNWQSwwQkFDQUMsMkJBQ0FDLFVBQ0FDLFNBR0szRSxLQUFPLHlCQUNQNEUsbUJBQXFCSixPQUNyQkMsd0JBQTBCQSxPQUMxQkMseUJBQTJCQSxPQUMzQkMsUUFBVUEsbUJBR0E3SyxTQUlUOEMsS0FBS2dJLG1CQUFtQnRDLGFBQ3hCdUMsRUFBWSxJQUFJQyxHQUFpQmhMLEVBQUssQ0FDMUMxRCxVQUFXLGdDQUVIb04sVUFDQWxCLE9BTUh1QyxFQUFVdEosT0FHbkJ3SixZQUFZQyxRQUlMQyxTQUFXRDs7Ozs7O0dDckNiLFNBQ0wxSSxhQUFZa0ksa0JBQ1ZBLDBCQUNBQyxhQUNBUyxVQUNBUCxTQUdLM0UsS0FBTyx1QkFDUDRFLG1CQUFxQkosT0FDckJDLHdCQUEwQkEsT0FDMUJTLFdBQWFBLE9BQ2JQLFFBQVVBLG1CQUdBN0ssU0FJVDhDLEtBQUtnSSxtQkFBbUJ0QyxhQUN4QnVDLEVBQVksSUFBSUMsR0FBaUJoTCxZQUM3QjBKLFVBQ0FsQixPQU1IdUMsRUFBVXRKLE9BR25Cd0osWUFBWUMsUUFJTEMsU0FBV0Q7Ozs7O0dDdkNiLFNBQ0wxSSxZQUFZa0ksUUFDTEksbUJBQXFCSixnQkFHZFcsZ0JBRUN2SSxLQUFLZ0ksbUJBQW1CUSxTQUFTQyxLQUM1QyxJQUFJQyxHQUF1Qm5FLE9BQU9DLE9BQ2hDLENBQUNvRCxrQkFBbUI1SCxLQUFLZ0ksb0JBQXFCTyxpQkFHeENJLGdCQUVHM0ksS0FBS2dJLG1CQUFtQlEsU0FBU0MsS0FDNUMsSUFBSUcsR0FBcUJyRSxPQUFPQyxPQUM5QixDQUFDb0Qsa0JBQW1CNUgsS0FBS2dJLG9CQUFxQlc7Ozs7O0dDZHRELE1BQU1FLEdBQWMsQ0FBQyxvQkFBcUIsbUJBRW5DLGlCQ0hBLE1BQ0xuSixZQUFZb0osUUFHTEEsY0FBZ0JyQixFQUFTcUIsR0FBZWhMLFlBQ3hDcUUsT0FBUyxVQUNUaUYsU0FBVyxVQUNYakYsT0FBUyxJQUFJOEUsUUFDYkMsT0FBUyxJQUFJQyxRQUViNEIsU0FBVyxVQUNYQyxZQUFhLDhCQVdiNUIsZUFBaUJwSCxLQUFLbUMsT0FBT3dGLFFBQVEzSCxLQUFLOEksb0JBQzFDRSxZQUFhLE9BQ2JELFNBQVcvSSxLQUFLb0gsU0FBUy9FLE9BQU8sZUFBZ0IsQ0FDbkRFLFVBQVcsQ0FBQyxRQUFTLE9BQVEsZUFFMUIyRSxPQUFPUSxPQUFPMUgsS0FBSzhJLGVBQ2pCOUksS0FBS29ILDJCQVFScEgsS0FBS2dKLGlCQUNELElBQUkvSSxNQUFNLGlFQUVaRCxLQUFLK0ksU0FBU25DLFFBQ2I1RyxLQU1UZ0MsUUFDS2hDLEtBQUtnSixrQkFDRDlCLE9BQU9sRixhQUNQRyxPQUFPSCxhQUNQZ0gsWUFBYSxvQkFRaEJoSixLQUFLZ0osaUJBQ0QsSUFBSS9JLE1BQ1IsdUVBRUdELEtBQUsrSSxTQUFTckQsd0JBT2pCMUYsS0FBS2dKLGlCQUNELElBQUkvSSxNQUNSLHVFQUVHRCxLQUFLK0ksU0FBU2xEOzs7SURyRXZCbkcsWUFBWXVKLE1BQ21CLGlCQUFuQkEsUUFDRixJQUFJekwsVUFBVSw0Q0FFaEJ5TCxRQUNEVCxTQUFXLElBQUlVLEdBQWlCLGlCQUNuQi9GLEdBR1BBLEVBQU1rRixVQUFZMUcsUUFBUWpCLE9BQy9CLElBQUlLLGFBQ0YsOENBQStDLDBDQU1qRHFHLFFBQWlCK0IsTUFBTXhCLHNCQUd4QlQsT0FBTzdFLE9BQU8sb0JBQXFCLElBQUkrRyxHQUF5QnBKLGFBRy9EQSxLQUFLNEcsUUFFSlEsRUFHVGxHLGlCQUFpQm9DLEVBQVdaLE9BQ3RCbUcsR0FBWXBMLFNBQVM2RixTQUNqQixJQUFJdkMsYUFDUiwyQkFBMkJ1QyxLQUFjLDRCQUV0Q3RELEtBQUt3SSxTQUFTdEgsaUJBQWlCb0MsRUFBV1osR0FHbkRULG9CQUFvQnFCLEVBQVdaLE9BQ3pCbUcsR0FBWXBMLFNBQVM2RixTQUNqQixJQUFJdkMsYUFDUiwyQkFBMkJ1QyxLQUFjLDRCQUV0Q3RELEtBQUt3SSxTQUFTdkcsb0JBQW9CcUIsRUFBV1o7Ozs7O0dFaERqRCxTQUNMaEQsWUFBWXhDLEVBQUtrSyxTQUNUaUMsRUFBU2pDLEVBQVN4RyxJQUFJLGtCQUFtQixDQUM3QzJCLFVBQVcsQ0FBQyxTQUFVLE1BQU8sT0FBUSxNQUFPLE1BQU8sbUJBRTdDK0csS0FBY0QsRUFDRixRQUFmQyxTQUNJQSxHQUFjRCxFQUFPQyxHQUFZQyxLQUFLdkosS0FBTTlDLFNBR2hEc00sV0FBYUgsRUFBT3RILElBQUl3SCxLQUFLdkosS0FBTTlDLGFBR2hDNkssRUFBUzBCLEtBS0ZDLE1BQVFELEVBQWVDLE9BQVMsU0FDekNDLEVBQVdGLEVBQWVDLE1BQU1FLFNBQ3BDQyxPQVFrQjNNLEVBUkg0TSxFQUFLdkQsSUFTakIsSUFBSTVFLG1CQUNIb0ksRUFBTSxJQUFJQyxRQUNaQyxZQUFjLGNBQ2RDLE9BQVMsU0FDUEMsRUFBU3ZNLFNBQVNDLGNBQWMsZ0JBQzlCdU0sRUFBTUQsRUFBT0UsV0FBVyxRQUN2QjlPLE9BQVN3TyxFQUFJeE8sU0FDYmMsTUFBUTBOLEVBQUkxTixRQUNmaU8sVUFBVVAsRUFBSyxFQUFHLFNBQ2hCUSxFQUFVSixFQUFPSyxjQUNmRCxLQUNDLFFBR1BFLFFBQVUsSUFBTWhLLEVBQVEsUUFDeEI4RixJQUFNckosTUF4QmlCNkIsWUFDbEIyTCxhQUFlQSxLQU81QixJQUF3QnhOOzs7OztvQkFMZHlFLFFBQVFnSixJQUFJaEIsR0FDWDNKLEtBQUt3SixXQUFXekIsRUFBUzBCLElDdEI3QixTQUNML0osWUFBWXhDLEVBQUtrSyxVQUNZLGlCQUFSbEssUUFDWCxJQUFJTSxVQUFVLDBDQUVqQm9OLE1BQVEsSUFBSUMsR0FBZ0IzTixFQUFLa0ssaURBV2pCMEQsVUFBVUMsb0JBQW9CQyxZQUFZQyxRQUM3RCxDQUFDbFAsS0FBTSx1QkFDS21QOzs7Ozs7R0NsQlgsU0FDTHhMLFlBQVl4QyxFQUFLa0ssVUFDWSxpQkFBUmxLLFFBQ1gsSUFBSU0sVUFBVSwwQ0FFakIyTixrQkFBb0IsSUFBSUMsR0FBa0JsTyxFQUFLa0s7Ozs7O0dDTGpELFNBQ0wxSCxZQUFZMEgsUUFDTGlFLE1BQVMsZ0JBQ1BDLGdCQUFrQmxFLE9BQ2xCbUUsUUFBVXZMLEtBQUtzTCxVQUFVMUssSUFBSSxxQkFBc0IsQ0FDdEQyQixVQUFXLENBQ1QsV0FBWSxhQUFjLGtCQUFtQixzQkFKckMsa0JBZ0JEckYsZ0JBQ1A4QyxLQUFLcUwsY0FFQ3JMLEtBQUt1TCxRQUFRQyxTQUFTLGFBQWN0TyxHQUN6QyxJQUFJdU8sR0FBOEJ2TyxFQUFLOEMsS0FBS3NMLDRCQVdwQ3BPLGdCQUNUOEMsS0FBS3FMLE1BRUpyTCxLQUFLdUwsUUFBUUcsV0FBVyxhQUFjeE8seUJBV3pCQSxnQkFDZDhDLEtBQUtxTCxlQUNDckwsS0FBS3VMLFFBQVFJLGdCQUFnQixhQUFjek8sSUFJaEQsSUFBSXVPLEdBQThCdk8sRUFBSzhDLEtBQUtzTCxXQUYxQywyQkFjV3BPLGdCQUNkOEMsS0FBS3FMLFlBQ0VyTCxLQUFLdUwsUUFBUUssZ0JBQWdCLGFBQWMxTzs7Ozs7O0dDdkVyRCxTQUNMd0MsWUFBWW1NLEVBQVV6TSxHQUFNME0sMEJBQUNBLEVBQTRCLElBQU0sT0FDdEMsaUJBQWJELFFBQ0YsSUFBSXJPLFVBQVUscUNBRWpCNEYsS0FBTyxXQUNQeUksU0FBV0EsT0FDWHpNLEtBQU9BLE9BQ1BXLFFBQVUsQ0FBQytMLDBCQUFBQTs7Ozs7O0dDQ2IsU0FDTHBNLFlBQVkwSCxRQUNMMkUsNEJBQThCLENBQ2pDbkwsSUFBS2tLLFVBQVVrQixhQUFlbEIsVUFBVWtCLFlBQVlwTCxLQUNsRGtLLFVBQVVrQixZQUFZcEwsSUFBSTJJLEtBQUt1QixVQUFVa0IsYUFDM0NDLE1BQU9uQixVQUFVa0IsYUFBZWxCLFVBQVVrQixZQUFZQyxPQUNwRG5CLFVBQVVrQixZQUFZQyxNQUFNMUMsS0FBS3VCLFVBQVVrQixtQkFHMUNYLE1BQVMsZ0JBQ1BFLGVBQWlCbkUsR0FBVXhHLElBQUksdUJBQXdCLENBQzFEMkIsVUFBVyxDQUNULENBQUN4RyxLQUFNLE1BQU9nRSxRQUFTLENBQUN1QixRQWZILElBZ0JyQixDQUFDdkYsS0FBTSxRQUFTZ0UsUUFBUyxDQUFDdUIsUUFmSCxRQVdmLGFBVXVCdkIsRUFBVSxPQUM1Q0EsRUFBUW1NLElBQUssT0FDUmxNLEtBQUtxTCxZQUNML0MsUUFBbUJ0SSxLQUFLdUwsUUFBUTNLLElBQUliLFVBQ3RDdUksRUFLRyxJQUFJNkQsR0FBYzdELEVBQVd1RCxTQUFVdkQsRUFBV2xKLE1BSGhELFFBS1JZLEtBQUsrTCw0QkFBNEJuTCxXQUMzQlosS0FBSytMLDRCQUE0Qm5MLElBQUliLFNBRXhDLElBQUlnQixhQUFhLG1CQUFvQixpQ0FHakN1SCxNQUNQQSxhQUFzQjZELEdBQWUsT0FDaENuTSxLQUFLcUwsWUFDTHhLLFFBQWViLEtBQUt1TCxRQUFRVSxNQUFNM0QsVUFDcEN6SCxFQUtHLElBQUlzTCxHQUFjdEwsRUFBT2dMLFNBQVVoTCxFQUFPekIsTUFIeEMsUUFLUlksS0FBSytMLDRCQUE0QkUsYUFDM0JqTSxLQUFLK0wsNEJBQTRCRSxNQUFNM0QsU0FFMUMsSUFBSXZILGFBQWEsbUJBQW9COzs7OztHQ3ZEeEMsU0FDTHJCLFlBQVkwSCxRQUNMaUUsTUFBUyxnQkFDUEUsZUFBaUJuRSxHQUFVeEcsSUFBSSxvQkFBcUIsQ0FDdkQyQixVQUFXLENBQ1QsUUFDQSxDQUFDeEcsS0FBTSxVQUFXZ0UsUUFBUyxDQUFDdUIsUUFSSCxJQVN6QixhQUxRLGVBVUo4SyxnQkFDSnBNLEtBQUtxTCxZQUNFckwsS0FBS3VMLFFBQVFjLE1BQU1ELGlCQUdwQkEsZ0JBQ05wTSxLQUFLcUwsWUFDRXJMLEtBQUt1TCxRQUFRTixRQUFRbUIsZ0JBR3ZCQSxnQkFDTHBNLEtBQUtxTCxZQUNFckwsS0FBS3VMLFFBQVFlLE9BQU9GOzs7OztHQ2pCckMsTUFBTUcsR0FBbUIsb0NBQ3ZCQyxtQkFBbUJwUCxPQUFPQyxTQUFTUyxRQVNyQyxJQUFJd0osR0FDRzNFLGtCQUF3QjhKLEVBQWNGLFdBQ3hDakYsU0FJTSxFQUlKM0UsZUFBb0I4SixFQUFjRixVQUVqQ25GLEdBRGEsSUFBSXNGLElBQ0tDLGFBQWFGLEVBQWEsQ0FDcERqVCxVQUFXLHNCQUVYOEgsUUFBUyxNQUdMcUUsRUFBUS9ILFNBQVNDLGNBQWMsV0FDL0J1SSxZQUFZeEksU0FBU3lJLGVBQ3pCLHlJQUdPSyxLQUFLTixZQUFZVCxTQUVwQmlILEVBQVcsS0FHUjVCLFlBQWMsSUFBSTZCLEdBQWtCekYsS0FDcEMwRixtQkFBcUIsSUFBSUEsR0FBbUIxRixLQUM1QzJGLGtCQUFvQkEsS0FDcEIzQixrQkFBb0JBLEtBQ3BCWSxZQUFjLElBQUlnQixHQUFxQjVGLEtBQ3ZDK0UsY0FBZ0JBLGFBR2ZwQixvQkFBc0I2QixFQUc3QixnQkFBaUI5QixxQkFDUmtCLFlBQVlwTCxJQUFNZ00sRUFBU1osWUFBWXBMLElBQUkySSxLQUNuRHFELEVBQVNaLHVCQUNEQSxZQUFZQyxNQUFRVyxFQUFTWixZQUFZQyxNQUFNMUMsS0FDdkRxRCxFQUFTWix3QkFFREEsWUFBY1ksRUFBU1osMEJBRTVCWixrQkFBb0JBLFVBQ3BCZSxjQUFnQkEsR0FFaEJTLEVBM0NBSyxDQUFLUiwwa0JDd1NkLE9BQWU5RSxHQTNSVXVELElBQ2hCLENBQ0xnQyxVQUFXQyxFQUFnQmpDLE9BSUhrQyxLQUMxQkMsZUFBZ0JDLEVBQW1CRCxFQUFnQkQsR0FDbkRHLG1CQUFvQkQsRUFBbUJDLEVBQW9CSCxHQUMzREksbUJBQW9CRixFQUFtQkUsRUFBb0JKLEdBQzNESyxpQkFBa0JILEVBQW1CRyxFQUFrQkwsR0FDdkRNLG9CQUFxQkosRUFBbUJJLEVBQXFCTixHQUM3RE8sbUJBQW9CTCxFQUFtQkssRUFBb0JQLEdBQzNEUSxxQkFBc0JOLEVBQW1CTSxFQUFzQlIsR0FDL0RTLFdBQVlQLEVBQW1CTyxFQUFZVCxHQUMzQ1UsV0FBWVIsRUFBbUJRLEVBQVlWLE1BNFE5QnpGLEVBelFNdk8sVUFDYjhULFVBQ0pBLEVBQ0FHLGlCQUNBTyx1QkFDQUQscUJBQ0FGLG1CQUNBQyxzQkFDQUcsOEJBQ0FFLHFCQUNBQyxZQUNBQyxHQUNFN1UsR0FDRThVLEVBQUVBLEdBQU1DLElBRVJDLEVBQVdsQixFQUFVdE0sSUFBSSxTQUFXLElBRW5DeU4sRUFBVUMsR0FBZUMseUJBQVNILFdBQVVyUyxPQUM1Q3lTLEVBQVlDLEdBQWlCRixtQkFBUyxLQUN0Qy9PLEVBQU9rUCxHQUFZSCxvQkFBUyxJQUM1QkksRUFBZUMsR0FBb0JMLG9CQUFTLE9BRS9DbkwsRUFBTyx3QkFlRCxLQWJvQlQscUJBRXBCa00sRUFBVyxHQUFHQyxFQUFPQyxvQkFBb0JDLGtDQUFrQ3hDLG1CQUMvRXBQLE9BQU9DLFNBQVNTLGdCQUdabVIsR0FBa0JKLFdBQ2hCSyxJQUFJLHlDQUNMaFEsV0FDQ00sTUFBTSwwQkFBMkJOLFVBTTFDLHlCQUVPLFFBQ0lvUCxFQUFZRixFQUFTclMsUUFDaEMsQ0FBQ3FTLEVBQVNyUyxhQUVQb1QsRUFBa0JqUSxNQUNwQnVILHNCQVNFMkksRUFBdUIsV0FDckJyVCxFQUFPc1MsRUFBU2dCLE9BQ2pCdFQsR0FDRHFTLEVBQVNyUyxLQUFLc1QsU0FBV3RULEtBQ1pxUyxFQUFTelIsR0FBSVosSUFLMUJ1VCxFQUFXLFFBQ0ksS0FBZmQsU0FBMEIsS0FDMUJlLEVBQWNmLEVBQVdhLFVBQWdCLGlCQUNwQ0csRUFBb0JoQixFQUFXYSxrQkFFN0IsSUFDRixJQUgrQyxnQkFNL0MsSUFDRixHQUdISSxFQUFnQnZRLE1BQ2xCdUgsaUJBQ0c2SSxNQUNRLFVBQVRsTSxJQUF1Q29MLFFBQVlKLFdBQVV6UixJQUMvQyxRQUFUeUcsS0FBbUNvTCxRQUFZSixXQUFVelIsTUFLOUQrUyxFQUEyQnhRLE1BQ2RBLEVBQUV5USxjQUFjaFQsNEJBc0NoQyxNQUFELENBQUtuRCxVQUFXb1csb0JBQ2IsVUFBRCxDQUFTcFcsVUFBV29XLG9CQUNqQixVQUFELENBQVNwVyxVQUFXb1csb0JBQ2pCLE1BQUQsQ0FBS3BXLFVBQVdvVyxvQkFDYixNQUFELENBQUtySixLcEJ4SnVCc0osRW9Cd0pNQyxFQUFRQyxTcEJ4SklDLFFvQndKTTVCLFdBQVV6UixHcEJ2Sm5Fa1QsR0FBWUcsR0FDWkgsRUFBUUksUUFBUUQsS0FDZCxXQUFRQyxRQUFRRCxHQUFRRSx1QkFBY0MsZUFMQSwwQ29CMkpkLE1BQXBCcEMsbUJBQ0VxQyxFQUFELENBQVE1VyxVQUFXb1csR0FBa0JTLFFBQVMsSUFBTXRDLEVBQWlCalIsR0FBZXdULGVBQWEsbUJBQzlGQyxFQUFELHdCQUlMLE1BQUQsQ0FBSy9XLFVBQVdvVyxvQkFDYixPQUFELENBQU1wVyxVQUFXb1csb0JBQ2RZLEVBQUQsQ0FDRXZWLE9BQU8sT0FDUHdWLEtBQUssUUFDTEMsTUFBT3hDLEVBQUUsc0NBQ1RuUyxLQUFLLFdBQ0w3QixRQUFRLFdBQ1JPLE1BQU80VCxHQUFZLEdBQ25Cc0MsU0EvRmdCelIsTUFDaEJBLEVBQUUwUixPQUFPblcsT0FDaEJ5RSxFQUFFMFIsT0FBT25XLFVBQXdCLElBOEYxQm9XLFVBQVkzUixJQUNJLFVBQVZBLEVBQUU0UixPQUFnQzVSLElBRXhDMUYsVUFBV29XLEdBQ1hwUSxNQUFPbVAsRUFDUG9DLFdBQVksQ0FDVkMsNkJBQ0c3WCxFQUFELENBQWdCYSxTQUFTLHVCQUN0QixJQUFELENBQUdzRCxLQUFLLElBQUk5RCxVQUFXb1csR0FBMEJTLFFBQVNsQixtQkFDdkQ4QixFQUFELENBQU96WCxVQUFXb1csMkJBTzdCLEtBQUQsS0FDMEIsNEJBQWJzQixVQUNQaEQsRUFBRSxrQ0FDRkEsRUFBRSxpQ0FBa0Msb0JBQ3ZDLE9BQUQsV0FBT0UsV0FBVThDLFVBQWdCLHFCQUVsQyxLQUFELE1BQzBCLFdBQWJBLFVBQTZDLFVBQXRCOUMsRUFBUzhDLDJCQUN4QyxNQUFELENBQUtiLFFBaEZFMU4sTUFBT3pELElBQ0YsTUFBcEI2TyxJQUEyQyxNQUNoQixNQUF0QkMsTUFBK0MsU0FDbERtRCxNQTZFbUNqRCxFQUFFLGtDQUdWLHdCQUFka0QsNkJBQ1IsS0FBRCxLQUNHbEQsRUFBRSxvQ0FBb0MsS0FBR0UsRUFBU2dELGVBS3pEbkQsbUNBRTBCLDRCQUFiaUQsMkJBQ1IsVUFBRCxDQUFTMVgsVUFBV29XLG9CQUNqQnpVLEVBQUQsQ0FBWWpCLFFBQVEsS0FBS1YsVUFBV29XLElBQ2pDMUIsRUFBRSx1REFHSixPQUFELENBQU1tRCxTQUFVNUIsbUJBQ2JlLEVBQUQsQ0FDRWhYLFVBQVdvVyxHQUNYYSxLQUFLLFFBQ0xhLFlBQWFwRCxFQUFFLHVDQUNmaFUsUUFBUSxXQUNSeVcsU0FwSVN6UixHQUFNdVAsRUFBY3ZQLEVBQUUwUixPQUFPblcsT0FxSXRDOFcsT0FBUWpDLEVBQ1I5UCxNQUFBQSxFQUNBZ1MsV0FBWWhTLEVBQVEwTyxFQUFFLHlDQUEyQyxLQUNqRTZDLFdBQVksQ0FDVkMsNkJBQ0c3WCxFQUFELENBQWdCYSxTQUFTLE1BQU1xVyxRQUFTWixtQkFDckMsSUFBRCxDQUFHblMsS0FBSyxJQUFJOUQsVUFBV29XLG9CQUNwQjZCLEVBQUQsQ0FBTWpZLFVBQVdvVyxZQVNULDRCQUFic0IsMkJBQ1IsVUFBRCxDQUFTMVgsVUFBV29XLG9CQUNqQnpVLEVBQUQsQ0FBWWpCLFFBQVEsS0FBS1YsVUFBV29XLElBQ2pDMUIsRUFBRSw2Q0FNSmtDLEVBQUQsQ0FBUUMsUUFBUyxJQUFNdEMsRUFBaUJqUixHQUFvQnRELFVBQVdvVyxJQUNwRTFCLEVBQUUsa0RBS2UsNEJBQWJnRCwyQkFDUixVQUFELENBQVMxWCxVQUFXb1csb0JBQ2pCelUsRUFBRCxDQUFZakIsUUFBUSxLQUFLVixVQUFXb1csSUFDakMxQixFQUFFLHdEQUVKLE1BQUQsQ0FBSzFVLFVBQVdvVyxvQkFDYixJQUFELENBQUd0UyxLQUFLLElBQUlYLEdBQUcsV0FBVzBULFFBQVNYLG1CQUNoQ3hULEVBQUQsQ0FBY0csTUFBTSxLQUFLZCxPQUFPLEtBQUtlLFFBQVEsK0JBRTlDLElBQUQsQ0FBR2dCLEtBQUssSUFBSVgsR0FBRyxTQUFTMFQsUUFBU1gsbUJBQzlCalQsRUFBRCxDQUFZSixNQUFNLEtBQUtkLE9BQU8sS0FBS2UsUUFBUSwrQkFFNUMsSUFBRCxDQUFHZ0IsS0FBSyxJQUFJWCxHQUFHLFlBQVkwVCxRQUFTWCxtQkFDakM5UyxFQUFELENBQWNQLE1BQU0sS0FBS2QsT0FBTyxLQUFLZSxRQUFRLCtCQUU5QyxJQUFELENBQUdnQixLQUFLLElBQUlYLEdBQUcsVUFBVTBULFFBQVNYLG1CQUMvQjdTLEVBQUQsQ0FBYVIsTUFBTSxLQUFLZCxPQUFPLEtBQUtlLFFBQVEsK0JBRTdDLElBQUQsQ0FBR2dCLEtBQUssSUFBSVgsR0FBRyxTQUFTMFQsUUFBU1gsbUJBQzlCZ0MsRUFBRCx3QkFHSHZXLEVBQUQsQ0FBWWpCLFFBQVEsS0FBS1YsVUFBV29XLElBQ2pDMUIsRUFBRSxxQ0FJYyxNQUF0QkYsbUJBQ0UsTUFBRCxDQUFLeFUsVUFBV29XLEdBQW9CUyxRQUFTLElBQU1yQyxHQUFtQixvQkFDbkUyRCxFQUFELFVwQnRSdUIsSUFBQzlCLEVBQWtCRyxPcUI5QjFELE1BUWE0QixHQUFheFksVUFDaEJ5WSxlQUFnQnpZLEdBQ2xCOFUsRUFBRUEsR0FBTUMsZ0NBRUosUUFDSSxLQUNYLG9CQUtBMkQsRUFBRCxDQUFhQyxVQUFXN0QsRUFBRSxvQ0FDdkIsUUFBRCxLQUNHLElBQ0EsaUtBT0Y4RCxHQUFELFFBS04sT0FBZXJLLEdBbENVdUQsSUFDaEIsTUFHbUJrQyxLQUMxQnlFLFlBQWF2RSxFQUFtQnVFLEVBQWF6RSxNQTZCaEN6RixDQUE2Q2lLIn0=
