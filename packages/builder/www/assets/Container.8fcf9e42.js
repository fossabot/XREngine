import{_ as a}from"./_app.e67b0e96.js";import{_ as i,r as t,h as e}from"./vendor.40ddfb4b.js";import{w as s,c as r,a as d}from"./capitalize.f4eb3e2e.js";var o=t.exports.forwardRef((function(i,s){var o=i.classes,n=i.className,p=i.component,m=void 0===p?"div":p,u=i.disableGutters,x=void 0!==u&&u,b=i.fixed,l=void 0!==b&&b,c=i.maxWidth,g=void 0===c?"lg":c,h=e(i,["classes","className","component","disableGutters","fixed","maxWidth"]);return t.exports.createElement(m,a({className:r(o.root,n,l&&o.fixed,x&&o.disableGutters,!1!==g&&o["maxWidth".concat(d(String(g)))]),ref:s},h))})),n=s((function(a){return{root:i({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:a.spacing(2),paddingRight:a.spacing(2),display:"block"},a.breakpoints.up("sm"),{paddingLeft:a.spacing(3),paddingRight:a.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(a.breakpoints.values).reduce((function(i,t){var e=a.breakpoints.values[t];return 0!==e&&(i[a.breakpoints.up(t)]={maxWidth:e}),i}),{}),maxWidthXs:i({},a.breakpoints.up("xs"),{maxWidth:Math.max(a.breakpoints.values.xs,444)}),maxWidthSm:i({},a.breakpoints.up("sm"),{maxWidth:a.breakpoints.values.sm}),maxWidthMd:i({},a.breakpoints.up("md"),{maxWidth:a.breakpoints.values.md}),maxWidthLg:i({},a.breakpoints.up("lg"),{maxWidth:a.breakpoints.values.lg}),maxWidthXl:i({},a.breakpoints.up("xl"),{maxWidth:a.breakpoints.values.xl})}}),{name:"MuiContainer"})(o);export{n as C};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFpbmVyLjhmY2Y5ZTQyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NvbnRhaW5lci9Db250YWluZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVHdXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaXhlZD17dHJ1ZX1gLiAqL1xuICAgIGZpeGVkOiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBicmVha3BvaW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbYnJlYWtwb2ludF07XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgICBhY2NbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0ge1xuICAgICAgICAgIG1heFdpZHRoOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieHNcImAuICovXG4gICAgbWF4V2lkdGhYczogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneHMnKSwge1xuICAgICAgbWF4V2lkdGg6IE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJzbVwiYC4gKi9cbiAgICBtYXhXaWR0aFNtOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnNtXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cIm1kXCJgLiAqL1xuICAgIG1heFdpZHRoTWQ6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubWRcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwibGdcImAuICovXG4gICAgbWF4V2lkdGhMZzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbGcnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5sZ1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJ4bFwiYC4gKi9cbiAgICBtYXhXaWR0aFhsOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCd4bCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhsXG4gICAgfSlcbiAgfTtcbn07XG52YXIgQ29udGFpbmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9IHByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHdXR0ZXJzLFxuICAgICAgX3Byb3BzJGZpeGVkID0gcHJvcHMuZml4ZWQsXG4gICAgICBmaXhlZCA9IF9wcm9wcyRmaXhlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZml4ZWQsXG4gICAgICBfcHJvcHMkbWF4V2lkdGggPSBwcm9wcy5tYXhXaWR0aCxcbiAgICAgIG1heFdpZHRoID0gX3Byb3BzJG1heFdpZHRoID09PSB2b2lkIDAgPyAnbGcnIDogX3Byb3BzJG1heFdpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImZpeGVkXCIsIFwibWF4V2lkdGhcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZpeGVkICYmIGNsYXNzZXMuZml4ZWQsIGRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZGlzYWJsZUd1dHRlcnMsIG1heFdpZHRoICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wibWF4V2lkdGhcIi5jb25jYXQoY2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb250YWluZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBtYXgtd2lkdGggb2YgdGhlIGNvbnRhaW5lci5cbiAgICogVGhlIGNvbnRhaW5lciB3aWR0aCBncm93cyB3aXRoIHRoZSBzaXplIG9mIHRoZSBzY3JlZW4uXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIGRpc2FibGUgYG1heFdpZHRoYC5cbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWydsZycsICdtZCcsICdzbScsICd4bCcsICd4cycsIGZhbHNlXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ29udGFpbmVyJ1xufSkoQ29udGFpbmVyKTsiXSwibmFtZXMiOlsiQ29udGFpbmVyIiwicHJvcHMiLCJyZWYiLCJjbGFzc2VzIiwiY2xhc3NOYW1lIiwiX3Byb3BzJGNvbXBvbmVudCIsImNvbXBvbmVudCIsIkNvbXBvbmVudCIsIl9wcm9wcyRkaXNhYmxlR3V0dGVycyIsImRpc2FibGVHdXR0ZXJzIiwiX3Byb3BzJGZpeGVkIiwiZml4ZWQiLCJfcHJvcHMkbWF4V2lkdGgiLCJtYXhXaWR0aCIsIm90aGVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4dGVuZHMiLCJjbHN4Iiwicm9vdCIsImNvbmNhdCIsImNhcGl0YWxpemUiLCJTdHJpbmciLCJ3aXRoU3R5bGVzIiwidGhlbWUiLCJfZGVmaW5lUHJvcGVydHkiLCJ3aWR0aCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmciLCJtYXJnaW5SaWdodCIsInBhZGRpbmdMZWZ0Iiwic3BhY2luZyIsInBhZGRpbmdSaWdodCIsImRpc3BsYXkiLCJicmVha3BvaW50cyIsInVwIiwiT2JqZWN0Iiwia2V5cyIsInZhbHVlcyIsInJlZHVjZSIsImFjYyIsImJyZWFrcG9pbnQiLCJ2YWx1ZSIsIm1heFdpZHRoWHMiLCJNYXRoIiwibWF4IiwieHMiLCJtYXhXaWR0aFNtIiwic20iLCJtYXhXaWR0aE1kIiwibWQiLCJtYXhXaWR0aExnIiwibGciLCJtYXhXaWR0aFhsIiwieGwiLCJuYW1lIl0sIm1hcHBpbmdzIjoieUpBUU8sSUE2REhBLHdCQUEwQyxTQUFtQkMsRUFBT0MsT0FDbEVDLEVBQVVGLEVBQU1FLFFBQ2hCQyxFQUFZSCxFQUFNRyxVQUNsQkMsRUFBbUJKLEVBQU1LLFVBQ3pCQyxPQUFpQyxJQUFyQkYsRUFBOEIsTUFBUUEsRUFDbERHLEVBQXdCUCxFQUFNUSxlQUM5QkEsT0FBMkMsSUFBMUJELEdBQTJDQSxFQUM1REUsRUFBZVQsRUFBTVUsTUFDckJBLE9BQXlCLElBQWpCRCxHQUFrQ0EsRUFDMUNFLEVBQWtCWCxFQUFNWSxTQUN4QkEsT0FBK0IsSUFBcEJELEVBQTZCLEtBQU9BLEVBQy9DRSxFQUFRQyxFQUF5QmQsRUFBTyxDQUFDLFVBQVcsWUFBYSxZQUFhLGlCQUFrQixRQUFTLDRDQUVyRU0sRUFBV1MsRUFBUyxDQUMxRFosVUFBV2EsRUFBS2QsRUFBUWUsS0FBTWQsRUFBV08sR0FBU1IsRUFBUVEsTUFBT0YsR0FBa0JOLEVBQVFNLGdCQUE2QixJQUFiSSxHQUFzQlYsRUFBUSxXQUFXZ0IsT0FBT0MsRUFBV0MsT0FBT1IsT0FDN0tYLElBQUFBLEdBQ0NZLFNBc0RVUSxHQW5JSyxTQUFnQkMsU0FDM0IsQ0FFTEwsS0FBTU0sRUFBZ0IsQ0FDcEJDLE1BQU8sT0FDUEMsV0FBWSxPQUNaQyxVQUFXLGFBQ1hDLFlBQWEsT0FDYkMsWUFBYU4sRUFBTU8sUUFBUSxHQUMzQkMsYUFBY1IsRUFBTU8sUUFBUSxHQUM1QkUsUUFBUyxTQUNSVCxFQUFNVSxZQUFZQyxHQUFHLE1BQU8sQ0FDN0JMLFlBQWFOLEVBQU1PLFFBQVEsR0FDM0JDLGFBQWNSLEVBQU1PLFFBQVEsS0FJOUJyQixlQUFnQixDQUNkb0IsWUFBYSxFQUNiRSxhQUFjLEdBSWhCcEIsTUFBT3dCLE9BQU9DLEtBQUtiLEVBQU1VLFlBQVlJLFFBQVFDLFFBQU8sU0FBVUMsRUFBS0MsT0FDN0RDLEVBQVFsQixFQUFNVSxZQUFZSSxPQUFPRyxVQUV2QixJQUFWQyxNQUNFbEIsRUFBTVUsWUFBWUMsR0FBR00sSUFBZSxDQUN0QzNCLFNBQVU0QixJQUlQRixJQUNOLElBR0hHLFdBQVlsQixFQUFnQixHQUFJRCxFQUFNVSxZQUFZQyxHQUFHLE1BQU8sQ0FDMURyQixTQUFVOEIsS0FBS0MsSUFBSXJCLEVBQU1VLFlBQVlJLE9BQU9RLEdBQUksT0FJbERDLFdBQVl0QixFQUFnQixHQUFJRCxFQUFNVSxZQUFZQyxHQUFHLE1BQU8sQ0FDMURyQixTQUFVVSxFQUFNVSxZQUFZSSxPQUFPVSxLQUlyQ0MsV0FBWXhCLEVBQWdCLEdBQUlELEVBQU1VLFlBQVlDLEdBQUcsTUFBTyxDQUMxRHJCLFNBQVVVLEVBQU1VLFlBQVlJLE9BQU9ZLEtBSXJDQyxXQUFZMUIsRUFBZ0IsR0FBSUQsRUFBTVUsWUFBWUMsR0FBRyxNQUFPLENBQzFEckIsU0FBVVUsRUFBTVUsWUFBWUksT0FBT2MsS0FJckNDLFdBQVk1QixFQUFnQixHQUFJRCxFQUFNVSxZQUFZQyxHQUFHLE1BQU8sQ0FDMURyQixTQUFVVSxFQUFNVSxZQUFZSSxPQUFPZ0IsUUEwRVAsQ0FDaENDLEtBQU0sZ0JBRE9oQyxDQUVadEIifQ==
