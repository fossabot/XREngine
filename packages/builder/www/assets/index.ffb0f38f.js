var e=Object.defineProperty,t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,a=(t,r,o)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[r]=o,n=(e,n)=>{for(var i in n||(n={}))r.call(n,i)&&a(e,i,n[i]);if(t)for(var i of t(n))o.call(n,i)&&a(e,i,n[i]);return e};import{r as i,h as s,c as l,_ as c,R as d,u as p}from"./vendor.40ddfb4b.js";import{w as m,c as u,a as h}from"./capitalize.f4eb3e2e.js";import{c as f,i as v,a as g}from"./createSvgIcon.f2e498dd.js";import{_ as x,F as b,V as y,a1 as E}from"./_app.e67b0e96.js";import{m as k}from"./makeStyles.dc74902c.js";import{u as w,M as C}from"./Modal.c801ca2c.js";import{P as z}from"./Paper.24cff5e5.js";import{I as S}from"./IconButton.32d4e708.js";import{u as N,B as M,T as P}from"./Typography.9d0f0940.js";import{B as D}from"./Backdrop.9ef065d7.js";import{S as I}from"./Slide.1e39d9a9.js";import{a as j,L as B}from"./List.52b49b17.js";import{i as T}from"./useControlled.e1604cb7.js";function L(e){return e}var H=i.exports.forwardRef((function(e,t){var r=e.classes,o=e.className,a=e.color,n=void 0===a?"primary":a,l=e.position,c=void 0===l?"fixed":l,d=s(e,["classes","className","color","position"]);return i.exports.createElement(z,x({square:!0,component:"header",elevation:4,className:u(r.root,r["position".concat(h(c))],r["color".concat(h(n))],o,"fixed"===c&&"mui-fixed"),ref:t},d))})),O=m((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(H),R=i.exports.forwardRef((function(e,t){var r=e.classes,o=e.className,a=e.color,n=void 0===a?"primary":a,l=e.disableShrink,c=void 0!==l&&l,d=e.size,p=void 0===d?40:d,m=e.style,f=e.thickness,v=void 0===f?3.6:f,g=e.value,b=void 0===g?0:g,y=e.variant,E=void 0===y?"indeterminate":y,k=s(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),w={},C={},z={};if("determinate"===E||"static"===E){var S=2*Math.PI*((44-v)/2);w.strokeDasharray=S.toFixed(3),z["aria-valuenow"]=Math.round(b),w.strokeDashoffset="".concat(((100-b)/100*S).toFixed(3),"px"),C.transform="rotate(-90deg)"}return i.exports.createElement("div",x({className:u(r.root,o,"inherit"!==n&&r["color".concat(h(n))],{determinate:r.determinate,indeterminate:r.indeterminate,static:r.static}[E]),style:x({width:p,height:p},C,m),ref:t,role:"progressbar"},z,k),i.exports.createElement("svg",{className:r.svg,viewBox:"".concat(22," ").concat(22," ").concat(44," ").concat(44)},i.exports.createElement("circle",{className:u(r.circle,c&&r.circleDisableShrink,{determinate:r.circleDeterminate,indeterminate:r.circleIndeterminate,static:r.circleStatic}[E]),style:w,cx:44,cy:44,r:(44-v)/2,fill:"none",strokeWidth:v})))})),V=m((function(e){return{root:{display:"inline-block"},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"$circular-rotate 1.4s linear infinite"},determinate:{transition:e.transitions.create("transform")},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{display:"block"},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"$circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},circleDeterminate:{transition:e.transitions.create("stroke-dashoffset")},"@keyframes circular-rotate":{"0%":{transformOrigin:"50% 50%"},"100%":{transform:"rotate(360deg)"}},"@keyframes circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}}),{name:"MuiCircularProgress",flip:!1})(R),_={WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},A=function(e){return x({color:e.palette.text.primary},e.typography.body2,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})};var F=m((function(e){return{"@global":{html:_,"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:x({margin:0},A(e),{"&::backdrop":{backgroundColor:e.palette.background.default}})}}}),{name:"MuiCssBaseline"})((function(e){var t=e.children,r=void 0===t?null:t;return e.classes,i.exports.createElement(i.exports.Fragment,null,r)})),W=i.exports.forwardRef((function(e,t){var r=e.absolute,o=void 0!==r&&r,a=e.classes,n=e.className,l=e.component,c=void 0===l?"hr":l,d=e.flexItem,p=void 0!==d&&d,m=e.light,h=void 0!==m&&m,f=e.orientation,v=void 0===f?"horizontal":f,g=e.role,b=void 0===g?"hr"!==c?"separator":void 0:g,y=e.variant,E=void 0===y?"fullWidth":y,k=s(e,["absolute","classes","className","component","flexItem","light","orientation","role","variant"]);return i.exports.createElement(c,x({className:u(a.root,n,"fullWidth"!==E&&a[E],o&&a.absolute,p&&a.flexItem,h&&a.light,"vertical"===v&&a.vertical),role:b,ref:t},k))})),G=m((function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:b(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)},vertical:{height:"100%",width:1},flexItem:{alignSelf:"stretch",height:"auto"}}}),{name:"MuiDivider"})(W),$={left:"right",right:"left",top:"down",bottom:"up"};var q={enter:y.enteringScreen,exit:y.leavingScreen},Q=i.exports.forwardRef((function(e,t){var r=e.anchor,o=void 0===r?"left":r,a=e.BackdropProps,n=e.children,l=e.classes,c=e.className,d=e.elevation,p=void 0===d?16:d,m=e.ModalProps,f=(m=void 0===m?{}:m).BackdropProps,v=s(m,["BackdropProps"]),g=e.onClose,b=e.open,y=void 0!==b&&b,E=e.PaperProps,k=void 0===E?{}:E,S=e.SlideProps,N=e.TransitionComponent,M=void 0===N?I:N,P=e.transitionDuration,j=void 0===P?q:P,B=e.variant,T=void 0===B?"temporary":B,L=s(e,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"]),H=w(),O=i.exports.useRef(!1);i.exports.useEffect((function(){O.current=!0}),[]);var R=function(e,t){return"rtl"===e.direction&&function(e){return-1!==["left","right"].indexOf(e)}(t)?$[t]:t}(H,o),V=i.exports.createElement(z,x({elevation:"temporary"===T?p:0,square:!0},k,{className:u(l.paper,l["paperAnchor".concat(h(R))],k.className,"temporary"!==T&&l["paperAnchorDocked".concat(h(R))])}),n);if("permanent"===T)return i.exports.createElement("div",x({className:u(l.root,l.docked,c),ref:t},L),V);var _=i.exports.createElement(M,x({in:y,direction:$[R],timeout:j,appear:O.current},S),V);return"persistent"===T?i.exports.createElement("div",x({className:u(l.root,l.docked,c),ref:t},L),_):i.exports.createElement(C,x({BackdropProps:x({},a,f,{transitionDuration:j}),BackdropComponent:D,className:u(l.root,l.modal,c),open:y,onClose:g,ref:t},L,v),_)})),X=m((function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}}),{name:"MuiDrawer",flip:!1})(Q),Y="undefined"==typeof window?i.exports.useEffect:i.exports.useLayoutEffect,J=i.exports.forwardRef((function(e,t){var r=e.alignItems,o=void 0===r?"center":r,a=e.autoFocus,n=void 0!==a&&a,c=e.button,d=void 0!==c&&c,p=e.children,m=e.classes,h=e.className,f=e.component,v=e.ContainerComponent,g=void 0===v?"li":v,b=e.ContainerProps,y=(b=void 0===b?{}:b).className,E=s(b,["className"]),k=e.dense,w=void 0!==k&&k,C=e.disabled,z=void 0!==C&&C,S=e.disableGutters,P=void 0!==S&&S,D=e.divider,I=void 0!==D&&D,B=e.focusVisibleClassName,L=e.selected,H=void 0!==L&&L,O=s(e,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),R=i.exports.useContext(j),V={dense:w||R.dense||!1,alignItems:o},_=i.exports.useRef(null);Y((function(){n&&_.current&&_.current.focus()}),[n]);var A=i.exports.Children.toArray(p),F=A.length&&T(A[A.length-1],["ListItemSecondaryAction"]),W=i.exports.useCallback((function(e){_.current=l.exports.findDOMNode(e)}),[]),G=N(W,t),$=x({className:u(m.root,h,V.dense&&m.dense,!P&&m.gutters,I&&m.divider,z&&m.disabled,d&&m.button,"center"!==o&&m.alignItemsFlexStart,F&&m.secondaryAction,H&&m.selected),disabled:z},O),q=f||"li";return d&&($.component=f||"div",$.focusVisibleClassName=u(m.focusVisible,B),q=M),F?(q=$.component||f?q:"div","li"===g&&("li"===q?q="div":"li"===$.component&&($.component="div")),i.exports.createElement(j.Provider,{value:V},i.exports.createElement(g,x({className:u(m.container,y),ref:G},E),i.exports.createElement(q,$,A),A.pop()))):i.exports.createElement(j.Provider,{value:V},i.exports.createElement(q,x({ref:G},$),A))})),K=m((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(J),U=i.exports.forwardRef((function(e,t){var r=e.classes,o=e.className,a=s(e,["classes","className"]),n=i.exports.useContext(j);return i.exports.createElement("div",x({className:u(r.root,o,"flex-start"===n.alignItems&&r.alignItemsFlexStart),ref:t},a))})),Z=m((function(e){return{root:{minWidth:56,color:e.palette.action.active,flexShrink:0,display:"inline-flex"},alignItemsFlexStart:{marginTop:8}}}),{name:"MuiListItemIcon"})(U),ee=i.exports.forwardRef((function(e,t){var r=e.children,o=e.classes,a=e.className,n=e.disableTypography,l=void 0!==n&&n,c=e.inset,d=void 0!==c&&c,p=e.primary,m=e.primaryTypographyProps,h=e.secondary,f=e.secondaryTypographyProps,v=s(e,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),g=i.exports.useContext(j).dense,b=null!=p?p:r;null==b||b.type===P||l||(b=i.exports.createElement(P,x({variant:g?"body2":"body1",className:o.primary,component:"span",display:"block"},m),b));var y=h;return null==y||y.type===P||l||(y=i.exports.createElement(P,x({variant:"body2",className:o.secondary,color:"textSecondary",display:"block"},f),y)),i.exports.createElement("div",x({className:u(o.root,a,g&&o.dense,d&&o.inset,b&&y&&o.multiline),ref:t},v),b,y)})),te=m({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(ee),re=i.exports.forwardRef((function(e,t){var r=e.classes,o=e.className,a=e.component,n=void 0===a?"div":a,l=e.disableGutters,c=void 0!==l&&l,d=e.variant,p=void 0===d?"regular":d,m=s(e,["classes","className","component","disableGutters","variant"]);return i.exports.createElement(n,x({className:u(r.root,r[p],o,!c&&r.gutters),ref:t},m))})),oe=m((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:c({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(re),ae={},ne=v.exports,ie=g.exports;Object.defineProperty(ae,"__esModule",{value:!0});var se=ae.default=void 0,le=ie(i.exports),ce=(0,ne(f).default)(le.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu");se=ae.default=ce;var de={},pe=v.exports,me=g.exports;Object.defineProperty(de,"__esModule",{value:!0});var ue=de.default=void 0,he=me(i.exports),fe=(0,pe(f).default)(he.createElement("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"ChevronLeft");ue=de.default=fe;var ve={},ge=v.exports,xe=g.exports;Object.defineProperty(ve,"__esModule",{value:!0});var be=ve.default=void 0,ye=xe(i.exports),Ee=(0,ge(f).default)(ye.createElement("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"ChevronRight");be=ve.default=Ee;var ke={},we=v.exports,Ce=g.exports;Object.defineProperty(ke,"__esModule",{value:!0});var ze=ke.default=void 0,Se=Ce(i.exports),Ne=(0,we(f).default)(Se.createElement("path",{d:"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12zm-5-7v2H8v-2h8z"}),"RemoveFromQueue");ze=ke.default=Ne;var Me={},Pe=v.exports,De=g.exports;Object.defineProperty(Me,"__esModule",{value:!0});var Ie=Me.default=void 0,je=De(i.exports),Be=(0,Pe(f).default)(je.createElement("path",{d:"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z"}),"ViewModule");Ie=Me.default=Be;var Te={},Le=v.exports,He=g.exports;Object.defineProperty(Te,"__esModule",{value:!0});var Oe=Te.default=void 0,Re=He(i.exports),Ve=(0,Le(f).default)(Re.createElement(Re.Fragment,null,Re.createElement("circle",{cx:"12",cy:"4",r:"2"}),Re.createElement("path",{d:"M15.89 8.11C15.5 7.72 14.83 7 13.53 7h-2.54C8.24 6.99 6 4.75 6 2H4c0 3.16 2.11 5.84 5 6.71V22h2v-6h2v6h2V10.05L18.95 14l1.41-1.41-4.47-4.48z"})),"EmojiPeople");Oe=Te.default=Ve;var _e={},Ae=v.exports,Fe=g.exports;Object.defineProperty(_e,"__esModule",{value:!0});var We=_e.default=void 0,Ge=Fe(i.exports),$e=(0,Ae(f).default)(Ge.createElement("path",{d:"M11 9h2v2h-2zm-2 2h2v2H9zm4 0h2v2h-2zm2-2h2v2h-2zM7 9h2v2H7zm12-6H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 18H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm2-7h-2v2h2v2h-2v-2h-2v2h-2v-2h-2v2H9v-2H7v2H5v-2h2v-2H5V5h14v6z"}),"Gradient");We=_e.default=$e;var qe={},Qe=v.exports,Xe=g.exports;Object.defineProperty(qe,"__esModule",{value:!0});var Ye=qe.default=void 0,Je=Xe(i.exports),Ke=(0,Qe(f).default)(Je.createElement("path",{d:"M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z"}),"SupervisorAccount");Ye=qe.default=Ke;var Ue={},Ze=v.exports,et=g.exports;Object.defineProperty(Ue,"__esModule",{value:!0});var tt=Ue.default=void 0,rt=et(i.exports),ot=(0,Ze(f).default)(rt.createElement("path",{d:"M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"}),"Dashboard");tt=Ue.default=ot;const at=k((e=>({root:{display:"flex"},appBar:{zIndex:e.zIndex.drawer+1,transition:e.transitions.create(["width","margin"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen}),backgroundColor:"#43484F"},appBarShift:{marginLeft:200,width:"calc(100% - 200px)",transition:e.transitions.create(["width","margin"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.enteringScreen})},menuButton:{marginRight:36,color:"white"},hide:{display:"none"},drawer:{width:200,flexShrink:0,whiteSpace:"nowrap"},drawerOpen:{width:200,transition:e.transitions.create("width",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.enteringScreen}),backgroundColor:"#1f252d"},drawerClose:{transition:e.transitions.create("width",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen}),overflowX:"hidden",width:e.spacing(7)+1,[e.breakpoints.up("sm")]:{width:e.spacing(9)+1},backgroundColor:"#1f252d"},toolbar:n({display:"flex",alignItems:"center",justifyContent:"flex-end",padding:e.spacing(0,1)},e.mixins.toolbar),content:{flexGrow:1,padding:e.spacing(3),backgroundColor:"#15171B",minHeight:"100vh"},backdrop:{zIndex:e.zIndex.drawer+1,color:"#fff"}})));function nt({children:e}){const t=at(),r=w(),[o,a]=d.useState(!1),[n,i]=d.useState(!1),{t:s}=p(),l=()=>{i(!0),setTimeout((()=>{i(!1)}),2e3)};return d.createElement("div",{className:t.root},d.createElement(F,null),d.createElement(O,{position:"fixed",className:u(t.appBar,{[t.appBarShift]:o})},d.createElement(oe,null,d.createElement(S,{color:"inherit",style:{color:"white"},"aria-label":"open drawer",onClick:()=>{a(!0)},edge:"start",className:u(t.menuButton,{[t.hide]:o})},d.createElement(se,null)),d.createElement(P,{variant:"h6"},s("social:dashboard.title")))),d.createElement(X,{variant:"permanent",className:u(t.drawer,{[t.drawerOpen]:o,[t.drawerClose]:!o}),classes:{paper:u({[t.drawerOpen]:o,[t.drawerClose]:!o})}},d.createElement("div",{className:t.toolbar},d.createElement(S,{onClick:()=>{a(!1)}},"rtl"===r.direction?d.createElement(be,null):d.createElement(ue,null))),d.createElement(G,null),d.createElement(B,null,d.createElement(E,{style:{textDecoration:"none"},to:"/admin"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(tt,{style:{color:"white"}})),d.createElement(te,{primary:s("social:dashboard.dashboard")}))),d.createElement(E,{style:{textDecoration:"none"},to:"/admin/users"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(Ye,{style:{color:"white"}})),d.createElement(te,{primary:s("social:dashboard.users")}))),d.createElement(E,{style:{textDecoration:"none"},to:"/admin/feeds"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(Ie,{style:{color:"white"}})),d.createElement(te,{primary:s("social:dashboard.feeds")}))),d.createElement(E,{style:{textDecoration:"none"},to:"/admin/armedia"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(Oe,{style:{color:"white"}})),d.createElement(te,{primary:s("social:dashboard.arMedia")}))),d.createElement(E,{style:{textDecoration:"none"},to:"/admin/thefeeds"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(ze,{style:{color:"white"}})),d.createElement(te,{primary:"Feeds"}))),d.createElement(E,{style:{textDecoration:"none"},to:"/editor/projects/create"},d.createElement(K,{style:{color:"white"},onClick:l,button:!0},d.createElement(Z,null,d.createElement(We,{style:{color:"white"}})),d.createElement(te,{primary:s("social:dashboard.editor")}))))),d.createElement("main",{className:t.content},d.createElement("div",{className:t.toolbar}),d.createElement("div",null,e),d.createElement(D,{className:t.backdrop,open:n},d.createElement(V,{color:"inherit"}))))}export{V as C,nt as D,L as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
