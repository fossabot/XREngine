# Copyright 2018 Google LLC All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Full example of a Fleet resource - a set of warm GameServers
# that are available to be allocated from.
# To allocate a GameServer from a Fleet, use a GameServerAllocation
#
{{- if .Values.gameserver.enabled }}
apiVersion: "agones.dev/v1"
kind: Fleet
# Fleet Metadata
# https://v1-14.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#objectmeta-v1-meta
metadata:
  name: {{ include "xr3ngine.gameserver.fullname" . }}
spec:
  # the number of GameServers to keep Ready or Allocated in this Fleet. Defaults to 0
  replicas: {{ .Values.gameserver.replicaCount }}
    # defines how GameServers are organised across the cluster.
    # Options include:
    # "Packed" (default) is aimed at dynamic Kubernetes clusters, such as cloud providers, wherein we want to bin pack
    # resources
    # "Distributed" is aimed at static Kubernetes clusters, wherein we want to distribute resources across the entire
    # cluster
    # scheduling: Packed
    # a GameServer template - see:
    # https://agones.dev/site/docs/reference/gameserver/ for all the options
    # strategy:
    # The replacement strategy for when the GameServer template is changed. Default option is "RollingUpdate",
    # "RollingUpdate" will increment by maxSurge value on each iteration, while decrementing by maxUnavailable on each
    # iteration, until all GameServers have been switched from one version to another.
    # "Recreate" terminates all non-allocated GameServers, and starts up a new set with the new details to replace them.
    # type: RollingUpdate
    # Only relevant when `type: RollingUpdate`
    # rollingUpdate:
    # the amount to increment the new GameServers by. Defaults to 25%
    # maxSurge: 25%
    # the amount to decrements GameServers by. Defaults to 25%
  # maxUnavailable: 25%
  template:
    # GameServer metadata
    metadata:
      labels:
        {{- include "xr3ngine.gameserver.labels" . | nindent 4 }}
    # GameServer specification
    spec:
      ports:
        - name: default
          portPolicy: Dynamic
          containerPort: 3030
          protocol: TCP
      health:
        initialDelaySeconds: 30
        periodSeconds: 60
        # Parameters for game server sidecar
        # sdkServer:
        # sdkServer log level parameter has three options:
        #  - "Info" (default) The SDK server will output all messages except for debug messages
        #  - "Debug" The SDK server will output all messages including debug messages
        #  - "Error" The SDK server will only output error messages
        # logLevel: Info
      # The GameServer's Pod template
      template:
        spec:
          serviceAccountName: {{ include "xr3ngine.gameserver.serviceAccountName" . }}
          containers:
            - name: {{ include "xr3ngine.gameserver.fullname" . }}
              image: "{{ .Values.gameserver.image.repository }}:{{ .Values.gameserver.image.tag }}"
              imagePullPolicy: {{ .Values.gameserver.image.pullPolicy }}
              envFrom:
                - configMapRef:
                    name: {{ include "xr3ngine.gameserver.fullname" . }}
                    optional: true

              env:
                - name: SERVER_MODE
                  value: "realtime"
                - name: KUBERNETES
                  value: "true"
                - name: MYSQL_USER
                  value: {{ .Values.mariadb.db.user }}
                - name: MYSQL_DATABASE
                  value: {{ .Values.mariadb.db.name }}
                - name: MYSQL_PASSWORD
                  {{- if not .Values.mariadb.enabled }}
                  value: {{ .Values.mariadb.db.password }}
                  {{- else }}
                  valueFrom:
                    secretKeyRef:
                      {{- if .Values.mariadb.existingSecret }}
                      name: {{ .Values.mariadb.existingSecret }}
                      {{- else }}
                      name: {{ template "xr3ngine.mariadb.fullname" . }}
                      {{- end }}
                      key: mariadb-password
                {{- end }}
                - name: MYSQL_HOST
                  value: {{ template "xr3ngine.mariadb.host" . }}
                - name: REDIS_ENABLED
                  value: "true"
                - name: REDIS_ADDRESS
                  value: "$({{ .Release.Name | upper }}_REDIS_MASTER_SERVICE_HOST)"
                - name: REDIS_PORT
                  value: "$({{ .Release.Name | upper }}_REDIS_MASTER_SERVICE_PORT)"
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-redis
                      key: redis-password
          initContainers:
            - name: init-redis
              image: busybox:1.28
              command: ['sh', '-c', 'until (printf "AUTH $REDIS_PASSWORD\r\nPING\r\n";) | nc $REDIS_ADDRESS $REDIS_PORT ; do echo waiting for redis-master; sleep 2; done']
              env:
                - name: REDIS_ADDRESS
                  value: "$({{ .Release.Name | upper }}_REDIS_MASTER_SERVICE_HOST)"
                - name: REDIS_PORT
                  value: "$({{ .Release.Name | upper }}_REDIS_MASTER_SERVICE_PORT)"
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-redis
                      key: redis-password
{{- end }}


