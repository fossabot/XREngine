import{_ as e}from"./_app.e67b0e96.js";import{r as o,h as r,R as t}from"./vendor.40ddfb4b.js";import{w as n,c as a,a as i}from"./capitalize.f4eb3e2e.js";function c(){for(var e=arguments.length,o=new Array(e),r=0;r<e;r++)o[r]=arguments[r];return o.reduce((function(e,o){return null==o?e:function(){for(var r=arguments.length,t=new Array(r),n=0;n<r;n++)t[n]=arguments[n];e.apply(this,t),o.apply(this,t)}}),(function(){}))}var l=o.exports.forwardRef((function(t,n){var c=t.children,l=t.classes,s=t.className,u=t.color,d=void 0===u?"inherit":u,m=t.component,f=void 0===m?"svg":m,p=t.fontSize,v=void 0===p?"medium":p,h=t.htmlColor,w=t.titleAccess,y=t.viewBox,S=void 0===y?"0 0 24 24":y,x=r(t,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return o.exports.createElement(f,e({className:a(l.root,s,"inherit"!==d&&l["color".concat(i(d))],"default"!==v&&"medium"!==v&&l["fontSize".concat(i(v))]),focusable:"false",viewBox:S,color:h,"aria-hidden":!w||void 0,role:w?"img":void 0,ref:n},x),c,w?o.exports.createElement("title",null,w):null)}));l.muiName="SvgIcon";var s=n((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(l);function u(o,r){var n=function(r,n){return t.createElement(s,e({ref:n},r),o)};return n.muiName=s.muiName,t.memo(t.forwardRef(n))}function d(e){var o,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function t(){for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];var i=this,c=function(){e.apply(i,n)};clearTimeout(o),o=setTimeout(c,r)}return t.clear=function(){clearTimeout(o)},t}function m(e){return e&&e.ownerDocument||document}function f(e){return m(e).defaultView||window}var p=o.exports.forwardRef((function(t,n){var i=t.classes,c=t.className,l=t.component,s=void 0===l?"div":l,u=t.square,d=void 0!==u&&u,m=t.elevation,f=void 0===m?1:m,p=t.variant,v=void 0===p?"elevation":p,h=r(t,["classes","className","component","square","elevation","variant"]);return o.exports.createElement(s,e({className:a(i.root,c,"outlined"===v?i.outlined:i["elevation".concat(f)],!d&&i.rounded),ref:n},h))})),v=n((function(o){var r={};return o.shadows.forEach((function(e,o){r["elevation".concat(o)]={boxShadow:e}})),e({root:{backgroundColor:o.palette.background.paper,color:o.palette.text.primary,transition:o.transitions.create("box-shadow")},rounded:{borderRadius:o.shape.borderRadius},outlined:{border:"1px solid ".concat(o.palette.divider)}},r)}),{name:"MuiPaper"})(p);export{v as P,s as S,c as a,f as b,u as c,d,m as o};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
