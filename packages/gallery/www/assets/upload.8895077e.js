var r=Object.defineProperty,e=(e,t,o)=>(((e,t,o)=>{t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o})(e,"symbol"!=typeof t?t+"":t,o),o);import{i as t}from"./vendor.40ddfb4b.js";import{C as o}from"./index.b0bd5cc1.js";class s extends Error{constructor(r){super(r),this.name=this.constructor.name,this.message=r,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(r).stack}}class n extends s{constructor(r,t){super(`${r}:\n  Cause:\n    ${function(r){if(!r)return"";if(r.message)return r.message;const e=r.target;return e?r.target.error&&r.target.error.message?e.error.message:r.target.src?`Failed to load "${e.src}"`:e instanceof XMLHttpRequest?`Network Error: ${e.status||"Unknown Status."} ${e.statusText||"Unknown Error. Possibly a CORS error."}`:`Unknown error on ${e}.`:`Unknown error: "${JSON.stringify(r)}"`}(t).replace(/\n/g,"\n    ")}`),e(this,"originalError"),this.originalError=t,this.stack+="\n"+t.stack}}const a=o.publicRuntimeConfig.apiServer,i=async(r,e,s,i,c)=>{const d=(()=>{const r=localStorage.getItem(o.publicRuntimeConfig.feathersStoreKey);if(null==r||0===r.length)throw new Error(t.t("editor:errors.notAuthenticated"));return r})();return await new Promise(((o,u)=>{const l=new XMLHttpRequest,p=()=>{l.abort();const r=new Error(t.t("editor:errors.uploadAborted"));r.name="AbortError",r.aborted=!0,u(r)};s&&s.addEventListener("abort",p),console.log("Posting to: ",`${a}/media`),l.open("post",`${a}/media`,!0),l.upload.addEventListener("progress",(r=>{e&&e(r.loaded/r.total)})),l.addEventListener("error",(r=>{s&&s.removeEventListener("abort",p),u(new n(t.t("editor:errors.uploadFailed"),r))})),l.addEventListener("load",(()=>{if(s&&s.removeEventListener("abort",p),l.status<300){const r=JSON.parse(l.responseText);o(r)}else u(new Error(t.t("editor:errors.uploadFailed",{reason:l.statusText})))}));const m=new FormData;c&&m.set("projectId",c),i&&m.set("fileIdentifier",i),m.set("media",r),l.setRequestHeader("Authorization",`Bearer ${d}`),l.send(m)}))};export{i as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
