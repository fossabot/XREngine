var e=Object.defineProperty,t=Object.defineProperties,n=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,s=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,a=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&s(e,n,t[n]);if(r)for(var n of r(t))i.call(t,n)&&s(e,n,t[n]);return e},c=(e,r)=>t(e,n(r));import{_,g as p,R as u,r as f,o as l,c as d,d as m,e as g,f as h,h as v,j as E}from"./vendor.40ddfb4b.js";import{C as y,_ as S}from"./index.b0bd5cc1.js";function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var D="function"==typeof Symbol&&Symbol.observable||"@@observable",T=function(){return Math.random().toString(36).substring(7).split("").join(".")},k={INIT:"@@redux/INIT"+T(),REPLACE:"@@redux/REPLACE"+T(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+T()}};function A(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function R(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(O(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(O(1));return n(R)(e,t)}if("function"!=typeof e)throw new Error(O(2));var o=e,i=t,s=[],a=s,c=!1;function _(){a===s&&(a=s.slice())}function p(){if(c)throw new Error(O(3));return i}function u(e){if("function"!=typeof e)throw new Error(O(4));if(c)throw new Error(O(5));var t=!0;return _(),a.push(e),function(){if(t){if(c)throw new Error(O(6));t=!1,_();var n=a.indexOf(e);a.splice(n,1),s=null}}}function f(e){if(!A(e))throw new Error(O(7));if(void 0===e.type)throw new Error(O(8));if(c)throw new Error(O(9));try{c=!0,i=o(i,e)}finally{c=!1}for(var t=s=a,n=0;n<t.length;n++){(0,t[n])()}return e}function l(e){if("function"!=typeof e)throw new Error(O(10));o=e,f({type:k.REPLACE})}function d(){var e,t=u;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(O(11));function n(){e.next&&e.next(p())}return n(),{unsubscribe:t(n)}}})[D]=function(){return this},e}return f({type:k.INIT}),(r={dispatch:f,subscribe:u,getState:p,replaceReducer:l})[D]=d,r}function w(e,t){return function(){return t(e.apply(this,arguments))}}function x(e,t){if("function"==typeof e)return w(e,t);if("object"!=typeof e||null===e)throw new Error(O(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=w(o,t))}return n}function N(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function C(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(O(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=N.apply(void 0,i)(n.dispatch),I(I({},n),{},{dispatch:r})}}}var M=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",__DO_NOT_USE__ActionTypes:k,applyMiddleware:C,bindActionCreators:x,combineReducers:function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:k.INIT}))throw new Error(O(12));if(void 0===n(void 0,{type:k.PROBE_UNKNOWN_ACTION()}))throw new Error(O(13))}))}(n)}catch(a){i=a}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<s.length;a++){var c=s[a],_=n[c],p=e[c],u=_(p,t);if(void 0===u)throw t&&t.type,new Error(O(14));o[c]=u,r=r||u!==p}return(r=r||s.length!==Object.keys(e).length)?o:e}},compose:N,createStore:R});const P="LOGIN_USER_SUCCESS",j="LOGIN_USER_ERROR",L="LOADED_USER_DATA",F="ACTION_PROCESSING",G="LOGOUT_USER",U="DID_VERIFY_EMAIL",z="DID_RESEND_VERIFICATION_EMAIL",V="DID_FORGOT_PASSWORD",H="DID_RESET_PASSWORD",X="SHOW_NOTIFICATION",K="USER_UPDATED",B="USERNAME_UPDATED",W="USERAVATARID_UPDATED",J="UPDATE_USER_SETTINGS";function $(){if(!window)return;const e=localStorage.getItem(y.publicRuntimeConfig.localStorageKey);if(!e)return;return JSON.parse(e)}function q(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Y=q();Y.withExtraArgument=q;var Q={};function Z(e){e&&(e.value=!0)}function ee(){}function te(e){return void 0===e.size&&(e.size=e.__iterate(re)),e.size}function ne(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?te(e)+t:t}function re(){return!0}function oe(e,t,n){return(0===e&&!ce(e)||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function ie(e,t){return ae(e,t,0)}function se(e,t){return ae(e,t,t)}function ae(e,t,n){return void 0===e?n:ce(e)?t===1/0?t:0|Math.max(0,t+e):void 0===t||t===e?e:0|Math.min(t,e)}function ce(e){return e<0||0===e&&1/e==-1/0}function _e(e){return Boolean(e&&e["@@__IMMUTABLE_ITERABLE__@@"])}function pe(e){return Boolean(e&&e["@@__IMMUTABLE_KEYED__@@"])}function ue(e){return Boolean(e&&e["@@__IMMUTABLE_INDEXED__@@"])}function fe(e){return pe(e)||ue(e)}var le=function(e){return _e(e)?e:Ce(e)},de=function(e){function t(e){return pe(e)?e:Me(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(le),me=function(e){function t(e){return ue(e)?e:Pe(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(le),ge=function(e){function t(e){return _e(e)&&!fe(e)?e:je(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(le);le.Keyed=de,le.Indexed=me,le.Set=ge;function he(e){return Boolean(e&&e["@@__IMMUTABLE_SEQ__@@"])}function ve(e){return Boolean(e&&e["@@__IMMUTABLE_RECORD__@@"])}function Ee(e){return _e(e)||ve(e)}var ye="@@__IMMUTABLE_ORDERED__@@";function Se(e){return Boolean(e&&e[ye])}var be="function"==typeof Symbol&&Symbol.iterator,Ie=be||"@@iterator",Oe=function(e){this.next=e};function De(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function Te(){return{value:void 0,done:!0}}function ke(e){return!!we(e)}function Ae(e){return e&&"function"==typeof e.next}function Re(e){var t=we(e);return t&&t.call(e)}function we(e){var t=e&&(be&&e[be]||e["@@iterator"]);if("function"==typeof t)return t}Oe.prototype.toString=function(){return"[Iterator]"},Oe.KEYS=0,Oe.VALUES=1,Oe.ENTRIES=2,Oe.prototype.inspect=Oe.prototype.toSource=function(){return this.toString()},Oe.prototype[Ie]=function(){return this};var xe=Object.prototype.hasOwnProperty;function Ne(e){return!(!Array.isArray(e)&&"string"!=typeof e)||e&&"object"==typeof e&&Number.isInteger(e.length)&&e.length>=0&&(0===e.length?1===Object.keys(e).length:e.hasOwnProperty(e.length-1))}var Ce=function(e){function t(e){return null==e?ze():Ee(e)?e.toSeq():function(e){var t=Xe(e);if(t)return t;if("object"==typeof e)return new Fe(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(e,t){var n=this._cache;if(n){for(var r=n.length,o=0;o!==r;){var i=n[t?r-++o:o++];if(!1===e(i[1],i[0],this))break}return o}return this.__iterateUncached(e,t)},t.prototype.__iterator=function(e,t){var n=this._cache;if(n){var r=n.length,o=0;return new Oe((function(){if(o===r)return{value:void 0,done:!0};var i=n[t?r-++o:o++];return De(e,i[0],i[1])}))}return this.__iteratorUncached(e,t)},t}(le),Me=function(e){function t(e){return null==e?ze().toKeyedSeq():_e(e)?pe(e)?e.toSeq():e.fromEntrySeq():ve(e)?e.toSeq():Ve(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(Ce),Pe=function(e){function t(e){return null==e?ze():_e(e)?pe(e)?e.entrySeq():e.toIndexedSeq():ve(e)?e.toSeq().entrySeq():He(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(Ce),je=function(e){function t(e){return(_e(e)&&!fe(e)?e:Pe(e)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(Ce);Ce.isSeq=he,Ce.Keyed=Me,Ce.Set=je,Ce.Indexed=Pe,Ce.prototype["@@__IMMUTABLE_SEQ__@@"]=!0;var Le=function(e){function t(e){this._array=e,this.size=e.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this.has(e)?this._array[ne(this,e)]:t},t.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length,o=0;o!==r;){var i=t?r-++o:o++;if(!1===e(n[i],i,this))break}return o},t.prototype.__iterator=function(e,t){var n=this._array,r=n.length,o=0;return new Oe((function(){if(o===r)return{value:void 0,done:!0};var i=t?r-++o:o++;return De(e,i,n[i])}))},t}(Pe),Fe=function(e){function t(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},t.prototype.has=function(e){return xe.call(this._object,e)},t.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length,i=0;i!==o;){var s=r[t?o-++i:i++];if(!1===e(n[s],s,this))break}return i},t.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length,i=0;return new Oe((function(){if(i===o)return{value:void 0,done:!0};var s=r[t?o-++i:i++];return De(e,s,n[s])}))},t}(Me);Fe.prototype[ye]=!0;var Ge,Ue=function(e){function t(e){this._collection=e,this.size=e.length||e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=Re(this._collection),r=0;if(Ae(n))for(var o;!(o=n.next()).done&&!1!==e(o.value,r++,this););return r},t.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=Re(this._collection);if(!Ae(n))return new Oe(Te);var r=0;return new Oe((function(){var t=n.next();return t.done?t:De(e,r++,t.value)}))},t}(Pe);function ze(){return Ge||(Ge=new Le([]))}function Ve(e){var t=Array.isArray(e)?new Le(e):ke(e)?new Ue(e):void 0;if(t)return t.fromEntrySeq();if("object"==typeof e)return new Fe(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function He(e){var t=Xe(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function Xe(e){return Ne(e)?new Le(e):ke(e)?new Ue(e):void 0}function Ke(e){return Boolean(e&&e["@@__IMMUTABLE_MAP__@@"])}function Be(e){return Ke(e)&&Se(e)}function We(e){return Boolean(e&&"function"==typeof e.equals&&"function"==typeof e.hashCode)}function Je(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!!(We(e)&&We(t)&&e.equals(t))}var $e="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function qe(e){return e>>>1&1073741824|3221225471&e}var Ye=Object.prototype.valueOf;function Qe(e){if(null==e)return Ze(e);if("function"==typeof e.hashCode)return qe(e.hashCode(e));var t,n=(t=e).valueOf!==Ye&&"function"==typeof t.valueOf?t.valueOf(t):t;if(null==n)return Ze(n);switch(typeof n){case"boolean":return n?1108378657:1108378656;case"number":return function(e){if(e!=e||e===1/0)return 0;var t=0|e;t!==e&&(t^=4294967295*e);for(;e>4294967295;)t^=e/=4294967295;return qe(t)}(n);case"string":return n.length>_t?function(e){var t=ft[e];void 0===t&&(t=et(e),ut===pt&&(ut=0,ft={}),ut++,ft[e]=t);return t}(n):et(n);case"object":case"function":return function(e){var t;if(it&&void 0!==(t=ot.get(e)))return t;if(void 0!==(t=e[ct]))return t;if(!nt){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[ct]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=rt(),it)ot.set(e,t);else{if(void 0!==tt&&!1===tt(e))throw new Error("Non-extensible objects are not allowed as keys.");if(nt)Object.defineProperty(e,ct,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[ct]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[ct]=t}}return t}(n);case"symbol":return function(e){var t=st[e];if(void 0!==t)return t;return t=rt(),st[e]=t,t}(n);default:if("function"==typeof n.toString)return et(n.toString());throw new Error("Value type "+typeof n+" cannot be hashed.")}}function Ze(e){return null===e?1108378658:1108378659}function et(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return qe(t)}var tt=Object.isExtensible,nt=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}();function rt(){var e=++at;return 1073741824&at&&(at=0),e}var ot,it="function"==typeof WeakMap;it&&(ot=new WeakMap);var st=Object.create(null),at=0,ct="__immutablehash__";"function"==typeof Symbol&&(ct=Symbol(ct));var _t=16,pt=255,ut=0,ft={},lt=function(e){function t(e,t){this._iter=e,this._useKeys=t,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this._iter.get(e,t)},t.prototype.has=function(e){return this._iter.has(e)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var e=this,t=Et(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},t.prototype.map=function(e,t){var n=this,r=vt(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t,r){return e(t,r,n)}),t)},t.prototype.__iterator=function(e,t){return this._iter.__iterator(e,t)},t}(Me);lt.prototype[ye]=!0;var dt=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this,r=0;return t&&te(this),this._iter.__iterate((function(o){return e(o,t?n.size-++r:r++,n)}),t)},t.prototype.__iterator=function(e,t){var n=this,r=this._iter.__iterator(1,t),o=0;return t&&te(this),new Oe((function(){var i=r.next();return i.done?i:De(e,t?n.size-++o:o++,i.value,i)}))},t}(Pe),mt=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new Oe((function(){var t=n.next();return t.done?t:De(e,t.value,t.value,t)}))},t}(je),gt=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){if(t){wt(t);var r=_e(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new Oe((function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){wt(r);var o=_e(r);return De(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}}))},t}(Me);function ht(e){var t=Nt(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=Ct,t.__iterateUncached=function(t,n){var r=this;return e.__iterate((function(e,n){return!1!==t(n,e,r)}),n)},t.__iteratorUncached=function(t,n){if(2===t){var r=e.__iterator(t,n);return new Oe((function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e}))}return e.__iterator(1===t?0:1,n)},t}function vt(e,t,n){var r=Nt(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var i=e.get(r,Q);return i===Q?o:t.call(n,i,r,e)},r.__iterateUncached=function(r,o){var i=this;return e.__iterate((function(e,o,s){return!1!==r(t.call(n,e,o,s),o,i)}),o)},r.__iteratorUncached=function(r,o){var i=e.__iterator(2,o);return new Oe((function(){var o=i.next();if(o.done)return o;var s=o.value,a=s[0];return De(r,a,t.call(n,s[1],a,e),o)}))},r}function Et(e,t){var n=this,r=Nt(e);return r._iter=e,r.size=e.size,r.reverse=function(){return e},e.flip&&(r.flip=function(){var t=ht(e);return t.reverse=function(){return e.flip()},t}),r.get=function(n,r){return e.get(t?n:-1-n,r)},r.has=function(n){return e.has(t?n:-1-n)},r.includes=function(t){return e.includes(t)},r.cacheResult=Ct,r.__iterate=function(n,r){var o=this,i=0;return r&&te(e),e.__iterate((function(e,s){return n(e,t?s:r?o.size-++i:i++,o)}),!r)},r.__iterator=function(r,o){var i=0;o&&te(e);var s=e.__iterator(2,!o);return new Oe((function(){var e=s.next();if(e.done)return e;var a=e.value;return De(r,t?a[0]:o?n.size-++i:i++,a[1],e)}))},r}function yt(e,t,n,r){var o=Nt(e);return r&&(o.has=function(r){var o=e.get(r,Q);return o!==Q&&!!t.call(n,o,r,e)},o.get=function(r,o){var i=e.get(r,Q);return i!==Q&&t.call(n,i,r,e)?i:o}),o.__iterateUncached=function(o,i){var s=this,a=0;return e.__iterate((function(e,i,c){if(t.call(n,e,i,c))return a++,o(e,r?i:a-1,s)}),i),a},o.__iteratorUncached=function(o,i){var s=e.__iterator(2,i),a=0;return new Oe((function(){for(;;){var i=s.next();if(i.done)return i;var c=i.value,_=c[0],p=c[1];if(t.call(n,p,_,e))return De(o,r?_:a++,p,i)}}))},o}function St(e,t,n,r){var o=e.size;if(oe(t,n,o))return e;var i=ie(t,o),s=se(n,o);if(i!=i||s!=s)return St(e.toSeq().cacheResult(),t,n,r);var a,c=s-i;c==c&&(a=c<0?0:c);var _=Nt(e);return _.size=0===a?a:e.size&&a||void 0,!r&&he(e)&&a>=0&&(_.get=function(t,n){return(t=ne(this,t))>=0&&t<a?e.get(t+i,n):n}),_.__iterateUncached=function(t,n){var o=this;if(0===a)return 0;if(n)return this.cacheResult().__iterate(t,n);var s=0,c=!0,_=0;return e.__iterate((function(e,n){if(!c||!(c=s++<i))return _++,!1!==t(e,r?n:_-1,o)&&_!==a})),_},_.__iteratorUncached=function(t,n){if(0!==a&&n)return this.cacheResult().__iterator(t,n);if(0===a)return new Oe(Te);var o=e.__iterator(t,n),s=0,c=0;return new Oe((function(){for(;s++<i;)o.next();if(++c>a)return{value:void 0,done:!0};var e=o.next();return r||1===t||e.done?e:De(t,c-1,0===t?void 0:e.value[1],e)}))},_}function bt(e,t,n,r){var o=Nt(e);return o.__iterateUncached=function(o,i){var s=this;if(i)return this.cacheResult().__iterate(o,i);var a=!0,c=0;return e.__iterate((function(e,i,_){if(!a||!(a=t.call(n,e,i,_)))return c++,o(e,r?i:c-1,s)})),c},o.__iteratorUncached=function(o,i){var s=this;if(i)return this.cacheResult().__iterator(o,i);var a=e.__iterator(2,i),c=!0,_=0;return new Oe((function(){var e,i,p;do{if((e=a.next()).done)return r||1===o?e:De(o,_++,0===o?void 0:e.value[1],e);var u=e.value;i=u[0],p=u[1],c&&(c=t.call(n,p,i,s))}while(c);return 2===o?e:De(o,i,p,e)}))},o}function It(e,t){var n=pe(e),r=[e].concat(t).map((function(e){return _e(e)?n&&(e=de(e)):e=n?Ve(e):He(Array.isArray(e)?e:[e]),e})).filter((function(e){return 0!==e.size}));if(0===r.length)return e;if(1===r.length){var o=r[0];if(o===e||n&&pe(o)||ue(e)&&ue(o))return o}var i=new Le(r);return n?i=i.toKeyedSeq():ue(e)||(i=i.toSetSeq()),(i=i.flatten(!0)).size=r.reduce((function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}}),0),i}function Ot(e,t,n){var r=Nt(e);return r.__iterateUncached=function(o,i){if(i)return this.cacheResult().__iterate(o,i);var s=0,a=!1;return function e(c,_){c.__iterate((function(i,c){return(!t||_<t)&&_e(i)?e(i,_+1):(s++,!1===o(i,n?c:s-1,r)&&(a=!0)),!a}),i)}(e,0),s},r.__iteratorUncached=function(r,o){if(o)return this.cacheResult().__iterator(r,o);var i=e.__iterator(r,o),s=[],a=0;return new Oe((function(){for(;i;){var e=i.next();if(!1===e.done){var c=e.value;if(2===r&&(c=c[1]),t&&!(s.length<t)||!_e(c))return n?e:De(r,a++,c,e);s.push(i),i=c.__iterator(r,o)}else i=s.pop()}return{value:void 0,done:!0}}))},r}function Dt(e,t,n){t||(t=Mt);var r=pe(e),o=0,i=e.toSeq().map((function(t,r){return[r,t,o++,n?n(t,r,e):t]})).valueSeq().toArray();return i.sort((function(e,n){return t(e[3],n[3])||e[2]-n[2]})).forEach(r?function(e,t){i[t].length=2}:function(e,t){i[t]=e[1]}),r?Me(i):ue(e)?Pe(i):je(i)}function Tt(e,t,n){if(t||(t=Mt),n){var r=e.toSeq().map((function(t,r){return[t,n(t,r,e)]})).reduce((function(e,n){return kt(t,e[1],n[1])?n:e}));return r&&r[0]}return e.reduce((function(e,n){return kt(t,e,n)?n:e}))}function kt(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function At(e,t,n,r){var o=Nt(e),i=new Le(n).map((function(e){return e.size}));return o.size=r?i.max():i.min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(1,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var i=n.map((function(e){return e=le(e),Re(o?e.reverse():e)})),s=0,a=!1;return new Oe((function(){var n;return a||(n=i.map((function(e){return e.next()})),a=r?n.every((function(e){return e.done})):n.some((function(e){return e.done}))),a?{value:void 0,done:!0}:De(e,s++,t.apply(null,n.map((function(e){return e.value}))))}))},o}function Rt(e,t){return e===t?e:he(e)?t:e.constructor(t)}function wt(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function xt(e){return pe(e)?de:ue(e)?me:ge}function Nt(e){return Object.create((pe(e)?Me:ue(e)?Pe:je).prototype)}function Ct(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Ce.prototype.cacheResult.call(this)}function Mt(e,t){return void 0===e&&void 0===t?0:void 0===e?1:void 0===t?-1:e>t?1:e<t?-1:0}function Pt(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function jt(e,t){if(!e)throw new Error(t)}function Lt(e){jt(e!==1/0,"Cannot perform this action with an infinite size.")}function Ft(e){if(Ne(e)&&"string"!=typeof e)return e;if(Se(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}dt.prototype.cacheResult=lt.prototype.cacheResult=mt.prototype.cacheResult=gt.prototype.cacheResult=Ct;var Gt=Object.prototype.toString;function Ut(e){if(!e||"object"!=typeof e||"[object Object]"!==Gt.call(e))return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t,r=Object.getPrototypeOf(t);null!==r;)n=r,r=Object.getPrototypeOf(n);return n===t}function zt(e){return"object"==typeof e&&(Ee(e)||Array.isArray(e)||Ut(e))}function Vt(e){try{return"string"==typeof e?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function Ht(e,t){return Ee(e)?e.has(t):zt(e)&&xe.call(e,t)}function Xt(e,t,n){return Ee(e)?e.get(t,n):Ht(e,t)?"function"==typeof e.get?e.get(t):e[t]:n}function Kt(e){if(Array.isArray(e))return Pt(e);var t={};for(var n in e)xe.call(e,n)&&(t[n]=e[n]);return t}function Bt(e,t){if(!zt(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Ee(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!xe.call(e,t))return e;var n=Kt(e);return Array.isArray(n)?n.splice(t,1):delete n[t],n}function Wt(e,t,n){if(!zt(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Ee(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,n)}if(xe.call(e,t)&&n===e[t])return e;var r=Kt(e);return r[t]=n,r}function Jt(e,t,n,r){r||(r=n,n=void 0);var o=$t(Ee(e),e,Ft(t),0,n,r);return o===Q?n:o}function $t(e,t,n,r,o,i){var s=t===Q;if(r===n.length){var a=s?o:t,c=i(a);return c===a?t:c}if(!s&&!zt(t))throw new TypeError("Cannot update within non-data-structure value in path ["+n.slice(0,r).map(Vt)+"]: "+t);var _=n[r],p=s?Q:Xt(t,_,Q),u=$t(p===Q?e:Ee(p),p,n,r+1,o,i);return u===p?t:u===Q?Bt(t,_):Wt(s?e?Cn():{}:t,_,u)}function qt(e,t,n){return Jt(e,t,Q,(function(){return n}))}function Yt(e,t){return qt(this,e,t)}function Qt(e,t){return Jt(e,t,(function(){return Q}))}function Zt(e){return Qt(this,e)}function en(e,t,n,r){return Jt(e,[t],n,r)}function tn(e,t,n){return 1===arguments.length?e(this):en(this,e,t,n)}function nn(e,t,n){return Jt(this,e,t,n)}function rn(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return sn(this,e)}function on(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if("function"!=typeof e)throw new TypeError("Invalid merger function: "+e);return sn(this,t,e)}function sn(e,t,n){for(var r=[],o=0;o<t.length;o++){var i=de(t[o]);0!==i.size&&r.push(i)}return 0===r.length?e:0!==e.toSeq().size||e.__ownerID||1!==r.length?e.withMutations((function(e){for(var t=n?function(t,r){en(e,r,Q,(function(e){return e===Q?t:n(e,t,r)}))}:function(t,n){e.set(n,t)},o=0;o<r.length;o++)r[o].forEach(t)})):e.constructor(r[0])}function an(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return fn(e,t)}function cn(e,t){for(var n=[],r=arguments.length-2;r-- >0;)n[r]=arguments[r+2];return fn(t,n,e)}function _n(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return un(e,t)}function pn(e,t){for(var n=[],r=arguments.length-2;r-- >0;)n[r]=arguments[r+2];return un(t,n,e)}function un(e,t,n){return fn(e,t,function(e){function t(n,r,o){return zt(n)&&zt(r)?fn(n,[r],t):e?e(n,r,o):r}return t}(n))}function fn(e,t,n){if(!zt(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if(Ee(e))return"function"==typeof n&&e.mergeWith?e.mergeWith.apply(e,[n].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var r=Array.isArray(e),o=e,i=r?me:de,s=r?function(t){o===e&&(o=Kt(o)),o.push(t)}:function(t,r){var i=xe.call(o,r),s=i&&n?n(o[r],t,r):t;i&&s===o[r]||(o===e&&(o=Kt(o)),o[r]=s)},a=0;a<t.length;a++)i(t[a]).forEach(s);return o}function ln(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return un(this,e)}function dn(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return un(this,t,e)}function mn(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return Jt(this,e,Cn(),(function(e){return fn(e,t)}))}function gn(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return Jt(this,e,Cn(),(function(e){return un(e,t)}))}function hn(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function vn(){return this.__ownerID?this:this.__ensureOwner(new ee)}function En(){return this.__ensureOwner()}function yn(){return this.__altered}var Sn=function(e){function t(t){return null==t?Cn():Ke(t)&&!Se(t)?t:Cn().withMutations((function(n){var r=e(t);Lt(r.size),r.forEach((function(e,t){return n.set(t,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Cn().withMutations((function(t){for(var n=0;n<e.length;n+=2){if(n+1>=e.length)throw new Error("Missing value for key: "+e[n]);t.set(e[n],e[n+1])}}))},t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},t.prototype.set=function(e,t){return Mn(this,e,t)},t.prototype.remove=function(e){return Mn(this,e,Q)},t.prototype.deleteAll=function(e){var t=le(e);return 0===t.size?this:this.withMutations((function(e){t.forEach((function(t){return e.remove(t)}))}))},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Cn()},t.prototype.sort=function(e){return or(Dt(this,e))},t.prototype.sortBy=function(e,t){return or(Dt(this,t,e))},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){r.forEach((function(o,i){r.set(i,e.call(t,o,i,n))}))}))},t.prototype.__iterator=function(e,t){return new Rn(this,e,t)},t.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate((function(t){return r++,e(t[1],t[0],n)}),t),r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Nn(this.size,this._root,e,this.__hash):0===this.size?Cn():(this.__ownerID=e,this.__altered=!1,this)},t}(de);Sn.isMap=Ke;var bn=Sn.prototype;bn["@@__IMMUTABLE_MAP__@@"]=!0,bn.delete=bn.remove,bn.removeAll=bn.deleteAll,bn.setIn=Yt,bn.removeIn=bn.deleteIn=Zt,bn.update=tn,bn.updateIn=nn,bn.merge=bn.concat=rn,bn.mergeWith=on,bn.mergeDeep=ln,bn.mergeDeepWith=dn,bn.mergeIn=mn,bn.mergeDeepIn=gn,bn.withMutations=hn,bn.wasAltered=yn,bn.asImmutable=En,bn["@@transducer/init"]=bn.asMutable=vn,bn["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])},bn["@@transducer/result"]=function(e){return e.asImmutable()};var In=function(e,t){this.ownerID=e,this.entries=t};In.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,s=o.length;i<s;i++)if(Je(n,o[i][0]))return o[i][1];return r},In.prototype.update=function(e,t,n,r,o,i,s){for(var a=o===Q,c=this.entries,_=0,p=c.length;_<p&&!Je(r,c[_][0]);_++);var u=_<p;if(u?c[_][1]===o:a)return this;if(Z(s),(a||!u)&&Z(i),!a||1!==c.length){if(!u&&!a&&c.length>=Un)return function(e,t,n,r){e||(e=new ee);for(var o=new kn(e,Qe(n),[n,r]),i=0;i<t.length;i++){var s=t[i];o=o.update(e,0,void 0,s[0],s[1])}return o}(e,c,r,o);var f=e&&e===this.ownerID,l=f?c:Pt(c);return u?a?_===p-1?l.pop():l[_]=l.pop():l[_]=[r,o]:l.push([r,o]),f?(this.entries=l,this):new In(e,l)}};var On=function(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n};On.prototype.get=function(e,t,n,r){void 0===t&&(t=Qe(n));var o=1<<(31&(0===e?t:t>>>e)),i=this.bitmap;return 0==(i&o)?r:this.nodes[Fn(i&o-1)].get(e+5,t,n,r)},On.prototype.update=function(e,t,n,r,o,i,s){void 0===n&&(n=Qe(r));var a=31&(0===t?n:n>>>t),c=1<<a,_=this.bitmap,p=0!=(_&c);if(!p&&o===Q)return this;var u=Fn(_&c-1),f=this.nodes,l=p?f[u]:void 0,d=Pn(l,e,t+5,n,r,o,i,s);if(d===l)return this;if(!p&&d&&f.length>=zn)return function(e,t,n,r,o){for(var i=0,s=new Array(32),a=0;0!==n;a++,n>>>=1)s[a]=1&n?t[i++]:void 0;return s[r]=o,new Dn(e,i+1,s)}(e,f,_,a,d);if(p&&!d&&2===f.length&&jn(f[1^u]))return f[1^u];if(p&&d&&1===f.length&&jn(d))return d;var m=e&&e===this.ownerID,g=p?d?_:_^c:_|c,h=p?d?Gn(f,u,d,m):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),i=0,s=0;s<r;s++)s===t&&(i=1),o[s]=e[s+i];return o}(f,u,m):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var i=new Array(o),s=0,a=0;a<o;a++)a===t?(i[a]=n,s=-1):i[a]=e[a+s];return i}(f,u,d,m);return m?(this.bitmap=g,this.nodes=h,this):new On(e,g,h)};var Dn=function(e,t,n){this.ownerID=e,this.count=t,this.nodes=n};Dn.prototype.get=function(e,t,n,r){void 0===t&&(t=Qe(n));var o=31&(0===e?t:t>>>e),i=this.nodes[o];return i?i.get(e+5,t,n,r):r},Dn.prototype.update=function(e,t,n,r,o,i,s){void 0===n&&(n=Qe(r));var a=31&(0===t?n:n>>>t),c=o===Q,_=this.nodes,p=_[a];if(c&&!p)return this;var u=Pn(p,e,t+5,n,r,o,i,s);if(u===p)return this;var f=this.count;if(p){if(!u&&--f<Vn)return function(e,t,n,r){for(var o=0,i=0,s=new Array(n),a=0,c=1,_=t.length;a<_;a++,c<<=1){var p=t[a];void 0!==p&&a!==r&&(o|=c,s[i++]=p)}return new On(e,o,s)}(e,_,f,a)}else f++;var l=e&&e===this.ownerID,d=Gn(_,a,u,l);return l?(this.count=f,this.nodes=d,this):new Dn(e,f,d)};var Tn=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n};Tn.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,s=o.length;i<s;i++)if(Je(n,o[i][0]))return o[i][1];return r},Tn.prototype.update=function(e,t,n,r,o,i,s){void 0===n&&(n=Qe(r));var a=o===Q;if(n!==this.keyHash)return a?this:(Z(s),Z(i),Ln(this,e,t,n,[r,o]));for(var c=this.entries,_=0,p=c.length;_<p&&!Je(r,c[_][0]);_++);var u=_<p;if(u?c[_][1]===o:a)return this;if(Z(s),(a||!u)&&Z(i),a&&2===p)return new kn(e,this.keyHash,c[1^_]);var f=e&&e===this.ownerID,l=f?c:Pt(c);return u?a?_===p-1?l.pop():l[_]=l.pop():l[_]=[r,o]:l.push([r,o]),f?(this.entries=l,this):new Tn(e,this.keyHash,l)};var kn=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n};kn.prototype.get=function(e,t,n,r){return Je(n,this.entry[0])?this.entry[1]:r},kn.prototype.update=function(e,t,n,r,o,i,s){var a=o===Q,c=Je(r,this.entry[0]);return(c?o===this.entry[1]:a)?this:(Z(s),a?void Z(i):c?e&&e===this.ownerID?(this.entry[1]=o,this):new kn(e,this.keyHash,[r,o]):(Z(i),Ln(this,e,t,Qe(r),[r,o])))},In.prototype.iterate=Tn.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},On.prototype.iterate=Dn.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[t?o-r:r];if(i&&!1===i.iterate(e,t))return!1}},kn.prototype.iterate=function(e,t){return e(this.entry)};var An,Rn=function(e){function t(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&xn(e._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n=t.node,r=t.index++,o=void 0;if(n.entry){if(0===r)return wn(e,n.entry)}else if(n.entries){if(r<=(o=n.entries.length-1))return wn(e,n.entries[this._reverse?o-r:r])}else if(r<=(o=n.nodes.length-1)){var i=n.nodes[this._reverse?o-r:r];if(i){if(i.entry)return wn(e,i.entry);t=this._stack=xn(i,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}},t}(Oe);function wn(e,t){return De(e,t[0],t[1])}function xn(e,t){return{node:e,index:0,__prev:t}}function Nn(e,t,n,r){var o=Object.create(bn);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Cn(){return An||(An=Nn(0))}function Mn(e,t,n){var r,o;if(e._root){var i={value:!1},s={value:!1};if(r=Pn(e._root,e.__ownerID,0,void 0,t,n,i,s),!s.value)return e;o=e.size+(i.value?n===Q?-1:1:0)}else{if(n===Q)return e;o=1,r=new In(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?Nn(o,r):Cn()}function Pn(e,t,n,r,o,i,s,a){return e?e.update(t,n,r,o,i,s,a):i===Q?e:(Z(a),Z(s),new kn(t,r,[o,i]))}function jn(e){return e.constructor===kn||e.constructor===Tn}function Ln(e,t,n,r,o){if(e.keyHash===r)return new Tn(t,r,[e.entry,o]);var i,s=31&(0===n?e.keyHash:e.keyHash>>>n),a=31&(0===n?r:r>>>n),c=s===a?[Ln(e,t,n+5,r,o)]:(i=new kn(t,r,o),s<a?[e,i]:[i,e]);return new On(t,1<<s|1<<a,c)}function Fn(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,e+=e>>8,127&(e+=e>>16)}function Gn(e,t,n,r){var o=r?e:Pt(e);return o[t]=n,o}var Un=8,zn=16,Vn=8;function Hn(e){return Boolean(e&&e["@@__IMMUTABLE_LIST__@@"])}var Xn=function(e){function t(t){var n=Yn();if(null==t)return n;if(Hn(t))return t;var r=e(t),o=r.size;return 0===o?n:(Lt(o),o>0&&o<32?qn(0,o,5,null,new Bn(r.toArray())):n.withMutations((function(e){e.setSize(o),r.forEach((function(t,n){return e.set(n,t)}))})))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(e,t){if((e=ne(this,e))>=0&&e<this.size){var n=er(this,e+=this._origin);return n&&n.array[31&e]}return t},t.prototype.set=function(e,t){return function(e,t,n){if((t=ne(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations((function(e){t<0?tr(e,t).set(0,n):tr(e,0,t+1).set(t,n)}));t+=e._origin;var r=e._tail,o=e._root,i={value:!1};t>=nr(e._capacity)?r=Qn(r,e.__ownerID,0,t,n,i):o=Qn(o,e.__ownerID,e._level,t,n,i);if(!i.value)return e;if(e.__ownerID)return e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e;return qn(e._origin,e._capacity,e._level,o,r)}(this,e,t)},t.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},t.prototype.insert=function(e,t){return this.splice(e,0,t)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=5,this._root=this._tail=this.__hash=void 0,this.__altered=!0,this):Yn()},t.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations((function(n){tr(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])}))},t.prototype.pop=function(){return tr(this,0,-1)},t.prototype.unshift=function(){var e=arguments;return this.withMutations((function(t){tr(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])}))},t.prototype.shift=function(){return tr(this,1)},t.prototype.concat=function(){for(var t=arguments,n=[],r=0;r<arguments.length;r++){var o=t[r],i=e("string"!=typeof o&&ke(o)?o:[o]);0!==i.size&&n.push(i)}return 0===n.length?this:0!==this.size||this.__ownerID||1!==n.length?this.withMutations((function(e){n.forEach((function(t){return t.forEach((function(t){return e.push(t)}))}))})):this.constructor(n[0])},t.prototype.setSize=function(e){return tr(this,0,e)},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){for(var o=0;o<n.size;o++)r.set(o,e.call(t,r.get(o),o,n))}))},t.prototype.slice=function(e,t){var n=this.size;return oe(e,t,n)?this:tr(this,ie(e,n),se(t,n))},t.prototype.__iterator=function(e,t){var n=t?this.size:0,r=$n(this,t);return new Oe((function(){var o=r();return o===Jn?{value:void 0,done:!0}:De(e,t?--n:n++,o)}))},t.prototype.__iterate=function(e,t){for(var n,r=t?this.size:0,o=$n(this,t);(n=o())!==Jn&&!1!==e(n,t?--r:r++,this););return r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?qn(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):0===this.size?Yn():(this.__ownerID=e,this.__altered=!1,this)},t}(me);Xn.isList=Hn;var Kn=Xn.prototype;Kn["@@__IMMUTABLE_LIST__@@"]=!0,Kn.delete=Kn.remove,Kn.merge=Kn.concat,Kn.setIn=Yt,Kn.deleteIn=Kn.removeIn=Zt,Kn.update=tn,Kn.updateIn=nn,Kn.mergeIn=mn,Kn.mergeDeepIn=gn,Kn.withMutations=hn,Kn.wasAltered=yn,Kn.asImmutable=En,Kn["@@transducer/init"]=Kn.asMutable=vn,Kn["@@transducer/step"]=function(e,t){return e.push(t)},Kn["@@transducer/result"]=function(e){return e.asImmutable()};var Bn=function(e,t){this.array=e,this.ownerID=t};Bn.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&31;if(r>=this.array.length)return new Bn([],e);var o,i=0===r;if(t>0){var s=this.array[r];if((o=s&&s.removeBefore(e,t-5,n))===s&&i)return this}if(i&&!o)return this;var a=Zn(this,e);if(!i)for(var c=0;c<r;c++)a.array[c]=void 0;return o&&(a.array[r]=o),a},Bn.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,o=n-1>>>t&31;if(o>=this.array.length)return this;if(t>0){var i=this.array[o];if((r=i&&i.removeAfter(e,t-5,n))===i&&o===this.array.length-1)return this}var s=Zn(this,e);return s.array.splice(o+1),r&&(s.array[o]=r),s};var Wn,Jn={};function $n(e,t){var n=e._origin,r=e._capacity,o=nr(r),i=e._tail;return s(e._root,e._level,0);function s(e,a,c){return 0===a?function(e,s){var a=s===o?i&&i.array:e&&e.array,c=s>n?0:n-s,_=r-s;_>32&&(_=32);return function(){if(c===_)return Jn;var e=t?--_:c++;return a&&a[e]}}(e,c):function(e,o,i){var a,c=e&&e.array,_=i>n?0:n-i>>o,p=1+(r-i>>o);p>32&&(p=32);return function(){for(;;){if(a){var e=a();if(e!==Jn)return e;a=null}if(_===p)return Jn;var n=t?--p:_++;a=s(c&&c[n],o-5,i+(n<<o))}}}(e,a,c)}}function qn(e,t,n,r,o,i,s){var a=Object.create(Kn);return a.size=t-e,a._origin=e,a._capacity=t,a._level=n,a._root=r,a._tail=o,a.__ownerID=i,a.__hash=s,a.__altered=!1,a}function Yn(){return Wn||(Wn=qn(0,0,5))}function Qn(e,t,n,r,o,i){var s,a=r>>>n&31,c=e&&a<e.array.length;if(!c&&void 0===o)return e;if(n>0){var _=e&&e.array[a],p=Qn(_,t,n-5,r,o,i);return p===_?e:((s=Zn(e,t)).array[a]=p,s)}return c&&e.array[a]===o?e:(i&&Z(i),s=Zn(e,t),void 0===o&&a===s.array.length-1?s.array.pop():s.array[a]=o,s)}function Zn(e,t){return t&&e&&t===e.ownerID?e:new Bn(e?e.array.slice():[],t)}function er(e,t){if(t>=nr(e._capacity))return e._tail;if(t<1<<e._level+5){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&31],r-=5;return n}}function tr(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new ee,o=e._origin,i=e._capacity,s=o+t,a=void 0===n?i:n<0?i+n:o+n;if(s===o&&a===i)return e;if(s>=a)return e.clear();for(var c=e._level,_=e._root,p=0;s+p<0;)_=new Bn(_&&_.array.length?[void 0,_]:[],r),p+=1<<(c+=5);p&&(s+=p,o+=p,a+=p,i+=p);for(var u=nr(i),f=nr(a);f>=1<<c+5;)_=new Bn(_&&_.array.length?[_]:[],r),c+=5;var l=e._tail,d=f<u?er(e,a-1):f>u?new Bn([],r):l;if(l&&f>u&&s<i&&l.array.length){for(var m=_=Zn(_,r),g=c;g>5;g-=5){var h=u>>>g&31;m=m.array[h]=Zn(m.array[h],r)}m.array[u>>>5&31]=l}if(a<i&&(d=d&&d.removeAfter(r,0,a)),s>=f)s-=f,a-=f,c=5,_=null,d=d&&d.removeBefore(r,0,s);else if(s>o||f<u){for(p=0;_;){var v=s>>>c&31;if(v!==f>>>c&31)break;v&&(p+=(1<<c)*v),c-=5,_=_.array[v]}_&&s>o&&(_=_.removeBefore(r,c,s-p)),_&&f<u&&(_=_.removeAfter(r,c,f-p)),p&&(s-=p,a-=p)}return e.__ownerID?(e.size=a-s,e._origin=s,e._capacity=a,e._level=c,e._root=_,e._tail=d,e.__hash=void 0,e.__altered=!0,e):qn(s,a,c,_,d)}function nr(e){return e<32?0:e-1>>>5<<5}var rr,or=function(e){function t(e){return null==e?sr():Be(e)?e:sr().withMutations((function(t){var n=de(e);Lt(n.size),n.forEach((function(e,n){return t.set(n,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this.__altered=!0,this):sr()},t.prototype.set=function(e,t){return ar(this,e,t)},t.prototype.remove=function(e){return ar(this,e,Q)},t.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate((function(t){return t&&e(t[1],t[0],n)}),t)},t.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?ir(t,n,e,this.__hash):0===this.size?sr():(this.__ownerID=e,this.__altered=!1,this._map=t,this._list=n,this)},t}(Sn);function ir(e,t,n,r){var o=Object.create(or.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function sr(){return rr||(rr=ir(Cn(),Yn()))}function ar(e,t,n){var r,o,i=e._map,s=e._list,a=i.get(t),c=void 0!==a;if(n===Q){if(!c)return e;s.size>=32&&s.size>=2*i.size?(r=(o=s.filter((function(e,t){return void 0!==e&&a!==t}))).toKeyedSeq().map((function(e){return e[0]})).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=i.remove(t),o=a===s.size-1?s.pop():s.set(a,void 0))}else if(c){if(n===s.get(a)[1])return e;r=i,o=s.set(a,[t,n])}else r=i.set(t,s.size),o=s.set(s.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e.__altered=!0,e):ir(r,o)}or.isOrderedMap=Be,or.prototype[ye]=!0,or.prototype.delete=or.prototype.remove;function cr(e){return Boolean(e&&e["@@__IMMUTABLE_STACK__@@"])}var _r=function(e){function t(e){return null==e?lr():cr(e)?e:lr().pushAll(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(e,t){var n=this._head;for(e=ne(this,e);n&&e--;)n=n.next;return n?n.value:t},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var e=arguments;if(0===arguments.length)return this;for(var t=this.size+arguments.length,n=this._head,r=arguments.length-1;r>=0;r--)n={value:e[r],next:n};return this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):fr(t,n)},t.prototype.pushAll=function(t){if(0===(t=e(t)).size)return this;if(0===this.size&&cr(t))return t;Lt(t.size);var n=this.size,r=this._head;return t.__iterate((function(e){n++,r={value:e,next:r}}),!0),this.__ownerID?(this.size=n,this._head=r,this.__hash=void 0,this.__altered=!0,this):fr(n,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):lr()},t.prototype.slice=function(t,n){if(oe(t,n,this.size))return this;var r=ie(t,this.size);if(se(n,this.size)!==this.size)return e.prototype.slice.call(this,t,n);for(var o=this.size-r,i=this._head;r--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):fr(o,i)},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?fr(this.size,this._head,e,this.__hash):0===this.size?lr():(this.__ownerID=e,this.__altered=!1,this)},t.prototype.__iterate=function(e,t){var n=this;if(t)return new Le(this.toArray()).__iterate((function(t,r){return e(t,r,n)}),t);for(var r=0,o=this._head;o&&!1!==e(o.value,r++,this);)o=o.next;return r},t.prototype.__iterator=function(e,t){if(t)return new Le(this.toArray()).__iterator(e,t);var n=0,r=this._head;return new Oe((function(){if(r){var t=r.value;return r=r.next,De(e,n++,t)}return{value:void 0,done:!0}}))},t}(me);_r.isStack=cr;var pr,ur=_r.prototype;function fr(e,t,n,r){var o=Object.create(ur);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function lr(){return pr||(pr=fr(0))}ur["@@__IMMUTABLE_STACK__@@"]=!0,ur.shift=ur.pop,ur.unshift=ur.push,ur.unshiftAll=ur.pushAll,ur.withMutations=hn,ur.wasAltered=yn,ur.asImmutable=En,ur["@@transducer/init"]=ur.asMutable=vn,ur["@@transducer/step"]=function(e,t){return e.unshift(t)},ur["@@transducer/result"]=function(e){return e.asImmutable()};function dr(e){return Boolean(e&&e["@@__IMMUTABLE_SET__@@"])}function mr(e){return dr(e)&&Se(e)}function gr(e,t){if(e===t)return!0;if(!_e(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||pe(e)!==pe(t)||ue(e)!==ue(t)||Se(e)!==Se(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!fe(e);if(Se(e)){var r=e.entries();return t.every((function(e,t){var o=r.next().value;return o&&Je(o[1],e)&&(n||Je(o[0],t))}))&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var i=e;e=t,t=i}var s=!0,a=t.__iterate((function(t,r){if(n?!e.has(t):o?!Je(t,e.get(r,Q)):!Je(e.get(r,Q),t))return s=!1,!1}));return s&&e.size===a}function hr(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}function vr(e){if(!e||"object"!=typeof e)return e;if(!_e(e)){if(!zt(e))return e;e=Ce(e)}if(pe(e)){var t={};return e.__iterate((function(e,n){t[n]=vr(e)})),t}var n=[];return e.__iterate((function(e){n.push(vr(e))})),n}var Er=function(e){function t(t){return null==t?Or():dr(t)&&!Se(t)?t:Or().withMutations((function(n){var r=e(t);Lt(r.size),r.forEach((function(e){return n.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(de(e).keySeq())},t.intersect=function(e){return(e=le(e).toArray()).length?Sr.intersect.apply(t(e.pop()),e):Or()},t.union=function(e){return(e=le(e).toArray()).length?Sr.union.apply(t(e.pop()),e):Or()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(e){return this._map.has(e)},t.prototype.add=function(e){return br(this,this._map.set(e,e))},t.prototype.remove=function(e){return br(this,this._map.remove(e))},t.prototype.clear=function(){return br(this,this._map.clear())},t.prototype.map=function(e,t){var n=this,r=!1,o=br(this,this._map.mapEntries((function(o){var i=o[1],s=e.call(t,i,i,n);return s!==i&&(r=!0),[s,s]}),t));return r?o:this},t.prototype.union=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];return 0===(t=t.filter((function(e){return 0!==e.size}))).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations((function(n){for(var r=0;r<t.length;r++)e(t[r]).forEach((function(e){return n.add(e)}))})):this.constructor(t[0])},t.prototype.intersect=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.every((function(t){return t.includes(e)}))||r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.subtract=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.some((function(t){return t.includes(e)}))&&r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.sort=function(e){return Vr(Dt(this,e))},t.prototype.sortBy=function(e,t){return Vr(Dt(this,t,e))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){return this._map.__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):0===this.size?this.__empty():(this.__ownerID=e,this._map=t,this)},t}(ge);Er.isSet=dr;var yr,Sr=Er.prototype;function br(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function Ir(e,t){var n=Object.create(Sr);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function Or(){return yr||(yr=Ir(Cn()))}Sr["@@__IMMUTABLE_SET__@@"]=!0,Sr.delete=Sr.remove,Sr.merge=Sr.concat=Sr.union,Sr.withMutations=hn,Sr.asImmutable=En,Sr["@@transducer/init"]=Sr.asMutable=vn,Sr["@@transducer/step"]=function(e,t){return e.add(t)},Sr["@@transducer/result"]=function(e){return e.asImmutable()},Sr.__empty=Or,Sr.__make=Ir;var Dr,Tr=function(e){function t(e,n,r){if(!(this instanceof t))return new t(e,n,r);if(jt(0!==r,"Cannot step a Range by 0"),e=e||0,void 0===n&&(n=1/0),r=void 0===r?1:Math.abs(r),n<e&&(r=-r),this._start=e,this._end=n,this._step=r,this.size=Math.max(0,Math.ceil((n-e)/r-1)+1),0===this.size){if(Dr)return Dr;Dr=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},t.prototype.get=function(e,t){return this.has(e)?this._start+ne(this,e)*this._step:t},t.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},t.prototype.slice=function(e,n){return oe(e,n,this.size)?this:(e=ie(e,this.size),(n=se(n,this.size))<=e?new t(0,0):new t(this.get(e,this._end),this.get(n,this._end),this._step))},t.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},t.prototype.lastIndexOf=function(e){return this.indexOf(e)},t.prototype.__iterate=function(e,t){for(var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;i!==n&&!1!==e(o,t?n-++i:i++,this);)o+=t?-r:r;return i},t.prototype.__iterator=function(e,t){var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;return new Oe((function(){if(i===n)return{value:void 0,done:!0};var s=o;return o+=t?-r:r,De(e,t?n-++i:i++,s)}))},t.prototype.equals=function(e){return e instanceof t?this._start===e._start&&this._end===e._end&&this._step===e._step:gr(this,e)},t}(Pe);function kr(e,t,n){for(var r=Ft(t),o=0;o!==r.length;)if((e=Xt(e,r[o++],Q))===Q)return n;return e}function Ar(e,t){return kr(this,e,t)}function Rr(e,t){return kr(e,t,Q)!==Q}function wr(){Lt(this.size);var e={};return this.__iterate((function(t,n){e[n]=t})),e}le.isIterable=_e,le.isKeyed=pe,le.isIndexed=ue,le.isAssociative=fe,le.isOrdered=Se,le.Iterator=Oe,hr(le,{toArray:function(){Lt(this.size);var e=new Array(this.size||0),t=pe(this),n=0;return this.__iterate((function(r,o){e[n++]=t?[o,r]:r})),e},toIndexedSeq:function(){return new dt(this)},toJS:function(){return vr(this)},toKeyedSeq:function(){return new lt(this,!0)},toMap:function(){return Sn(this.toKeyedSeq())},toObject:wr,toOrderedMap:function(){return or(this.toKeyedSeq())},toOrderedSet:function(){return Vr(pe(this)?this.valueSeq():this)},toSet:function(){return Er(pe(this)?this.valueSeq():this)},toSetSeq:function(){return new mt(this)},toSeq:function(){return ue(this)?this.toIndexedSeq():pe(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return _r(pe(this)?this.valueSeq():this)},toList:function(){return Xn(pe(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Rt(this,It(this,e))},includes:function(e){return this.some((function(t){return Je(t,e)}))},entries:function(){return this.__iterator(2)},every:function(e,t){Lt(this.size);var n=!0;return this.__iterate((function(r,o,i){if(!e.call(t,r,o,i))return n=!1,!1})),n},filter:function(e,t){return Rt(this,yt(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return Lt(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Lt(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate((function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""})),t},keys:function(){return this.__iterator(0)},map:function(e,t){return Rt(this,vt(this,e,t))},reduce:function(e,t,n){return Mr(this,e,t,n,arguments.length<2,!1)},reduceRight:function(e,t,n){return Mr(this,e,t,n,arguments.length<2,!0)},reverse:function(){return Rt(this,Et(this,!0))},slice:function(e,t){return Rt(this,St(this,e,t,!0))},some:function(e,t){return!this.every(Lr(e),t)},sort:function(e){return Rt(this,Dt(this,e))},values:function(){return this.__iterator(1)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some((function(){return!0}))},count:function(e,t){return te(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Sn().asMutable();return e.__iterate((function(o,i){r.update(t.call(n,o,i,e),0,(function(e){return e+1}))})),r.asImmutable()}(this,e,t)},equals:function(e){return gr(this,e)},entrySeq:function(){var e=this;if(e._cache)return new Le(e._cache);var t=e.toSeq().map(jr).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(Lr(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate((function(n,o,i){if(e.call(t,n,o,i))return r=[o,n],!1})),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(e){return this.find(re,null,e)},flatMap:function(e,t){return Rt(this,function(e,t,n){var r=xt(e);return e.toSeq().map((function(o,i){return r(t.call(n,o,i,e))})).flatten(!0)}(this,e,t))},flatten:function(e){return Rt(this,Ot(this,e,!0))},fromEntrySeq:function(){return new gt(this)},get:function(e,t){return this.find((function(t,n){return Je(n,e)}),void 0,t)},getIn:Ar,groupBy:function(e,t){return function(e,t,n){var r=pe(e),o=(Se(e)?or():Sn()).asMutable();e.__iterate((function(i,s){o.update(t.call(n,i,s,e),(function(e){return(e=e||[]).push(r?[s,i]:i),e}))}));var i=xt(e);return o.map((function(t){return Rt(e,i(t))})).asImmutable()}(this,e,t)},has:function(e){return this.get(e,Q)!==Q},hasIn:function(e){return Rr(this,e)},isSubset:function(e){return e="function"==typeof e.includes?e:le(e),this.every((function(t){return e.includes(t)}))},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:le(e)).isSubset(this)},keyOf:function(e){return this.findKey((function(t){return Je(t,e)}))},keySeq:function(){return this.toSeq().map(Pr).toIndexedSeq()},last:function(e){return this.toSeq().reverse().first(e)},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return Tt(this,e)},maxBy:function(e,t){return Tt(this,t,e)},min:function(e){return Tt(this,e?Fr(e):Ur)},minBy:function(e,t){return Tt(this,t?Fr(t):Ur,e)},rest:function(){return this.slice(1)},skip:function(e){return 0===e?this:this.slice(Math.max(0,e))},skipLast:function(e){return 0===e?this:this.slice(0,-Math.max(0,e))},skipWhile:function(e,t){return Rt(this,bt(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(Lr(e),t)},sortBy:function(e,t){return Rt(this,Dt(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return this.slice(-Math.max(0,e))},takeWhile:function(e,t){return Rt(this,function(e,t,n){var r=Nt(e);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var s=0;return e.__iterate((function(e,o,a){return t.call(n,e,o,a)&&++s&&r(e,o,i)})),s},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var s=e.__iterator(2,o),a=!0;return new Oe((function(){if(!a)return{value:void 0,done:!0};var e=s.next();if(e.done)return e;var o=e.value,c=o[0],_=o[1];return t.call(n,_,c,i)?2===r?e:De(r,c,_,e):(a=!1,{value:void 0,done:!0})}))},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(Lr(e),t)},update:function(e){return e(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=Se(e),n=pe(e),r=t?1:0;return function(e,t){return t=$e(t,3432918353),t=$e(t<<15|t>>>-15,461845907),t=$e(t<<13|t>>>-13,5),t=$e((t=(t+3864292196|0)^e)^t>>>16,2246822507),t=qe((t=$e(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+zr(Qe(e),Qe(t))|0}:function(e,t){r=r+zr(Qe(e),Qe(t))|0}:t?function(e){r=31*r+Qe(e)|0}:function(e){r=r+Qe(e)|0}),r)}(this))}});var xr=le.prototype;xr["@@__IMMUTABLE_ITERABLE__@@"]=!0,xr[Ie]=xr.values,xr.toJSON=xr.toArray,xr.__toStringMapper=Vt,xr.inspect=xr.toSource=function(){return this.toString()},xr.chain=xr.flatMap,xr.contains=xr.includes,hr(de,{flip:function(){return Rt(this,ht(this))},mapEntries:function(e,t){var n=this,r=0;return Rt(this,this.toSeq().map((function(o,i){return e.call(t,[i,o],r++,n)})).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Rt(this,this.toSeq().flip().map((function(r,o){return e.call(t,r,o,n)})).flip())}});var Nr=de.prototype;Nr["@@__IMMUTABLE_KEYED__@@"]=!0,Nr[Ie]=xr.entries,Nr.toJSON=wr,Nr.__toStringMapper=function(e,t){return Vt(t)+": "+Vt(e)},hr(me,{toKeyedSeq:function(){return new lt(this,!1)},filter:function(e,t){return Rt(this,yt(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return Rt(this,Et(this,!1))},slice:function(e,t){return Rt(this,St(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(t||0,0),0===n||2===n&&!t)return this;e=ie(e,e<0?this.count():this.size);var r=this.slice(0,e);return Rt(this,1===n?r:r.concat(Pt(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(e){return this.get(0,e)},flatten:function(e){return Rt(this,Ot(this,e,!1))},get:function(e,t){return(e=ne(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find((function(t,n){return n===e}),void 0,t)},has:function(e){return(e=ne(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Rt(this,function(e,t){var n=Nt(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return e.__iterate((function(e){return(!i||!1!==n(t,i++,o))&&!1!==n(e,i++,o)}),r),i},n.__iteratorUncached=function(n,r){var o,i=e.__iterator(1,r),s=0;return new Oe((function(){return(!o||s%2)&&(o=i.next()).done?o:s%2?De(n,s++,t):De(n,s++,o.value,o)}))},n}(this,e))},interleave:function(){var e=[this].concat(Pt(arguments)),t=At(this.toSeq(),Pe.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Rt(this,n)},keySeq:function(){return Tr(0,this.size)},last:function(e){return this.get(-1,e)},skipWhile:function(e,t){return Rt(this,bt(this,e,t,!1))},zip:function(){var e=[this].concat(Pt(arguments));return Rt(this,At(this,Gr,e))},zipAll:function(){var e=[this].concat(Pt(arguments));return Rt(this,At(this,Gr,e,!0))},zipWith:function(e){var t=Pt(arguments);return t[0]=this,Rt(this,At(this,e,t))}});var Cr=me.prototype;function Mr(e,t,n,r,o,i){return Lt(e.size),e.__iterate((function(e,i,s){o?(o=!1,n=e):n=t.call(r,n,e,i,s)}),i),n}function Pr(e,t){return t}function jr(e,t){return[t,e]}function Lr(e){return function(){return!e.apply(this,arguments)}}function Fr(e){return function(){return-e.apply(this,arguments)}}function Gr(){return Pt(arguments)}function Ur(e,t){return e<t?1:e>t?-1:0}function zr(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}Cr["@@__IMMUTABLE_INDEXED__@@"]=!0,Cr[ye]=!0,hr(ge,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),ge.prototype.has=xr.includes,ge.prototype.contains=ge.prototype.includes,hr(Me,de.prototype),hr(Pe,me.prototype),hr(je,ge.prototype);var Vr=function(e){function t(e){return null==e?Br():mr(e)?e:Br().withMutations((function(t){var n=ge(e);Lt(n.size),n.forEach((function(e){return t.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(de(e).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(Er);Vr.isOrderedSet=mr;var Hr,Xr=Vr.prototype;function Kr(e,t){var n=Object.create(Xr);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function Br(){return Hr||(Hr=Kr(sr()))}Xr[ye]=!0,Xr.zip=Cr.zip,Xr.zipWith=Cr.zipWith,Xr.zipAll=Cr.zipAll,Xr.__empty=Br,Xr.__make=Kr;var Wr=function(e,t){var n;!function(e){if(ve(e))throw new Error("Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.");if(Ee(e))throw new Error("Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.");if(null===e||"object"!=typeof e)throw new Error("Can not call `Record` with a non-object as default values. Use a plain javascript object instead.")}(e);var r=function(i){var s=this;if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var a=Object.keys(e),c=o._indices={};o._name=t,o._keys=a,o._defaultValues=e;for(var _=0;_<a.length;_++){var p=a[_];c[p]=_,o[p]?"object"==typeof console&&console.warn&&console.warn("Cannot define "+qr(this)+' with property "'+p+'" since that property name is part of the Record API.'):Qr(o,p)}}return this.__ownerID=void 0,this._values=Xn().withMutations((function(e){e.setSize(s._keys.length),de(i).forEach((function(t,n){e.set(s._indices[n],t===s._defaultValues[n]?void 0:t)}))})),this},o=r.prototype=Object.create(Jr);return o.constructor=r,t&&(r.displayName=t),r};Wr.prototype.toString=function(){for(var e,t=qr(this)+" { ",n=this._keys,r=0,o=n.length;r!==o;r++)t+=(r?", ":"")+(e=n[r])+": "+Vt(this.get(e));return t+" }"},Wr.prototype.equals=function(e){return this===e||e&&Yr(this).equals(Yr(e))},Wr.prototype.hashCode=function(){return Yr(this).hashCode()},Wr.prototype.has=function(e){return this._indices.hasOwnProperty(e)},Wr.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._indices[e],r=this._values.get(n);return void 0===r?this._defaultValues[e]:r},Wr.prototype.set=function(e,t){if(this.has(e)){var n=this._values.set(this._indices[e],t===this._defaultValues[e]?void 0:t);if(n!==this._values&&!this.__ownerID)return $r(this,n)}return this},Wr.prototype.remove=function(e){return this.set(e)},Wr.prototype.clear=function(){var e=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:$r(this,e)},Wr.prototype.wasAltered=function(){return this._values.wasAltered()},Wr.prototype.toSeq=function(){return Yr(this)},Wr.prototype.toJS=function(){return vr(this)},Wr.prototype.entries=function(){return this.__iterator(2)},Wr.prototype.__iterator=function(e,t){return Yr(this).__iterator(e,t)},Wr.prototype.__iterate=function(e,t){return Yr(this).__iterate(e,t)},Wr.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._values.__ensureOwner(e);return e?$r(this,t,e):(this.__ownerID=e,this._values=t,this)},Wr.isRecord=ve,Wr.getDescriptiveName=qr;var Jr=Wr.prototype;function $r(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._values=t,r.__ownerID=n,r}function qr(e){return e.constructor.displayName||e.constructor.name||"Record"}function Yr(e){return Ve(e._keys.map((function(t){return[t,e.get(t)]})))}function Qr(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){jt(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}catch(n){}}Jr["@@__IMMUTABLE_RECORD__@@"]=!0,Jr.delete=Jr.remove,Jr.deleteIn=Jr.removeIn=Zt,Jr.getIn=Ar,Jr.hasIn=xr.hasIn,Jr.merge=rn,Jr.mergeWith=on,Jr.mergeIn=mn,Jr.mergeDeep=ln,Jr.mergeDeepWith=dn,Jr.mergeDeepIn=gn,Jr.setIn=Yt,Jr.update=tn,Jr.updateIn=nn,Jr.withMutations=hn,Jr.asMutable=vn,Jr.asImmutable=En,Jr[Ie]=Jr.entries,Jr.toJSON=Jr.toObject=xr.toObject,Jr.inspect=Jr.toSource=function(){return this.toString()};var Zr,eo=function(e){function t(e,n){if(!(this instanceof t))return new t(e,n);if(this._value=e,this.size=void 0===n?1/0:Math.max(0,n),0===this.size){if(Zr)return Zr;Zr=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},t.prototype.get=function(e,t){return this.has(e)?this._value:t},t.prototype.includes=function(e){return Je(this._value,e)},t.prototype.slice=function(e,n){var r=this.size;return oe(e,n,r)?this:new t(this._value,se(n,r)-ie(e,r))},t.prototype.reverse=function(){return this},t.prototype.indexOf=function(e){return Je(this._value,e)?0:-1},t.prototype.lastIndexOf=function(e){return Je(this._value,e)?this.size:-1},t.prototype.__iterate=function(e,t){for(var n=this.size,r=0;r!==n&&!1!==e(this._value,t?n-++r:r++,this););return r},t.prototype.__iterator=function(e,t){var n=this,r=this.size,o=0;return new Oe((function(){return o===r?{value:void 0,done:!0}:De(e,t?r-++o:o++,n._value)}))},t.prototype.equals=function(e){return e instanceof t?Je(this._value,e._value):gr(e)},t}(Pe);function to(e,t){return no([],t||ro,e,"",t&&t.length>2?[]:void 0,{"":e})}function no(e,t,n,r,o,i){var s=Array.isArray(n)?Pe:Ut(n)?Me:null;if(s){if(~e.indexOf(n))throw new TypeError("Cannot convert circular structure to Immutable");e.push(n),o&&""!==r&&o.push(r);var a=t.call(i,r,s(n).map((function(r,i){return no(e,t,r,i,o,n)})),o&&o.slice());return e.pop(),o&&o.pop(),a}return n}function ro(e,t){return pe(t)?t.toMap():t.toList()}var oo={version:"4.0.0-rc.14",Collection:le,Iterable:le,Seq:Ce,Map:Sn,OrderedMap:or,List:Xn,Stack:_r,Set:Er,OrderedSet:Vr,Record:Wr,Range:Tr,Repeat:eo,is:Je,fromJS:to,hash:Qe,isImmutable:Ee,isCollection:_e,isKeyed:pe,isIndexed:ue,isAssociative:fe,isOrdered:Se,isValueObject:We,isPlainObject:Ut,isSeq:he,isList:Hn,isMap:Ke,isOrderedMap:Be,isStack:cr,isSet:dr,isOrderedSet:mr,isRecord:ve,get:Xt,getIn:kr,has:Ht,hasIn:Rr,merge:an,mergeDeep:_n,mergeWith:cn,mergeDeepWith:pn,remove:Bt,removeIn:Qt,set:Wt,setIn:qt,update:en,updateIn:Jt},io=le,so=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:oo,Collection:le,Iterable:io,List:Xn,Map:Sn,OrderedMap:or,OrderedSet:Vr,Range:Tr,Record:Wr,Repeat:eo,Seq:Ce,Set:Er,Stack:_r,fromJS:to,get:Xt,getIn:kr,has:Ht,hasIn:Rr,hash:Qe,is:Je,isAssociative:fe,isCollection:_e,isImmutable:Ee,isIndexed:ue,isKeyed:pe,isList:Hn,isMap:Ke,isOrdered:Se,isOrderedMap:Be,isOrderedSet:mr,isPlainObject:Ut,isRecord:ve,isSeq:he,isSet:dr,isStack:cr,isValueObject:We,merge:an,mergeDeep:_n,mergeDeepWith:pn,mergeWith:cn,remove:Bt,removeIn:Qt,set:Wt,setIn:qt,update:en,updateIn:Jt,version:"4.0.0-rc.14"});p(M).compose;const ao=oo.Map(),co=C(Y);function _o(e){return po.store=R(e,ao,co),window.store=po.store,po.store.subscribe((()=>{var e;(e=po.store.getState()).get("auth").get("isLoggedIn")&&localStorage.setItem(y.publicRuntimeConfig.localStorageKey,JSON.stringify(e.get("auth")))})),po.store}class po{}var uo,fo;s(po,"symbol"!=typeof(uo="store")?uo+"":uo,fo);var lo={exports:{}},mo={},go=60103,ho=60106,vo=60107,Eo=60108,yo=60114,So=60109,bo=60110,Io=60112,Oo=60113,Do=60120,To=60115,ko=60116,Ao=60121,Ro=60122,wo=60117,xo=60129,No=60131;if("function"==typeof Symbol&&Symbol.for){var Co=Symbol.for;go=Co("react.element"),ho=Co("react.portal"),vo=Co("react.fragment"),Eo=Co("react.strict_mode"),yo=Co("react.profiler"),So=Co("react.provider"),bo=Co("react.context"),Io=Co("react.forward_ref"),Oo=Co("react.suspense"),Do=Co("react.suspense_list"),To=Co("react.memo"),ko=Co("react.lazy"),Ao=Co("react.block"),Ro=Co("react.server.block"),wo=Co("react.fundamental"),xo=Co("react.debug_trace_mode"),No=Co("react.legacy_hidden")}function Mo(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case go:switch(e=e.type){case vo:case yo:case Eo:case Oo:case Do:return e;default:switch(e=e&&e.$$typeof){case bo:case Io:case ko:case To:case So:return e;default:return t}}case ho:return t}}}var Po=So,jo=go,Lo=Io,Fo=vo,Go=ko,Uo=To,zo=ho,Vo=yo,Ho=Eo,Xo=Oo;mo.ContextConsumer=bo,mo.ContextProvider=Po,mo.Element=jo,mo.ForwardRef=Lo,mo.Fragment=Fo,mo.Lazy=Go,mo.Memo=Uo,mo.Portal=zo,mo.Profiler=Vo,mo.StrictMode=Ho,mo.Suspense=Xo,mo.isAsyncMode=function(){return!1},mo.isConcurrentMode=function(){return!1},mo.isContextConsumer=function(e){return Mo(e)===bo},mo.isContextProvider=function(e){return Mo(e)===So},mo.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===go},mo.isForwardRef=function(e){return Mo(e)===Io},mo.isFragment=function(e){return Mo(e)===vo},mo.isLazy=function(e){return Mo(e)===ko},mo.isMemo=function(e){return Mo(e)===To},mo.isPortal=function(e){return Mo(e)===ho},mo.isProfiler=function(e){return Mo(e)===yo},mo.isStrictMode=function(e){return Mo(e)===Eo},mo.isSuspense=function(e){return Mo(e)===Oo},mo.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===vo||e===yo||e===xo||e===Eo||e===Oo||e===Do||e===No||"object"==typeof e&&null!==e&&(e.$$typeof===ko||e.$$typeof===To||e.$$typeof===So||e.$$typeof===bo||e.$$typeof===Io||e.$$typeof===wo||e.$$typeof===Ao||e[0]===Ro)},mo.typeOf=Mo,lo.exports=mo;function Ko(e){function t(e,r,c,_,f){for(var l,d,m,g,y,b=0,I=0,O=0,D=0,T=0,N=0,M=m=l=0,j=0,L=0,F=0,G=0,U=c.length,z=U-1,V="",H="",X="",K="";j<U;){if(d=c.charCodeAt(j),j===z&&I+D+O+b!==0&&(0!==I&&(d=47===I?10:47),D=O=b=0,U++,z++),I+D+O+b===0){if(j===z&&(0<L&&(V=V.replace(u,"")),0<V.trim().length)){switch(d){case 32:case 9:case 59:case 13:case 10:break;default:V+=c.charAt(j)}d=59}switch(d){case 123:for(l=(V=V.trim()).charCodeAt(0),m=1,G=++j;j<U;){switch(d=c.charCodeAt(j)){case 123:m++;break;case 125:m--;break;case 47:switch(d=c.charCodeAt(j+1)){case 42:case 47:e:{for(M=j+1;M<z;++M)switch(c.charCodeAt(M)){case 47:if(42===d&&42===c.charCodeAt(M-1)&&j+2!==M){j=M+1;break e}break;case 10:if(47===d){j=M+1;break e}}j=M}}break;case 91:d++;case 40:d++;case 34:case 39:for(;j++<z&&c.charCodeAt(j)!==d;);}if(0===m)break;j++}switch(m=c.substring(G,j),0===l&&(l=(V=V.replace(p,"").trim()).charCodeAt(0)),l){case 64:switch(0<L&&(V=V.replace(u,"")),d=V.charCodeAt(1)){case 100:case 109:case 115:case 45:L=r;break;default:L=x}if(G=(m=t(r,L,m,d,f+1)).length,0<C&&(y=a(3,m,L=n(x,V,F),r,A,k,G,d,f,_),V=L.join(""),void 0!==y&&0===(G=(m=y.trim()).length)&&(d=0,m="")),0<G)switch(d){case 115:V=V.replace(S,s);case 100:case 109:case 45:m=V+"{"+m+"}";break;case 107:m=(V=V.replace(h,"$1 $2"))+"{"+m+"}",m=1===w||2===w&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=V+m,112===_&&(H+=m,m="")}else m="";break;default:m=t(r,n(r,V,F),m,_,f+1)}X+=m,m=F=L=M=l=0,V="",d=c.charCodeAt(++j);break;case 125:case 59:if(1<(G=(V=(0<L?V.replace(u,""):V).trim()).length))switch(0===M&&(l=V.charCodeAt(0),45===l||96<l&&123>l)&&(G=(V=V.replace(" ",":")).length),0<C&&void 0!==(y=a(1,V,r,e,A,k,H.length,_,f,_))&&0===(G=(V=y.trim()).length)&&(V="\0\0"),l=V.charCodeAt(0),d=V.charCodeAt(1),l){case 0:break;case 64:if(105===d||99===d){K+=V+c.charAt(j);break}default:58!==V.charCodeAt(G-1)&&(H+=o(V,l,d,V.charCodeAt(2)))}F=L=M=l=0,V="",d=c.charCodeAt(++j)}}switch(d){case 13:case 10:47===I?I=0:1+l===0&&107!==_&&0<V.length&&(L=1,V+="\0"),0<C*P&&a(0,V,r,e,A,k,H.length,_,f,_),k=1,A++;break;case 59:case 125:if(I+D+O+b===0){k++;break}default:switch(k++,g=c.charAt(j),d){case 9:case 32:if(D+b+I===0)switch(T){case 44:case 58:case 9:case 32:g="";break;default:32!==d&&(g=" ")}break;case 0:g="\\0";break;case 12:g="\\f";break;case 11:g="\\v";break;case 38:D+I+b===0&&(L=F=1,g="\f"+g);break;case 108:if(D+I+b+R===0&&0<M)switch(j-M){case 2:112===T&&58===c.charCodeAt(j-3)&&(R=T);case 8:111===N&&(R=N)}break;case 58:D+I+b===0&&(M=j);break;case 44:I+O+D+b===0&&(L=1,g+="\r");break;case 34:case 39:0===I&&(D=D===d?0:0===D?d:D);break;case 91:D+I+O===0&&b++;break;case 93:D+I+O===0&&b--;break;case 41:D+I+b===0&&O--;break;case 40:if(D+I+b===0){if(0===l)switch(2*T+3*N){case 533:break;default:l=1}O++}break;case 64:I+O+D+b+M+m===0&&(m=1);break;case 42:case 47:if(!(0<D+b+O))switch(I){case 0:switch(2*d+3*c.charCodeAt(j+1)){case 235:I=47;break;case 220:G=j,I=42}break;case 42:47===d&&42===T&&G+2!==j&&(33===c.charCodeAt(G+2)&&(H+=c.substring(G,j+1)),g="",I=0)}}0===I&&(V+=g)}N=T,T=d,j++}if(0<(G=H.length)){if(L=r,0<C&&(void 0!==(y=a(2,H,L,e,A,k,G,_,f,_))&&0===(H=y).length))return K+H+X;if(H=L.join(",")+"{"+H+"}",w*R!=0){switch(2!==w||i(H,2)||(R=0),R){case 111:H=H.replace(E,":-moz-$1")+H;break;case 112:H=H.replace(v,"::-webkit-input-$1")+H.replace(v,"::-moz-$1")+H.replace(v,":-ms-input-$1")+H}R=0}}return K+H+X}function n(e,t,n){var o=t.trim().split(m);t=o;var i=o.length,s=e.length;switch(s){case 0:case 1:var a=0;for(e=0===s?"":e[0]+" ";a<i;++a)t[a]=r(e,t[a],n).trim();break;default:var c=a=0;for(t=[];a<i;++a)for(var _=0;_<s;++_)t[c++]=r(e[_]+" ",o[a],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var s=e+";",a=2*t+3*n+4*r;if(944===a){e=s.indexOf(":",9)+1;var c=s.substring(e,s.length-1).trim();return c=s.substring(0,e).trim()+c+";",1===w||2===w&&i(c,1)?"-webkit-"+c+c:c}if(0===w||2===w&&!i(s,1))return s;switch(a){case 1015:return 97===s.charCodeAt(10)?"-webkit-"+s+s:s;case 951:return 116===s.charCodeAt(3)?"-webkit-"+s+s:s;case 963:return 110===s.charCodeAt(5)?"-webkit-"+s+s:s;case 1009:if(100!==s.charCodeAt(4))break;case 969:case 942:return"-webkit-"+s+s;case 978:return"-webkit-"+s+"-moz-"+s+s;case 1019:case 983:return"-webkit-"+s+"-moz-"+s+"-ms-"+s+s;case 883:if(45===s.charCodeAt(8))return"-webkit-"+s+s;if(0<s.indexOf("image-set(",11))return s.replace(T,"$1-webkit-$2")+s;break;case 932:if(45===s.charCodeAt(4))switch(s.charCodeAt(5)){case 103:return"-webkit-box-"+s.replace("-grow","")+"-webkit-"+s+"-ms-"+s.replace("grow","positive")+s;case 115:return"-webkit-"+s+"-ms-"+s.replace("shrink","negative")+s;case 98:return"-webkit-"+s+"-ms-"+s.replace("basis","preferred-size")+s}return"-webkit-"+s+"-ms-"+s+s;case 964:return"-webkit-"+s+"-ms-flex-"+s+s;case 1023:if(99!==s.charCodeAt(8))break;return"-webkit-box-pack"+(c=s.substring(s.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+s+"-ms-flex-pack"+c+s;case 1005:return l.test(s)?s.replace(f,":-webkit-")+s.replace(f,":-moz-")+s:s;case 1e3:switch(t=(c=s.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(t)){case 226:c=s.replace(y,"tb");break;case 232:c=s.replace(y,"tb-rl");break;case 220:c=s.replace(y,"lr");break;default:return s}return"-webkit-"+s+"-ms-"+c+s;case 1017:if(-1===s.indexOf("sticky",9))break;case 975:switch(t=(s=e).length-10,a=(c=(33===s.charCodeAt(t)?s.substring(0,t):s).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:s=s.replace(c,"-webkit-"+c)+";"+s;break;case 207:case 102:s=s.replace(c,"-webkit-"+(102<a?"inline-":"")+"box")+";"+s.replace(c,"-webkit-"+c)+";"+s.replace(c,"-ms-"+c+"box")+";"+s}return s+";";case 938:if(45===s.charCodeAt(5))switch(s.charCodeAt(6)){case 105:return c=s.replace("-items",""),"-webkit-"+s+"-webkit-box-"+c+"-ms-flex-"+c+s;case 115:return"-webkit-"+s+"-ms-flex-item-"+s.replace(I,"")+s;default:return"-webkit-"+s+"-ms-flex-line-pack"+s.replace("align-content","").replace(I,"")+s}break;case 973:case 989:if(45!==s.charCodeAt(3)||122===s.charCodeAt(4))break;case 931:case 953:if(!0===D.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):s.replace(c,"-webkit-"+c)+s.replace(c,"-moz-"+c.replace("fill-",""))+s;break;case 962:if(s="-webkit-"+s+(102===s.charCodeAt(5)?"-ms-"+s:"")+s,n+r===211&&105===s.charCodeAt(13)&&0<s.indexOf("transform",10))return s.substring(0,s.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+s}return s}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),M(2!==t?r:r.replace(O,"$1"),n,t)}function s(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(b," or ($1)").substring(4):"("+t+")"}function a(e,t,n,r,o,i,s,a,c,p){for(var u,f=0,l=t;f<C;++f)switch(u=N[f].call(_,e,l,n,r,o,i,s,a,c,p)){case void 0:case!1:case!0:case null:break;default:l=u}if(l!==t)return l}function c(e){return void 0!==(e=e.prefix)&&(M=null,e?"function"!=typeof e?w=1:(w=2,M=e):w=0),c}function _(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<C){var o=a(-1,n,r,r,A,k,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(x,r,n,0,0);return 0<C&&(void 0!==(o=a(-2,i,r,r,A,k,i.length,0,0,0))&&(i=o)),"",R=0,k=A=1,i}var p=/^\0+/g,u=/[\0\r\f]/g,f=/: */g,l=/zoo|gra/,d=/([,: ])(transform)/g,m=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,h=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,E=/:(read-only)/g,y=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,b=/([\s\S]*?);/g,I=/-self|flex-/g,O=/[^]*?(:[rp][el]a[\w-]+)[^]*/,D=/stretch|:\s*\w+\-(?:conte|avail)/,T=/([^-])(image-set\()/,k=1,A=1,R=0,w=1,x=[],N=[],C=0,M=null,P=0;return _.use=function e(t){switch(t){case void 0:case null:C=N.length=0;break;default:if("function"==typeof t)N[C++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else P=0|!!t}return e},_.set=c,void 0!==e&&c(e),_}var Bo={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Wo,Jo,$o=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,qo=(Wo=function(e){return $o.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91},Jo={},function(e){return void 0===Jo[e]&&(Jo[e]=Wo(e)),Jo[e]}),Yo={exports:{}},Qo={},Zo="function"==typeof Symbol&&Symbol.for,ei=Zo?Symbol.for("react.element"):60103,ti=Zo?Symbol.for("react.portal"):60106,ni=Zo?Symbol.for("react.fragment"):60107,ri=Zo?Symbol.for("react.strict_mode"):60108,oi=Zo?Symbol.for("react.profiler"):60114,ii=Zo?Symbol.for("react.provider"):60109,si=Zo?Symbol.for("react.context"):60110,ai=Zo?Symbol.for("react.async_mode"):60111,ci=Zo?Symbol.for("react.concurrent_mode"):60111,_i=Zo?Symbol.for("react.forward_ref"):60112,pi=Zo?Symbol.for("react.suspense"):60113,ui=Zo?Symbol.for("react.suspense_list"):60120,fi=Zo?Symbol.for("react.memo"):60115,li=Zo?Symbol.for("react.lazy"):60116,di=Zo?Symbol.for("react.block"):60121,mi=Zo?Symbol.for("react.fundamental"):60117,gi=Zo?Symbol.for("react.responder"):60118,hi=Zo?Symbol.for("react.scope"):60119;function vi(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case ei:switch(e=e.type){case ai:case ci:case ni:case oi:case ri:case pi:return e;default:switch(e=e&&e.$$typeof){case si:case _i:case li:case fi:case ii:return e;default:return t}}case ti:return t}}}function Ei(e){return vi(e)===ci}Qo.AsyncMode=ai,Qo.ConcurrentMode=ci,Qo.ContextConsumer=si,Qo.ContextProvider=ii,Qo.Element=ei,Qo.ForwardRef=_i,Qo.Fragment=ni,Qo.Lazy=li,Qo.Memo=fi,Qo.Portal=ti,Qo.Profiler=oi,Qo.StrictMode=ri,Qo.Suspense=pi,Qo.isAsyncMode=function(e){return Ei(e)||vi(e)===ai},Qo.isConcurrentMode=Ei,Qo.isContextConsumer=function(e){return vi(e)===si},Qo.isContextProvider=function(e){return vi(e)===ii},Qo.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===ei},Qo.isForwardRef=function(e){return vi(e)===_i},Qo.isFragment=function(e){return vi(e)===ni},Qo.isLazy=function(e){return vi(e)===li},Qo.isMemo=function(e){return vi(e)===fi},Qo.isPortal=function(e){return vi(e)===ti},Qo.isProfiler=function(e){return vi(e)===oi},Qo.isStrictMode=function(e){return vi(e)===ri},Qo.isSuspense=function(e){return vi(e)===pi},Qo.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===ni||e===ci||e===oi||e===ri||e===pi||e===ui||"object"==typeof e&&null!==e&&(e.$$typeof===li||e.$$typeof===fi||e.$$typeof===ii||e.$$typeof===si||e.$$typeof===_i||e.$$typeof===mi||e.$$typeof===gi||e.$$typeof===hi||e.$$typeof===di)},Qo.typeOf=vi,Yo.exports=Qo;var yi=Yo.exports,Si={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},bi={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Ii={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Oi={};function Di(e){return yi.isMemo(e)?Ii:Oi[e.$$typeof]||Si}Oi[yi.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Oi[yi.Memo]=Ii;var Ti=Object.defineProperty,ki=Object.getOwnPropertyNames,Ai=Object.getOwnPropertySymbols,Ri=Object.getOwnPropertyDescriptor,wi=Object.getPrototypeOf,xi=Object.prototype;var Ni=function e(t,n,r){if("string"!=typeof n){if(xi){var o=wi(n);o&&o!==xi&&e(t,o,r)}var i=ki(n);Ai&&(i=i.concat(Ai(n)));for(var s=Di(t),a=Di(n),c=0;c<i.length;++c){var _=i[c];if(!(bi[_]||r&&r[_]||a&&a[_]||s&&s[_])){var p=Ri(n,_);try{Ti(t,_,p)}catch(u){}}}}return t};function Ci(){return(Ci=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Mi=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Pi=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!lo.exports.typeOf(e)},ji=Object.freeze([]),Li=Object.freeze({});function Fi(e){return"function"==typeof e}function Gi(e){return e.displayName||e.name||"Component"}function Ui(e){return e&&"string"==typeof e.styledComponentId}var zi="undefined"!=typeof process&&{GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_ATTR||"data-styled",Vi="undefined"!=typeof window&&"HTMLElement"in window,Hi=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY&&""!=={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY?{GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY&&""!=={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY&&{GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.SC_DISABLE_SPEEDY),Xi={};function Ki(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Bi=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&Ki(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var s=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(s,t[a])&&(this.groupSizes[e]++,s++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),Wi=new Map,Ji=new Map,$i=1,qi=function(e){if(Wi.has(e))return Wi.get(e);for(;Ji.has($i);)$i++;var t=$i++;return Wi.set(e,t),Ji.set(t,e),t},Yi=function(e){return Ji.get(e)},Qi=function(e,t){t>=$i&&($i=t+1),Wi.set(e,t),Ji.set(t,e)},Zi="style["+zi+'][data-styled-version="5.3.1"]',es=new RegExp("^"+zi+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),ts=function(e,t,n){for(var r,o=n.split(","),i=0,s=o.length;i<s;i++)(r=o[i])&&e.registerName(t,r)},ns=function(e,t){for(var n=(t.innerHTML||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var s=n[o].trim();if(s){var a=s.match(es);if(a){var c=0|parseInt(a[1],10),_=a[2];0!==c&&(Qi(_,c),ts(e,_,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(s)}}},rs=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},os=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(zi))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(zi,"active"),r.setAttribute("data-styled-version","5.3.1");var s=rs();return s&&r.setAttribute("nonce",s),n.insertBefore(r,i),r},is=function(){function e(e){var t=this.element=os(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}Ki(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(n){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),ss=function(){function e(e){var t=this.element=os(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),as=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),cs=Vi,_s={isServer:!Vi,useCSSOMInjection:!Hi},ps=function(){function e(e,t,n){void 0===e&&(e=Li),void 0===t&&(t={}),this.options=Ci({},_s,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&Vi&&cs&&(cs=!1,function(e){for(var t=document.querySelectorAll(Zi),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(zi)&&(ns(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return qi(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ci({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new as(o):r?new is(o):new ss(o),new Bi(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(qi(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(qi(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(qi(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=Yi(o);if(void 0!==i){var s=e.names.get(i),a=t.getGroup(o);if(s&&a&&s.size){var c=zi+".g"+o+'[id="'+i+'"]',_="";void 0!==s&&s.forEach((function(e){e.length>0&&(_+=e+",")})),r+=""+a+c+'{content:"'+_+'"}/*!sc*/\n'}}}return r}(this)},e}(),us=/(a)(d)/gi,fs=function(e){return String.fromCharCode(e+(e>25?39:97))};function ls(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=fs(t%52)+n;return(fs(t%52)+n).replace(us,"$1-$2")}var ds=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ms=function(e){return ds(5381,e)};function gs(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Fi(n)&&!Ui(n))return!1}return!0}var hs=ms("5.3.1"),vs=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&gs(e),this.componentId=t,this.baseHash=ds(hs,t),this.baseStyle=n,ps.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Ls(this.rules,e,t,n).join(""),s=ls(ds(this.baseHash,i)>>>0);if(!t.hasNameForId(r,s)){var a=n(i,"."+s,void 0,r);t.insertRules(r,s,a)}o.push(s),this.staticRulesId=s}else{for(var c=this.rules.length,_=ds(this.baseHash,n.hash),p="",u=0;u<c;u++){var f=this.rules[u];if("string"==typeof f)p+=f;else if(f){var l=Ls(f,e,t,n),d=Array.isArray(l)?l.join(""):l;_=ds(_,d+u),p+=d}}if(p){var m=ls(_>>>0);if(!t.hasNameForId(r,m)){var g=n(p,"."+m,void 0,r);t.insertRules(r,m,g)}o.push(m)}}return o.join(" ")},e}(),Es=/^\s*\/\/.*$/gm,ys=[":","[",".","#"];function Ss(e){var t,n,r,o,i=void 0===e?Li:e,s=i.options,a=void 0===s?Li:s,c=i.plugins,_=void 0===c?ji:c,p=new Ko(a),u=[],f=function(e){function t(t){if(t)try{e(t+"}")}catch(n){}}return function(n,r,o,i,s,a,c,_,p,u){switch(n){case 1:if(0===p&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===_)return r+"/*|*/";break;case 3:switch(_){case 102:case 112:return e(o[0]+r),"";default:return r+(0===u?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){u.push(e)})),l=function(e,r,i){return 0===r&&-1!==ys.indexOf(i[n.length])||i.match(o)?e:"."+t};function d(e,i,s,a){void 0===a&&(a="&");var c=e.replace(Es,""),_=i&&s?s+" "+i+" { "+c+" }":c;return t=a,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),p(s||!i?"":i,_)}return p.use([].concat(_,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,l))},f,function(e){if(-2===e){var t=u;return u=[],t}}])),d.hash=_.length?_.reduce((function(e,t){return t.name||Ki(15),ds(e,t.name)}),5381).toString():"",d}var bs=u.createContext(),Is=bs.Consumer,Os=u.createContext(),Ds=(Os.Consumer,new ps),Ts=Ss();function ks(){return f.exports.useContext(bs)||Ds}function As(){return f.exports.useContext(Os)||Ts}function Rs(e){var t=f.exports.useState(e.stylisPlugins),n=t[0],r=t[1],o=ks(),i=f.exports.useMemo((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),s=f.exports.useMemo((function(){return Ss({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return f.exports.useEffect((function(){(function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),s=Object.keys(t);if(i.length!==s.length)return!1;for(var a=Object.prototype.hasOwnProperty.bind(t),c=0;c<i.length;c++){var _=i[c];if(!a(_))return!1;var p=e[_],u=t[_];if(!1===(o=n?n.call(r,p,u,_):void 0)||void 0===o&&p!==u)return!1}return!0})(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),u.createElement(bs.Provider,{value:i},u.createElement(Os.Provider,{value:s},e.children))}var ws=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ts);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Ki(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ts),this.name+e.hash},e}(),xs=/([A-Z])/,Ns=/([A-Z])/g,Cs=/^ms-/,Ms=function(e){return"-"+e.toLowerCase()};function Ps(e){return xs.test(e)?e.replace(Ns,Ms).replace(Cs,"-ms-"):e}var js=function(e){return null==e||!1===e||""===e};function Ls(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],s=0,a=e.length;s<a;s+=1)""!==(o=Ls(e[s],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return js(e)?"":Ui(e)?"."+e.styledComponentId:Fi(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!t?e:Ls(e(t),t,n,r):e instanceof ws?n?(e.inject(n,r),e.getName(r)):e:Pi(e)?function e(t,n){var r,o,i=[];for(var s in t)t.hasOwnProperty(s)&&!js(t[s])&&(Array.isArray(t[s])&&t[s].isCss||Fi(t[s])?i.push(Ps(s)+":",t[s],";"):Pi(t[s])?i.push.apply(i,e(t[s],s)):i.push(Ps(s)+": "+(r=s,(null==(o=t[s])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in Bo?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var c}var Fs=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Gs(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Fi(e)||Pi(e)?Fs(Ls(Mi(ji,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Fs(Ls(Mi(e,n)))}var Us=function(e,t,n){return void 0===n&&(n=Li),e.theme!==n.theme&&e.theme||t||n.theme},zs=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Vs=/(^-|-$)/g;function Hs(e){return e.replace(zs,"-").replace(Vs,"")}var Xs=function(e){return ls(ms(e)>>>0)};function Ks(e){return"string"==typeof e&&!0}var Bs=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ws=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Js(e,t,n){var r=e[n];Bs(t)&&Bs(r)?$s(r,t):e[n]=t}function $s(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var s=i[o];if(Bs(s))for(var a in s)Ws(a)&&Js(e,s[a],a)}return e}var qs=u.createContext(),Ys=qs.Consumer;function Qs(e){var t=f.exports.useContext(qs),n=f.exports.useMemo((function(){return n=e.theme,r=t,n?Fi(n)?n(r):Array.isArray(n)||"object"!=typeof n?Ki(8):r?Ci({},r,{},n):n:Ki(14);var n,r}),[e.theme,t]);return e.children?u.createElement(qs.Provider,{value:n},e.children):null}var Zs={};function ea(e,t,n){var r,o=Ui(e),i=!Ks(e),s=t.attrs,a=void 0===s?ji:s,c=t.componentId,_=void 0===c?function(e,t){var n="string"!=typeof e?"sc":Hs(e);Zs[n]=(Zs[n]||0)+1;var r=n+"-"+Xs("5.3.1"+n+Zs[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):c,p=t.displayName,l=void 0===p?Ks(r=e)?"styled."+r:"Styled("+Gi(r)+")":p,d=t.displayName&&t.componentId?Hs(t.displayName)+"-"+t.componentId:t.componentId||_,m=o&&e.attrs?Array.prototype.concat(e.attrs,a).filter(Boolean):a,g=t.shouldForwardProp;o&&e.shouldForwardProp&&(g=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var h,v=new vs(n,d,o?e.componentStyle:void 0),E=v.isStatic&&0===a.length,y=function(e,t){return function(e,t,n,r){var o,i,s,a,c,_=e.attrs,p=e.componentStyle,u=e.defaultProps,l=e.foldedComponentIds,d=e.shouldForwardProp,m=e.styledComponentId,g=e.target,h=function(e,t,n){void 0===e&&(e=Li);var r=Ci({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,s=e;for(t in Fi(s)&&(s=s(r)),s)r[t]=o[t]="className"===t?(n=o[t],i=s[t],n&&i?n+" "+i:n||i):s[t]})),[r,o]}(Us(t,f.exports.useContext(qs),u)||Li,t,_),v=h[0],E=h[1],y=(o=p,i=r,s=v,a=ks(),c=As(),i?o.generateAndInjectStyles(Li,a,c):o.generateAndInjectStyles(s,a,c)),S=n,b=E.$as||t.$as||E.as||t.as||g,I=Ks(b),O=E!==t?Ci({},t,{},E):t,D={};for(var T in O)"$"!==T[0]&&"as"!==T&&("forwardedAs"===T?D.as=O[T]:(d?d(T,qo,b):!I||qo(T))&&(D[T]=O[T]));return t.style&&E.style!==t.style&&(D.style=Ci({},t.style,{},E.style)),D.className=Array.prototype.concat(l,m,y!==m?y:null,t.className,E.className).filter(Boolean).join(" "),D.ref=S,f.exports.createElement(b,D)}(h,e,t,E)};return y.displayName=l,(h=u.forwardRef(y)).attrs=m,h.componentStyle=v,h.displayName=l,h.shouldForwardProp=g,h.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):ji,h.styledComponentId=d,h.target=o?e.target:e,h.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),i=r&&r+"-"+(Ks(e)?e:Hs(Gi(e)));return ea(e,Ci({},o,{attrs:m,componentId:i}),n)},Object.defineProperty(h,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?$s({},e.defaultProps,t):t}}),h.toString=function(){return"."+h.styledComponentId},i&&Ni(h,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),h}var ta=function(e){return function e(t,n,r){if(void 0===r&&(r=Li),!lo.exports.isValidElementType(n))return Ki(1,String(n));var o=function(){return t(n,r,Gs.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Ci({},r,{},o))},o.attrs=function(o){return e(t,n,Ci({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(ea,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){ta[e]=ta(e)}));var na=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=gs(e),ps.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ls(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&ps.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function ra(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Gs.apply(void 0,[e].concat(n)),i="sc-global-"+Xs(JSON.stringify(o)),s=new na(o,i);function a(e){var t=ks(),n=As(),r=f.exports.useContext(qs),o=f.exports.useRef(t.allocateGSInstance(i)).current;return t.server&&c(o,e,t,r,n),f.exports.useLayoutEffect((function(){if(!t.server)return c(o,e,t,r,n),function(){return s.removeStyles(o,t)}}),[o,e,t,r,n]),null}function c(e,t,n,r,o){if(s.isStatic)s.renderStyles(e,Xi,n,o);else{var i=Ci({},t,{theme:Us(t,r,a.defaultProps)});s.renderStyles(e,i,n,o)}}return u.memo(a)}var oa=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=rs();return"<style "+[n&&'nonce="'+n+'"',zi+'="true"','data-styled-version="5.3.1"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Ki(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return Ki(2);var n=((t={})[zi]="",t["data-styled-version"]="5.3.1",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=rs();return r&&(n.nonce=r),[u.createElement("style",Ci({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new ps({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?Ki(2):u.createElement(Rs,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return Ki(3)},e}(),ia={StyleSheet:ps,masterSheet:Ds},sa=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:ta,ServerStyleSheet:oa,StyleSheetConsumer:Is,StyleSheetContext:bs,StyleSheetManager:Rs,ThemeConsumer:Ys,ThemeContext:qs,ThemeProvider:Qs,__PRIVATE__:ia,createGlobalStyle:ra,css:Gs,isStyledComponent:Ui,keyframes:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Gs.apply(void 0,[e].concat(n)).join(""),i=Xs(o);return new ws(i,o)},useTheme:function(){return f.exports.useContext(qs)},version:"5.3.1",withTheme:function(e){var t=u.forwardRef((function(t,n){var r=f.exports.useContext(qs),o=e.defaultProps,i=Us(t,r,o);return u.createElement(e,Ci({},t,{theme:i,ref:n}))}));return Ni(t,e),t.displayName="WithTheme("+Gi(e)+")",t}});const aa=ra`
  /*! minireset.css v0.0.4 | MIT License | github.com/jgthms/minireset.css */
  html,
  body,
  p,
  ol,
  ul,
  li,
  dl,
  dt,
  dd,
  blockquote,
  figure,
  fieldset,
  legend,
  textarea,
  pre,
  iframe,
  hr,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
    padding: 0;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: 100%;
    font-weight: normal;
  }

  ul {
    list-style: none;
  }

  button,
  input,
  select,
  textarea {
    margin: 0;
  }

  html {
    box-sizing: border-box;
  }

  *, *:before, *:after {
    box-sizing: inherit;
  }

  img,
  embed,
  iframe,
  object,
  video {
    height: auto;
    max-width: 100%;
  }

  audio {
    max-width: 100%;
  }

  iframe {
    border: 0;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  td,
  th {
    padding: 0;
    text-align: left;
  }

  /* scrollbar-width is not inherited so apply to all elements. */
  * {
    scrollbar-width: thin;
  }

  ::selection {
    color: ${e=>e.theme.text};
    background-color: ${e=>e.theme.selected};
  }

  a {
    color: ${e=>e.theme.text};

    &:hover {
      color: ${e=>e.theme.blueHover};
    }

    &:active {
      color: ${e=>e.theme.bluePressed};
    }
  }

  html, body {
    width: 100%;
    height: 100%;
  }

  #app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  main {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  body {
    font-family: ${e=>e.theme.lato};
    font-size: 12px;
    color: ${e=>e.theme.text};
    background-color: ${e=>e.theme.background};
    scrollbar-color: #282c31 #5d646c;
  }

  .Modal {
    position: absolute;
    display: flex;
    flex: 1;
    outline: none;
    max-height: 100%;
    box-shadow: ${e=>e.theme.shadow30};
    margin-bottom: 10vh;
  }

  .Overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .ReactModal__Overlay--after-open {
    z-index: 100;
  }

  .sentry-error-embed {
    .form-field {
      margin-top: 20px;
    }

    .form-field:not(:last-child) {
      display: none;
    }
  }
`;var ca={exports:{}};function _a(){}function pa(){}pa.resetWarningCache=_a;ca.exports=function(){function e(e,t,n,r,o,i){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==i){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:pa,resetWarningCache:_a};return n.PropTypes=n,n}();var ua=ca.exports;var fa,la=f.exports,da=(fa=la)&&"object"==typeof fa&&"default"in fa?fa.default:fa;function ma(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ga=!("undefined"==typeof window||!window.document||!window.document.createElement);var ha=function(e,t,n){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(r){if("function"!=typeof r)throw new Error("Expected WrappedComponent to be a React component.");var o,i=[];function s(){o=e(i.map((function(e){return e.props}))),a.canUseDOM?t(o):n&&(o=n(o))}var a=function(e){var t,n;function a(){return e.apply(this,arguments)||this}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,a.peek=function(){return o},a.rewind=function(){if(a.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=o;return o=void 0,i=[],e};var c=a.prototype;return c.UNSAFE_componentWillMount=function(){i.push(this),s()},c.componentDidUpdate=function(){s()},c.componentWillUnmount=function(){var e=i.indexOf(this);i.splice(e,1),s()},c.render=function(){return da.createElement(r,this.props)},a}(la.PureComponent);return ma(a,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(r)+")"),ma(a,"canUseDOM",ga),a}},va="undefined"!=typeof Element,Ea="function"==typeof Map,ya="function"==typeof Set,Sa="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function ba(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(e.constructor!==t.constructor)return!1;var n,r,o,i;if(Array.isArray(e)){if((n=e.length)!=t.length)return!1;for(r=n;0!=r--;)if(!ba(e[r],t[r]))return!1;return!0}if(Ea&&e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(i=e.entries();!(r=i.next()).done;)if(!t.has(r.value[0]))return!1;for(i=e.entries();!(r=i.next()).done;)if(!ba(r.value[1],t.get(r.value[0])))return!1;return!0}if(ya&&e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(i=e.entries();!(r=i.next()).done;)if(!t.has(r.value[0]))return!1;return!0}if(Sa&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(t)){if((n=e.length)!=t.length)return!1;for(r=n;0!=r--;)if(e[r]!==t[r])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if((n=(o=Object.keys(e)).length)!==Object.keys(t).length)return!1;for(r=n;0!=r--;)if(!Object.prototype.hasOwnProperty.call(t,o[r]))return!1;if(va&&e instanceof Element)return!1;for(r=n;0!=r--;)if(("_owner"!==o[r]&&"__v"!==o[r]&&"__o"!==o[r]||!e.$$typeof)&&!ba(e[o[r]],t[o[r]]))return!1;return!0}return e!=e&&t!=t}var Ia=function(e,t){try{return ba(e,t)}catch(n){if((n.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw n}},Oa="bodyAttributes",Da="htmlAttributes",Ta="titleAttributes",ka={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"};Object.keys(ka).map((function(e){return ka[e]}));var Aa,Ra,wa,xa,Na="charset",Ca="cssText",Ma="href",Pa="http-equiv",ja="innerHTML",La="itemprop",Fa="name",Ga="property",Ua="rel",za="src",Va="target",Ha={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},Xa="defaultTitle",Ka="defer",Ba="encodeSpecialCharacters",Wa="onChangeClientState",Ja="titleTemplate",$a=Object.keys(Ha).reduce((function(e,t){return e[Ha[t]]=t,e}),{}),qa=[ka.NOSCRIPT,ka.SCRIPT,ka.STYLE],Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qa=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Za=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),ec=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},tc=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},nc=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},rc=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!1===t?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},oc=function(e){var t=_c(e,ka.TITLE),n=_c(e,Ja);if(n&&t)return n.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var r=_c(e,Xa);return t||r||void 0},ic=function(e){return _c(e,Wa)||function(){}},sc=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return ec({},e,t)}),{})},ac=function(e,t){return t.filter((function(e){return void 0!==e[ka.BASE]})).map((function(e){return e[ka.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var r=Object.keys(n),o=0;o<r.length;o++){var i=r[o].toLowerCase();if(-1!==e.indexOf(i)&&n[i])return t.concat(n)}return t}),[])},cc=function(e,t,n){var r={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&dc("Helmet: "+e+' should be of type "Array". Instead found type "'+Ya(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var o={};n.filter((function(e){for(var n=void 0,i=Object.keys(e),s=0;s<i.length;s++){var a=i[s],c=a.toLowerCase();-1===t.indexOf(c)||n===Ua&&"canonical"===e[n].toLowerCase()||c===Ua&&"stylesheet"===e[c].toLowerCase()||(n=c),-1===t.indexOf(a)||a!==ja&&a!==Ca&&a!==La||(n=a)}if(!n||!e[n])return!1;var _=e[n].toLowerCase();return r[n]||(r[n]={}),o[n]||(o[n]={}),!r[n][_]&&(o[n][_]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var i=Object.keys(o),s=0;s<i.length;s++){var a=i[s],c=l({},r[a],o[a]);r[a]=c}return e}),[]).reverse()},_c=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.hasOwnProperty(t))return r[t]}return null},pc=(Aa=Date.now(),function(e){var t=Date.now();t-Aa>16?(Aa=t,e(t)):setTimeout((function(){pc(e)}),0)}),uc=function(e){return clearTimeout(e)},fc="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||pc:global.requestAnimationFrame||pc,lc="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||uc:global.cancelAnimationFrame||uc,dc=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},mc=null,gc=function(e,t){var n=e.baseTag,r=e.bodyAttributes,o=e.htmlAttributes,i=e.linkTags,s=e.metaTags,a=e.noscriptTags,c=e.onChangeClientState,_=e.scriptTags,p=e.styleTags,u=e.title,f=e.titleAttributes;Ec(ka.BODY,r),Ec(ka.HTML,o),vc(u,f);var l={baseTag:yc(ka.BASE,n),linkTags:yc(ka.LINK,i),metaTags:yc(ka.META,s),noscriptTags:yc(ka.NOSCRIPT,a),scriptTags:yc(ka.SCRIPT,_),styleTags:yc(ka.STYLE,p)},d={},m={};Object.keys(l).forEach((function(e){var t=l[e],n=t.newTags,r=t.oldTags;n.length&&(d[e]=n),r.length&&(m[e]=l[e].oldTags)})),t&&t(),c(e,d,m)},hc=function(e){return Array.isArray(e)?e.join(""):e},vc=function(e,t){void 0!==e&&document.title!==e&&(document.title=hc(e)),Ec(ka.TITLE,t)},Ec=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var r=n.getAttribute("data-react-helmet"),o=r?r.split(","):[],i=[].concat(o),s=Object.keys(t),a=0;a<s.length;a++){var c=s[a],_=t[c]||"";n.getAttribute(c)!==_&&n.setAttribute(c,_),-1===o.indexOf(c)&&o.push(c);var p=i.indexOf(c);-1!==p&&i.splice(p,1)}for(var u=i.length-1;u>=0;u--)n.removeAttribute(i[u]);o.length===i.length?n.removeAttribute("data-react-helmet"):n.getAttribute("data-react-helmet")!==s.join(",")&&n.setAttribute("data-react-helmet",s.join(","))}},yc=function(e,t){var n=document.head||document.querySelector(ka.HEAD),r=n.querySelectorAll(e+"[data-react-helmet]"),o=Array.prototype.slice.call(r),i=[],s=void 0;return t&&t.length&&t.forEach((function(t){var n=document.createElement(e);for(var r in t)if(t.hasOwnProperty(r))if(r===ja)n.innerHTML=t.innerHTML;else if(r===Ca)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var a=void 0===t[r]?"":t[r];n.setAttribute(r,a)}n.setAttribute("data-react-helmet","true"),o.some((function(e,t){return s=t,n.isEqualNode(e)}))?o.splice(s,1):i.push(n)})),o.forEach((function(e){return e.parentNode.removeChild(e)})),i.forEach((function(e){return n.appendChild(e)})),{oldTags:o,newTags:i}},Sc=function(e){return Object.keys(e).reduce((function(t,n){var r=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+r:r}),"")},bc=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[Ha[n]||n]=e[n],t}),t)},Ic=function(e,t,n){switch(e){case ka.TITLE:return{toComponent:function(){return e=t.title,n=t.titleAttributes,(r={key:e})["data-react-helmet"]=!0,o=bc(n,r),[u.createElement(ka.TITLE,o,e)];var e,n,r,o},toString:function(){return function(e,t,n,r){var o=Sc(n),i=hc(t);return o?"<"+e+' data-react-helmet="true" '+o+">"+rc(i,r)+"</"+e+">":"<"+e+' data-react-helmet="true">'+rc(i,r)+"</"+e+">"}(e,t.title,t.titleAttributes,n)}};case Oa:case Da:return{toComponent:function(){return bc(t)},toString:function(){return Sc(t)}};default:return{toComponent:function(){return function(e,t){return t.map((function(t,n){var r,o=((r={key:n})["data-react-helmet"]=!0,r);return Object.keys(t).forEach((function(e){var n=Ha[e]||e;if(n===ja||n===Ca){var r=t.innerHTML||t.cssText;o.dangerouslySetInnerHTML={__html:r}}else o[n]=t[e]})),u.createElement(e,o)}))}(e,t)},toString:function(){return function(e,t,n){return t.reduce((function(t,r){var o=Object.keys(r).filter((function(e){return!(e===ja||e===Ca)})).reduce((function(e,t){var o=void 0===r[t]?t:t+'="'+rc(r[t],n)+'"';return e?e+" "+o:o}),""),i=r.innerHTML||r.cssText||"",s=-1===qa.indexOf(e);return t+"<"+e+' data-react-helmet="true" '+o+(s?"/>":">"+i+"</"+e+">")}),"")}(e,t,n)}}}},Oc=function(e){var t=e.baseTag,n=e.bodyAttributes,r=e.encode,o=e.htmlAttributes,i=e.linkTags,s=e.metaTags,a=e.noscriptTags,c=e.scriptTags,_=e.styleTags,p=e.title,u=void 0===p?"":p,f=e.titleAttributes;return{base:Ic(ka.BASE,t,r),bodyAttributes:Ic(Oa,n,r),htmlAttributes:Ic(Da,o,r),link:Ic(ka.LINK,i,r),meta:Ic(ka.META,s,r),noscript:Ic(ka.NOSCRIPT,a,r),script:Ic(ka.SCRIPT,c,r),style:Ic(ka.STYLE,_,r),title:Ic(ka.TITLE,{title:u,titleAttributes:f},r)}},Dc=ha((function(e){return{baseTag:ac([Ma,Va],e),bodyAttributes:sc(Oa,e),defer:_c(e,Ka),encode:_c(e,Ba),htmlAttributes:sc(Da,e),linkTags:cc(ka.LINK,[Ua,Ma],e),metaTags:cc(ka.META,[Fa,Na,Pa,Ga,La],e),noscriptTags:cc(ka.NOSCRIPT,[ja],e),onChangeClientState:ic(e),scriptTags:cc(ka.SCRIPT,[za,ja],e),styleTags:cc(ka.STYLE,[Ca],e),title:oc(e),titleAttributes:sc(Ta,e)}}),(function(e){mc&&lc(mc),e.defer?mc=fc((function(){gc(e,(function(){mc=null}))})):(gc(e),mc=null)}),Oc)((function(){return null})),Tc=(Ra=Dc,xa=wa=function(e){function t(){return Qa(this,t),nc(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return!Ia(this.props,e)},t.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case ka.SCRIPT:case ka.NOSCRIPT:return{innerHTML:t};case ka.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},t.prototype.flattenArrayTypeChildren=function(e){var t,n=e.child,r=e.arrayTypeChildren,o=e.newChildProps,i=e.nestedChildren;return ec({},r,((t={})[n.type]=[].concat(r[n.type]||[],[ec({},o,this.mapNestedChildrenToProps(n,i))]),t))},t.prototype.mapObjectTypeChildren=function(e){var t,n,r=e.child,o=e.newProps,i=e.newChildProps,s=e.nestedChildren;switch(r.type){case ka.TITLE:return ec({},o,((t={})[r.type]=s,t.titleAttributes=ec({},i),t));case ka.BODY:return ec({},o,{bodyAttributes:ec({},i)});case ka.HTML:return ec({},o,{htmlAttributes:ec({},i)})}return ec({},o,((n={})[r.type]=ec({},i),n))},t.prototype.mapArrayTypeChildrenToProps=function(e,t){var n=ec({},t);return Object.keys(e).forEach((function(t){var r;n=ec({},n,((r={})[t]=e[t],r))})),n},t.prototype.warnOnInvalidChildren=function(e,t){return!0},t.prototype.mapChildrenToProps=function(e,t){var n=this,r={};return u.Children.forEach(e,(function(e){if(e&&e.props){var o=e.props,i=o.children,s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[$a[n]||n]=e[n],t}),t)}(tc(o,["children"]));switch(n.warnOnInvalidChildren(e,i),e.type){case ka.LINK:case ka.META:case ka.NOSCRIPT:case ka.SCRIPT:case ka.STYLE:r=n.flattenArrayTypeChildren({child:e,arrayTypeChildren:r,newChildProps:s,nestedChildren:i});break;default:t=n.mapObjectTypeChildren({child:e,newProps:t,newChildProps:s,nestedChildren:i})}}})),t=this.mapArrayTypeChildrenToProps(r,t)},t.prototype.render=function(){var e=this.props,t=e.children,n=tc(e,["children"]),r=ec({},n);return t&&(r=this.mapChildrenToProps(t,r)),u.createElement(Ra,r)},Za(t,null,[{key:"canUseDOM",set:function(e){Ra.canUseDOM=e}}]),t}(u.Component),wa.propTypes={base:ua.object,bodyAttributes:ua.object,children:ua.oneOfType([ua.arrayOf(ua.node),ua.node]),defaultTitle:ua.string,defer:ua.bool,encodeSpecialCharacters:ua.bool,htmlAttributes:ua.object,link:ua.arrayOf(ua.object),meta:ua.arrayOf(ua.object),noscript:ua.arrayOf(ua.object),onChangeClientState:ua.func,script:ua.arrayOf(ua.object),style:ua.arrayOf(ua.object),title:ua.string,titleAttributes:ua.object,titleTemplate:ua.string},wa.defaultProps={defer:!0,encodeSpecialCharacters:!0},wa.peek=Ra.peek,wa.rewind=function(){var e=Ra.rewind();return e||(e=Oc({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},xa);Tc.renderStatic=Tc.rewind;var kc=u.createContext(null);var Ac=function(e){e()},Rc={notify:function(){}};function wc(){var e=Ac,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var xc=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=Rc,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=wc())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Rc)},e}(),Nc="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?f.exports.useLayoutEffect:f.exports.useEffect;function Cc(e){var t=e.store,n=e.context,r=e.children,o=f.exports.useMemo((function(){var e=new xc(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),i=f.exports.useMemo((function(){return t.getState()}),[t]);Nc((function(){var e=o.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,i]);var s=n||kc;return u.createElement(s.Provider,{value:o},r)}function Mc(){return(Mc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Pc={exports:{}},jc={},Lc="function"==typeof Symbol&&Symbol.for,Fc=Lc?Symbol.for("react.element"):60103,Gc=Lc?Symbol.for("react.portal"):60106,Uc=Lc?Symbol.for("react.fragment"):60107,zc=Lc?Symbol.for("react.strict_mode"):60108,Vc=Lc?Symbol.for("react.profiler"):60114,Hc=Lc?Symbol.for("react.provider"):60109,Xc=Lc?Symbol.for("react.context"):60110,Kc=Lc?Symbol.for("react.async_mode"):60111,Bc=Lc?Symbol.for("react.concurrent_mode"):60111,Wc=Lc?Symbol.for("react.forward_ref"):60112,Jc=Lc?Symbol.for("react.suspense"):60113,$c=Lc?Symbol.for("react.suspense_list"):60120,qc=Lc?Symbol.for("react.memo"):60115,Yc=Lc?Symbol.for("react.lazy"):60116,Qc=Lc?Symbol.for("react.block"):60121,Zc=Lc?Symbol.for("react.fundamental"):60117,e_=Lc?Symbol.for("react.responder"):60118,t_=Lc?Symbol.for("react.scope"):60119;function n_(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case Fc:switch(e=e.type){case Kc:case Bc:case Uc:case Vc:case zc:case Jc:return e;default:switch(e=e&&e.$$typeof){case Xc:case Wc:case Yc:case qc:case Hc:return e;default:return t}}case Gc:return t}}}function r_(e){return n_(e)===Bc}function o_(){return f.exports.useContext(kc)}function i_(e){void 0===e&&(e=kc);var t=e===kc?o_:function(){return f.exports.useContext(e)};return function(){return t().store}}jc.AsyncMode=Kc,jc.ConcurrentMode=Bc,jc.ContextConsumer=Xc,jc.ContextProvider=Hc,jc.Element=Fc,jc.ForwardRef=Wc,jc.Fragment=Uc,jc.Lazy=Yc,jc.Memo=qc,jc.Portal=Gc,jc.Profiler=Vc,jc.StrictMode=zc,jc.Suspense=Jc,jc.isAsyncMode=function(e){return r_(e)||n_(e)===Kc},jc.isConcurrentMode=r_,jc.isContextConsumer=function(e){return n_(e)===Xc},jc.isContextProvider=function(e){return n_(e)===Hc},jc.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===Fc},jc.isForwardRef=function(e){return n_(e)===Wc},jc.isFragment=function(e){return n_(e)===Uc},jc.isLazy=function(e){return n_(e)===Yc},jc.isMemo=function(e){return n_(e)===qc},jc.isPortal=function(e){return n_(e)===Gc},jc.isProfiler=function(e){return n_(e)===Vc},jc.isStrictMode=function(e){return n_(e)===zc},jc.isSuspense=function(e){return n_(e)===Jc},jc.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===Uc||e===Bc||e===Vc||e===zc||e===Jc||e===$c||"object"==typeof e&&null!==e&&(e.$$typeof===Yc||e.$$typeof===qc||e.$$typeof===Hc||e.$$typeof===Xc||e.$$typeof===Wc||e.$$typeof===Zc||e.$$typeof===e_||e.$$typeof===t_||e.$$typeof===Qc)},jc.typeOf=n_,Pc.exports=jc;var s_=i_();function a_(e){void 0===e&&(e=kc);var t=e===kc?s_:i_(e);return function(){return t().dispatch}}var c_,__=a_();function p_(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,m(e,t)}function u_(e){return"/"===e.charAt(0)}function f_(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}c_=d.exports.unstable_batchedUpdates,Ac=c_;function l_(e,t){if(!e)throw new Error("Invariant failed")}function d_(e){return"/"===e.charAt(0)?e:"/"+e}function m_(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function g_(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function h_(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function v_(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Mc({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(i){throw i instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):i}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&u_(e),s=t&&u_(t),a=i||s;if(e&&u_(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var _=0,p=o.length;p>=0;p--){var u=o[p];"."===u?f_(o,p):".."===u?(f_(o,p),_++):_&&(f_(o,p),_--)}if(!a)for(;_--;_)o.unshift("..");!a||""===o[0]||o[0]&&u_(o[0])||o.unshift("");var f=o.join("/");return n&&"/"!==f.substr(-1)&&(f+="/"),f}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function E_(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var y_=!("undefined"==typeof window||!window.document||!window.document.createElement);function S_(e,t){t(window.confirm(e))}function b_(){try{return window.history.state||{}}catch(e){return{}}}function I_(e){void 0===e&&(e={}),y_||l_(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,s=i.forceRefresh,a=void 0!==s&&s,c=i.getUserConfirmation,_=void 0===c?S_:c,p=i.keyLength,u=void 0===p?6:p,f=e.basename?g_(d_(e.basename)):"";function l(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return f&&(i=m_(i,f)),v_(i,r,n)}function d(){return Math.random().toString(36).substr(2,u)}var m=E_();function g(e){Mc(A,e),A.length=n.length,m.notifyListeners(A.location,A.action)}function h(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||y(l(e.state))}function v(){y(l(b_()))}var E=!1;function y(e){if(E)E=!1,g();else{m.confirmTransitionTo(e,"POP",_,(function(t){t?g({action:"POP",location:e}):function(e){var t=A.location,n=b.indexOf(t.key);-1===n&&(n=0);var r=b.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(E=!0,O(o))}(e)}))}}var S=l(b_()),b=[S.key];function I(e){return f+h_(e)}function O(e){n.go(e)}var D=0;function T(e){1===(D+=e)&&1===e?(window.addEventListener("popstate",h),o&&window.addEventListener("hashchange",v)):0===D&&(window.removeEventListener("popstate",h),o&&window.removeEventListener("hashchange",v))}var k=!1;var A={length:n.length,action:"POP",location:S,createHref:I,push:function(e,t){var o="PUSH",i=v_(e,t,d(),A.location);m.confirmTransitionTo(i,o,_,(function(e){if(e){var t=I(i),s=i.key,c=i.state;if(r)if(n.pushState({key:s,state:c},null,t),a)window.location.href=t;else{var _=b.indexOf(A.location.key),p=b.slice(0,_+1);p.push(i.key),b=p,g({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=v_(e,t,d(),A.location);m.confirmTransitionTo(i,o,_,(function(e){if(e){var t=I(i),s=i.key,c=i.state;if(r)if(n.replaceState({key:s,state:c},null,t),a)window.location.replace(t);else{var _=b.indexOf(A.location.key);-1!==_&&(b[_]=i.key),g({action:o,location:i})}else window.location.replace(t)}}))},go:O,goBack:function(){O(-1)},goForward:function(){O(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return k||(T(1),k=!0),function(){return k&&(k=!1,T(-1)),t()}},listen:function(e){var t=m.appendListener(e);return T(1),function(){T(-1),t()}}};return A}var O_="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function D_(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var T_=u.createContext||function(e,t){var n,r,o="__create-react-context-"+function(){var e="__global_unique_id__";return O_[e]=(O_[e]||0)+1}()+"__",i=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=D_(t.props.value),t}p_(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(s=o)?0!==i||1/i==1/s:i!=i&&s!=s)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,s},r.render=function(){return this.props.children},n}(f.exports.Component);i.childContextTypes=((n={})[o]=ua.object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}p_(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(f.exports.Component);return s.contextTypes=((r={})[o]=ua.object,r),{Provider:i,Consumer:s}},k_={exports:{}},A_=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)};k_.exports=F_,k_.exports.parse=w_,k_.exports.compile=function(e,t){return N_(w_(e,t),t)},k_.exports.tokensToFunction=N_,k_.exports.tokensToRegExp=L_;var R_=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function w_(e,t){for(var n,r=[],o=0,i=0,s="",a=t&&t.delimiter||"/";null!=(n=R_.exec(e));){var c=n[0],_=n[1],p=n.index;if(s+=e.slice(i,p),i=p+c.length,_)s+=_[1];else{var u=e[i],f=n[2],l=n[3],d=n[4],m=n[5],g=n[6],h=n[7];s&&(r.push(s),s="");var v=null!=f&&null!=u&&u!==f,E="+"===g||"*"===g,y="?"===g||"*"===g,S=n[2]||a,b=d||m;r.push({name:l||o++,prefix:f||"",delimiter:S,optional:y,repeat:E,partial:v,asterisk:!!h,pattern:b?M_(b):h?".*":"[^"+C_(S)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function x_(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function N_(e,t){for(var n=new Array(e.length),r=0;r<e.length;r++)"object"==typeof e[r]&&(n[r]=new RegExp("^(?:"+e[r].pattern+")$",j_(t)));return function(t,r){for(var o="",i=t||{},s=(r||{}).pretty?x_:encodeURIComponent,a=0;a<e.length;a++){var c=e[a];if("string"!=typeof c){var _,p=i[c.name];if(null==p){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(A_(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<p.length;u++){if(_=s(p[u]),!n[a].test(_))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(_)+"`");o+=(0===u?c.prefix:c.delimiter)+_}}else{if(_=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(p),!n[a].test(_))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+_+'"');o+=c.prefix+_}}else o+=c}return o}}function C_(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function M_(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function P_(e,t){return e.keys=t,e}function j_(e){return e&&e.sensitive?"":"i"}function L_(e,t,n){A_(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,o=!1!==n.end,i="",s=0;s<e.length;s++){var a=e[s];if("string"==typeof a)i+=C_(a);else{var c=C_(a.prefix),_="(?:"+a.pattern+")";t.push(a),a.repeat&&(_+="(?:"+c+_+")*"),i+=_=a.optional?a.partial?c+"("+_+")?":"(?:"+c+"("+_+"))?":c+"("+_+")"}}var p=C_(n.delimiter||"/"),u=i.slice(-p.length)===p;return r||(i=(u?i.slice(0,-p.length):i)+"(?:"+p+"(?=$))?"),i+=o?"$":r&&u?"":"(?="+p+"|$)",P_(new RegExp("^"+i,j_(n)),t)}function F_(e,t,n){return A_(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return P_(e,t)}(e,t):A_(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(F_(e[o],t,n).source);return P_(new RegExp("(?:"+r.join("|")+")",j_(n)),t)}(e,t,n):function(e,t,n){return L_(w_(e,n),t,n)}(e,t,n)}var G_=k_.exports,U_={},z_="function"==typeof Symbol&&Symbol.for,V_=z_?Symbol.for("react.element"):60103,H_=z_?Symbol.for("react.portal"):60106,X_=z_?Symbol.for("react.fragment"):60107,K_=z_?Symbol.for("react.strict_mode"):60108,B_=z_?Symbol.for("react.profiler"):60114,W_=z_?Symbol.for("react.provider"):60109,J_=z_?Symbol.for("react.context"):60110,$_=z_?Symbol.for("react.async_mode"):60111,q_=z_?Symbol.for("react.concurrent_mode"):60111,Y_=z_?Symbol.for("react.forward_ref"):60112,Q_=z_?Symbol.for("react.suspense"):60113,Z_=z_?Symbol.for("react.suspense_list"):60120,ep=z_?Symbol.for("react.memo"):60115,tp=z_?Symbol.for("react.lazy"):60116,np=z_?Symbol.for("react.block"):60121,rp=z_?Symbol.for("react.fundamental"):60117,op=z_?Symbol.for("react.responder"):60118,ip=z_?Symbol.for("react.scope"):60119;function sp(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case V_:switch(e=e.type){case $_:case q_:case X_:case B_:case K_:case Q_:return e;default:switch(e=e&&e.$$typeof){case J_:case Y_:case tp:case ep:case W_:return e;default:return t}}case H_:return t}}}function ap(e){return sp(e)===q_}U_.AsyncMode=$_,U_.ConcurrentMode=q_,U_.ContextConsumer=J_,U_.ContextProvider=W_,U_.Element=V_,U_.ForwardRef=Y_,U_.Fragment=X_,U_.Lazy=tp,U_.Memo=ep,U_.Portal=H_,U_.Profiler=B_,U_.StrictMode=K_,U_.Suspense=Q_,U_.isAsyncMode=function(e){return ap(e)||sp(e)===$_},U_.isConcurrentMode=ap,U_.isContextConsumer=function(e){return sp(e)===J_},U_.isContextProvider=function(e){return sp(e)===W_},U_.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===V_},U_.isForwardRef=function(e){return sp(e)===Y_},U_.isFragment=function(e){return sp(e)===X_},U_.isLazy=function(e){return sp(e)===tp},U_.isMemo=function(e){return sp(e)===ep},U_.isPortal=function(e){return sp(e)===H_},U_.isProfiler=function(e){return sp(e)===B_},U_.isStrictMode=function(e){return sp(e)===K_},U_.isSuspense=function(e){return sp(e)===Q_},U_.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===X_||e===q_||e===B_||e===K_||e===Q_||e===Z_||"object"==typeof e&&null!==e&&(e.$$typeof===tp||e.$$typeof===ep||e.$$typeof===W_||e.$$typeof===J_||e.$$typeof===Y_||e.$$typeof===rp||e.$$typeof===op||e.$$typeof===ip||e.$$typeof===np)},U_.typeOf=sp;var cp=function(e){var t=T_();return t.displayName=e,t},_p=cp("Router-History"),pp=cp("Router"),up=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}p_(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return u.createElement(pp.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},u.createElement(_p.Provider,{children:this.props.children||null,value:this.props.history}))},t}(u.Component);u.Component,u.Component;var fp={},lp=0;function dp(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,s=n.strict,a=void 0!==s&&s,c=n.sensitive,_=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=fp[n]||(fp[n]={});if(r[e])return r[e];var o=[],i={regexp:G_(e,o,t),keys:o};return lp<1e4&&(r[e]=i,lp++),i}(n,{end:i,strict:a,sensitive:_}),o=r.regexp,s=r.keys,c=o.exec(e);if(!c)return null;var p=c[0],u=c.slice(1),f=e===p;return i&&!f?null:{path:n,url:"/"===n&&""===p?"/":p,isExact:f,params:s.reduce((function(e,t,n){return e[t.name]=u[n],e}),{})}}),null)}var mp=function(e){function t(){return e.apply(this,arguments)||this}return p_(t,e),t.prototype.render=function(){var e=this;return u.createElement(pp.Consumer,null,(function(t){t||l_(!1);var n=e.props.location||t.location,r=Mc({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?dp(n.pathname,e.props):t.match}),o=e.props,i=o.children,s=o.component,a=o.render;return Array.isArray(i)&&function(e){return 0===u.Children.count(e)}(i)&&(i=null),u.createElement(pp.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:s?u.createElement(s,r):a?a(r):null:"function"==typeof i?i(r):null)}))},t}(u.Component);u.Component;var gp=function(e){function t(){return e.apply(this,arguments)||this}return p_(t,e),t.prototype.render=function(){var e=this;return u.createElement(pp.Consumer,null,(function(t){t||l_(!1);var n,r,o=e.props.location||t.location;return u.Children.forEach(e.props.children,(function(e){if(null==r&&u.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?dp(o.pathname,Mc({},e.props,{path:i})):t.match}})),r?u.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(u.Component);function hp(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=g(t,["wrappedComponentRef"]);return u.createElement(pp.Consumer,null,(function(t){return t||l_(!1),u.createElement(e,Mc({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,Ni(n,e)}var vp=u.useContext;function Ep(){return vp(_p)}function yp(){return vp(pp).location}var Sp=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=I_(t.props),t}return p_(t,e),t.prototype.render=function(){return u.createElement(up,{history:this.history,children:this.props.children})},t}(u.Component);u.Component;var bp=function(e,t){return"function"==typeof e?e(t):e},Ip=function(e,t){return"string"==typeof e?v_(e,null,null,t):e},Op=function(e){return e},Dp=u.forwardRef;void 0===Dp&&(Dp=Op);var Tp=Dp((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=g(e,["innerRef","navigate","onClick"]),s=i.target,a=Mc({},i,{onClick:function(e){try{o&&o(e)}catch(fa){throw e.preventDefault(),fa}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return a.ref=Op!==Dp&&t||n,u.createElement("a",a)})),kp=Dp((function(e,t){var n=e.component,r=void 0===n?Tp:n,o=e.replace,i=e.to,s=e.innerRef,a=g(e,["component","replace","to","innerRef"]);return u.createElement(pp.Consumer,null,(function(e){e||l_(!1);var n=e.history,c=Ip(bp(i,e.location),e.location),_=c?n.createHref(c):"",p=Mc({},a,{href:_,navigate:function(){var t=bp(i,e.location),r=h_(e.location)===h_(Ip(t));(o||r?n.replace:n.push)(t)}});return Op!==Dp?p.ref=t||s:p.innerRef=s,u.createElement(r,p)}))})),Ap=function(e){return e},Rp=u.forwardRef;function wp(e){return e&&"object"===h(e)&&e.constructor===Object}function xp(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?Mc({},e):e;return wp(e)&&wp(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(wp(t[o])&&o in e?r[o]=xp(e[o],t[o],n):r[o]=t[o])})),r}function Np(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function Cp(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Mp(e){if(e.type)return e;if("#"===e.charAt(0))return Mp(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(Np(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function Pp(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function jp(e){var t="hsl"===(e=Mp(e)).type?Mp(function(e){var t=(e=Mp(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},a="rgb",c=[Math.round(255*s(0)),Math.round(255*s(8)),Math.round(255*s(4))];return"hsla"===e.type&&(a+="a",c.push(t[3])),Pp({type:a,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Lp(e,t){return e=Mp(e),t=Cp(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,Pp(e)}function Fp(e,t){if(e=Mp(e),t=Cp(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Pp(e)}function Gp(e,t){if(e=Mp(e),t=Cp(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Pp(e)}void 0===Rp&&(Rp=Ap),Rp((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,s=e.activeStyle,a=e.className,c=e.exact,_=e.isActive,p=e.location,f=e.sensitive,l=e.strict,d=e.style,m=e.to,h=e.innerRef,v=g(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return u.createElement(pp.Consumer,null,(function(e){e||l_(!1);var n=p||e.location,o=Ip(bp(m,n),n),g=o.pathname,E=g&&g.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),y=E?dp(n.pathname,{path:E,exact:c,sensitive:f,strict:l}):null,S=!!(_?_(y,n):y),b="function"==typeof a?a(S):a,I="function"==typeof d?d(S):d;S&&(b=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(b,i),I=Mc({},I,s));var O=Mc({"aria-current":S&&r||null,className:b,style:I,to:o},v);return Ap!==Rp?O.ref=t||h:O.innerRef=h,u.createElement(kp,O)}))}));var Up=["xs","sm","md","lg","xl"];function zp(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,s=void 0===i?5:i,a=v(e,["values","unit","step"]);function c(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function _(e,t){var r=Up.indexOf(t);return r===Up.length-1?c(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Up[r+1]]?n[Up[r+1]]:t)-s/100).concat(o,")")}return Mc({keys:Up,values:n,up:c,down:function(e){var t=Up.indexOf(e)+1,r=n[Up[t]];return t===Up.length?c("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(o,")")},between:_,only:function(e){return _(e,e)},width:function(e){return n[e]}},a)}function Vp(e,t,n){var r;return Mc({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return console.warn(["Material-UI: theme.mixins.gutters() is deprecated.","You can use the source of the mixin directly:","\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n")),Mc({paddingLeft:t(2),paddingRight:t(2)},n,_({},e.up("sm"),Mc({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},_(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),_(r,e.up("sm"),{minHeight:64}),r)},n)}var Hp={black:"#000",white:"#fff"},Xp={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},Kp={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Bp={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Wp={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Jp={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},$p={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},qp={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Yp={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Hp.white,default:Xp[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Qp={text:{primary:Hp.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Xp[800],default:"#303030"},action:{active:Hp.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Zp(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Gp(e.main,o):"dark"===t&&(e.dark=Fp(e.main,i)))}function eu(e){var t=e.primary,n=void 0===t?{light:Kp[300],main:Kp[500],dark:Kp[700]}:t,r=e.secondary,o=void 0===r?{light:Bp.A200,main:Bp.A400,dark:Bp.A700}:r,i=e.error,s=void 0===i?{light:Wp[300],main:Wp[500],dark:Wp[700]}:i,a=e.warning,c=void 0===a?{light:Jp[300],main:Jp[500],dark:Jp[700]}:a,_=e.info,p=void 0===_?{light:$p[300],main:$p[500],dark:$p[700]}:_,u=e.success,f=void 0===u?{light:qp[300],main:qp[500],dark:qp[700]}:u,l=e.type,d=void 0===l?"light":l,m=e.contrastThreshold,g=void 0===m?3:m,h=e.tonalOffset,E=void 0===h?.2:h,y=v(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function S(e){return function(e,t){var n=jp(e),r=jp(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Qp.text.primary)>=g?Qp.text.primary:Yp.text.primary}var b=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=Mc({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(Np(4,t));if("string"!=typeof e.main)throw new Error(Np(5,JSON.stringify(e.main)));return Zp(e,"light",n,E),Zp(e,"dark",r,E),e.contrastText||(e.contrastText=S(e.main)),e},I={dark:Qp,light:Yp};return xp(Mc({common:Hp,type:d,primary:b(n),secondary:b(o,"A400","A200","A700"),error:b(s),warning:b(c),info:b(p),success:b(f),grey:Xp,contrastThreshold:g,getContrastText:S,augmentColor:b,tonalOffset:E},I[d]),y)}function tu(e){return Math.round(1e5*e)/1e5}function nu(e){return tu(e)}var ru={textTransform:"uppercase"};function ou(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,i=n.fontSize,s=void 0===i?14:i,a=n.fontWeightLight,c=void 0===a?300:a,_=n.fontWeightRegular,p=void 0===_?400:_,u=n.fontWeightMedium,f=void 0===u?500:u,l=n.fontWeightBold,d=void 0===l?700:l,m=n.htmlFontSize,g=void 0===m?16:m,h=n.allVariants,E=n.pxToRem,y=v(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),S=s/14,b=E||function(e){return"".concat(e/g*S,"rem")},I=function(e,t,n,r,i){return Mc({fontFamily:o,fontWeight:e,fontSize:b(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===o?{letterSpacing:"".concat(tu(r/t),"em")}:{},i,h)},O={h1:I(c,96,1.167,-1.5),h2:I(c,60,1.2,-.5),h3:I(p,48,1.167,0),h4:I(p,34,1.235,.25),h5:I(p,24,1.334,0),h6:I(f,20,1.6,.15),subtitle1:I(p,16,1.75,.15),subtitle2:I(f,14,1.57,.1),body1:I(p,16,1.5,.15),body2:I(p,14,1.43,.15),button:I(f,14,1.75,.4,ru),caption:I(p,12,1.66,.4),overline:I(p,12,2.66,1,ru)};return xp(Mc({htmlFontSize:g,pxToRem:b,round:nu,fontFamily:o,fontSize:s,fontWeightLight:c,fontWeightRegular:p,fontWeightMedium:f,fontWeightBold:d},O),y,{clone:!1})}function iu(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var su=["none",iu(0,2,1,-1,0,1,1,0,0,1,3,0),iu(0,3,1,-2,0,2,2,0,0,1,5,0),iu(0,3,3,-2,0,3,4,0,0,1,8,0),iu(0,2,4,-1,0,4,5,0,0,1,10,0),iu(0,3,5,-1,0,5,8,0,0,1,14,0),iu(0,3,5,-1,0,6,10,0,0,1,18,0),iu(0,4,5,-2,0,7,10,1,0,2,16,1),iu(0,5,5,-3,0,8,10,1,0,3,14,2),iu(0,5,6,-3,0,9,12,1,0,3,16,2),iu(0,6,6,-3,0,10,14,1,0,4,18,3),iu(0,6,7,-4,0,11,15,1,0,4,20,3),iu(0,7,8,-4,0,12,17,2,0,5,22,4),iu(0,7,8,-4,0,13,19,2,0,5,24,4),iu(0,7,9,-4,0,14,21,2,0,5,26,4),iu(0,8,9,-5,0,15,22,2,0,6,28,5),iu(0,8,10,-5,0,16,24,2,0,6,30,5),iu(0,8,11,-5,0,17,26,2,0,6,32,5),iu(0,9,11,-5,0,18,28,2,0,7,34,6),iu(0,9,12,-6,0,19,29,2,0,7,36,6),iu(0,10,13,-6,0,20,31,3,0,8,38,7),iu(0,10,13,-6,0,21,33,3,0,8,40,7),iu(0,10,14,-6,0,22,35,3,0,8,42,7),iu(0,11,14,-7,0,23,36,3,0,9,44,8),iu(0,11,15,-7,0,24,38,3,0,9,46,8)],au={borderRadius:4};function cu(e,t){return t?xp(e,t,{clone:!1}):e}var _u={xs:0,sm:600,md:960,lg:1280,xl:1920},pu={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(_u[e],"px)")}};function uu(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||pu;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===h(t)){var o=e.theme.breakpoints||pu;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}var fu={m:"margin",p:"padding"},lu={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},du={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},mu=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!du[e])return[e];e=du[e]}var t=e.split(""),n=E(t,2),r=n[0],o=n[1],i=fu[r],s=lu[o]||"";return Array.isArray(s)?s.map((function(e){return i+e})):[i+s]})),gu=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function hu(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function vu(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function Eu(e){var t=hu(e.theme);return Object.keys(e).map((function(n){if(-1===gu.indexOf(n))return null;var r=vu(mu(n),t),o=e[n];return uu(e,o,r)})).reduce(cu,{})}function yu(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=hu({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}Eu.propTypes={},Eu.filterProps=gu;var Su={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},bu={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Iu(e){return"".concat(Math.round(e),"ms")}var Ou={easing:Su,duration:bu,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?bu.standard:n,o=t.easing,i=void 0===o?Su.easeInOut:o,s=t.delay,a=void 0===s?0:s;return v(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Iu(r)," ").concat(i," ").concat("string"==typeof a?a:Iu(a))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Du={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function Tu(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,s=void 0===i?{}:i,a=e.spacing,c=e.typography,_=void 0===c?{}:c,p=v(e,["breakpoints","mixins","palette","spacing","typography"]),u=eu(s),f=zp(n),l=yu(a),d=xp({breakpoints:f,direction:"ltr",mixins:Vp(f,l,o),overrides:{},palette:u,props:{},shadows:su,typography:ou(u,_),spacing:l,shape:au,transitions:Ou,zIndex:Du},p),m=arguments.length,g=new Array(m>1?m-1:0),h=1;h<m;h++)g[h-1]=arguments[h];return d=g.reduce((function(e,t){return xp(e,t)}),d)}const ku=Tu({palette:{primary:{main:"#5151FF"},secondary:{main:"#FFFFFF"},error:{main:Wp.A400},background:{default:"#000000"},text:{primary:"#FFFFFF"}},typography:{fontFamily:["SFProText-Regular","Roboto","Helvetica","Arial","sans-serif"].join(","),fontSize:14,button:{color:"#FFFFFF"}},overrides:{MuiTypography:{body1:{fontFamily:["SFProText-Regular","Roboto","Helvetica","Arial","sans-serif"].join(",")},h1:{fontSize:28,fontWeight:"bold",margin:"15px 0px",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h2:{fontSize:16,margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h3:{fontSize:14,margin:"5px 0px",fontWeight:"bold",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h4:{fontSize:14,margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center","&.MuiTypography-colorSecondary":{color:"#8A8A8E"}},h5:{fontSize:18,fontWeight:"bold",margin:"5px 0px",cursor:"pointer",display:"flex",alignItems:"center",color:"#000000","&.MuiTypography-colorSecondary":{color:"#FFFFFF"}},h6:{fontSize:14,fontFamily:"SFProText-Regular"},alignRight:{textAlign:"right",justifyContent:"flex-end",alignItems:"right"},alignLeft:{textAlign:"left",justifyContent:"flex-start",alignItems:"left"},alignCenter:{textAlign:"center",justifyContent:"center",alignItems:"center"}},MuiContainer:{root:{flex:"none"}},MuiDialog:{paperWidthSm:{maxWidth:"40%",width:"40%",margin:"0 auto",fontSize:16,textAlign:"center",backgroundColor:"#FFFFFF","@media (max-width: 768px)":{maxWidth:"90%",width:"90%"}}},MuiDialogTitle:{root:{display:"flex",flexDirection:"row-reverse",alignItems:"center"}},MuiDialogContent:{root:{textAlign:"justify",padding:" 0 24px 24px 24px"}},MuiButtonBase:{root:{backgroundColor:"rgba(0, 0, 0, ,0.9)",color:"#000000",fontSize:16,textAlign:"center",margin:"0 10px"}},MuiIconButton:{root:{color:"#000000","&:hover":{backgroundColor:"transparent"}},colorPrimary:{backgroundColor:"#5151FF",color:"#FFFFFF","&:hover":{backgroundColor:"#5151FF"}},colorSecondary:{backgroundColor:"transparent",color:"#8E8E93"}},MuiSlider:{root:{color:"#484848"},thumb:{height:"24px",width:"24px",marginTop:"-10px",boxSizing:"border-box"},thumbColorPrimary:{background:"rgba(0, 0, 0, 0.8)",border:"2px solid #A8A8FF"}},MuiLinearProgress:{root:{height:"34px",backgroundColor:"#FFFFFF",borderRadius:"8px","@media (max-width: 768px)":{height:"16px",borderRadius:"10px"}},bar:{borderRadius:"inherit"}},MuiMenuItem:{root:{padding:"5px",borderRadius:"8px"}},MuiSnackbar:{root:{maxWidth:"80%",minWidth:"40%",width:"auto",left:"30%",right:"30%",userSelect:"none",borderRadius:"8px",fontSize:16,backgroundColor:"rgba(0,0,0,0.9)",boxShadow:"0px 1px 3px rgba(0, 0, 0, 0.2)",padding:"20px",boxSizing:"border-box","@media (max-width: 768px)":{maxWidth:"90%",width:"90%",left:"5%",right:"5%"},MuiSvgIcon:{root:{height:"7em",width:"auto",color:"#000000"}}},anchorOriginTopCenter:{top:"10%"},anchorOriginBottomCenter:{bottom:"60px",left:"50%",transform:"translate(-50%, 20px)"},anchorOriginTopLeft:{left:"0px",top:"24px",width:"52%",maxWidth:"80%","@media (max-width: 768px)":{width:"90%"},"@media (min-width: 600px)":{left:"0px"}}},MuiSnackbarContent:{root:{color:"#FFFFFF",backgroundColor:"rgba(0, 0, 0, 0.9)",minWidth:"0px","@media (min-width: 600px)":{minWidth:"0px"}}},MuiDrawer:{paper:{padding:"20px",backgroundColor:"rgba(0,0,0,0.85)"},paperAnchorRight:{width:"25%","@media (max-width: 1280px)":{width:"33%"},"@media (max-width: 1024px)":{width:"40%"},"@media (orientation: portrait)":{width:"100vw"}}},MuiCard:{root:{overflow:"visible"}},MuiCardMedia:{media:{"&:hover":{backgroundColor:"#A8A8FF"}}},MuiList:{root:{background:"rgba(206,206,206,0.1)",color:"#FFFFFF"}},MuiListItem:{root:{padding:"0px",paddingTop:"0px",margin:"2px 0"}},MuiListItemText:{root:{background:"rgba(0, 0, 0, .5)",borderRadius:"5px",padding:"5px 10px",width:"fit-content",flex:"inherit",wordBreak:"break-all"}},MuiCardContent:{root:{margin:"5px 0",padding:"5px 20px","&:last-child":{paddingBottom:"0px"}}},MuiCardHeader:{root:{padding:"0 15px 5px 15px"},avatar:{borderRadius:"50%",overflow:"hidden",height:"40px",width:"40px"}},MuiPaper:{root:{backgroundColor:"transparent",color:"#000000"}},MuiInputBase:{input:{color:"#000000"}},MuiFormLabel:{root:{color:"#000000"}},MuiButton:{root:{width:"220px",margin:"10px auto",cursor:"pointer",fontSize:16,borderRadius:"10px",textTransform:"none"},outlined:{background:"transparent"},outlinedPrimary:{"&:hover":{boxShadow:"0 0 10px #5151FF"}},outlinedSecondary:{"&:hover":{boxShadow:"0 0 10px #FFFFFF"}},containedSecondary:{backgroundColor:"#FFFFFF","&:hover":{backgroundColor:"#FFFFFF"}},containedPrimary:{backgroundColor:"#000000"},text:{background:"transparent",color:"#000000"}},MuiSvgIcon:{colorPrimary:{color:"#A8A8FF"}},MuiFab:{root:{height:"3em",width:"fit-content",padding:"10px",margin:"0px 5px",display:"flex",alignItems:"center",textTransform:"capitalize",backgroundColor:"#F4F4F5",color:"#8E8E93"},primary:{backgroundColor:"rgba(0,0,0,0.8)",borderRadius:"8px"}},MuiFormGroup:{root:{display:"flex",flexWrap:"wrap",flexDirection:"row"}},MuiOutlinedInput:{root:{color:"#000000",margin:"10px 0"},adornedEnd:{paddingRight:"0px"}},MuiBadge:{anchorOriginTopLeftRectangle:{left:"6px"},dot:{height:"12px",width:"12px",borderRadius:"50%"},colorPrimary:{backgroundColor:"#7AFF64"}}}});var Au,Ru,wu={},xu={exports:{}},Nu=p(so),Cu={},Mu={exports:{}};Au=Mu,Ru=Mu.exports,Object.defineProperty(Ru,"__esModule",{value:!0}),Ru.default=function(e){return e&&"@@redux/INIT"===e.type?"initialState argument passed to createStore":"previous state received by the reducer"},Au.exports=Ru.default;var Pu={exports:{}};!function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=o(Nu),r=o(Mu.exports);function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,o){var i=Object.keys(t);if(!i.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";var s=(0,r.default)(o);if(n.default.isImmutable?!n.default.isImmutable(e):!n.default.Iterable.isIterable(e))return"The "+s+' is of unexpected type. Expected argument to be an instance of Immutable.Collection or Immutable.Record with the following properties: "'+i.join('", "')+'".';var a=e.toSeq().keySeq().toArray().filter((function(e){return!t.hasOwnProperty(e)}));return a.length>0?"Unexpected "+(1===a.length?"property":"properties")+' "'+a.join('", "')+'" found in '+s+'. Expected to find one of the known reducer property names instead: "'+i.join('", "')+'". Unexpected properties will be ignored.':null},e.exports=t.default}(Pu,Pu.exports);var ju={exports:{}};!function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(void 0===e)throw new Error('Reducer "'+t+'" returned undefined when handling "'+n.type+'" action. To ignore an action, you must explicitly return the previous state.')},e.exports=t.default}(ju,ju.exports),Object.defineProperty(Cu,"__esModule",{value:!0}),Cu.validateNextState=Cu.getUnexpectedInvocationParameterMessage=Cu.getStateName=void 0;var Lu=Uu(Mu.exports),Fu=Uu(Pu.exports),Gu=Uu(ju.exports);function Uu(e){return e&&e.__esModule?e:{default:e}}Cu.getStateName=Lu.default,Cu.getUnexpectedInvocationParameterMessage=Fu.default,Cu.validateNextState=Gu.default,function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(Nu),r=Cu;t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.default.Map,o=Object.keys(e);return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t(),i=arguments[1];return n.withMutations((function(t){o.forEach((function(n){var o=(0,e[n])(t.get(n),i);(0,r.validateNextState)(o,n,i),t.set(n,o)}))}))}},e.exports=t.default}(xu,xu.exports),Object.defineProperty(wu,"__esModule",{value:!0});var zu=wu.combineReducers=void 0,Vu=function(e){return e&&e.__esModule?e:{default:e}}(xu.exports);zu=wu.combineReducers=Vu.default;const Hu=100,Xu=oo.fromJS({data:[]}),Ku={id:"",name:"",identityProviders:[]};function Bu(e){let t=e;return(null==e?void 0:e.identity_providers)&&(t=c(a({},t),{identityProviders:e.identity_providers})),(null==e?void 0:e.location_admins)&&e.location_admins.length>0&&(t=c(a({},t),{locationAdmins:e.location_admins})),(null==e?void 0:e.location_bans)&&e.location_bans.length>0&&(t=c(a({},t),{locationBans:e.location_bans})),t}function Wu(e){return{id:"",instanceId:e.user.id,name:e.user.displayName,userRole:"guest",avatarId:e.user.id,identityProviders:[],locationAdmins:[],avatarUrl:e.user.icon}}const Ju={id:0,token:"",type:"",isVerified:!1,userId:""},$u={accessToken:"",authentication:{strategy:""},identityProvider:Ju};function qu(e){return{accessToken:e.accessToken,authentication:e.authentication,identityProvider:e["identity-provider"]}}const Yu={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,users:{users:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},userRole:{userRole:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0},singleUser:{singleUser:{},retrieving:!1,fetched:!1,updateNeeded:!0},staticResource:{staticResource:[],retrieving:!1,fetched:!1,updateNeeded:!0}},Qu=oo.fromJS(Yu),Zu=oo.fromJS({contentPacks:[],updateNeeded:!0}),ef={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,avatars:{avatars:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},tf=oo.fromJS(ef),nf={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,instances:{instances:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},rf=oo.fromJS(nf),of={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,locations:{locations:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,created:!1,lastFetched:new Date},locationTypes:{locationTypes:[],updateNeeded:!0}},sf=oo.fromJS(of),af={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,parties:{parties:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},cf=oo.fromJS(af),_f={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,scenes:{scenes:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},pf=oo.fromJS(_f),uf={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,bots:{bots:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},botCommand:{botCommand:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},ff=oo.fromJS(uf),lf=oo.fromJS({activeInstances:[],activeParties:[],instanceUsers:[],channelUsers:[],activeLocations:[],activeScenes:[],dailyUsers:[],dailyNewUsers:[]}),df="FEEDS_RETRIEVED",mf="FEED_RETRIEVED",gf="FEEDS_FETCH",hf="FEEDS_FEATURED_RETRIEVED",vf="FEEDFIRES_FETCH",Ef="FEED_FIRES_RETRIEVED",yf="ADD_FEED_FIRES",Sf="REMOVE_FEED_FIRES",bf="ADD_FEED_VIEW",If="ADD_FEED",Of="CURRENT_CREATOR_RETRIEVED",Df="CREATOR_RETRIEVED",Tf="CREATOR_FETCH",kf="FEEDS_CREATOR_RETRIEVED",Af="FEEDS_BOOKMARK_RETRIEVED",Rf="UPDATE_FEED",wf="CREATORS_RETRIEVED",xf="CREATOR_NOTIFICATION_LIST_RETRIEVED",Nf="SET_CREATOR_AS_FOLLOWED",Cf="SET_CREATOR_NOT_FOLLOWED",Mf="FEEDS_MY_FEATURED_RETRIEVED",Pf="ADD_FEED_FEATURED",jf="REMOVE_FEED_FEATURED",Lf="CREATOR_FOLLOWERS_RETRIEVED",Ff="FEEDS_AS_ADMIN_RETRIEVED",Gf="CREATORS_FETCH",Uf="CHANGE_CREATOR_PAGE_STATE",zf="CHANGE_CREATOR_FORM_STATE",Vf="CHANGE_FEED_PAGE_STATE",Hf="CHANGE_NEW_FEED_PAGE_STATE",Xf="CHANGE_SHARE_FORM_STATE",Kf="FEATURED_FEEDS_FETCH",Bf="CREATOR_FEEDS_FETCH",Wf="BOOKMARK_FEEDS_FETCH",Jf="MY_FEATURED_FEEDS_FETCH",$f="ADMIN_FEEDS_FETCH",qf="FIRED_FEEDS_FETCH",Yf="FEEDS_FIRED_RETRIEVED",Qf="CHANGE_ARMEDIA_CHOOSE_STATE",Zf="CURRENT_CREATOR_FETCH",el="CLEAR_CREATOR_FEATURED",tl="DELETE_FEED",nl={arMedia:{arMedia:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},adminList:[],list:[],fetching:!1,item:{},fetchingItem:!1},rl=oo.fromJS(nl),ol=(e=rl,t)=>{let n,r;switch(t.type){case"ARMEDIA_FETCHING":return e.set("fetching",!0);case"ARMEDIA_ADMIN_RETRIEVED":return n=t.list,r=new Map(e.get("arMedia")),r.set("arMedia",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("arMedia",r);case"ARMEDIA_RETRIEVED":return e.set("list",t.list).set("fetching",!1);case"ADD_ARMEDIA":return r=new Map(e.get("arMedia")),r.set("updateNeeded",!0),e.set("arMedia",r);case"REMOVE_ARMEDIA":const o=new Map(e.get("arMedia"));return o.set("updateNeeded",!0),e.set("arMedia",o);case"ARMEDIA_FETCHING_ITEM":return e.set("fetchingItem",!0);case"ARMEDIA_RETRIEVED_ITEM":return e.set("item",t.item).set("fetchingItem",!1);case"UPDATE_AR_MEDIA":let i=new Map(e.get("arMedia"));return i.set("updateNeeded",!0),e.set("arMedia",i)}return e},il=oo.fromJS({feeds:{feeds:[],feedsFetching:!1,feedsFeatured:[],feedsFeaturedFetching:!1,feedsCreator:[],feedsCreatorFetching:!1,feedsBookmark:[],feedsBookmarkFetching:!1,feedsFired:[],feedsFiredFetching:!1,myFeatured:[],myFeaturedFetching:!1,feed:{},fetching:!1,feedsAdmin:[],feedsAdminFetching:!1,lastvideoUrl:null}}),sl=(e=il,t)=>{var n;const r=e.get("feed");switch(t.type){case"FEEDS_FETCH":return e.set("feedsFetching",!0);case"FEATURED_FEEDS_FETCH":return e.set("feedsFeaturedFetching",!0);case"CREATOR_FEEDS_FETCH":return e.set("feedsCreatorFetching",!0);case"BOOKMARK_FEEDS_FETCH":return e.set("feedsBookmarkFetching",!0);case"MY_FEATURED_FEEDS_FETCH":return e.set("myFeaturedFetching",!0);case"FEEDS_FETCH":return e.set("fetching",!0);case"ADMIN_FEEDS_FETCH":return e.set("feedsAdminFetching",!0);case"FIRED_FEEDS_FETCH":return e.set("feedsFiredFetching",!0);case"FEEDS_RETRIEVED":return e.set("feeds",t.feeds).set("feedsFetching",!1);case"FEEDS_FEATURED_RETRIEVED":return e.set("feedsFeatured",t.feeds).set("feedsFeaturedFetching",!1);case"FEEDS_CREATOR_RETRIEVED":return e.set("feedsCreator",t.feeds).set("feedsCreatorFetching",!1);case"CLEAR_CREATOR_FEATURED":return e.set("feedsCreator",[]).set("feedsCreatorFetching",!1);case"FEEDS_MY_FEATURED_RETRIEVED":return e.set("myFeatured",t.feeds).set("myFeaturedFetching",!1);case"FEEDS_BOOKMARK_RETRIEVED":return e.set("feedsBookmark",t.feeds).set("feedsBookmarkFetching",!1);case"FEEDS_FIRED_RETRIEVED":return e.set("feedsFired",t.feeds).set("feedsFiredFetching",!1);case"FEED_RETRIEVED":return e.set("feed",t.feed).set("fetching",!1);case"ADD_FEED_FIRES":return e.set("feeds",e.get("feeds").map((e=>e.id===t.feedId?c(a({},e),{fires:++e.fires,isFired:!0}):a({},e)))).set("feed",r?c(a({},r),{fires:++r.fires,isFired:!0}):{});case"REMOVE_FEED_FIRES":return e.set("feeds",e.get("feeds").map((e=>e.id===t.feedId?c(a({},e),{fires:e.fires-1,isFired:!1}):a({},e)))).set("feed",r?c(a({},r),{fires:--r.fires,isFired:!1}):{});case"ADD_FEED_BOOKMARK":return e.set("feeds",e.get("feeds").map((e=>e.id===t.feedId?c(a({},e),{isBookmarked:!0}):a({},e)))).set("feed",r?c(a({},r),{isBookmarked:!0}):{});case"REMOVE_FEED_BOOKMARK":return e.set("feeds",e.get("feeds").map((e=>e.id===t.feedId?c(a({},e),{isBookmarked:!1}):a({},e)))).set("feed",r?c(a({},r),{isBookmarked:!1}):{});case"ADD_FEED_VIEW":return e.set("feedsFeatured",null==(n=e.get("feedsFeatured"))?void 0:n.map((e=>e.id===t.feedId?c(a({},e),{viewsCount:++e.viewsCount}):a({},e)))).set("feed",r?c(a({},r),{viewsCount:++r.viewsCount}):{});case"ADD_FEED":return e.set("feeds",[...e.get("feeds"),t.feed]).set("feedsFetching",!1);case"ADD_FEED_FEATURED":return e.set("feedsCreator",e.get("feedsCreator").map((e=>e.id===t.feedId?c(a({},e),{featured:!0}):a({},e))));case"REMOVE_FEED_FEATURED":const o=e.get("myFeatured");return e.set("feedsCreator",e.get("feedsCreator").map((e=>e.id===t.feedId?c(a({},e),{featured:!1}):a({},e)))).set("myFeatured",o?o.splice(o.findIndex((e=>e.id===t.feedId)),1):[]);case"FEEDS_AS_ADMIN_RETRIEVED":const i=t.feeds,s=new Map(e.get("feedsAdmin"));return s.set("feeds",i.data),s.set("updateNeeded",!1),s.set("lastFetched",new Date),e.set("feedsAdmin",s).set("fetching",!1);case"UPDATE_FEED":return e.set("feedsAdmin",e.get("feedsAdmin").get("feeds").map((e=>e.id===t.feed.id?a(a({},e),t.feed):a({},e)))).set("feedsAdminFetching",!1);case"DELETE_FEED":return e.set("feedsFeatured",[...e.get("feedsFeatured").filter((e=>e.id!==t.feed))]);case"LAST_FEED_VIDEO_URL":return e.set("lastFeedVideoUrl",t.feedId)}return e},al=oo.fromJS({creators:{creators:[],fetchingCreators:!1,creator:{},fetchingCreator:!1,currentCreator:{},fetchingCurrentCreator:!1,currentCreatorNotifications:{},followers:[],following:[],fetching:!1}}),cl=(e=al,t)=>{var n,r;switch(t.type){case"CURRENT_CREATOR_FETCH":return e.set("fetchingCurrentCreator",!0);case"CURRENT_CREATOR_RETRIEVED":return e.set("currentCreator",t.creator).set("creators",null==(n=e.get("creators"))?void 0:n.map((e=>e.id===t.creator.id?a({},t.creator):a({},e)))).set("fetchingCurrentCreator",!1).set("updateNeeded",!1).set("lastFetched",new Date);case"CREATOR_FETCH":return e.set("fetchingCreator",!0).set("creator",{});case"CREATOR_RETRIEVED":return e.set("creator",t.creator).set("fetchingCreator",!1);case"CREATORS_FETCH":return e.set("fetchingCreators",!0).set("creators",[]);case"CREATORS_RETRIEVED":return e.set("creators",t.creators).set("fetchingCreators",!1);case"CREATOR_NOTIFICATION_LIST_RETRIEVED":return e.set("currentCreatorNotifications",t.notifications).set("fetching",!1);case"SET_CREATOR_AS_FOLLOWED":return e.set("creator",c(a({},e.get("creator")),{followed:!0}));case"SET_CREATOR_NOT_FOLLOWED":return e.set("creator",c(a({},e.get("creator")),{followed:!1}));case"CREATOR_FOLLOWERS_RETRIEVED":return e.set("followers",t.creators);case"CREATOR_FOLLOWING_RETRIEVED":return e.set("following",t.creators);case"CREATOR_REMOVED":return e.set("currentCreator",null).set("creators",null==(r=e.get("creators"))?void 0:r.filter((e=>e.id!==t.id)))}return e},_l={group:{group:[],skip:0,limit:10,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},pl=oo.fromJS(_l),ul={scope:{scope:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date},scopeType:{scopeType:[],skip:0,limit:100,total:0,retrieving:!1,fetched:!1,updateNeeded:!0,lastFetched:new Date}},fl=oo.fromJS(ul);var ll={adminUser:(e=Qu,t)=>{let n,r;switch(t.type){case"LOADED_USERS":return n=t.users,r=new Map(e.get("users")),r.set("users",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("users",r);case"USER_ROLE_RETRIEVED":return n=t.types,r=new Map(e.get("userRole")),r.set("userRole",n.data),r.set("updateNeeded",!1),e.set("userRole",r);case"USER_ROLE_CREATED":return r=new Map(e.get("userRole")),r.set("updateNeeded",!0),e.set("userRole",r);case"USER_ADMIN_REMOVED":n=t.data,r=new Map(e.get("users"));let o=r.get("users");return o=o.filter((e=>e.id!==n.id)),r.set("updateNeeded",!0),r.set("users",o),e.set("users",r);case"USER_ADMIN_CREATED":case"USER_ADMIN_PATCHED":return n=t.user,r=new Map(e.get("users")),r.set("updateNeeded",!0),e.set("users",r);case"USER_ROLE_UPDATED":return r=new Map(e.get("users")),r.set("updateNeeded",!0),e.set("users",r);case"USER_SEARCH_ADMIN":return n=t.data,r=new Map(e.get("users")),r.set("users",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("users",r);case"SINGLE_USER_ADMIN_LOADED":return n=t.data,r=new Map(e.get("singleUser")),r.set("singleUser",n),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),e.set("singleUser",r);case"STATIC_RESOURCE_RETRIEVED":return n=t.staticResource,r=new Map(e.get("staticResource")),r.set("staticResource",n.data),r.set("retrieving",!1),r.set("updateNeeded",!1),r.set("fetched",!0),e.set("staticResource",r);case"SINGLE_USER_ADMIN_REFETCH":return r=new Map(e.get("singleUser")),r.set("updateNeeded",!0),e.set("singleUser",r)}return e},admin:(e=Xu,t)=>{switch(t.type){case"VIDEO_CREATED":return e.set("data",t.data)}return e},contentPack:(e=Zu,t)=>{let n;switch(t.type){case"LOADED_CONTENT_PACKS":n=t;let r=e.get("contentPacks");return r=n.contentPacks,e.set("updateNeeded",!1).set("contentPacks",r);case"CONTENT_PACK_CREATED":case"CONTENT_PACK_PATCHED":return e.set("updateNeeded",!0)}return e},adminAvatar:(e=tf,t)=>{let n,r;switch(t.type){case"AVATARS_RETRIEVED":return n=t.avatars,r=new Map(e.get("avatars")),r.set("avatars",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("avatars",r)}return e},adminInstance:(e=rf,t)=>{let n,r;switch(t.type){case"INSTANCES_RETRIEVED":return n=t.instances,r=new Map(e.get("instances")),r.set("instances",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("instances",r);case"INSTANCE_REMOVED_ROW":n=t.instance,r=new Map(e.get("instances"));let o=r.get("instances");return o=o.filter((e=>e.id!==n.id)),r.set("instances",o),e.set("instances",r)}return e},adminLocation:(e=sf,t)=>{let n,r;switch(t.type){case"LOCATIONS_RETRIEVED":return n=t.locations,r=new Map(e.get("locations")),r.set("locations",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("locations",r);case"LOCATION_CREATED":return r=new Map(e.get("locations")),r.set("updateNeeded",!0),r.set("created",!0),e.set("locations",r);case"LOCATION_PATCHED":r=new Map(e.get("locations"));const o=r.get("locations");for(let e=0;e<o.length;e++)o[e].id===t.location.id?o[e]=t.location:t.location.isLobby&&o[e].isLobby&&(o[e].isLobby=!1);return r.set("locations",o),e.set("locations",r);case"LOCATION_REMOVED":let i=new Map(e.get("locations"));return i.set("updateNeeded",!0),e.set("locations",i);case"LOCATION_TYPES_RETRIEVED":return n=t.types,r=new Map(e.get("locationTypes")),r.set("locationTypes",n.data),r.set("updateNeeded",!1),e.set("locationTypes",r)}return e},adminParty:(e=cf,t)=>{let n,r;switch(t.type){case"PARTY_ADMIN_DISPLAYED":return n=t.data,r=new Map(e.get("parties")),r.set("parties",n),r.set("updateNeeded",!1),e.set("parties",r);case"PARTY_ADMIN_CREATED":return r=new Map(e.get("parties")),r.set("updateNeeded",!0),e.set("parties",r)}return e},adminScene:(e=pf,t)=>{let n,r;switch(t.type){case"ADMIN_SCENES_RETRIEVED":return n=t.collections,r=new Map(e.get("scenes")),r.set("scenes",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("total",n.total),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("scenes",r)}return e},adminBots:(e=ff,t)=>{let n,r;switch(t.type){case"BOT_ADMIN_DISPLAY":return n=t.bots,r=new Map(e.get("bots")),r.set("bots",n.data),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("bots",r);case"BOT_ADMIN_CREATE":return r=new Map(e.get("bots")),r.set("updateNeeded",!0),e.set("bots",r);case"BOT_COMMAND_ADMIN_CREATE":const o=new Map(e.get("bots"));return o.set("updateNeeded",!0),e.set("bots",o);case"BOT_ADMIN_REMOVE":const i=new Map(e.get("bots"));return i.set("updateNeeded",!0),e.set("bots",i);case"BOT_COMMAND_ADMIN_REMOVE":const s=new Map(e.get("bots"));return s.set("updateNeeded",!0),e.set("bots",s);case"BOT_ADMIN_UPDATE":const a=new Map(e.get("bots"));return a.set("updateNeeded",!0),e.set("bots",a)}return e},adminAnalytics:(e=lf,t)=>{let n;switch(t.type){case"ACTIVE_INSTANCES_FETCHED":return n=t.analytics,e.set("activeInstances",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"ACTIVE_PARTIES_FETCHED":return n=t.analytics,e.set("activeParties",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"ACTIVE_LOCATIONS_FETCHED":return n=t.analytics,e.set("activeLocations",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"ACTIVE_SCENES_FETCHED":return n=t.analytics,e.set("activeScenes",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"CHANNEL_USERS_FETCHED":return n=t.analytics,e.set("channelUsers",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"INSTANCE_USERS_FETCHED":return n=t.analytics,e.set("instanceUsers",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"DAILY_NEW_USERS_FETCHED":return n=t.analytics,e.set("dailyNewUsers",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse());case"DAILY_USERS_FETCHED":return n=t.analytics,e.set("dailyUsers",n.data.map((e=>({x:new Date(e.createdAt),y:e.count}))).reverse())}return e},arMedia:ol,feedsAdmin:sl,adminCreator:cl,group:(e=pl,t)=>{let n,r;switch(t.type){case"GROUP_FETCHING":return e.set("fetching",!0);case"GROUP_ADMIN_RETRIEVED":return n=t.list,r=new Map(e.get("group")),r.set("group",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("group",r);case"ADD_GROUP":return r=new Map(e.get("group")),r.set("updateNeeded",!0),e.set("group",r);case"GROUP_ADMIN_UPDATE":const o=new Map(e.get("group"));return o.set("updateNeeded",!0),e.set("group",o);case"GROUP_ADMIN_DELETE":const i=new Map(e.get("group"));return i.set("updateNeeded",!0),e.set("group",i)}return e},scope:(e=fl,t)=>{let n,r;switch(t.type){case"SCOPE_FETCHING":return e.set("fetching",!0);case"SCOPE_ADMIN_RETRIEVED":return n=t.list,r=new Map(e.get("scope")),r.set("scope",n.data),r.set("skip",n.skip),r.set("limit",n.limit),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("scope",r);case"ADD_SCOPE":return r=new Map(e.get("scope")),r.set("updateNeeded",!0),e.set("scope",r);case"UPDATE_SCOPE":let o=new Map(e.get("scope"));return o.set("updateNeeded",!0),e.set("scope",o);case"REMOVE_SCOPE":const i=new Map(e.get("scope"));return i.set("updateNeeded",!0),e.set("scope",i);case"SCOPE_TYPE_RETRIEVED":const s=t.list;return r=new Map(e.get("scopeType")),r.set("scopeType",s.data),r.set("skip",s.skip),r.set("limit",s.limit),r.set("retrieving",!1),r.set("fetched",!0),r.set("updateNeeded",!1),r.set("lastFetched",new Date),e.set("scopeType",r)}return e}};const dl=oo.fromJS({type:"none",message:""}),ml="CLOSE_DIALOG";var gl,hl;(hl=gl||(gl={}))[hl.START_STATE=0]="START_STATE",hl[hl.AWAITING_INPUT=1]="AWAITING_INPUT",hl[hl.SCENE_LOADING=2]="SCENE_LOADING",hl[hl.SCENE_LOADED=3]="SCENE_LOADED",hl[hl.SUCCESS=4]="SUCCESS",hl[hl.FAILED=5]="FAILED",hl[hl.ALL_DONE=6]="ALL_DONE";const vl={loaded:!1,inVrMode:!1,viewport:{width:1400,height:900},onBoardingStep:gl.START_STATE,isTutorial:!1,userHasInteracted:!1},El=oo.fromJS(vl),yl=oo.fromJS({isOpened:!1,content:void 0});var Sl={app:(e=El,t)=>{switch(t.type){case"SET_APP_LOADED":return e.set("loaded",t.loaded);case"SET_APP_LOADING_PERCENT":return e.set("loadPercent",t.loadPercent);case"SET_VIEWPORT_SIZE":return e.set("viewport",{width:t.width,height:t.height});case"SET_IN_VR_MODE":return e.set("inVrMode",t.inVrMode);case"SET_USER_HAS_INTERACTED":return e.set("userHasInteracted",!0);case"SET_APP_ONBOARDING_STEP":return t.onBoardingStep===gl.ALL_DONE?e.set("onBoardingStep",t.onBoardingStep>=e.get("onBoardingStep")?t.onBoardingStep:e.get("onBoardingStep")):t.onBoardingStep===gl.SCENE_LOADED?e.set("onBoardingStep",t.onBoardingStep>=e.get("onBoardingStep")?t.onBoardingStep:e.get("onBoardingStep")).set("isTutorial",!0):e.set("onBoardingStep",t.onBoardingStep>=e.get("onBoardingStep")?t.onBoardingStep:e.get("onBoardingStep")).set("isTutorial",!1);case"SET_APP_SPECIFIC_ONBOARDING_STEP":return e.set("onBoardingStep",t.onBoardingStep).set("isTutorial",t.isTutorial)}return e},alert:(e=dl,t)=>{switch(t.type){case"SHOW_NOTIFICATION":const n=t.alertType,r=t.message;return e.set("type",n).set("message",r);case"HIDE_NOTIFICATION":return e.set("type",t.alertType).set("message",t.message)}return e},dialog:(e=yl,t)=>{switch(t.type){case"SHOW_DIALOG":return e.set("isOpened",!0).set("content",t.content);case"CLOSE_DIALOG":return e.set("isOpened",!1).set("content",void 0)}return e}};const bl=oo.fromJS({feeds:{feedComments:[],commentFires:[],fetching:!1}}),Il=oo.fromJS({feedFires:{feedFires:[],fetching:!1}}),Ol=oo.fromJS({popups:{creatorPage:!1,creatorForm:!1,creatorId:null,feedPage:!1,feedId:null,shareFeedPage:!1,arMedia:!1,shareForm:!1,videoUrl:null,webxr:!1,videoPath:null,imgSrc:null,fPath:null,nameId:null}});function Dl(e){return{type:"THEFEEDS_RETRIEVED",thefeeds:e}}function Tl(){return{type:"THEFEEDS_FETCH"}}function kl(e){return{type:"REMOVE_THEFEEDS",thefeeds:e}}function Al(e){return{type:"ADD_THEFEEDS",thefeeds:e}}function Rl(e){return{type:"UPDATE_THEFEEDS",thefeeds:e}}const wl=oo.fromJS({thefeeds:{}}),xl=oo.fromJS({thefeedsFires:{thefeedsFires:[],fetching:!1}});function Nl(){return{type:"TOGGLE_WEBXRNATIVE"}}const Cl=oo.fromJS({webxrnative:null});var Ml={creators:cl,feeds:sl,feedFires:(e=Il,t)=>{switch(t.type){case"FEEDFIRES_FETCH":return e.set("fetching",!0);case"FEED_FIRES_RETRIEVED":return e.set("feedFires",t.feedFires).set("fetching",!1)}return e},feedComments:(e=bl,t)=>{switch(t.type){case"FEED_COMMENTS_FETCH":return e.set("fetching",!0);case"FEED_COMMENTS_RETRIEVED":return e.set("feedComments",t.comments||[]).set("fetching",!1);case"ADD_FEED_COMMENT_FIRES":return e.set("feedComments",e.get("feedComments").map((e=>e.id===t.commentId?c(a({},e),{fires:parseInt(e.fires)+1,isFired:!0}):a({},e))));case"REMOVE_FEED_COMMENT_FIRES":return e.set("feedComments",e.get("feedComments").map((e=>e.id===t.commentId?c(a({},e),{fires:--e.fires,isFired:!1}):a({},e))));case"ADD_FEED_COMMENT":return e.set("feedComments",[t.comment,...e.get("feedComments")||[]]);case"COMMENT_FIRES":return e.set("commentFires",t.creators)}return e},arMedia:ol,popups:(e=Ol,t)=>{switch(t.type){case"CHANGE_CREATOR_PAGE_STATE":return e.set("creatorPage",t.state).set("creatorId",t.id);case"CHANGE_CREATOR_FORM_STATE":return e.set("creatorForm",t.state);case"CHANGE_FEED_PAGE_STATE":return e.set("feedPage",t.state).set("feedId",t.id);case"CHANGE_ARMEDIA_CHOOSE_STATE":return e.set("arMedia",t.state);case"CHANGE_NEW_FEED_PAGE_STATE":return e.set("shareFeedPage",t.state).set("videoPath",t.id).set("fPath",t.fPath).set("nameId",t.nameId);case"CHANGE_SHARE_FORM_STATE":return e.set("shareForm",t.state).set("videoUrl",t.id).set("imgSrc",t.imgSrc);case"CHANGE_WEB_XR_STATE":return e.set("webxr",t.state).set("itemId",t.id)}return e},thefeeds:(e=wl,t)=>{switch(t.type){case"THEFEEDS_FETCH":return e.set("fetching",!0);case"THEFEEDS_RETRIEVED":return e.set("thefeeds",t.thefeeds).set("fetching",!1);case"ADD_THEFEEDS":return e.set("thefeeds",[...e.get("thefeeds"),t.thefeeds]);case"UPDATE_THEFEEDS":return e.set("thefeeds",e.get("thefeeds").map((e=>e.id===t.thefeeds.id?a(a({},e),t.thefeeds):a({},e))));case"REMOVE_THEFEEDS":return e.set("thefeeds",[...e.get("thefeeds").filter((e=>e.id!==t.thefeeds))])}return e},thefeedsFires:(e=xl,t)=>{switch(t.type){case"THEFEEDS_FIRES_FETCH":return e.set("fetching",!0);case"THEFEEDS_FIRES_RETRIEVED":return e.set("thefeedsFires",t.thefeedsFires);case"ADD_THEFEEDS_FIRES":return e.set("thefeedsFires",[...e.get("thefeedsFires"),t.thefeedsFires]);case"REMOVE_THEFEEDS_FIRES":return e.set("thefeedsFires",e.get("thefeedsFires").filter((e=>e.id!==t.thefeedsFires)))}return e},webxrnative:(e=Cl,t)=>{switch(t.type){case"SET_WEBXRNATIVE":return e.set("webxrnative",!1);case"TOGGLE_WEBXRNATIVE":return e.set("webxrnative",!e.get("webxrnative"))}return e}};const Pl={isLoggedIn:!1,isProcessing:!1,error:"",authUser:$u,user:Ku,identityProvider:Ju,avatarList:[]},jl=oo.fromJS(Pl);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Ll=function(e,t){return(Ll=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};var Fl=Symbol("postpone"),Gl=Symbol("none");function Ul(){return{id:Wl}}var zl=Symbol("DevTools");void 0!==process&&process;var Vl,Hl,Xl=Symbol("self");(Hl=Vl||(Vl={}))[Hl.InitStateToValueFromState=101]="InitStateToValueFromState",Hl[Hl.SetStateToValueFromState=102]="SetStateToValueFromState",Hl[Hl.GetStateWhenPromised=103]="GetStateWhenPromised",Hl[Hl.SetStateWhenPromised=104]="SetStateWhenPromised",Hl[Hl.SetStateNestedToPromised=105]="SetStateNestedToPromised",Hl[Hl.SetStateWhenDestroyed=106]="SetStateWhenDestroyed",Hl[Hl.ToJson_Value=108]="ToJson_Value",Hl[Hl.ToJson_State=109]="ToJson_State",Hl[Hl.GetUnknownPlugin=120]="GetUnknownPlugin",Hl[Hl.SetProperty_State=201]="SetProperty_State",Hl[Hl.SetProperty_Value=202]="SetProperty_Value",Hl[Hl.SetPrototypeOf_State=203]="SetPrototypeOf_State",Hl[Hl.SetPrototypeOf_Value=204]="SetPrototypeOf_Value",Hl[Hl.PreventExtensions_State=205]="PreventExtensions_State",Hl[Hl.PreventExtensions_Value=206]="PreventExtensions_Value",Hl[Hl.DefineProperty_State=207]="DefineProperty_State",Hl[Hl.DefineProperty_Value=208]="DefineProperty_Value",Hl[Hl.DeleteProperty_State=209]="DeleteProperty_State",Hl[Hl.DeleteProperty_Value=210]="DeleteProperty_Value",Hl[Hl.Construct_State=211]="Construct_State",Hl[Hl.Construct_Value=212]="Construct_Value",Hl[Hl.Apply_State=213]="Apply_State",Hl[Hl.Apply_Value=214]="Apply_Value";var Kl=function(e){function t(t,n,r){return e.call(this,"Error: HOOKSTATE-"+n+" [path: /"+t.join("/")+(r?", details: "+r:"")+"]. See https://hookstate.js.org/docs/exceptions#hookstate-"+n)||this}return function(e,t){function n(){this.constructor=e}Ll(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t}(Error);var Bl=function(){try{new Proxy({},{});return!1}catch(e){return!0}}(),Wl=Symbol("Downgraded"),Jl=Symbol("ProxyMarker"),$l=[],ql=function(){function e(e){this._value=e,this._edition=0,this._subscribers=new Set,this._setSubscribers=new Set,this._destroySubscribers=new Set,this._batchStartSubscribers=new Set,this._batchFinishSubscribers=new Set,this._plugins=new Map,this._batches=0,"object"==typeof e&&Promise.resolve(e)===e?(this._promised=this.createPromised(e),this._value=Gl):e===Gl&&(this._promised=this.createPromised(void 0))}return e.prototype.createPromised=function(e){var t=this,n=new Yl(e?Promise.resolve(e):void 0,(function(e){t.promised===n&&-1!==t.edition&&(t._promised=void 0,t.set($l,e,void 0),t.update([$l]))}),(function(){t.promised===n&&-1!==t.edition&&(t._edition+=1,t.update([$l]))}),(function(){if(t._batchesPendingActions&&t._value!==Gl&&-1!==t.edition){var e=t._batchesPendingActions;t._batchesPendingActions=void 0,e.forEach((function(e){return e()}))}}));return n},Object.defineProperty(e.prototype,"edition",{get:function(){return this._edition},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"promised",{get:function(){return this._promised},enumerable:!1,configurable:!0}),e.prototype.get=function(e){var t=this._value;return t===Gl||e.forEach((function(e){t=t[e]})),t},e.prototype.set=function(e,t,n){if(this._edition<0)throw new Kl(e,Vl.SetStateWhenDestroyed);if(0===e.length){var r={path:e,state:t,value:t,previous:this._value,merged:n};if(t===Gl)this._promised=this.createPromised(void 0),delete r.value,delete r.state;else if("object"==typeof t&&Promise.resolve(t)===t)this._promised=this.createPromised(t),t=Gl,delete r.value,delete r.state;else if(this._promised&&!this._promised.resolver&&!this._promised.fullfilled)throw new Kl(e,Vl.SetStateWhenPromised);return(a=this._value)===Gl&&delete r.previous,this._value=t,this.afterSet(r),a===Gl&&this._value!==Gl&&this.promised&&this.promised.resolver&&this.promised.resolver(this._value),e}if("object"==typeof t&&Promise.resolve(t)===t)throw new Kl(e,Vl.SetStateNestedToPromised);for(var o=this._value,i=0;i<e.length-1;i+=1)o=o[e[i]];var s=e[e.length-1];if(s in o){if(t!==Gl){var a=o[s];return o[s]=t,this.afterSet({path:e,state:this._value,value:t,previous:a,merged:n}),e}a=o[s];return Array.isArray(o)&&"number"==typeof s?o.splice(s,1):delete o[s],this.afterSet({path:e,state:this._value,previous:a,merged:n}),e.slice(0,-1)}return t!==Gl?(o[s]=t,this.afterSet({path:e,state:this._value,value:t,merged:n}),e.slice(0,-1)):e},e.prototype.update=function(e){if(this._batches)return this._batchesPendingPaths=this._batchesPendingPaths||[],void(this._batchesPendingPaths=this._batchesPendingPaths.concat(e));var t=[];this._subscribers.forEach((function(n){return n.onSet(e,t)})),t.forEach((function(e){return e()}))},e.prototype.afterSet=function(e){-1!==this._edition&&(this._edition+=1,this._setSubscribers.forEach((function(t){return t(e)})))},e.prototype.startBatch=function(e,t){this._batches+=1;var n={path:e};t&&"context"in t&&(n.context=t.context),this._value!==Gl&&(n.state=this._value),this._batchStartSubscribers.forEach((function(e){return e(n)}))},e.prototype.finishBatch=function(e,t){var n={path:e};if(t&&"context"in t&&(n.context=t.context),this._value!==Gl&&(n.state=this._value),this._batchFinishSubscribers.forEach((function(e){return e(n)})),this._batches-=1,0===this._batches&&this._batchesPendingPaths){var r=this._batchesPendingPaths;this._batchesPendingPaths=void 0,this.update(r)}},e.prototype.postponeBatch=function(e){this._batchesPendingActions=this._batchesPendingActions||[],this._batchesPendingActions.push(e)},e.prototype.getPlugin=function(e){return this._plugins.get(e)},e.prototype.register=function(e){if(!this._plugins.get(e.id)){var t=e.init?e.init(this.toMethods().self):{};this._plugins.set(e.id,t),t.onSet&&this._setSubscribers.add((function(e){return t.onSet(e)})),t.onDestroy&&this._destroySubscribers.add((function(e){return t.onDestroy(e)})),t.onBatchStart&&this._batchStartSubscribers.add((function(e){return t.onBatchStart(e)})),t.onBatchFinish&&this._batchFinishSubscribers.add((function(e){return t.onBatchFinish(e)}))}},e.prototype.toMethods=function(){return new td(this,$l,this.get($l),this.edition,Zl)},e.prototype.subscribe=function(e){this._subscribers.add(e)},e.prototype.unsubscribe=function(e){this._subscribers.delete(e)},e.prototype.destroy=function(){var e=this;this._destroySubscribers.forEach((function(t){return t(e._value!==Gl?{state:e._value}:{})})),this._edition=-1},e.prototype.toJSON=function(){throw new Kl($l,Vl.ToJson_Value)},e}(),Yl=function(e,t,n,r){var o=this;this.promise=e,e||(e=new Promise((function(e){o.resolver=e}))),this.promise=e.then((function(e){o.fullfilled=!0,o.resolver||t(e)})).catch((function(e){o.fullfilled=!0,o.error=e,n()})).then((function(){return r()}))},Ql=Symbol("ValueUnusedMarker");function Zl(){}var ed=Symbol("UnmountedMarker");Zl[ed]=!0;var td=function(){function e(e,t,n,r,o){this.state=e,this.path=t,this.valueSource=n,this.valueEdition=r,this.onSetUsed=o,this.valueCache=Ql}return e.prototype.getUntracked=function(e){if(this.valueEdition!==this.state.edition&&(this.valueSource=this.state.get(this.path),this.valueEdition=this.state.edition,this.isMounted?this.valueCache!==Ql&&(this.valueCache=Ql,this.get(!0)):(this.valueCache=Ql,delete this.childrenCache,delete this.selfCache)),this.valueSource===Gl&&!e){if(this.state.promised&&this.state.promised.error)throw this.state.promised.error;throw new Kl(this.path,Vl.GetStateWhenPromised)}return this.valueSource},e.prototype.get=function(e){var t=this.getUntracked(e);return this.valueCache===Ql&&(this.isDowngraded?this.valueCache=t:Array.isArray(t)?this.valueCache=this.valueArrayImpl(t):this.valueCache="object"==typeof t&&null!==t?this.valueObjectImpl(t):t),this.valueCache},Object.defineProperty(e.prototype,"value",{get:function(){return this.get()},enumerable:!1,configurable:!0}),e.prototype.setUntracked=function(e,t){if("function"==typeof e&&(e=e(this.getUntracked())),"object"==typeof e&&null!==e&&e[Jl])throw new Kl(this.path,Vl.SetStateToValueFromState);return[this.state.set(this.path,e,t)]},e.prototype.set=function(e){this.state.update(this.setUntracked(e))},e.prototype.mergeUntracked=function(e){var t,n=this.getUntracked();"function"==typeof e&&(e=e(n));var r=!1;if(Array.isArray(n)){if(Array.isArray(e))return this.setUntracked(n.concat(e),e);var o=[];Object.keys(e).sort().forEach((function(t){var i=Number(t),s=e[i];s===Gl?(r=!0,o.push(i)):(r=r||!(i in n),n[i]=s)})),o.reverse().forEach((function(e){n.splice(e,1)})),t=this.setUntracked(n,e)}else{if("object"!=typeof n||null===n)return"string"==typeof n?this.setUntracked(n+String(e),e):this.setUntracked(e);Object.keys(e).forEach((function(t){var o=e[t];o===Gl?(r=!0,delete n[t]):(r=r||!(t in n),n[t]=o)})),t=this.setUntracked(n,e)}if(1!==t.length||t[0]!==this.path||r)return t;var i=t[0];return Object.keys(e).map((function(e){return i.slice().concat(e)}))},e.prototype.merge=function(e){this.state.update(this.mergeUntracked(e))},e.prototype.nested=function(e){return this.child(e).self},e.prototype.rerender=function(e){this.state.update(e)},e.prototype.destroy=function(){this.state.destroy()},e.prototype.subscribe=function(e){void 0===this.subscribers&&(this.subscribers=new Set),this.subscribers.add(e)},e.prototype.unsubscribe=function(e){this.subscribers.delete(e)},Object.defineProperty(e.prototype,"isMounted",{get:function(){return!this.onSetUsed[ed]},enumerable:!1,configurable:!0}),e.prototype.onUnmount=function(){this.onSetUsed[ed]=!0},e.prototype.onSet=function(e,t){var n=this,r=function(){if(n.isDowngraded&&n.valueCache!==Ql)return t.push(n.onSetUsed),!0;for(var r=0,o=e;r<o.length;r++){var i=o[r][n.path.length];if(void 0===i){if(n.valueCache!==Ql)return t.push(n.onSetUsed),!0}else{var s=n.childrenCache&&n.childrenCache[i];if(s&&s.onSet(e,t))return!0}}return!1}();return r||void 0===this.subscribers||this.subscribers.forEach((function(n){n.onSet(e,t)})),r},Object.defineProperty(e.prototype,"keys",{get:function(){var e=this.get();return Array.isArray(e)?Object.keys(e).map((function(e){return Number(e)})).filter((function(e){return Number.isInteger(e)})):"object"==typeof e&&null!==e?Object.keys(e):void 0},enumerable:!1,configurable:!0}),e.prototype.child=function(t){if(this.isMounted){this.childrenCache=this.childrenCache||{};var n=this.childrenCache[t];if(n)return n}var r=new e(this.state,this.path.slice().concat(t),this.valueSource[t],this.valueEdition,this.onSetUsed);return this.isDowngraded&&(r.isDowngraded=!0),this.childrenCache&&(this.childrenCache[t]=r),r},e.prototype.valueArrayImpl=function(e){var t=this;return Bl?(this.isDowngraded=!0,e):nd(this.path,e,(function(){return e}),(function(e,n){if("length"===n)return e.length;if(n in Array.prototype)return Array.prototype[n];if(n===Jl)return t;if("symbol"==typeof n)return e[n];var r=Number(n);return Number.isInteger(r)?t.child(r).get():void 0}),(function(e,n,r){if("symbol"==typeof n)return e[n]=r,!0;throw new Kl(t.path,Vl.SetProperty_Value)}),!0)},e.prototype.valueObjectImpl=function(e){var t=this;return Bl?(this.isDowngraded=!0,e):nd(this.path,e,(function(){return e}),(function(e,n){return n===Jl?t:"symbol"==typeof n?e[n]:t.child(n).get()}),(function(e,n,r){if("symbol"==typeof n)return e[n]=r,!0;throw new Kl(t.path,Vl.SetProperty_Value)}),!0)},Object.defineProperty(e.prototype,"self",{get:function(){var e=this;if(this.selfCache)return this.selfCache;var t=function(t,n){if(n===Xl)return e;if("symbol"!=typeof n){if("toJSON"===n)throw new Kl(e.path,Vl.ToJson_State);switch(n){case"path":return e.path;case"keys":return e.keys;case"value":return e.value;case"ornull":return e.ornull;case"promised":return e.promised;case"error":return e.error;case"get":return function(){return e.get()};case"set":return function(t){return e.set(t)};case"merge":return function(t){return e.merge(t)};case"nested":return function(t){return e.nested(t)};case"batch":return function(t,n){return e.batch(t,n)};case"attach":return function(t){return e.attach(t)};case"destroy":return function(){return e.destroy()}}var r=e.isDowngraded,o=e.get();if(e.isDowngraded=r,"object"==typeof o&&null!==o||o===Gl){if(Array.isArray(o)){if("length"===n)return o.length;if(n in Array.prototype)return Array.prototype[n];var i=Number(n);if(!Number.isInteger(i))return;return e.nested(i)}return e.nested(n.toString())}}};if(Bl){var n=Array.isArray(this.valueSource)?[]:{};return[Xl,"toJSON","path","keys","value","ornull","promised","error","get","set","merge","nested","batch","attach","destroy"].forEach((function(e){Object.defineProperty(n,e,{get:function(){return t(0,e)}})})),"object"==typeof this.valueSource&&null!==this.valueSource&&Object.keys(this.valueSource).forEach((function(e){Object.defineProperty(n,e,{enumerable:!0,get:function(){return t(0,e)}})})),this.selfCache=n,this.selfCache}return this.selfCache=nd(this.path,this.valueSource,(function(){return e.get(),e.valueSource}),t,(function(t,n,r){throw new Kl(e.path,Vl.SetProperty_State)}),!1),this.selfCache},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"promised",{get:function(){return!(this.get(!0)!==Gl||!this.state.promised||this.state.promised.fullfilled)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){if(this.get(!0)===Gl){if(this.state.promised&&this.state.promised.fullfilled)return this.state.promised.error;this.get()}},enumerable:!1,configurable:!0}),e.prototype.batch=function(e,t){var n=this,r={context:t};try{this.state.startBatch(this.path,r);var o=e(this.self);return o===Fl&&this.state.postponeBatch((function(){return n.batch(e,t)})),o}finally{this.state.finishBatch(this.path,r)}},Object.defineProperty(e.prototype,"ornull",{get:function(){var e=this.get();return null==e?e:this.self},enumerable:!1,configurable:!0}),e.prototype.attach=function(e){if("function"==typeof e){var t=e();if(t.id===Wl){if(this.isDowngraded=!0,this.valueCache!==Ql){var n=this.getUntracked(!0);this.valueCache=n}return this.self}return this.state.register(t),this.self}return[this.state.getPlugin(e)||new Kl(this.path,Vl.GetUnknownPlugin,e.toString()),this]},e}();function nd(e,t,n,r,o,i){var s=function(t){throw new Kl(e,t)};return"object"==typeof t&&null!==t||(t={}),new Proxy(t,{getPrototypeOf:function(e){var t=n();return null==t?null:Object.getPrototypeOf(t)},setPrototypeOf:function(e,t){return s(i?Vl.SetPrototypeOf_State:Vl.SetPrototypeOf_Value)},isExtensible:function(e){return!0},preventExtensions:function(e){return s(i?Vl.PreventExtensions_State:Vl.PreventExtensions_Value)},getOwnPropertyDescriptor:function(e,t){var o=n();if(null!=o){var i=Object.getOwnPropertyDescriptor(o,t);return i&&Array.isArray(o)&&t in Array.prototype?i:i&&{configurable:!0,enumerable:i.enumerable,get:function(){return r(o,t)},set:void 0}}},has:function(e,t){if("symbol"==typeof t)return!1;var r=n();return"object"==typeof r&&null!==r&&t in r},get:r,set:o,deleteProperty:function(e,t){return s(i?Vl.DeleteProperty_State:Vl.DeleteProperty_Value)},defineProperty:function(e,t,n){return s(i?Vl.DefineProperty_State:Vl.DefineProperty_Value)},ownKeys:function(e){var t=n();return Array.isArray(t)?Object.keys(t).concat("length"):null==t?[]:Object.keys(t)},apply:function(e,t,n){return s(i?Vl.Apply_State:Vl.Apply_Value)},construct:function(e,t,n){return s(i?Vl.Construct_State:Vl.Construct_Value)}})}const rd=function e(t){var n=function(e){var t=e;"function"==typeof e&&(t=e());if("object"==typeof t&&null!==t&&t[Jl])throw new Kl($l,Vl.InitStateToValueFromState);return new ql(t)}(t).toMethods(),r=e[zl];return r&&n.attach(r),n.self}({relationship:{userId:"",friend:[],requested:[],blocking:[],blocked:[]},users:[],updateNeeded:!0,layerUsers:[],layerUsersUpdateNeeded:!0,channelLayerUsers:[],channelLayerUsersUpdateNeeded:!0,toastMessages:[]}),od=e=>{rd.batch((t=>{switch(e.type){case"LOADED_RELATIONSHIP":return t.merge({relationship:e.relationship,updateNeeded:!1});case"ADMIN_LOADED_USERS":return t.merge({users:e.users,updateNeeded:!1});case"CHANGED_RELATION":return t.updateNeeded.set(!0);case"CLEAR_LAYER_USERS":return t.merge({layerUsers:[],layerUsersUpdateNeeded:!0});case"LOADED_LAYER_USERS":return t.merge({layerUsers:e.users,layerUsersUpdateNeeded:!1});case"ADDED_LAYER_USER":{const n=e.user,r=t.layerUsers.findIndex((e=>null!=e&&e.id.value===n.id));return-1===r?t.layerUsers.merge([n]):t.layerUsers[r].set(n),t.layerUsersUpdateNeeded.set(!0)}case"REMOVED_LAYER_USER":{const n=t.layerUsers.findIndex((t=>null!=t&&t.value.id!==e.user.id));return t.layerUsers[n].set(Gl)}case"CLEAR_CHANNEL_LAYER_USERS":return t.merge({channelLayerUsers:[],channelLayerUsersUpdateNeeded:!0});case"LOADED_CHANNEL_LAYER_USERS":return t.merge({channelLayerUsers:e.users,channelLayerUsersUpdateNeeded:!1});case"ADDED_CHANNEL_LAYER_USER":{const n=e.user,r=t.channelLayerUsers.findIndex((e=>null!=e&&e.value.id===n.id));return-1===r?t.channelLayerUsers.merge([n]):t.channelLayerUsers[r].set(n),t.channelLayerUsersUpdateNeeded.set(!0)}case"REMOVED_CHANNEL_LAYER_USER":const n=e.user,r=t.channelLayerUsers.findIndex((e=>null!=e&&e.value.id!==n.id));return t.channelLayerUsers[r].set(Gl);case"USER_TOAST":return t.toastMessages.merge([e.message])}}),e.type)};var id={auth:(e=jl,t)=>{switch(t.type){case"ACTION_PROCESSING":return e.set("isProcessing",t.processing).set("error","");case"LOGIN_USER_SUCCESS":return e.set("isLoggedIn",!0).set("authUser",t.authUser);case"LOGIN_USER_ERROR":return e.set("error",t.message);case"LOGIN_USER_BY_GITHUB_SUCCESS":break;case"LOGIN_USER_BY_GITHUB_ERROR":return e.set("error",t.message);case"LOGIN_USER_BY_LINKEDIN_SUCCESS":break;case"LOGIN_USER_BY_LINKEDIN_ERROR":return e.set("error",t.message);case"REGISTER_USER_SUCCESS":return e.set("identityProvider",t.identityProvider);case"REGISTER_USER_ERROR":break;case"LOGOUT_USER":return e.set("isLoggedIn",!1).set("user",void 0).set("authUser",void 0);case"DID_VERIFY_EMAIL":return e.set("isVerified",t.result);case"LOADED_USER_DATA":{const n=t.user;return e.set("user",n)}case"RESTORE":{const t=$();return t?e.set("isLoggedIn",t.isLoggedIn).set("authUser",t.authUser).set("identityProvider",t.identityProvider):e}case"AVATAR_UPDATED":{const n=Object.assign({},e.get("user"),{avatarUrl:t.url});return e.set("user",n)}case"USERNAME_UPDATED":{const n=Object.assign({},e.get("user"),{name:t.name});return e.set("user",n)}case"USERAVATARID_UPDATED":{const n=Object.assign({},e.get("user"),{avatarId:t.avatarId});return e.set("user",n)}case"USER_UPDATED":{const n=Object.assign({},e.get("user"),a({},t.user));return e.set("user",n)}case"UPDATE_USER_SETTINGS":{const n=Object.assign({},e.get("user"),{user_setting:t.data});return e.set("user",n)}case"AVATAR_FETCHED":{const n=t.avatarList,r={};for(let e of n){const t=r[e.name]||{};if(!t)return void console.warn("Avatar resource is empty, have you synced avatars to your static file storage?");t[e.staticResourceType]=e,r[e.name]=t}return e.set("avatarList",Object.keys(r).map((e=>r[e])))}}return e},user:(e,t)=>(Promise.resolve().then((()=>od(t))),rd.attach(Ul).value)};var sd=zu(a(a(a(a({},ll),Sl),Ml),id));class ad extends u.Component{static getDerivedStateFromError(){return{hasError:!0}}constructor(e){super(e),this.state={hasError:!1}}componentDidCatch(){setTimeout((()=>{this.setState({hasError:!1})}),2e3)}render(){return this.state.hasError?u.createElement("div",null,"Working..."):u.createElement(gp,null,u.createElement(mp,{path:"/",component:u.lazy((()=>S((()=>import("./index.6af32dea.js")),["assets/index.6af32dea.js","assets/index.0fa3e75c.css","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/vendor.40ddfb4b.js","assets/index.b0bd5cc1.js","assets/Button.31285e4e.js","assets/capitalize.f4eb3e2e.js","assets/Typography.9d0f0940.js","assets/selector.e2ee45bf.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/makeStyles.dc74902c.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"]))),exact:!0}),u.createElement(mp,{path:"/login",component:u.lazy((()=>S((()=>import("./login.67be2cd0.js")),["assets/login.67be2cd0.js","assets/login.5a0d6995.css","assets/EmptyLayout.6bc3f5e1.js","assets/EmptyLayout.915abf47.css","assets/vendor.40ddfb4b.js","assets/index.1d867f8f.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/Box.cb35bf4d.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/IconButton.32d4e708.js","assets/Typography.9d0f0940.js","assets/createSvgIcon.f2e498dd.js","assets/useControlled.e1604cb7.js","assets/Dialog.c787f71e.js","assets/Modal.c801ca2c.js","assets/Backdrop.9ef065d7.js","assets/DialogTitle.bed0cd09.js","assets/service.2cb21ce4.js","assets/selector.d1cb6f6a.js","assets/Button.31285e4e.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js"])))}),u.createElement(mp,{path:"/admin/thefeeds",component:u.lazy((()=>S((()=>import("./thefeeds.dbc11dd5.js")),["assets/thefeeds.dbc11dd5.js","assets/vendor.40ddfb4b.js","assets/index.ffb0f38f.js","assets/capitalize.f4eb3e2e.js","assets/createSvgIcon.f2e498dd.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/makeStyles.dc74902c.js","assets/Modal.c801ca2c.js","assets/IconButton.32d4e708.js","assets/Backdrop.9ef065d7.js","assets/Slide.1e39d9a9.js","assets/List.52b49b17.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/upload.8895077e.js","assets/service.2cb21ce4.js","assets/Button.31285e4e.js","assets/TableRow.e6cbfdcb.js","assets/InputLabel.7f84de76.js","assets/index.1d867f8f.js"])))}),u.createElement(mp,{path:"/admin/feeds",component:u.lazy((()=>S((()=>import("./feeds.ebc699fd.js")),["assets/feeds.ebc699fd.js","assets/vendor.40ddfb4b.js","assets/index.ffb0f38f.js","assets/capitalize.f4eb3e2e.js","assets/createSvgIcon.f2e498dd.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/makeStyles.dc74902c.js","assets/Modal.c801ca2c.js","assets/IconButton.32d4e708.js","assets/Backdrop.9ef065d7.js","assets/Slide.1e39d9a9.js","assets/List.52b49b17.js","assets/selector.cc63221d.js","assets/index.1d867f8f.js","assets/service.b9355309.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/upload.8895077e.js"])))}),u.createElement(mp,{path:"/admin/users",component:u.lazy((()=>S((()=>import("./users.c394e22c.js")),["assets/users.c394e22c.js","assets/users.abbde69b.css","assets/vendor.40ddfb4b.js","assets/MoreHoriz.a06f4955.js","assets/createSvgIcon.f2e498dd.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/VerifiedUser.114e2dcf.js","assets/TableRow.e6cbfdcb.js","assets/index.497aa43e.js","assets/index.18508d4e.css","assets/ArrowBackIos.e70c5bef.js","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/service.d8de8161.js","assets/Button.31285e4e.js","assets/CardMedia.d28b7db0.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Modal.c801ca2c.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js","assets/Dialog.c787f71e.js","assets/Backdrop.9ef065d7.js","assets/DialogTitle.bed0cd09.js","assets/index.369f57c1.js","assets/index.4e34e7f2.css","assets/selector.8a0da25a.js","assets/service.b9355309.js","assets/CardContent.71445ad8.js","assets/makeStyles.dc74902c.js","assets/index.ffb0f38f.js","assets/IconButton.32d4e708.js","assets/Slide.1e39d9a9.js","assets/Avatar.073c615c.js"])))}),u.createElement(mp,{path:"/admin",component:u.lazy((()=>S((()=>import("./index.46a60ec5.js")),["assets/index.46a60ec5.js","assets/index.ffb0f38f.js","assets/vendor.40ddfb4b.js","assets/capitalize.f4eb3e2e.js","assets/createSvgIcon.f2e498dd.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/makeStyles.dc74902c.js","assets/Modal.c801ca2c.js","assets/IconButton.32d4e708.js","assets/Backdrop.9ef065d7.js","assets/Slide.1e39d9a9.js","assets/List.52b49b17.js","assets/index.b0bd5cc1.js"])))}),u.createElement(mp,{path:"/auth/oauth/facebook",component:u.lazy((()=>S((()=>import("./facebook.8d973f4b.js")),["assets/facebook.8d973f4b.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/Container.8fcf9e42.js","assets/capitalize.f4eb3e2e.js"])))}),u.createElement(mp,{path:"/auth/oauth/github",component:u.lazy((()=>S((()=>import("./github.0bd3e76f.js")),["assets/github.0bd3e76f.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/Container.8fcf9e42.js","assets/capitalize.f4eb3e2e.js"])))}),u.createElement(mp,{path:"/auth/oauth/google",component:u.lazy((()=>S((()=>import("./google.458e61d0.js")),["assets/google.458e61d0.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/Container.8fcf9e42.js","assets/capitalize.f4eb3e2e.js"])))}),u.createElement(mp,{path:"/auth/oauth/linkedin",component:u.lazy((()=>S((()=>import("./linkedin.ef696a05.js")),["assets/linkedin.ef696a05.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/Container.8fcf9e42.js","assets/capitalize.f4eb3e2e.js"])))}),u.createElement(mp,{path:"/auth/confirm",component:u.lazy((()=>S((()=>import("./confirm.ed613c91.js")),["assets/confirm.ed613c91.js","assets/confirm.bd8346cb.css","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/selector.d1cb6f6a.js","assets/index.1d867f8f.js","assets/CardMedia.d28b7db0.js","assets/capitalize.f4eb3e2e.js","assets/Typography.9d0f0940.js","assets/Button.31285e4e.js"])))}),u.createElement(mp,{path:"/auth/forgotpassword",component:u.lazy((()=>S((()=>import("./forgotpassword.937b95ad.js")),["assets/forgotpassword.937b95ad.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/Auth.module.2ea06a41.js","assets/Auth.module.2123c3d3.css","assets/Container.8fcf9e42.js","assets/capitalize.f4eb3e2e.js","assets/Typography.9d0f0940.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/useControlled.e1604cb7.js","assets/Paper.24cff5e5.js","assets/Modal.c801ca2c.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js","assets/Button.31285e4e.js"])))}),u.createElement(mp,{path:"/auth/magiclink",component:u.lazy((()=>S((()=>import("./magiclink.2dc32ce5.js")),["assets/magiclink.2dc32ce5.js","assets/vendor.40ddfb4b.js","assets/service.2cb21ce4.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/Auth.module.2ea06a41.js","assets/Auth.module.2123c3d3.css","assets/EmptyLayout.6bc3f5e1.js","assets/EmptyLayout.915abf47.css","assets/index.1d867f8f.js","assets/Box.cb35bf4d.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/IconButton.32d4e708.js","assets/Typography.9d0f0940.js","assets/createSvgIcon.f2e498dd.js","assets/useControlled.e1604cb7.js","assets/Dialog.c787f71e.js","assets/Modal.c801ca2c.js","assets/Backdrop.9ef065d7.js","assets/DialogTitle.bed0cd09.js","assets/Container.8fcf9e42.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js","assets/Button.31285e4e.js"])))}),u.createElement(mp,{path:"/post/:pid",component:u.lazy((()=>S((()=>import("./[pid].9c9e810c.js")),["assets/[pid].9c9e810c.js","assets/vendor.40ddfb4b.js","assets/index.b0bd5cc1.js"])))}),u.createElement(mp,{path:"/activity",component:u.lazy((()=>S((()=>import("./activity.052c78e0.js")),["assets/activity.052c78e0.js","assets/vendor.40ddfb4b.js"])))}),u.createElement(mp,{path:"/creator",component:u.lazy((()=>S((()=>import("./creator.9dab30e5.js")),["assets/creator.9dab30e5.js","assets/creator.3de51b15.css","assets/vendor.40ddfb4b.js","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/index.369f57c1.js","assets/index.4e34e7f2.css","assets/ArrowBackIos.e70c5bef.js","assets/createSvgIcon.f2e498dd.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/MoreHoriz.a06f4955.js","assets/service.d8de8161.js","assets/selector.8a0da25a.js","assets/service.b9355309.js","assets/CardContent.71445ad8.js","assets/CardMedia.d28b7db0.js","assets/Button.31285e4e.js","assets/index.daa64299.js","assets/index.bf1ad4a3.css","assets/selector.d1cb6f6a.js","assets/selector.cc63221d.js"])))}),u.createElement(mp,{path:"/creatorEdit",component:u.lazy((()=>S((()=>import("./creatorEdit.ee3eec77.js")),["assets/creatorEdit.ee3eec77.js","assets/index.497aa43e.js","assets/index.18508d4e.css","assets/vendor.40ddfb4b.js","assets/ArrowBackIos.e70c5bef.js","assets/createSvgIcon.f2e498dd.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/service.d8de8161.js","assets/Button.31285e4e.js","assets/CardMedia.d28b7db0.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Modal.c801ca2c.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"])))}),u.createElement(mp,{path:"/explore",component:u.lazy((()=>S((()=>import("./creatorEdit.ee3eec77.js")),["assets/creatorEdit.ee3eec77.js","assets/index.497aa43e.js","assets/index.18508d4e.css","assets/vendor.40ddfb4b.js","assets/ArrowBackIos.e70c5bef.js","assets/createSvgIcon.f2e498dd.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/service.d8de8161.js","assets/Button.31285e4e.js","assets/CardMedia.d28b7db0.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Modal.c801ca2c.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"])))}),u.createElement(mp,{path:"/feed",component:u.lazy((()=>S((()=>import("./feed.271a6382.js")),["assets/feed.271a6382.js","assets/feed.c427ea2e.css","assets/vendor.40ddfb4b.js","assets/ArrowBackIos.e70c5bef.js","assets/createSvgIcon.f2e498dd.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/useControlled.e1604cb7.js","assets/Typography.9d0f0940.js","assets/selector.cc63221d.js","assets/index.1d867f8f.js","assets/service.b9355309.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/upload.8895077e.js","assets/selector.8a0da25a.js","assets/service.d8de8161.js","assets/index.daa64299.js","assets/index.bf1ad4a3.css","assets/selector.d1cb6f6a.js","assets/selector.e2ee45bf.js","assets/CardContent.71445ad8.js","assets/CardMedia.d28b7db0.js","assets/VerifiedUser.114e2dcf.js","assets/Avatar.073c615c.js","assets/MoreHoriz.a06f4955.js","assets/Button.31285e4e.js","assets/Popover.1d8a9ca1.js","assets/Modal.c801ca2c.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"])))}),u.createElement(mp,{path:"/login",component:u.lazy((()=>S((()=>import("./login.67be2cd0.js")),["assets/login.67be2cd0.js","assets/login.5a0d6995.css","assets/EmptyLayout.6bc3f5e1.js","assets/EmptyLayout.915abf47.css","assets/vendor.40ddfb4b.js","assets/index.1d867f8f.js","assets/feathers.42c2841d.js","assets/index.b0bd5cc1.js","assets/Box.cb35bf4d.js","assets/capitalize.f4eb3e2e.js","assets/Paper.24cff5e5.js","assets/IconButton.32d4e708.js","assets/Typography.9d0f0940.js","assets/createSvgIcon.f2e498dd.js","assets/useControlled.e1604cb7.js","assets/Dialog.c787f71e.js","assets/Modal.c801ca2c.js","assets/Backdrop.9ef065d7.js","assets/DialogTitle.bed0cd09.js","assets/service.2cb21ce4.js","assets/selector.d1cb6f6a.js","assets/Button.31285e4e.js","assets/TextField.cbc648d1.js","assets/InputLabel.7f84de76.js","assets/Popover.1d8a9ca1.js","assets/List.52b49b17.js"])))}),u.createElement(mp,{path:"/messages",component:u.lazy((()=>S((()=>import("./messages.03585a4d.js")),["assets/messages.03585a4d.js","assets/vendor.40ddfb4b.js"])))}),u.createElement(mp,{path:"/newfeed",component:u.lazy((()=>S((()=>import("./newfeed.21f201a0.js")),["assets/newfeed.21f201a0.js","assets/newfeed.40304bec.css","assets/vendor.40ddfb4b.js","assets/index.fd7201a9.js","assets/index.b1f7146e.css","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/selector.d1cb6f6a.js","assets/service.d8de8161.js","assets/selector.8a0da25a.js","assets/Slide.1e39d9a9.js","assets/Paper.24cff5e5.js","assets/capitalize.f4eb3e2e.js","assets/Typography.9d0f0940.js","assets/Modal.c801ca2c.js","assets/Dialog.c787f71e.js","assets/Backdrop.9ef065d7.js","assets/Button.31285e4e.js","assets/Box.cb35bf4d.js","assets/CardMedia.d28b7db0.js","assets/makeStyles.dc74902c.js","assets/Avatar.073c615c.js","assets/service.b9355309.js","assets/selector.cc63221d.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"])))}),u.createElement(mp,{path:"/notifications",component:u.lazy((()=>S((()=>import("./notifications.56081885.js")),["assets/notifications.56081885.js","assets/notifications.84e8497c.css","assets/vendor.40ddfb4b.js","assets/index.fd7201a9.js","assets/index.b1f7146e.css","assets/selector.e2ee45bf.js","assets/index.1d867f8f.js","assets/service.0737f8c0.js","assets/upload.8895077e.js","assets/index.b0bd5cc1.js","assets/feathers.42c2841d.js","assets/selector.d1cb6f6a.js","assets/service.d8de8161.js","assets/selector.8a0da25a.js","assets/Slide.1e39d9a9.js","assets/Paper.24cff5e5.js","assets/capitalize.f4eb3e2e.js","assets/Typography.9d0f0940.js","assets/Modal.c801ca2c.js","assets/Dialog.c787f71e.js","assets/Backdrop.9ef065d7.js","assets/Button.31285e4e.js","assets/Box.cb35bf4d.js","assets/CardMedia.d28b7db0.js","assets/makeStyles.dc74902c.js","assets/Avatar.073c615c.js","assets/CardContent.71445ad8.js","assets/index.module.2ab36131.js","assets/index.module.407cee1e.css"])))}),u.createElement(mp,{path:"/:pid",component:u.lazy((()=>S((()=>import("./[pid].54006935.js")),["assets/[pid].54006935.js","assets/vendor.40ddfb4b.js","assets/index.b0bd5cc1.js"])))}),u.createElement(mp,{path:"*",component:u.lazy((()=>S((()=>import("./404.4c447bb3.js")),["assets/404.4c447bb3.js","assets/vendor.40ddfb4b.js"])))}))}}const cd=()=>{const e=__(),t=f.exports.useCallback((()=>{window.env={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.NODE_CONFIG?{GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.NODE_CONFIG:"",e({type:"RESTORE"})}),[]);return f.exports.useEffect(t,[]),u.createElement(u.Fragment,null,u.createElement(Tc,null,u.createElement("title",null,y.publicRuntimeConfig.title),u.createElement("meta",{name:"viewport",content:"width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0, shrink-to-fit=no"})),u.createElement(Qs,{theme:ku},u.createElement(aa,null),u.createElement(ad,null)))};var _d=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:()=>u.createElement(Cc,{store:_o(sd)},u.createElement(Sp,null,u.createElement(cd,null)))});export{Rl as $,F as A,Nc as B,Zf as C,U as D,X as E,Lp as F,p_ as G,xp as H,Tu as I,Np as J,Fp as K,G as L,Gp as M,ml as N,Ep as O,uu as P,cu as Q,kc as R,po as S,Eu as T,K as U,bu as V,Du as W,Tl as X,Dl as Y,Al as Z,Mc as _,P as a,kl as a0,kp as a1,Kf as a2,hf as a3,Bf as a4,kf as a5,qf as a6,Yf as a7,Wf as a8,Af as a9,Ef as aA,sa as aB,ca as aC,Nl as aD,_d as aE,Jf as aa,Mf as ab,$f as ac,Ff as ad,df as ae,gf as af,mf as ag,bf as ah,If as ai,Rf as aj,Pf as ak,jf as al,tl as am,el as an,yf as ao,Sf as ap,Hu as aq,Uf as ar,zf as as,Vf as at,Hf as au,Xf as av,Qf as aw,hp as ax,yp as ay,vf as az,x as b,L as c,j as d,z as e,V as f,H as g,J as h,B as i,W as j,$ as k,qu as l,Wu as m,Of as n,Gf as o,wf as p,Tf as q,Bu as r,Df as s,xf as t,Nf as u,Cf as v,Lf as w,Ni as x,Pc as y,xc as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
