var e=Object.defineProperty,t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,n=(t,r,a)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[r]=a;import{R as o,r as i,u as s}from"./vendor.40ddfb4b.js";import{b as l}from"./_app.e67b0e96.js";import{s as d}from"./selector.e2ee45bf.js";import{h as c}from"./service.0737f8c0.js";import{s as m}from"./selector.d1cb6f6a.js";import{e as u,a as p,u as f,b as v,d as g}from"./service.d8de8161.js";import{s as w}from"./selector.8a0da25a.js";import{S as b}from"./Slide.1e39d9a9.js";import{c as h}from"./feathers.42c2841d.js";import{D as E}from"./Dialog.c787f71e.js";import{B as P}from"./Button.31285e4e.js";import{B as _}from"./Box.cb35bf4d.js";import{T as y}from"./Typography.9d0f0940.js";import{C as L}from"./CardMedia.d28b7db0.js";import{m as C}from"./makeStyles.dc74902c.js";import{A as S}from"./Avatar.073c615c.js";var N="_footerContainer_11rex_1",A="_footerItem_11rex_21",j="_footerAvatar_11rex_27";
/*! Capacitor: https://capacitorjs.com/ - MIT License */const M=(e=>e.CapacitorPlatforms=(e=>{const t=new Map;t.set("web",{name:"web"});const r=e.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:t};return r.addPlatform=(e,t)=>{r.platforms.set(e,t)},r.setPlatform=e=>{r.platforms.has(e)&&(r.currentPlatform=r.platforms.get(e))},r})(e))("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{});var x,U;M.addPlatform,M.setPlatform,(U=x||(x={})).Unimplemented="UNIMPLEMENTED",U.Unavailable="UNAVAILABLE";class I extends Error{constructor(e,t){super(e),this.message=e,this.code=t}}const T=e=>{var t,r,a,n,o;const i=e.CapacitorCustomPlatform||null,s=e.Capacitor||{},l=s.Plugins=s.Plugins||{},d=e.CapacitorPlatforms,c=(null===(t=null==d?void 0:d.currentPlatform)||void 0===t?void 0:t.getPlatform)||(()=>null!==i?i.name:(e=>{var t,r;return(null==e?void 0:e.androidBridge)?"android":(null===(r=null===(t=null==e?void 0:e.webkit)||void 0===t?void 0:t.messageHandlers)||void 0===r?void 0:r.bridge)?"ios":"web"})(e)),m=(null===(r=null==d?void 0:d.currentPlatform)||void 0===r?void 0:r.isNativePlatform)||(()=>"web"!==c()),u=(null===(a=null==d?void 0:d.currentPlatform)||void 0===a?void 0:a.isPluginAvailable)||(e=>{const t=f.get(e);return!!(null==t?void 0:t.platforms.has(c()))||!!p(e)}),p=(null===(n=null==d?void 0:d.currentPlatform)||void 0===n?void 0:n.getPluginHeader)||(e=>{var t;return null===(t=s.PluginHeaders)||void 0===t?void 0:t.find((t=>t.name===e))}),f=new Map,v=(null===(o=null==d?void 0:d.currentPlatform)||void 0===o?void 0:o.registerPlugin)||((e,t={})=>{const r=f.get(e);if(r)return console.warn(`Capacitor plugin "${e}" already registered. Cannot register plugins twice.`),r.proxy;const a=c(),n=p(e);let o;const d=r=>{let l;const d=(...d)=>{const c=(async()=>(!o&&a in t?o=o="function"==typeof t[a]?await t[a]():t[a]:null!==i&&!o&&"web"in t&&(o=o="function"==typeof t.web?await t.web():t.web),o))().then((t=>{const o=((t,r)=>{var o,i;if(!n){if(t)return null===(i=t[r])||void 0===i?void 0:i.bind(t);throw new I(`"${e}" plugin is not implemented on ${a}`,x.Unimplemented)}{const a=null==n?void 0:n.methods.find((e=>r===e.name));if(a)return"promise"===a.rtype?t=>s.nativePromise(e,r.toString(),t):(t,a)=>s.nativeCallback(e,r.toString(),t,a);if(t)return null===(o=t[r])||void 0===o?void 0:o.bind(t)}})(t,r);if(o){const e=o(...d);return l=null==e?void 0:e.remove,e}throw new I(`"${e}.${r}()" is not implemented on ${a}`,x.Unimplemented)}));return"addListener"===r&&(c.remove=async()=>l()),c};return d.toString=()=>`${r.toString()}() { [capacitor code] }`,Object.defineProperty(d,"name",{value:r,writable:!1,configurable:!1}),d},m=d("addListener"),u=d("removeListener"),v=(e,t)=>{const r=m({eventName:e},t),a=async()=>{const a=await r;u({eventName:e,callbackId:a},t)},n=new Promise((e=>r.then((()=>e({remove:a})))));return n.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await a()},n},g=new Proxy({},{get(e,t){switch(t){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return n?v:m;case"removeListener":return u;default:return d(t)}}});return l[e]=g,f.set(e,{name:e,proxy:g,platforms:new Set([...Object.keys(t),...n?[a]:[]])}),g});return s.convertFileSrc||(s.convertFileSrc=e=>e),s.getPlatform=c,s.handleError=t=>e.console.error(t),s.isNativePlatform=m,s.isPluginAvailable=u,s.pluginMethodNoop=(e,t,r)=>Promise.reject(`${r} does not have an implementation of "${t}".`),s.registerPlugin=v,s.Exception=I,s.DEBUG=!!s.DEBUG,s.isLoggingEnabled=!!s.isLoggingEnabled,s.platform=s.getPlatform(),s.isNative=s.isNativePlatform(),s},B=(e=>e.Capacitor=T(e))("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}),O=B.registerPlugin,W=B.Plugins;class k{constructor(e){this.listeners={},this.windowListeners={},e&&(console.warn(`Capacitor WebPlugin "${e.name}" config object was deprecated in v3 and will be removed in v4.`),this.config=e)}addListener(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t);const r=this.windowListeners[e];r&&!r.registered&&this.addWindowListener(r);const a=async()=>this.removeListener(e,t),n=Promise.resolve({remove:a});return Object.defineProperty(n,"remove",{value:async()=>{console.warn("Using addListener() without 'await' is deprecated."),await a()}}),n}async removeAllListeners(){this.listeners={};for(const e in this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}}notifyListeners(e,t){const r=this.listeners[e];r&&r.forEach((e=>e(t)))}hasListeners(e){return!!this.listeners[e].length}registerWindowListener(e,t){this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:e=>{this.notifyListeners(t,e)}}}unimplemented(e="not implemented"){return new B.Exception(e,x.Unimplemented)}unavailable(e="not available"){return new B.Exception(e,x.Unavailable)}async removeListener(e,t){const r=this.listeners[e];if(!r)return;const a=r.indexOf(t);this.listeners[e].splice(a,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}addWindowListener(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0}removeWindowListener(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)}}var F,$,q,D,Q,Y;($=F||(F={}))[$.HIGH_QUALITY=0]="HIGH_QUALITY",$[$.MEDIUM_QUALITY=1]="MEDIUM_QUALITY",$[$.LOW_QUALITY=2]="LOW_QUALITY",(D=q||(q={}))[D.NO=0]="NO",D[D.YES=1]="YES",(Y=Q||(Q={}))[Y.M4V=0]="M4V",Y[Y.MPEG4=1]="MPEG4",Y[Y.M4A=2]="M4A",Y[Y.QUICK_TIME=3]="QUICK_TIME";const H=O("XRPlugin",{web:()=>import("./web.7755df50.js").then((e=>new e.XRPluginWeb))});var G="_mainBlock_mnf6q_1",R="_popup_mnf6q_5",z="_media_mnf6q_12",V="_media2_mnf6q_23",K="_title_mnf6q_35",X="_box_mnf6q_53",J="_btn_start_mnf6q_56",Z="_btn_cancel_mnf6q_66",ee="_dialogWindow_mnf6q_118",te="_horizontalMode_mnf6q_124";C({});const re=o.forwardRef(((e,i)=>o.createElement(b,((e,o)=>{for(var i in o||(o={}))r.call(o,i)&&n(e,i,o[i]);if(t)for(var i of t(o))a.call(o,i)&&n(e,i,o[i]);return e})({direction:"up",ref:i},e))));var ae=h((e=>({popupsState:w(e)})),(e=>({updateArMediaState:l(u,e)})))((({updateArMediaState:e})=>{const[t,r]=i.exports.useState(!1),{t:a}=s(),n=()=>{r(!1)};return o.createElement("div",{className:G},o.createElement("img",{src:"/assets/tabBar(1).svg",onClick:()=>{void 0!==H.accessPermission&&H.accessPermission({}),r(!0)}}),o.createElement(E,{open:t,TransitionComponent:re,keepMounted:!0,onClose:n,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",className:ee,PaperProps:{style:{width:"100%",maxWidth:"100%",height:"max-content",borderRadius:"12px"}}},o.createElement("div",{className:R},o.createElement(P,{onClick:n,color:"primary",className:Z},a("social:view.cancel")),o.createElement(_,{className:X,borderTop:1,style:{color:"#e6e5eb",height:"2px"}}),o.createElement("h3",{className:K},"Remember!"," "),o.createElement(y,{style:{textAlign:"center",paddingTop:"8pt",color:"rgba(60 60 67, 0.6)"}},a("social:view.choice")),o.createElement("div",{className:te},o.createElement("div",null,o.createElement(L,{className:z,image:"https://cdn.zeplin.io/601d63dc422d9dad3473e3ab/assets/C9623B05-AC7F-4D88-B8EC-2D1951CE2767.svg",title:"Arc"}),o.createElement(y,{style:{textAlign:"center",color:"rgba(60 60 67, 0.6)"}},a("social:view.verticalMode"))),o.createElement(_,{className:X,borderTop:1,style:{color:"#e6e5eb",height:"2px"}}),o.createElement("div",null,o.createElement(L,{className:V,image:"https://cdn.zeplin.io/601d63dc422d9dad3473e3ab/assets/802EB928-4227-4940-BA8E-0A8119FE4CDF.svg",title:"Arc"}),o.createElement(y,{style:{textAlign:"center",color:"rgba(60 60 67, 0.6)"}},a("social:view.horizontalMode")))),o.createElement(P,{onClick:()=>{r(!1),e(!0)},color:"primary",className:J},a("social:view.start")))))}));var ne=h((e=>({creatorState:d(e),authState:m(e),popupsState:w(e)})),(e=>({getLoggedCreator:l(c,e),updateCreatorPageState:l(p,e),updateCreatorFormState:l(f,e),updateFeedPageState:l(v,e),updateArMediaState:l(u,e),updateShareFormState:l(g,e)})))((({creatorState:e,getLoggedCreator:t,authState:r,updateCreatorPageState:a,popupsState:n,updateCreatorFormState:s,updateFeedPageState:l,updateArMediaState:d,updateShareFormState:c})=>{var m,u,p;i.exports.useEffect((()=>t()),[]);return o.createElement(o.Fragment,null,o.createElement("nav",{className:N},o.createElement("img",{src:"/assets/tabBar.png",onClick:()=>(a(!1),s(!1),l(!1),d(!1),void c(!1)),className:A}),o.createElement(ae,null),o.createElement(S,{onClick:()=>{var t,r;r=null==(t=null==e?void 0:e.get("currentCreator"))?void 0:t.id,a(!0,r)},alt:null==(m=e.get("currentCreator"))?void 0:m.username,className:j,src:(null==(u=e.get("currentCreator"))?void 0:u.avatar)?null==(p=e.get("currentCreator"))?void 0:p.avatar:"/assets/userpic.png"})))}));export{ne as A,W as P,k as W,O as r};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
