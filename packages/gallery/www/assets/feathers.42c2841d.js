import{_ as e,x as t,y as n,z as r,B as o,R as i,E as s}from"./_app.e67b0e96.js";import{e as a,R as c,r as u,k as l,l as f}from"./vendor.40ddfb4b.js";import{C as p}from"./index.b0bd5cc1.js";var d=[],h=[null,null];function y(e,t){var n=e[1];return[t.payload,n+1]}function m(e,t,n){o((function(){return e.apply(void 0,t)}),n)}function v(e,t,n,r,o,i,s){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,s())}function b(e,t,n,r,o,i,s,a,c,u){if(e){var l=!1,f=null,p=function(){if(!l){var e,n,p=t.getState();try{e=r(p,o.current)}catch(d){n=d,f=d}n||(f=null),e===i.current?s.current||c():(i.current=e,a.current=e,s.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=p,n.trySubscribe(),p();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var g=function(){return[null,0]};function _(o,s){void 0===s&&(s={});var l=s,f=l.getDisplayName,p=void 0===f?function(e){return"ConnectAdvanced("+e+")"}:f,_=l.methodName,j=void 0===_?"connectAdvanced":_,w=l.renderCountProp,O=void 0===w?void 0:w,k=l.shouldHandleStateChanges,S=void 0===k||k,E=l.storeKey,P=void 0===E?"store":E;l.withRef;var x=l.forwardRef,A=void 0!==x&&x,C=l.context,R=void 0===C?i:C,T=a(l,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),M=R;return function(i){var s=i.displayName||i.name||"Component",l=p(s),f=e({},T,{getDisplayName:p,methodName:j,renderCountProp:O,shouldHandleStateChanges:S,storeKey:P,displayName:l,wrappedComponentName:s,WrappedComponent:i}),_=T.pure;var w=_?u.exports.useMemo:function(e){return e()};function k(t){var s=u.exports.useMemo((function(){var e=t.reactReduxForwardedRef,n=a(t,["reactReduxForwardedRef"]);return[t.context,e,n]}),[t]),l=s[0],p=s[1],_=s[2],j=u.exports.useMemo((function(){return l&&l.Consumer&&n.exports.isContextConsumer(c.createElement(l.Consumer,null))?l:M}),[l,M]),O=u.exports.useContext(j),k=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch);Boolean(O)&&Boolean(O.store);var E=k?t.store:O.store,P=u.exports.useMemo((function(){return function(e){return o(e.dispatch,f)}(E)}),[E]),x=u.exports.useMemo((function(){if(!S)return h;var e=new r(E,k?null:O.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[E,k,O]),A=x[0],C=x[1],R=u.exports.useMemo((function(){return k?O:e({},O,{subscription:A})}),[k,O,A]),T=u.exports.useReducer(y,d,g),N=T[0][0],I=T[1];if(N&&N.error)throw N.error;var D=u.exports.useRef(),F=u.exports.useRef(_),B=u.exports.useRef(),L=u.exports.useRef(!1),q=w((function(){return B.current&&_===F.current?B.current:P(E.getState(),_)}),[E,N,_]);m(v,[F,D,L,_,q,B,C]),m(b,[S,E,A,P,F,D,L,B,C,I],[E,A,P]);var H=u.exports.useMemo((function(){return c.createElement(i,e({},q,{ref:p}))}),[p,i,q]);return u.exports.useMemo((function(){return S?c.createElement(j.Provider,{value:R},H):H}),[j,H,R])}var E=_?c.memo(k):k;if(E.WrappedComponent=i,E.displayName=k.displayName=l,A){var x=c.forwardRef((function(t,n){return c.createElement(E,e({},t,{reactReduxForwardedRef:n}))}));return x.displayName=l,x.WrappedComponent=i,t(x,i)}return t(E,i)}}function j(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function w(e,t){if(j(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!j(e[n[o]],t[n[o]]))return!1;return!0}function O(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function k(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function S(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=k(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=k(o),o=r(t,n)),o},r}}var E=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:O((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?O((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}];var P=[function(e){return"function"==typeof e?S(e):void 0},function(e){return e?void 0:O((function(){return{}}))}];function x(t,n,r){return e({},r,t,n)}var A=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,s=!1;return function(t,n,a){var c=e(t,n,a);return s?o&&i(c,r)||(r=c):(s=!0,r=c),r}}}(e):void 0},function(e){return e?void 0:function(){return x}}];function C(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function R(e,t,n,r,o){var i,s,a,c,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,y,m=!f(d,s),v=!l(o,i);return i=o,s=d,m&&v?(a=e(i,s),t.dependsOnOwnProps&&(c=t(r,s)),u=n(a,c,s)):m?(e.dependsOnOwnProps&&(a=e(i,s)),t.dependsOnOwnProps&&(c=t(r,s)),u=n(a,c,s)):v?(h=e(i,s),y=!p(h,a),a=h,y&&(u=n(a,c,s)),u):u}return function(o,l){return d?h(o,l):(a=e(i=o,s=l),c=t(r,s),u=n(a,c,s),d=!0,u)}}function T(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=a(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),s=n(e,i),c=r(e,i),u=o(e,i);return(i.pure?R:C)(s,c,u,e,i)}function M(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function N(e,t){return e===t}function I(t){var n=void 0===t?{}:t,r=n.connectHOC,o=void 0===r?_:r,i=n.mapStateToPropsFactories,s=void 0===i?P:i,c=n.mapDispatchToPropsFactories,u=void 0===c?E:c,l=n.mergePropsFactories,f=void 0===l?A:l,p=n.selectorFactory,d=void 0===p?T:p;return function(t,n,r,i){void 0===i&&(i={});var c=i,l=c.pure,p=void 0===l||l,h=c.areStatesEqual,y=void 0===h?N:h,m=c.areOwnPropsEqual,v=void 0===m?w:m,b=c.areStatePropsEqual,g=void 0===b?w:b,_=c.areMergedPropsEqual,j=void 0===_?w:_,O=a(c,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),k=M(t,s,"mapStateToProps"),S=M(n,u,"mapDispatchToProps"),E=M(r,f,"mergeProps");return o(d,e({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:k,initMapDispatchToProps:S,initMergeProps:E,pure:p,areStatesEqual:y,areOwnPropsEqual:v,areStatePropsEqual:g,areMergedPropsEqual:j},O))}}var D=I();function F(e,t){return{type:s,alertType:e,message:t}}function B(){return{type:s,alertType:"none",message:""}}function L(){return e=>{e(B())}}let q;function H(e){var t,n;q&&(clearTimeout(q),q=0),q=setTimeout((()=>e(B())),(null==(n=null==(t=p.publicRuntimeConfig)?void 0:t.alert)?void 0:n.timeout)||1e4)}function U(e,t){return H(e),e(F("success",t))}function G(e,t){return H(e),e(F("error",t))}var V={exports:{}};
/*!
 * Socket.IO v4.2.0
 * (c) 2014-2021 Guillermo Rauch
 * Released under the MIT License.
 */self;var z,K,W=l(V.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./build/index.js")}({"./build/index.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.io=t.Socket=t.Manager=t.protocol=void 0;var o=n("./build/url.js"),i=n("./build/manager.js"),s=n("./node_modules/debug/src/browser.js")("socket.io-client");e.exports=t=c;var a=t.managers={};function c(e,t){"object"===r(e)&&(t=e,e=void 0),t=t||{};var n,c=(0,o.url)(e,t.path||"/socket.io"),u=c.source,l=c.id,f=c.path,p=a[l]&&f in a[l].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||p?(s("ignoring socket cache for %s",u),n=new i.Manager(u,t)):(a[l]||(s("new io instance for %s",u),a[l]=new i.Manager(u,t)),n=a[l]),c.query&&!t.query&&(t.query=c.queryKey),n.socket(c.path,t)}t.io=c;var u=n("./node_modules/socket.io-parser/dist/index.js");Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return u.protocol}}),t.connect=c;var l=n("./build/manager.js");Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return l.Manager}});var f=n("./build/socket.js");Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return f.Socket}}),t.default=c},"./build/manager.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return c(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;var l=n("./node_modules/engine.io-client/lib/index.js"),f=n("./node_modules/engine.io-client/lib/util.js"),p=n("./build/socket.js"),d=n("./node_modules/socket.io-parser/dist/index.js"),h=n("./build/on.js"),y=n("./node_modules/backo2/index.js"),m=n("./build/typed-events.js"),v=n("./node_modules/debug/src/browser.js")("socket.io-client:manager"),b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(m,e);var t,n,a,u=s(m);function m(e,t){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m),(n=u.call(this)).nsps={},n.subs=[],e&&"object"===r(e)&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",n.opts=t,(0,f.installTimerFunctions)(c(n),t),n.reconnection(!1!==t.reconnection),n.reconnectionAttempts(t.reconnectionAttempts||1/0),n.reconnectionDelay(t.reconnectionDelay||1e3),n.reconnectionDelayMax(t.reconnectionDelayMax||5e3),n.randomizationFactor(null!==(o=t.randomizationFactor)&&void 0!==o?o:.5),n.backoff=new y({min:n.reconnectionDelay(),max:n.reconnectionDelayMax(),jitter:n.randomizationFactor()}),n.timeout(null==t.timeout?2e4:t.timeout),n._readyState="closed",n.uri=e;var i=t.parser||d;return n.encoder=new i.Encoder,n.decoder=new i.Decoder,n._autoConnect=!1!==t.autoConnect,n._autoConnect&&n.open(),n}return t=m,(n=[{key:"reconnection",value:function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}},{key:"reconnectionAttempts",value:function(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}},{key:"reconnectionDelay",value:function(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}},{key:"randomizationFactor",value:function(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}},{key:"reconnectionDelayMax",value:function(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}},{key:"timeout",value:function(e){return arguments.length?(this._timeout=e,this):this._timeout}},{key:"maybeReconnectOnOpen",value:function(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}},{key:"open",value:function(e){var t=this;if(v("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;v("opening %s",this.uri),this.engine=l(this.uri,this.opts);var n=this.engine,r=this;this._readyState="opening",this.skipReconnect=!1;var o=(0,h.on)(n,"open",(function(){r.onopen(),e&&e()})),i=(0,h.on)(n,"error",(function(n){v("error"),r.cleanup(),r._readyState="closed",t.emitReserved("error",n),e?e(n):r.maybeReconnectOnOpen()}));if(!1!==this._timeout){var s=this._timeout;v("connect attempt will timeout after %d",s),0===s&&o();var a=this.setTimeoutFn((function(){v("connect attempt timed out after %d",s),o(),n.close(),n.emit("error",new Error("timeout"))}),s);this.opts.autoUnref&&a.unref(),this.subs.push((function(){clearTimeout(a)}))}return this.subs.push(o),this.subs.push(i),this}},{key:"connect",value:function(e){return this.open(e)}},{key:"onopen",value:function(){v("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");var e=this.engine;this.subs.push((0,h.on)(e,"ping",this.onping.bind(this)),(0,h.on)(e,"data",this.ondata.bind(this)),(0,h.on)(e,"error",this.onerror.bind(this)),(0,h.on)(e,"close",this.onclose.bind(this)),(0,h.on)(this.decoder,"decoded",this.ondecoded.bind(this)))}},{key:"onping",value:function(){this.emitReserved("ping")}},{key:"ondata",value:function(e){this.decoder.add(e)}},{key:"ondecoded",value:function(e){this.emitReserved("packet",e)}},{key:"onerror",value:function(e){v("error",e),this.emitReserved("error",e)}},{key:"socket",value:function(e,t){var n=this.nsps[e];return n||(n=new p.Socket(this,e,t),this.nsps[e]=n),n}},{key:"_destroy",value:function(e){for(var t=0,n=Object.keys(this.nsps);t<n.length;t++){var r=n[t];if(this.nsps[r].active)return void v("socket %s is still active, skipping close",r)}this._close()}},{key:"_packet",value:function(e){v("writing packet %j",e);for(var t=this.encoder.encode(e),n=0;n<t.length;n++)this.engine.write(t[n],e.options)}},{key:"cleanup",value:function(){v("cleanup"),this.subs.forEach((function(e){return e()})),this.subs.length=0,this.decoder.destroy()}},{key:"_close",value:function(){v("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}},{key:"disconnect",value:function(){return this._close()}},{key:"onclose",value:function(e){v("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}},{key:"reconnect",value:function(){var e=this;if(this._reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)v("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{var n=this.backoff.duration();v("will wait %dms before reconnect attempt",n),this._reconnecting=!0;var r=this.setTimeoutFn((function(){t.skipReconnect||(v("attempting reconnect"),e.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((function(n){n?(v("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),e.emitReserved("reconnect_error",n)):(v("reconnect success"),t.onreconnect())})))}),n);this.opts.autoUnref&&r.unref(),this.subs.push((function(){clearTimeout(r)}))}}},{key:"onreconnect",value:function(){var e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}])&&o(t.prototype,n),a&&o(t,a),m}(m.StrictEventEmitter);t.Manager=b},"./build/on.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},"./build/socket.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw s}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;var p=n("./node_modules/socket.io-parser/dist/index.js"),d=n("./build/on.js"),h=n("./build/typed-events.js"),y=n("./node_modules/debug/src/browser.js")("socket.io-client:socket"),m=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1}),v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(l,e);var t,n,r,i=u(l);function l(e,t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(r=i.call(this)).connected=!1,r.disconnected=!0,r.receiveBuffer=[],r.sendBuffer=[],r.ids=0,r.acks={},r.flags={},r.io=e,r.nsp=t,n&&n.auth&&(r.auth=n.auth),r.io._autoConnect&&r.open(),r}return t=l,(n=[{key:"subEvents",value:function(){if(!this.subs){var e=this.io;this.subs=[(0,d.on)(e,"open",this.onopen.bind(this)),(0,d.on)(e,"packet",this.onpacket.bind(this)),(0,d.on)(e,"error",this.onerror.bind(this)),(0,d.on)(e,"close",this.onclose.bind(this))]}}},{key:"active",get:function(){return!!this.subs}},{key:"connect",value:function(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}},{key:"open",value:function(){return this.connect()}},{key:"send",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.unshift("message"),this.emit.apply(this,t),this}},{key:"emit",value:function(e){if(m.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];n.unshift(e);var o={type:p.PacketType.EVENT,data:n,options:{}};o.options.compress=!1!==this.flags.compress,"function"==typeof n[n.length-1]&&(y("emitting packet with ack id %d",this.ids),this.acks[this.ids]=n.pop(),o.id=this.ids++);var i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable,s=this.flags.volatile&&(!i||!this.connected);return s?y("discard packet as the transport is not currently writable"):this.connected?this.packet(o):this.sendBuffer.push(o),this.flags={},this}},{key:"packet",value:function(e){e.nsp=this.nsp,this.io._packet(e)}},{key:"onopen",value:function(){var e=this;y("transport is open - connecting"),"function"==typeof this.auth?this.auth((function(t){e.packet({type:p.PacketType.CONNECT,data:t})})):this.packet({type:p.PacketType.CONNECT,data:this.auth})}},{key:"onerror",value:function(e){this.connected||this.emitReserved("connect_error",e)}},{key:"onclose",value:function(e){y("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}},{key:"onpacket",value:function(e){if(e.nsp===this.nsp)switch(e.type){case p.PacketType.CONNECT:if(e.data&&e.data.sid){var t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case p.PacketType.EVENT:case p.PacketType.BINARY_EVENT:this.onevent(e);break;case p.PacketType.ACK:case p.PacketType.BINARY_ACK:this.onack(e);break;case p.PacketType.DISCONNECT:this.ondisconnect();break;case p.PacketType.CONNECT_ERROR:var n=new Error(e.data.message);n.data=e.data.data,this.emitReserved("connect_error",n)}}},{key:"onevent",value:function(e){var t=e.data||[];y("emitting event %j",t),null!=e.id&&(y("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}},{key:"emitEvent",value:function(e){if(this._anyListeners&&this._anyListeners.length){var t,n=o(this._anyListeners.slice());try{for(n.s();!(t=n.n()).done;)t.value.apply(this,e)}catch(r){n.e(r)}finally{n.f()}}a(f(l.prototype),"emit",this).apply(this,e)}},{key:"ack",value:function(e){var t=this,n=!1;return function(){if(!n){n=!0;for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];y("sending ack %j",o),t.packet({type:p.PacketType.ACK,id:e,data:o})}}}},{key:"onack",value:function(e){var t=this.acks[e.id];"function"==typeof t?(y("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):y("bad ack %s",e.id)}},{key:"onconnect",value:function(e){y("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}},{key:"emitBuffered",value:function(){var e=this;this.receiveBuffer.forEach((function(t){return e.emitEvent(t)})),this.receiveBuffer=[],this.sendBuffer.forEach((function(t){return e.packet(t)})),this.sendBuffer=[]}},{key:"ondisconnect",value:function(){y("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}},{key:"destroy",value:function(){this.subs&&(this.subs.forEach((function(e){return e()})),this.subs=void 0),this.io._destroy(this)}},{key:"disconnect",value:function(){return this.connected&&(y("performing disconnect (%s)",this.nsp),this.packet({type:p.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},{key:"close",value:function(){return this.disconnect()}},{key:"compress",value:function(e){return this.flags.compress=e,this}},{key:"volatile",get:function(){return this.flags.volatile=!0,this}},{key:"onAny",value:function(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}},{key:"prependAny",value:function(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}},{key:"offAny",value:function(e){if(!this._anyListeners)return this;if(e){for(var t=this._anyListeners,n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}},{key:"listenersAny",value:function(){return this._anyListeners||[]}}])&&s(t.prototype,n),r&&s(t,r),l}(h.StrictEventEmitter);t.Socket=v},"./build/typed-events.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(f,e);var t,n,r,u=c(f);function f(){return o(this,f),u.apply(this,arguments)}return t=f,(n=[{key:"on",value:function(e,t){return s(l(f.prototype),"on",this).call(this,e,t),this}},{key:"once",value:function(e,t){return s(l(f.prototype),"once",this).call(this,e,t),this}},{key:"emit",value:function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(t=s(l(f.prototype),"emit",this)).call.apply(t,[this,e].concat(r)),this}},{key:"emitReserved",value:function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(t=s(l(f.prototype),"emit",this)).call.apply(t,[this,e].concat(r)),this}},{key:"listeners",value:function(e){return s(l(f.prototype),"listeners",this).call(this,e)}}])&&i(t.prototype,n),r&&i(t,r),f}(n("./node_modules/component-emitter/index.js"));t.StrictEventEmitter=f},"./build/url.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;var r=n("./node_modules/parseuri/index.js"),o=n("./node_modules/debug/src/browser.js")("socket.io-client:url");t.url=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,i=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";var s=-1!==i.host.indexOf(":"),a=s?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port+t,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}},"./node_modules/backo2/index.js":function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},"./node_modules/component-emitter/index.js":function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},"./node_modules/debug/src/browser.js":function(e,t,n){var r;t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),this.useColors){var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)}},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(n){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(n){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={GJS_DEBUG_TOPICS:"JS ERROR;JS LOG",LESSOPEN:"| /usr/bin/lesspipe %s",npm_package_devDependencies__types_node:"14.17.14",npm_config_cache_lock_stale:"60000",npm_config_ham_it_up:"",npm_config_legacy_bundling:"",npm_config_sign_git_tag:"",USER:"josh",LANGUAGE:"en_AU:en",npm_config_user_agent:"npm/7.18.1 node/v16.3.0 linux x64 workspaces/false",npm_config_always_auth:"",TEXTDOMAIN:"im-config",XDG_SEAT:"seat0",npm_package_jest:"ts-jest",npm_package_dependencies__material_ui_core:"4.12.3",npm_package_dependencies__xrengine_editor:"^0.4.0",npm_package_dependencies_formik:"2.2.9",npm_package_bugs_url:"https://github.com/XRFoundation/XREngine/issues",npm_config_bin_links:"true",npm_config_key:"",SSH_AGENT_PID:"1911",XDG_SESSION_TYPE:"x11",GIT_ASKPASS:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass.sh",npm_package_devDependencies_vite:"2.5.3",npm_config_allow_same_version:"",npm_config_description:"true",npm_config_fetch_retries:"2",npm_config_heading:"npm",npm_config_if_present:"",npm_config_init_version:"1.0.0",npm_config_user:"1000",npm_node_execpath:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",SHLVL:"3",npm_package_peerDependencies_react:"^17.0.0",npm_package_dependencies__xrengine_common:"^0.4.0",npm_config_prefer_online:"",npm_config_noproxy:"",OLDPWD:"/home/josh/Desktop/XREngine/packages/common",CHROME_DESKTOP:"code-url-handler.desktop",QT4_IM_MODULE:"xim",HOME:"/home/josh",npm_package_resolutions_react:"17.0.2",npm_package_dependencies_app_root_path:"3.0.0",npm_config_force:"",DESKTOP_SESSION:"ubuntu",TERM_PROGRAM_VERSION:"1.60.0",NVM_BIN:"/home/josh/.nvm/versions/node/v16.3.0/bin",npm_package_dependencies__capacitor_community_http:"1.2.0",npm_package_dependencies__capacitor_ios:"3.2.2",npm_config_only:"",npm_config_read_only:"",GIO_LAUNCHED_DESKTOP_FILE:"/var/lib/snapd/desktop/applications/code_code.desktop",NVM_INC:"/home/josh/.nvm/versions/node/v16.3.0/include/node",npm_package_engines_node:">= 16.3.0",npm_package_dependencies__xrengine_client_core:"^0.4.0",npm_config_cache_min:"10",npm_config_init_license:"ISC",GNOME_SHELL_SESSION_MODE:"ubuntu",APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL:"true",GTK_MODULES:"gail:atk-bridge",VSCODE_GIT_ASKPASS_MAIN:"/snap/code/73/usr/share/code/resources/app/extensions/git/dist/askpass-main.js",npm_package_peerDependencies_socket_io:"4.2.0",npm_config_editor:"vi",npm_config_rollback:"true",npm_config_tag_version_prefix:"v",VSCODE_GIT_ASKPASS_NODE:"/snap/code/73/usr/share/code/code",GIT_PREFIX:"",npm_package_resolutions_socket_io:"4.2.0",npm_config_userconfig:"/home/josh/.npmrc",npm_config_cache_max:"Infinity",npm_config_timing:"",DBUS_SESSION_BUS_ADDRESS:"unix:path=/run/user/1000/bus",npm_config_engine_strict:"",npm_config_init_author_name:"",npm_config_init_author_url:"",npm_config_preid:"",npm_config_tmp:"/tmp",COLORTERM:"truecolor",GIO_LAUNCHED_DESKTOP_FILE_PID:"2672",COLOR:"1",npm_package_dependencies__capacitor_share:"1.0.4",npm_package_devDependencies_typescript:"4.4.2",npm_config_depth:"Infinity",npm_config_package_lock_only:"",npm_config_save_dev:"",npm_config_usage:"",NVM_DIR:"/home/josh/.nvm",npm_package_homepage:"https://github.com/XRFoundation/XREngine#readme",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_cafile:"",npm_config_otp:"",npm_config_package_lock:"true",npm_config_progress:"true",npm_config_https_proxy:"",npm_config_save_prod:"",MANDATORY_PATH:"/usr/share/gconf/ubuntu.mandatory.path",IM_CONFIG_PHASE:"2",npm_package_scripts_dev:"vite --host",npm_config_audit:"true",npm_config_cidr:"",npm_config_onload_script:"",npm_config_sso_type:"oauth",LOGNAME:"josh",GTK_IM_MODULE:"ibus",npm_config_rebuild_bundle:"true",npm_config_save_bundle:"",npm_config_shell:"/bin/bash",_:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_private:"true",npm_config_prefix:"/home/josh/.nvm/versions/node/v16.3.0",npm_config_dry_run:"",npm_config_format_package_lock:"true",DEFAULTS_PATH:"/usr/share/gconf/ubuntu.default.path",npm_config_scope:"",npm_config_browser:"",npm_config_cache_lock_wait:"10000",npm_config_ignore_prepublish:"",npm_config_registry:"https://registry.npmjs.org/",npm_config_save_optional:"",npm_config_searchopts:"",npm_config_versions:"",USERNAME:"josh",XDG_SESSION_ID:"1",TERM:"xterm-256color",npm_package_dependencies_react_video_recorder:"3.19.1",npm_config_cache:"/home/josh/.npm",npm_config_proxy:"",npm_config_send_metrics:"",GNOME_DESKTOP_SESSION_ID:"this-is-deprecated",npm_package_scripts_start:"cp src/server.js www/server.js && node www/server.js",npm_package_peerDependencies__types_react:"^17.0.0",npm_config_global_style:"",npm_config_ignore_scripts:"",npm_config_version:"",WINDOWPATH:"1",npm_package_resolutions__types_react:"17.0.20",npm_config_node_gyp:"/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",npm_config_local_address:"",npm_config_viewer:"man",PATH:"/home/josh/Desktop/XREngine/node_modules/npm/node_modules/npm-lifecycle/node-gyp-bin:/home/josh/Desktop/XREngine/packages/gallery/node_modules/.bin:/home/josh/Desktop/XREngine/node_modules/.bin:/home/josh/Desktop/node_modules/.bin:/home/josh/node_modules/.bin:/home/node_modules/.bin:/node_modules/.bin:/home/josh/.nvm/versions/node/v16.3.0/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/lib/git-core:/home/josh/.local/bin:/home/josh/.nvm/versions/node/v16.3.0/bin:/home/josh/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",SESSION_MANAGER:"local/Josh-Ubuntu:@/tmp/.ICE-unix/1815,unix/Josh-Ubuntu:/tmp/.ICE-unix/1815",NODE:"/home/josh/.nvm/versions/node/v16.3.0/bin/node",npm_package_name:"@xrengine/gallery",npm_package_repository_type:"git",npm_package_dependencies_cross_env:"7.0.3",npm_config_audit_level:"low",npm_config_prefer_offline:"",XDG_MENU_PREFIX:"gnome-",BAMF_DESKTOP_FILE_HINT:"/var/lib/snapd/desktop/applications/code_code.desktop",GDK_BACKEND:"x11",XDG_RUNTIME_DIR:"/run/user/1000",npm_package_dependencies_react_redux:"7.2.5",npm_config_color:"true",npm_config_sign_git_commit:"",DISPLAY:":0",npm_package_dependencies__capacitor_android:"3.2.2",npm_config_legacy_peer_deps:"true",npm_config_fetch_retry_mintimeout:"10000",npm_config_maxsockets:"50",npm_config_offline:"",npm_config_sso_poll_frequency:"500",LANG:"en_AU.UTF-8",XDG_CURRENT_DESKTOP:"Unity",npm_package_dependencies_react_dom:"17.0.2",npm_package_dependencies_redux:"4.1.1",npm_package_devDependencies_eslint:"7.32.0",npm_config_umask:"0002",LS_COLORS:"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",TERM_PROGRAM:"vscode",XDG_SESSION_DESKTOP:"ubuntu",XMODIFIERS:"@im=ibus",VSCODE_GIT_IPC_HANDLE:"/run/user/1000/vscode-git-0bda05f38a.sock",XAUTHORITY:"/run/user/1000/gdm/Xauthority",npm_package_dependencies__xrengine_engine:"^0.4.0",npm_package_browser_fs:"false",npm_config_loglevel:"silent",npm_config_fund:"true",npm_config_fetch_retry_maxtimeout:"60000",npm_config_logs_max:"10",npm_config_message:"%s",npm_lifecycle_script:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",ORIGINAL_XDG_CURRENT_DESKTOP:"ubuntu:GNOME",SSH_AUTH_SOCK:"/run/user/1000/keyring/ssh",GSETTINGS_SCHEMA_DIR:"/snap/code/73/usr/share/glib-2.0/schemas",npm_config_ca:"",npm_config_cert:"",npm_config_global:"",npm_config_link:"",DISABLE_WAYLAND:"1",OPEN_API_KEY:"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",SHELL:"/bin/bash",npm_package_version:"0.4.0",npm_package_repository_url:"git://github.com/XRFoundation/XREngine.git",npm_package_dependencies__capacitor_cli:"3.2.2",npm_package_devDependencies__types_react:"17.0.20",npm_config_access:"",npm_config_also:"",npm_config_save:"true",npm_config_unicode:"true",npm_lifecycle_event:"build",QT_ACCESSIBILITY:"1",GDMSESSION:"ubuntu",npm_package_scripts_build:"cross-env NODE_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",npm_package_dependencies__capacitor_filesystem:"1.0.3",npm_config_argv:'{"remain":[],"cooked":["run","build"],"original":["run","build"]}',npm_config_before:"",npm_config_long:"",npm_config_production:"",npm_config_searchlimit:"20",npm_config_unsafe_perm:"true",npm_config_update_notifier:"true",LESSCLOSE:"/usr/bin/lesspipe %s %s",npm_config_auth_type:"legacy",npm_config_node_version:"16.3.0",npm_config_tag:"latest",npm_package_scripts_validate:"npm run test",npm_config_git_tag_version:"true",npm_config_commit_hooks:"true",npm_config_script_shell:"",npm_config_shrinkwrap:"true",TEXTDOMAINDIR:"/usr/share/locale/",GJS_DEBUG_OUTPUT:"stderr",GPG_AGENT_INFO:"/run/user/1000/gnupg/S.gpg-agent:0:1",npm_package_dependencies_sass:"1.39.0",npm_package_license:"ISC",npm_config_fetch_retry_factor:"10",npm_config_save_exact:"",npm_config_strict_ssl:"true",XDG_VTNR:"1",QT_IM_MODULE:"ibus",npm_config_globalconfig:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmrc",npm_config_init_module:"/home/josh/.npm-init.js",npm_config_dev:"",npm_config_parseable:"",JAVA_HOME:"/usr/lib/jvm/java-11-openjdk-amd64",PWD:"/home/josh/Desktop/XREngine/packages/gallery",npm_package_scripts_check_errors:"tsc --noEmit",npm_config_globalignorefile:"/home/josh/.nvm/versions/node/v16.3.0/etc/npmignore",npm_execpath:"/home/josh/Desktop/XREngine/node_modules/npm/bin/npm-cli.js",CLUTTER_IM_MODULE:"xim",NVM_CD_FLAGS:"",XDG_DATA_DIRS:"/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop",XDG_CONFIG_DIRS:"/etc/xdg/xdg-ubuntu:/etc/xdg",npm_config_cache_lock_retries:"10",npm_config_searchstaleness:"900",npm_package_npmClient:"npm",npm_package_dependencies_styled_components:"5.3.1",npm_package_devDependencies_cross_env:"7.0.3",npm_config_node_options:"",npm_config_save_prefix:"^",npm_config_scripts_prepend_node_path:"warn-only",BREAKPAD_DUMP_LOCATION:"/home/josh/.config/Code/exthost Crash Reports",npm_package_dependencies__capacitor_app:"1.0.3",npm_package_dependencies__types_react_redux:"7.1.18",npm_config_group:"1000",npm_config_init_author_email:"",npm_config_searchexclude:"",npm_config_git:"git",npm_config_optional:"true",INIT_CWD:"/home/josh/Desktop/XREngine/packages/gallery",EDITOR:"vi",npm_package_dependencies_react:"^17.0.0",npm_package_devDependencies_config:"3.3.6",npm_config_json:"",NODE_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"192.168.0.16",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"192.168.0.16",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"192.168.0.16",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"Gallery","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://192.168.0.16:3030","appServer":"https://192.168.0.16:3000","readyPlayerMeUrl":"undefined","siteTitle":"Gallery","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(r=!1,function(){r||(r=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||function(){},e.exports=n("./node_modules/debug/src/common.js")(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},"./node_modules/debug/src/common.js":function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){function t(e){var n,r,i,s=null;function a(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];if(a.enabled){var i=a,s=Number(new Date),c=s-(n||s);i.diff=c,i.prev=n,i.curr=s,n=s,r[0]=t.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var u=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(e,n){if("%%"===e)return"%";u++;var o=t.formatters[n];if("function"==typeof o){var s=r[u];e=o.call(i,s),r.splice(u,1),u--}return e})),t.formatArgs.call(i,r);var l=i.log||t.log;l.apply(i,r)}}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=o,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:function(){return null!==s?s:(r!==t.namespaces&&(r=t.namespaces,i=t.enabled(e)),i)},set:function(e){s=e}}),"function"==typeof t.init&&t.init(a),a}function o(e,n){var r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){var e=[].concat(r(t.names.map(i)),r(t.skips.map(i).map((function(e){return"-"+e})))).join(",");return t.enable(""),e},t.enable=function(e){var n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n("./node_modules/ms/index.js"),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((function(n){t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){for(var n=0,r=0;r<e.length;r++)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},"./node_modules/engine.io-client/lib/globalThis.browser.js":function(e,t){e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},"./node_modules/engine.io-client/lib/index.js":function(e,t,n){var r=n("./node_modules/engine.io-client/lib/socket.js");e.exports=function(e,t){return new r(e,t)},e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n("./node_modules/engine.io-client/lib/transport.js"),e.exports.transports=n("./node_modules/engine.io-client/lib/transports/index.js"),e.exports.parser=n("./node_modules/engine.io-parser/lib/index.js")},"./node_modules/engine.io-client/lib/socket.js":function(e,t,n){function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return l(e)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=n("./node_modules/engine.io-client/lib/transports/index.js"),d=n("./node_modules/component-emitter/index.js"),h=n("./node_modules/debug/src/browser.js")("engine.io-client:socket"),y=n("./node_modules/engine.io-parser/lib/index.js"),m=n("./node_modules/parseuri/index.js"),v=n("./node_modules/parseqs/index.js"),b=n("./node_modules/engine.io-client/lib/util.js").installTimerFunctions,g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(d,e);var t,n,u,f=c(d);function d(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i(this,d),t=f.call(this),e&&"object"===o(e)&&(n=e,e=null),e?(e=m(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=m(n.host).host),b(l(t),n),t.secure=null!=n.secure?n.secure:"undefined"!=typeof location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=t.secure?"443":"80"),t.hostname=n.hostname||("undefined"!=typeof location?location.hostname:"localhost"),t.port=n.port||("undefined"!=typeof location&&location.port?location.port:t.secure?443:80),t.transports=n.transports||["polling","websocket"],t.readyState="",t.writeBuffer=[],t.prevBufferLen=0,t.opts=r({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},n),t.opts.path=t.opts.path.replace(/\/$/,"")+"/","string"==typeof t.opts.query&&(t.opts.query=v.decode(t.opts.query)),t.id=null,t.upgrades=null,t.pingInterval=null,t.pingTimeout=null,t.pingTimeoutTimer=null,"function"==typeof addEventListener&&(t.opts.closeOnBeforeunload&&addEventListener("beforeunload",(function(){t.transport&&(t.transport.removeAllListeners(),t.transport.close())}),!1),"localhost"!==t.hostname&&(t.offlineEventListener=function(){t.onClose("transport close")},addEventListener("offline",t.offlineEventListener,!1))),t.open(),t}return t=d,(n=[{key:"createTransport",value:function(e){h('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=y.protocol,t.transport=e,this.id&&(t.sid=this.id);var n=r({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return h("options: %j",n),new p[e](n)}},{key:"open",value:function(){var e,t=this;if(this.opts.rememberUpgrade&&d.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((function(){t.emit("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(n){return h("error while creating transport: %s",n),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}},{key:"setTransport",value:function(e){var t=this;h("setting transport %s",e.name),this.transport&&(h("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(function(){t.onClose("transport close")}))}},{key:"probe",value:function(e){var t=this;h('probing transport "%s"',e);var n=this.createTransport(e,{probe:1}),r=!1;d.priorWebsocketSuccess=!1;var o=function(){r||(h('probe transport "%s" opened',e),n.send([{type:"ping",data:"probe"}]),n.once("packet",(function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(h('probe transport "%s" pong',e),t.upgrading=!0,t.emit("upgrading",n),!n)return;d.priorWebsocketSuccess="websocket"===n.name,h('pausing current transport "%s"',t.transport.name),t.transport.pause((function(){r||"closed"!==t.readyState&&(h("changing transport and sending upgrade packet"),l(),t.setTransport(n),n.send([{type:"upgrade"}]),t.emit("upgrade",n),n=null,t.upgrading=!1,t.flush())}))}else{h('probe transport "%s" failed',e);var i=new Error("probe error");i.transport=n.name,t.emit("upgradeError",i)}})))};function i(){r||(r=!0,l(),n.close(),n=null)}var s=function(r){var o=new Error("probe error: "+r);o.transport=n.name,i(),h('probe transport "%s" failed because of error: %s',e,r),t.emit("upgradeError",o)};function a(){s("transport closed")}function c(){s("socket closed")}function u(e){n&&e.name!==n.name&&(h('"%s" works - aborting "%s"',e.name,n.name),i())}var l=function(){n.removeListener("open",o),n.removeListener("error",s),n.removeListener("close",a),t.removeListener("close",c),t.removeListener("upgrading",u)};n.once("open",o),n.once("error",s),n.once("close",a),this.once("close",c),this.once("upgrading",u),n.open()}},{key:"onOpen",value:function(){if(h("socket open"),this.readyState="open",d.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){h("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}}},{key:"onPacket",value:function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(h('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else h('packet received with socket readyState "%s"',this.readyState)}},{key:"onHandshake",value:function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}},{key:"resetPingTimeout",value:function(){var e=this;this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((function(){e.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}},{key:"onDrain",value:function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}},{key:"flush",value:function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(h("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}},{key:"write",value:function(e,t,n){return this.sendPacket("message",e,t,n),this}},{key:"send",value:function(e,t,n){return this.sendPacket("message",e,t,n),this}},{key:"sendPacket",value:function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}}},{key:"close",value:function(){var e=this,t=function(){e.onClose("forced close"),h("socket closing - telling transport to close"),e.transport.close()},n=function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()},r=function(){e.once("upgrade",n),e.once("upgradeError",n)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(function(){e.upgrading?r():t()})):this.upgrading?r():t()),this}},{key:"onError",value:function(e){h("socket error %j",e),d.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}},{key:"onClose",value:function(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(h('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingIntervalTimer),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}},{key:"filterUpgrades",value:function(e){for(var t=[],n=0,r=e.length;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}])&&s(t.prototype,n),u&&s(t,u),d}(d);g.priorWebsocketSuccess=!1,g.protocol=y.protocol,e.exports=g},"./node_modules/engine.io-client/lib/transport.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return c(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n("./node_modules/engine.io-parser/lib/index.js"),f=n("./node_modules/component-emitter/index.js"),p=n("./node_modules/engine.io-client/lib/util.js").installTimerFunctions,d=n("./node_modules/debug/src/browser.js")("engine.io-client:transport"),h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(u,e);var t,n,r,a=s(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),t=a.call(this),p(c(t),e),t.opts=e,t.query=e.query,t.readyState="",t.socket=e.socket,t}return t=u,(n=[{key:"onError",value:function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}},{key:"open",value:function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}},{key:"close",value:function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}},{key:"send",value:function(e){"open"===this.readyState?this.write(e):d("transport is not open, discarding packets")}},{key:"onOpen",value:function(){this.readyState="open",this.writable=!0,this.emit("open")}},{key:"onData",value:function(e){var t=l.decodePacket(e,this.socket.binaryType);this.onPacket(t)}},{key:"onPacket",value:function(e){this.emit("packet",e)}},{key:"onClose",value:function(){this.readyState="closed",this.emit("close")}}])&&o(t.prototype,n),r&&o(t,r),u}(f);e.exports=h},"./node_modules/engine.io-client/lib/transports/index.js":function(e,t,n){var r=n("./node_modules/engine.io-client/lib/xmlhttprequest.js"),o=n("./node_modules/engine.io-client/lib/transports/polling-xhr.js"),i=n("./node_modules/engine.io-client/lib/transports/polling-jsonp.js"),s=n("./node_modules/engine.io-client/lib/transports/websocket.js");t.polling=function(e){var t=!1,n=!1,s=!1!==e.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,c=location.port;c||(c=a?443:80),t=e.hostname!==location.hostname||c!==e.port,n=e.secure!==a}if(e.xdomain=t,e.xscheme=n,"open"in new r(e)&&!e.forceJSONP)return new o(e);if(!s)throw new Error("JSONP disabled");return new i(e)},t.websocket=s},"./node_modules/engine.io-client/lib/transports/polling-jsonp.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return u(e)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f,p=n("./node_modules/engine.io-client/lib/transports/polling.js"),d=n("./node_modules/engine.io-client/lib/globalThis.browser.js"),h=/\n/g,y=/\\n/g,m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(p,e);var t,n,r,c=a(p);function p(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(t=c.call(this,e)).query=t.query||{},f||(f=d.___eio=d.___eio||[]),t.index=f.length,f.push(t.onData.bind(u(t))),t.query.j=t.index,t}return t=p,(n=[{key:"supportsBinary",get:function(){return!1}},{key:"doClose",value:function(){this.script&&(this.script.onerror=function(){},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i(l(p.prototype),"doClose",this).call(this)}},{key:"doPoll",value:function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&this.setTimeoutFn((function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)}},{key:"doWrite",value:function(e,t){var n,r=this;if(!this.form){var o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function a(){c(),t()}this.form.action=this.uri();var c=function(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var e='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(e)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n};c(),e=e.replace(y,"\\\n"),this.area.value=e.replace(h,"\\n");try{this.form.submit()}catch(u){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&a()}:this.iframe.onload=a}}])&&o(t.prototype,n),r&&o(t,r),p}(p);e.exports=m},"./node_modules/engine.io-client/lib/transports/polling-xhr.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return p(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=n("./node_modules/engine.io-client/lib/xmlhttprequest.js"),y=n("./node_modules/engine.io-client/lib/transports/polling.js"),m=n("./node_modules/component-emitter/index.js"),v=n("./node_modules/engine.io-client/lib/util.js"),b=v.pick,g=v.installTimerFunctions,_=n("./node_modules/engine.io-client/lib/globalThis.browser.js"),j=n("./node_modules/debug/src/browser.js")("engine.io-client:polling-xhr");function w(){}var O=null!=new h({xdomain:!1}).responseType,k=function(e){c(n,e);var t=l(n);function n(e){var r;if(i(this,n),r=t.call(this,e),"undefined"!=typeof location){var o="https:"===location.protocol,s=location.port;s||(s=o?443:80),r.xd="undefined"!=typeof location&&e.hostname!==location.hostname||s!==e.port,r.xs=e.secure!==o}var a=e&&e.forceBase64;return r.supportsBinary=O&&!a,r}return a(n,[{key:"request",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o(e,{xd:this.xd,xs:this.xs},this.opts),new S(this.uri(),e)}},{key:"doWrite",value:function(e,t){var n=this,r=this.request({method:"POST",data:e});r.on("success",t),r.on("error",(function(e){n.onError("xhr post error",e)}))}},{key:"doPoll",value:function(){var e=this;j("xhr poll");var t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t}}]),n}(y),S=function(e){c(n,e);var t=l(n);function n(e,r){var o;return i(this,n),o=t.call(this),g(p(o),r),o.opts=r,o.method=r.method||"GET",o.uri=e,o.async=!1!==r.async,o.data=void 0!==r.data?r.data:null,o.create(),o}return a(n,[{key:"create",value:function(){var e=this,t=b(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;var r=this.xhr=new h(t);try{j("xhr open %s: %s",this.method,this.uri),r.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders)for(var o in r.setDisableHeaderCheck&&r.setDisableHeaderCheck(!0),this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(o)&&r.setRequestHeader(o,this.opts.extraHeaders[o])}catch(i){}if("POST"===this.method)try{r.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(i){}try{r.setRequestHeader("Accept","*/*")}catch(i){}"withCredentials"in r&&(r.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(r.timeout=this.opts.requestTimeout),this.hasXDR()?(r.onload=function(){e.onLoad()},r.onerror=function(){e.onError(r.responseText)}):r.onreadystatechange=function(){4===r.readyState&&(200===r.status||1223===r.status?e.onLoad():e.setTimeoutFn((function(){e.onError("number"==typeof r.status?r.status:0)}),0))},j("xhr data %s",this.data),r.send(this.data)}catch(i){return void this.setTimeoutFn((function(){e.onError(i)}),0)}"undefined"!=typeof document&&(this.index=n.requestsCount++,n.requests[this.index]=this)}},{key:"onSuccess",value:function(){this.emit("success"),this.cleanup()}},{key:"onData",value:function(e){this.emit("data",e),this.onSuccess()}},{key:"onError",value:function(e){this.emit("error",e),this.cleanup(!0)}},{key:"cleanup",value:function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=w:this.xhr.onreadystatechange=w,e)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete n.requests[this.index],this.xhr=null}}},{key:"onLoad",value:function(){var e=this.xhr.responseText;null!==e&&this.onData(e)}},{key:"hasXDR",value:function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}},{key:"abort",value:function(){this.cleanup()}}]),n}(m);function E(){for(var e in S.requests)S.requests.hasOwnProperty(e)&&S.requests[e].abort()}S.requestsCount=0,S.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",E):"function"==typeof addEventListener&&addEventListener("onpagehide"in _?"pagehide":"unload",E,!1)),e.exports=k,e.exports.Request=S},"./node_modules/engine.io-client/lib/transports/polling.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=n("./node_modules/engine.io-client/lib/transport.js"),f=n("./node_modules/parseqs/index.js"),p=n("./node_modules/engine.io-parser/lib/index.js"),d=n("./node_modules/yeast/index.js"),h=n("./node_modules/debug/src/browser.js")("engine.io-client:polling"),y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,r,c=a(u);function u(){return o(this,u),c.apply(this,arguments)}return t=u,(n=[{key:"name",get:function(){return"polling"}},{key:"doOpen",value:function(){this.poll()}},{key:"pause",value:function(e){var t=this;this.readyState="pausing";var n=function(){h("paused"),t.readyState="paused",e()};if(this.polling||!this.writable){var r=0;this.polling&&(h("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){h("pre-pause polling complete"),--r||n()}))),this.writable||(h("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){h("pre-pause writing complete"),--r||n()})))}else n()}},{key:"poll",value:function(){h("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}},{key:"onData",value:function(e){var t=this;h("polling got data %s",e),p.decodePayload(e,this.socket.binaryType).forEach((function(e){if("opening"===t.readyState&&"open"===e.type&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():h('ignoring poll - transport state "%s"',this.readyState))}},{key:"doClose",value:function(){var e=this,t=function(){h("writing close packet"),e.write([{type:"close"}])};"open"===this.readyState?(h("transport open - closing"),t()):(h("transport not open - deferring close"),this.once("open",t))}},{key:"write",value:function(e){var t=this;this.writable=!1,p.encodePayload(e,(function(e){t.doWrite(e,(function(){t.writable=!0,t.emit("drain")}))}))}},{key:"uri",value:function(){var e=this.query||{},t=this.opts.secure?"https":"http",n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=d()),this.supportsBinary||e.sid||(e.b64=1),e=f.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}])&&i(t.prototype,n),r&&i(t,r),u}(l);e.exports=y},"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js":function(e,t,n){var r=n("./node_modules/engine.io-client/lib/globalThis.browser.js"),o="function"==typeof Promise&&"function"==typeof Promise.resolve?function(e){return Promise.resolve().then(e)}:function(e,t){return t(e,0)};e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:o}},"./node_modules/engine.io-client/lib/transports/websocket.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var u=n("./node_modules/engine.io-client/lib/transport.js"),l=n("./node_modules/engine.io-parser/lib/index.js"),f=n("./node_modules/parseqs/index.js"),p=n("./node_modules/yeast/index.js"),d=n("./node_modules/engine.io-client/lib/util.js").pick,h=n("./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js"),y=h.WebSocket,m=h.usingBrowserWebSocket,v=h.defaultBinaryType,b=h.nextTick,g=n("./node_modules/debug/src/browser.js")("engine.io-client:websocket"),_="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(c,e);var t,n,r,a=s(c);function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=a.call(this,e)).supportsBinary=!e.forceBase64,t}return t=c,(n=[{key:"name",get:function(){return"websocket"}},{key:"doOpen",value:function(){if(this.check()){var e=this.uri(),t=this.opts.protocols,n=_?{}:d(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=m&&!_?t?new y(e,t):new y(e):new y(e,t,n)}catch(r){return this.emit("error",r)}this.ws.binaryType=this.socket.binaryType||v,this.addEventListeners()}}},{key:"addEventListeners",value:function(){var e=this;this.ws.onopen=function(){e.opts.autoUnref&&e.ws._socket.unref(),e.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=function(t){return e.onData(t.data)},this.ws.onerror=function(t){return e.onError("websocket error",t)}}},{key:"write",value:function(e){var t=this;this.writable=!1;for(var n=function(n){var r=e[n],o=n===e.length-1;l.encodePacket(r,t.supportsBinary,(function(e){var n={};m||(r.options&&(n.compress=r.options.compress),t.opts.perMessageDeflate&&("string"==typeof e?Buffer.byteLength(e):e.length)<t.opts.perMessageDeflate.threshold&&(n.compress=!1));try{m?t.ws.send(e):t.ws.send(e,n)}catch(i){g("websocket closed before onclose event")}o&&b((function(){t.writable=!0,t.emit("drain")}),t.setTimeoutFn)}))},r=0;r<e.length;r++)n(r)}},{key:"onClose",value:function(){u.prototype.onClose.call(this)}},{key:"doClose",value:function(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}},{key:"uri",value:function(){var e=this.query||{},t=this.opts.secure?"wss":"ws",n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=p()),this.supportsBinary||(e.b64=1),(e=f.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}},{key:"check",value:function(){return!(!y||"__initialize"in y&&this.name===c.prototype.name)}}])&&o(t.prototype,n),r&&o(t,r),c}(u);e.exports=j},"./node_modules/engine.io-client/lib/util.js":function(e,t,n){var r=n("./node_modules/engine.io-client/lib/globalThis.browser.js");e.exports.pick=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(t,n){return e.hasOwnProperty(n)&&(t[n]=e[n]),t}),{})};var o=setTimeout,i=clearTimeout;e.exports.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=o.bind(r),e.clearTimeoutFn=i.bind(r)):(e.setTimeoutFn=setTimeout.bind(r),e.clearTimeoutFn=clearTimeout.bind(r))}},"./node_modules/engine.io-client/lib/xmlhttprequest.js":function(e,t,n){var r=n("./node_modules/has-cors/index.js"),o=n("./node_modules/engine.io-client/lib/globalThis.browser.js");e.exports=function(e){var t=e.xdomain,n=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(s){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(s){}if(!t)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(s){}}},"./node_modules/engine.io-parser/lib/commons.js":function(e,t){var n=Object.create(null);n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";var r=Object.create(null);Object.keys(n).forEach((function(e){r[n[e]]=e})),e.exports={PACKET_TYPES:n,PACKET_TYPES_REVERSE:r,ERROR_PACKET:{type:"error",data:"parser error"}}},"./node_modules/engine.io-parser/lib/decodePacket.browser.js":function(e,t,n){var r,o=n("./node_modules/engine.io-parser/lib/commons.js"),i=o.PACKET_TYPES_REVERSE,s=o.ERROR_PACKET;"function"==typeof ArrayBuffer&&(r=n("./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"));var a=function(e,t){if(r){var n=r.decode(e);return c(n,t)}return{base64:!0,data:e}},c=function(e,t){switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};e.exports=function(e,t){if("string"!=typeof e)return{type:"message",data:c(e,t)};var n=e.charAt(0);return"b"===n?{type:"message",data:a(e.substring(1),t)}:i[n]?e.length>1?{type:i[n],data:e.substring(1)}:{type:i[n]}:s}},"./node_modules/engine.io-parser/lib/encodePacket.browser.js":function(e,t,n){var r=n("./node_modules/engine.io-parser/lib/commons.js").PACKET_TYPES,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,s=function(e,t){var n=new FileReader;return n.onload=function(){var e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=function(e,t,n){var a,c=e.type,u=e.data;return o&&u instanceof Blob?t?n(u):s(u,n):i&&(u instanceof ArrayBuffer||(a=u,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(a):a&&a.buffer instanceof ArrayBuffer))?t?n(u instanceof ArrayBuffer?u:u.buffer):s(new Blob([u]),n):n(r[c]+(u||""))}},"./node_modules/engine.io-parser/lib/index.js":function(e,t,n){var r=n("./node_modules/engine.io-parser/lib/encodePacket.browser.js"),o=n("./node_modules/engine.io-parser/lib/decodePacket.browser.js"),i=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:function(e,t){var n=e.length,o=new Array(n),s=0;e.forEach((function(e,a){r(e,!1,(function(e){o[a]=e,++s===n&&t(o.join(i))}))}))},decodePacket:o,decodePayload:function(e,t){for(var n=e.split(i),r=[],s=0;s<n.length;s++){var a=o(n[s],t);if(r.push(a),"error"===a.type)break}return r}}},"./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":function(e,t){var n;n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t.encode=function(e){var t,r=new Uint8Array(e),o=r.length,i="";for(t=0;t<o;t+=3)i+=n[r[t]>>2],i+=n[(3&r[t])<<4|r[t+1]>>4],i+=n[(15&r[t+1])<<2|r[t+2]>>6],i+=n[63&r[t+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(t=0;t<c;t+=4)r=n.indexOf(e[t]),o=n.indexOf(e[t+1]),i=n.indexOf(e[t+2]),s=n.indexOf(e[t+3]),f[u++]=r<<2|o>>4,f[u++]=(15&o)<<4|i>>2,f[u++]=(3&i)<<6|63&s;return l}},"./node_modules/has-cors/index.js":function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(n){e.exports=!1}},"./node_modules/ms/index.js":function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=1e3,o=60*r,i=60*o,s=24*i,a=7*s,c=365.25*s;function u(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var l,f,p=n(e);if("string"===p&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*c;case"weeks":case"week":case"w":return n*a;case"days":case"day":case"d":return n*s;case"hours":case"hour":case"hrs":case"hr":case"h":return n*i;case"minutes":case"minute":case"mins":case"min":case"m":return n*o;case"seconds":case"second":case"secs":case"sec":case"s":return n*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}(e);if("number"===p&&isFinite(e))return t.long?(l=e,(f=Math.abs(l))>=s?u(l,f,s,"day"):f>=i?u(l,f,i,"hour"):f>=o?u(l,f,o,"minute"):f>=r?u(l,f,r,"second"):l+" ms"):function(e){var t=Math.abs(e);return t>=s?Math.round(e/s)+"d":t>=i?Math.round(e/i)+"h":t>=o?Math.round(e/o)+"m":t>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},"./node_modules/parseqs/index.js":function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},"./node_modules/parseuri/index.js":function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t,o,i,s=e,a=e.indexOf("["),c=e.indexOf("]");-1!=a&&-1!=c&&(e=e.substring(0,a)+e.substring(a,c).replace(/:/g,";")+e.substring(c,e.length));for(var u,l,f=n.exec(e||""),p={},d=14;d--;)p[r[d]]=f[d]||"";return-1!=a&&-1!=c&&(p.source=s,p.host=p.host.substring(1,p.host.length-1).replace(/;/g,":"),p.authority=p.authority.replace("[","").replace("]","").replace(/;/g,":"),p.ipv6uri=!0),p.pathNames=(t=p.path,o=/\/{2,9}/g,i=t.replace(o,"/").split("/"),"/"!=t.substr(0,1)&&0!==t.length||i.splice(0,1),"/"==t.substr(t.length-1,1)&&i.splice(i.length-1,1),i),p.queryKey=(u=p.query,l={},u.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(l[t]=n)})),l),p}},"./node_modules/socket.io-parser/dist/binary.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;var o=n("./node_modules/socket.io-parser/dist/is-binary.js");function i(e,t){if(!e)return e;if(o.isBinary(e)){var n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=i(e[a],t);return s}if("object"===r(e)&&!(e instanceof Date)){var c={};for(var u in e)e.hasOwnProperty(u)&&(c[u]=i(e[u],t));return c}return e}function s(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(var n=0;n<e.length;n++)e[n]=s(e[n],t);else if("object"===r(e))for(var o in e)e.hasOwnProperty(o)&&(e[o]=s(e[o],t));return e}t.deconstructPacket=function(e){var t=[],n=e.data,r=e;return r.data=i(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=s(e.data,t),e.attachments=void 0,e}},"./node_modules/socket.io-parser/dist/index.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t,n){return(o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=c(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;var p,d,h=n("./node_modules/component-emitter/index.js"),y=n("./node_modules/socket.io-parser/dist/binary.js"),m=n("./node_modules/socket.io-parser/dist/is-binary.js"),v=n("./node_modules/debug/src/browser.js")("socket.io-parser");t.protocol=5,(d=p=t.PacketType||(t.PacketType={}))[d.CONNECT=0]="CONNECT",d[d.DISCONNECT=1]="DISCONNECT",d[d.EVENT=2]="EVENT",d[d.ACK=3]="ACK",d[d.CONNECT_ERROR=4]="CONNECT_ERROR",d[d.BINARY_EVENT=5]="BINARY_EVENT",d[d.BINARY_ACK=6]="BINARY_ACK";var b=function(){function e(){u(this,e)}return f(e,[{key:"encode",value:function(e){return v("encoding packet %j",e),e.type!==p.EVENT&&e.type!==p.ACK||!m.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===p.EVENT?p.BINARY_EVENT:p.BINARY_ACK,this.encodeAsBinary(e))}},{key:"encodeAsString",value:function(e){var t=""+e.type;return e.type!==p.BINARY_EVENT&&e.type!==p.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),v("encoded %j as %s",e,t),t}},{key:"encodeAsBinary",value:function(e){var t=y.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}}]),e}();t.Encoder=b;var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(n,e);var t=s(n);function n(){return u(this,n),t.call(this)}return f(n,[{key:"add",value:function(e){var t;if("string"==typeof e)(t=this.decodeString(e)).type===p.BINARY_EVENT||t.type===p.BINARY_ACK?(this.reconstructor=new _(t),0===t.attachments&&o(c(n.prototype),"emit",this).call(this,"decoded",t)):o(c(n.prototype),"emit",this).call(this,"decoded",t);else{if(!m.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(t=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,o(c(n.prototype),"emit",this).call(this,"decoded",t))}}},{key:"decodeString",value:function(e){var t=0,r={type:Number(e.charAt(0))};if(void 0===p[r.type])throw new Error("unknown packet type "+r.type);if(r.type===p.BINARY_EVENT||r.type===p.BINARY_ACK){for(var o=t+1;"-"!==e.charAt(++t)&&t!=e.length;);var i=e.substring(o,t);if(i!=Number(i)||"-"!==e.charAt(t))throw new Error("Illegal attachments");r.attachments=Number(i)}if("/"===e.charAt(t+1)){for(var s=t+1;++t&&","!==e.charAt(t)&&t!==e.length;);r.nsp=e.substring(s,t)}else r.nsp="/";var a=e.charAt(t+1);if(""!==a&&Number(a)==a){for(var c=t+1;++t;){var u=e.charAt(t);if(null==u||Number(u)!=u){--t;break}if(t===e.length)break}r.id=Number(e.substring(c,t+1))}if(e.charAt(++t)){var l=function(e){try{return JSON.parse(e)}catch(t){return!1}}(e.substr(t));if(!n.isPayloadValid(r.type,l))throw new Error("invalid payload");r.data=l}return v("decoded %s as %j",e,r),r}},{key:"destroy",value:function(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}],[{key:"isPayloadValid",value:function(e,t){switch(e){case p.CONNECT:return"object"===r(t);case p.DISCONNECT:return void 0===t;case p.CONNECT_ERROR:return"string"==typeof t||"object"===r(t);case p.EVENT:case p.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case p.ACK:case p.BINARY_ACK:return Array.isArray(t)}}}]),n}(h);t.Decoder=g;var _=function(){function e(t){u(this,e),this.packet=t,this.buffers=[],this.reconPack=t}return f(e,[{key:"takeBinaryData",value:function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=y.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}},{key:"finishedReconstruction",value:function(){this.reconPack=null,this.buffers=[]}}]),e}()},"./node_modules/socket.io-parser/dist/is-binary.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;var o="function"==typeof ArrayBuffer,i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);function c(e){return o&&(e instanceof ArrayBuffer||function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}(e))||s&&e instanceof Blob||a&&e instanceof File}t.isBinary=c,t.hasBinary=function e(t,n){if(!t||"object"!==r(t))return!1;if(Array.isArray(t)){for(var o=0,i=t.length;o<i;o++)if(e(t[o]))return!0;return!1}if(c(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(var s in t)if(Object.prototype.hasOwnProperty.call(t,s)&&e(t[s]))return!0;return!1}},"./node_modules/yeast/index.js":function(e,t,n){var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},s=0,a=0;function c(e){var t="";do{t=o[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function u(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;a<64;a++)i[o[a]]=a;u.encode=c,u.decode=function(e){var t=0;for(a=0;a<e.length;a++)t=64*t+i[e.charAt(a)];return t},e.exports=u}})),X={exports:{}},$=l(X.exports=(z={"../../node_modules/@feathersjs/hooks/lib/base.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?c(e):t}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.setMiddleware=t.getMiddleware=t.setManager=t.getManager=t.convertOptions=t.HookManager=t.BaseHookContext=t.HOOKS=void 0;var p=n("../../node_modules/@feathersjs/hooks/lib/utils.js");t.HOOKS=Symbol("@feathersjs/hooks");var d=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f(this,e),Object.defineProperty(this,"self",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,t)};t.BaseHookContext=d;var h=function(){function e(){f(this,e),Object.defineProperty(this,"_parent",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_params",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_middleware",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_props",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_defaults",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}var t,n,r;return t=e,(n=[{key:"parent",value:function(e){return this._parent=e,this}},{key:"middleware",value:function(e){return this._middleware=(null==e?void 0:e.length)?e:null,this}},{key:"getMiddleware",value:function(){var e,t=null===(e=this._parent)||void 0===e?void 0:e.getMiddleware();return t&&this._middleware?t.concat(this._middleware):t||this._middleware}},{key:"collectMiddleware",value:function(e,t){var n=v(e),r=this.getMiddleware();return n&&r?n.concat(r):n||r||[]}},{key:"props",value:function(e){return this._props||(this._props={}),p.copyProperties(this._props,e),this}},{key:"getProps",value:function(){var e,t=null===(e=this._parent)||void 0===e?void 0:e.getProps();return t&&this._props?p.copyProperties({},t,this._props):t||this._props||null}},{key:"params",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this._params=t,this}},{key:"getParams",value:function(){var e,t=null===(e=this._parent)||void 0===e?void 0:e.getParams();return t&&this._params?t.concat(this._params):t||this._params}},{key:"defaults",value:function(e){return this._defaults=e,this}},{key:"getDefaults",value:function(e,t,n){var r,o="function"==typeof this._defaults?this._defaults(e,t,n):null,i=null===(r=this._parent)||void 0===r?void 0:r.getDefaults(e,t,n);return i&&o?Object.assign({},i,o):i||o}},{key:"getContextClass",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,t=function(e){o(n,e);var t=s(n);function n(e){var r;return f(this,n),r=t.call(this,e),p.copyToSelf(c(r)),r}return n}(e),n=this.getParams(),r=this.getProps();return n&&n.forEach((function(e,n){if(void 0!==(null==r?void 0:r[e]))throw new Error("Hooks can not have a property and param named '".concat(e,"'. Use .defaults instead."));Object.defineProperty(t.prototype,e,{enumerable:!0,get:function(){return null==this?void 0:this.arguments[n]},set:function(e){this.arguments[n]=e}})})),r&&p.copyProperties(t.prototype,r),t}},{key:"initializeContext",value:function(e,t,n){var r=this._parent?this._parent.initializeContext(e,t,n):n,o=this.getDefaults(e,t,r);if(e&&(r.self=e),r.arguments=t,o)for(var i=0,s=Object.keys(o);i<s.length;i++){var a=s[i];void 0===r[a]&&(r[a]=o[a])}return r}}])&&l(t.prototype,n),r&&l(t,r),e}();function y(e){return e&&e[t.HOOKS]||null}function m(e,n){var r=y(e);return e[t.HOOKS]=n.parent(r),e}function v(e){var t=y(e);return t?t.getMiddleware():null}t.HookManager=h,t.convertOptions=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return e?Array.isArray(e)?(new h).middleware(e):e:new h},t.getManager=y,t.setManager=m,t.getMiddleware=v,t.setMiddleware=function(e,t){return m(e,(new h).middleware(t))}},"../../node_modules/@feathersjs/hooks/lib/compose.js":function(e,t){function n(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw s}}}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(t,"__esModule",{value:!0}),t.compose=void 0,t.compose=function(e){if(!Array.isArray(e))throw new TypeError("Middleware stack must be an array!");var t,r=n(e);try{for(r.s();!(t=r.n()).done;)if("function"!=typeof t.value)throw new TypeError("Middleware must be composed of functions!")}catch(o){r.e(o)}finally{r.f()}return function(t,n){var r=-1;return function i(s){if(s<=r)return Promise.reject(new Error("next() called multiple times"));r=s;var a=e[s];if(s===e.length&&(a=n),!a)return Promise.resolve();try{return Promise.resolve(a.call(this,t,i.bind(this,s+1)))}catch(o){return Promise.reject(o)}}.call(this,0)}}},"../../node_modules/@feathersjs/hooks/lib/hooks.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.hookDecorator=t.objectHooks=t.functionHooks=t.getOriginal=void 0;var r=n("../../node_modules/@feathersjs/hooks/lib/compose.js"),o=n("../../node_modules/@feathersjs/hooks/lib/base.js"),i=n("../../node_modules/@feathersjs/hooks/lib/utils.js");function s(e){return"function"==typeof e.original?s(e.original):e}function a(e,t){if("function"!=typeof e)throw new Error("Can not apply hooks to non-function");var n=o.convertOptions(t),a=function e(){for(var t=this,o=e.Context,i=e.original,s=arguments.length,a=new Array(s),c=0;c<s;c++)a[c]=arguments[c];var u=a[a.length-1]instanceof o,l=u?a.pop():new o,f=n.initializeContext(this,a,l),p=[function(e,t){return t().then((function(){return u?e:e.result}))}],d=n.collectMiddleware(this,a);return d&&Array.prototype.push.apply(p,d),p.push((function(e,n){return Object.prototype.hasOwnProperty.call(f,"result")?n():Promise.resolve(i.apply(t,e.arguments)).then((function(t){return e.result=t,n()}))})),r.compose(p).call(this,f)};return i.copyFnProperties(a,e),i.copyProperties(a,e),o.setManager(a,n),Object.assign(a,{original:s(e),Context:n.getContextClass(),createContext:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new a.Context(e)}})}t.getOriginal=s,t.functionHooks=a,t.objectHooks=function(e,t){var n="function"==typeof e?e.prototype:e;return Array.isArray(t)?o.setMiddleware(n,t):Object.keys(t).reduce((function(e,r){var i=n[r];if("function"!=typeof i)throw new Error("Can not apply hooks. '".concat(r,"' is not a function"));var s=o.convertOptions(t[r]);return e[r]=a(i,s.props({method:r})),e}),n)},t.hookDecorator=function(e){return function(t,n,r){var i=o.convertOptions(e);if(!r)return o.setManager(t.prototype,i),t;var s=r.value;if("function"!=typeof s)throw new Error("Can not apply hooks. '".concat(n,"' is not a function"));return r.value=a(s,i.props({method:n})),r}}},"../../node_modules/@feathersjs/hooks/lib/index.js":function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.hooks=t.middleware=void 0;var a=n("../../node_modules/@feathersjs/hooks/lib/base.js"),c=n("../../node_modules/@feathersjs/hooks/lib/hooks.js");s(n("../../node_modules/@feathersjs/hooks/lib/hooks.js"),t),s(n("../../node_modules/@feathersjs/hooks/lib/compose.js"),t),s(n("../../node_modules/@feathersjs/hooks/lib/base.js"),t),t.middleware=function(e,t){var n=(new a.HookManager).middleware(e);return t&&(t.params&&n.params.apply(n,r(t.params)),t.defaults&&n.defaults(t.defaults),t.props&&n.props(t.props)),n},t.hooks=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1];return"function"==typeof r&&(o instanceof a.HookManager||Array.isArray(o)||1===t.length)?c.functionHooks(r,o):2===t.length?c.objectHooks(r,o):c.hookDecorator(r)}},"../../node_modules/@feathersjs/hooks/lib/utils.js":function(e,t){function n(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw s}}}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(t,"__esModule",{value:!0}),t.copyFnProperties=t.copyProperties=t.copyToSelf=void 0;var o=Object.prototype,i="function"==typeof o.__lookupGetter__&&"function"==typeof o.__defineGetter__&&"function"==typeof o.__defineSetter__;t.copyToSelf=function(e){for(var t in e)if(!e.hasOwnProperty(t)){var n=i?e.constructor.prototype.__lookupGetter__(t):Object.getOwnPropertyDescriptor(e,t);if(i&&n){e.__defineGetter__(t,n);var r=e.constructor.prototype.__lookupSetter__(t);r&&e.__defineSetter__(t,r)}else n?Object.defineProperty(e,t,n):e[t]=e[t]}},t.copyProperties=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];for(var i=0,s=r;i<s.length;i++){var a,c=s[i],u=Object.keys(c).concat(Object.getOwnPropertySymbols(c)),l=n(u);try{for(l.s();!(a=l.n()).done;){var f=a.value,p=Object.getOwnPropertyDescriptor(c,f);p&&!Object.prototype.hasOwnProperty.call(e,f)&&Object.defineProperty(e,f,p)}}catch(d){l.e(d)}finally{l.f()}}return e},t.copyFnProperties=function(e,t){try{for(var n=0,r=["name","length"];n<r.length;n++){var o=r[n],i=t[o];Object.defineProperty(e,o,{value:i})}}catch(s){}return e}},"../authentication-client/lib/core.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);s=!0);}catch(c){a=!0,o=c}finally{try{s||null==n.return||n.return()}finally{if(a)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.AuthenticationClient=void 0;var p=n("../errors/lib/index.js"),d=n("../authentication-client/lib/storage.js"),h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(n,e);var t=u(n);function n(e,r){return a(this,n),t.call(this,e,"OauthError",401,"oauth-error",r)}return n}(p.FeathersError),y=function(e,t){var n=new RegExp("(?:&?)".concat(t,"=([^&]*)")),r=e.hash?e.hash.match(n):null;return null!==r?[i(r,2)[1],n]:[null,n]},m=function(){function e(t,n){a(this,e);var r=t.io,o=new d.StorageWrapper(t.get("storage")||n.storage);this.app=t,this.options=n,this.authenticated=!1,this.app.set("storage",o),r&&this.handleSocket(r)}var t,n,r;return t=e,(n=[{key:"service",get:function(){return this.app.service(this.options.path)}},{key:"storage",get:function(){return this.app.get("storage")}},{key:"handleSocket",value:function(e){var t=this,n=this.app.io?"connect":"open",r=this.app.io?"disconnect":"disconnection";e.on(r,(function(){var r=new Promise((function(t){return e.once(n,(function(e){return t(e)}))})).then((function(){return t.authenticated?t.reAuthenticate(!0):null}));t.app.set("authentication",r)}))}},{key:"getFromLocation",value:function(e){var t=i(y(e,this.options.locationKey),2),n=t[0],r=t[1];if(null!==n)return e.hash=e.hash.replace(r,""),Promise.resolve(n);var o=i(y(e,this.options.locationErrorKey),2),s=o[0],a=o[1];return null!==s?(e.hash=e.hash.replace(a,""),Promise.reject(new h(decodeURIComponent(s)))):Promise.resolve(null)}},{key:"setAccessToken",value:function(e){return this.storage.setItem(this.options.storageKey,e)}},{key:"getAccessToken",value:function(){var e=this;return this.storage.getItem(this.options.storageKey).then((function(t){return!t&&"undefined"!=typeof window&&window.location?e.getFromLocation(window.location):t||null}))}},{key:"removeAccessToken",value:function(){return this.storage.removeItem(this.options.storageKey)}},{key:"reset",value:function(){return this.app.set("authentication",null),this.authenticated=!1,Promise.resolve(null)}},{key:"handleError",value:function(e,t){var n=this;if(401===e.code||403===e.code){var r=this.removeAccessToken().then((function(){return n.reset()}));return"logout"===t?r:r.then((function(){return Promise.reject(e)}))}return Promise.reject(e)}},{key:"reAuthenticate",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1?arguments[1]:void 0,r=this.app.get("authentication");return r&&!0!==t?r:this.getAccessToken().then((function(t){if(!t)throw new p.NotAuthenticated("No accessToken found in storage");return e.authenticate({strategy:n||e.options.jwtStrategy,accessToken:t})}))}},{key:"authenticate",value:function(e,t){var n=this;if(!e)return this.reAuthenticate();var r=this.service.create(e,t).then((function(e){var t=e.accessToken;return n.authenticated=!0,n.app.emit("login",e),n.app.emit("authenticated",e),n.setAccessToken(t).then((function(){return e}))})).catch((function(e){return n.handleError(e,"authenticate")}));return this.app.set("authentication",r),r}},{key:"logout",value:function(){var e=this;return Promise.resolve(this.app.get("authentication")).then((function(){return e.service.remove(null).then((function(t){return e.removeAccessToken().then((function(){return e.reset()})).then((function(){return e.app.emit("logout",t),t}))}))})).catch((function(t){return e.handleError(t,"logout")}))}}])&&o(t.prototype,n),r&&o(t,r),e}();t.AuthenticationClient=m},"../authentication-client/lib/hooks/authentication.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.authentication=void 0;var r=n("../commons/lib/index.js");t.authentication=function(){return function(e,t){var n=e.app,o=e.params,i=e.path,s=e.method,a=e.app.authentication;return r.stripSlashes(a.options.path)===i&&"create"===s?t():Promise.resolve(n.get("authentication")).then((function(t){t&&(e.params=Object.assign({},t,o))})).then(t)}}},"../authentication-client/lib/hooks/index.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.populateHeader=t.authentication=void 0;var r=n("../authentication-client/lib/hooks/authentication.js");Object.defineProperty(t,"authentication",{enumerable:!0,get:function(){return r.authentication}});var o=n("../authentication-client/lib/hooks/populate-header.js");Object.defineProperty(t,"populateHeader",{enumerable:!0,get:function(){return o.populateHeader}})},"../authentication-client/lib/hooks/populate-header.js":function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.populateHeader=void 0,t.populateHeader=function(){return function(e,t){var n,r,o,i=e.app,s=e.params.accessToken,a=i.authentication;if(i.rest&&s){var c=a.options,u=c.scheme,l=c.header,f="".concat(u," ").concat(s);e.params.headers=Object.assign({},(o=f,(r=l)in(n={})?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,n),e.params.headers)}return t()}}},"../authentication-client/lib/index.js":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.defaults=t.defaultStorage=t.hooks=t.MemoryStorage=t.AuthenticationClient=t.getDefaultStorage=void 0;var s=n("../authentication-client/lib/core.js");Object.defineProperty(t,"AuthenticationClient",{enumerable:!0,get:function(){return s.AuthenticationClient}});var a=i(n("../authentication-client/lib/hooks/index.js"));t.hooks=a;var c=n("../authentication-client/lib/storage.js");Object.defineProperty(t,"MemoryStorage",{enumerable:!0,get:function(){return c.MemoryStorage}}),t.getDefaultStorage=function(){try{return new c.StorageWrapper(window.localStorage)}catch(e){}return new c.MemoryStorage},t.defaultStorage=t.getDefaultStorage(),t.defaults={header:"Authorization",scheme:"Bearer",storageKey:"feathers-jwt",locationKey:"access_token",locationErrorKey:"error",jwtStrategy:"jwt",path:"/authentication",Authentication:s.AuthenticationClient,storage:t.defaultStorage};var u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},t.defaults,e),r=n.Authentication;return function(e){var t=new r(e,n);e.authentication=t,e.authenticate=t.authenticate.bind(t),e.reAuthenticate=t.reAuthenticate.bind(t),e.logout=t.logout.bind(t),e.hooks([a.authentication(),a.populateHeader()])}};t.default=u,e.exports=Object.assign(u,e.exports)},"../authentication-client/lib/storage.js":function(e,t){function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}Object.defineProperty(t,"__esModule",{value:!0}),t.StorageWrapper=t.MemoryStorage=void 0;var i=function(){function e(){n(this,e),this.store={}}return o(e,[{key:"getItem",value:function(e){return Promise.resolve(this.store[e])}},{key:"setItem",value:function(e,t){return Promise.resolve(this.store[e]=t)}},{key:"removeItem",value:function(e){var t=this.store[e];return delete this.store[e],Promise.resolve(t)}}]),e}();t.MemoryStorage=i;var s=function(){function e(t){n(this,e),this.storage=t}return o(e,[{key:"getItem",value:function(e){return Promise.resolve(this.storage.getItem(e))}},{key:"setItem",value:function(e,t){return Promise.resolve(this.storage.setItem(e,t))}},{key:"removeItem",value:function(e){return Promise.resolve(this.storage.removeItem(e))}}]),e}();t.StorageWrapper=s},"../commons/lib/debug.js":function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.createDebug=t.setDebug=t.noopDebug=void 0;var n={};function r(){return function(){}}t.noopDebug=r;var o=r;t.setDebug=function(e){o=e,Object.keys(n).forEach((function(t){n[t]=e(t)}))},t.createDebug=function(e){return n[e]||(n[e]=o(e)),function(){return n[e].apply(n,arguments)}}},"../commons/lib/index.js":function(e,t,n){function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);s=!0);}catch(c){a=!0,o=c}finally{try{s||null==n.return||n.return()}finally{if(a)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),c=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||a(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.createSymbol=t.isPromise=t._=t.stripSlashes=void 0,t.stripSlashes=function(e){return e.replace(/^(\/+)|(\/+)$/g,"")},t._={each:function(e,n){e&&"function"==typeof e.forEach?e.forEach(n):t._.isObject(e)&&Object.keys(e).forEach((function(t){return n(e[t],t)}))},some:function(e,t){return Object.keys(e).map((function(t){return[e[t],t]})).some((function(e){var n=i(e,2),r=n[0],o=n[1];return t(r,o)}))},every:function(e,t){return Object.keys(e).map((function(t){return[e[t],t]})).every((function(e){var n=i(e,2),r=n[0],o=n[1];return t(r,o)}))},keys:function(e){return Object.keys(e)},values:function(e){return t._.keys(e).map((function(t){return e[t]}))},isMatch:function(e,n){return t._.keys(n).every((function(t){return e[t]===n[t]}))},isEmpty:function(e){return 0===t._.keys(e).length},isObject:function(e){return"object"===o(e)&&!Array.isArray(e)&&null!==e},isObjectOrArray:function(e){return"object"===o(e)&&null!==e},extend:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Object.assign.apply(Object,[e].concat(n))},omit:function(e){for(var n=t._.extend({},e),r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return o.forEach((function(e){return delete n[e]})),n},pick:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(t,n){return void 0!==e[n]&&(t[n]=e[n]),t}),{})},merge:function(e,n){return t._.isObject(e)&&t._.isObject(n)&&Object.keys(n).forEach((function(o){t._.isObject(n[o])?(e[o]||Object.assign(e,r({},o,{})),t._.merge(e[o],n[o])):Object.assign(e,r({},o,n[o]))})),e}},t.isPromise=function(e){return t._.isObject(e)&&"function"==typeof e.then},t.createSymbol=function(e){return"undefined"!=typeof Symbol?Symbol(e):e},c(n("../commons/lib/debug.js"),t)},"../errors/lib/index.js":function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}function s(e){var t=f();return function(){var n,r=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?c(e):t}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e){var t="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,d(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),p(r,e)})(e)}function l(e,t,n){return(l=f()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&p(o,n.prototype),o}).apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.convert=t.errors=t.Unavailable=t.BadGateway=t.NotImplemented=t.GeneralError=t.TooManyRequests=t.Unprocessable=t.LengthRequired=t.Gone=t.Conflict=t.Timeout=t.NotAcceptable=t.MethodNotAllowed=t.NotFound=t.Forbidden=t.PaymentError=t.NotAuthenticated=t.BadRequest=t.FeathersError=void 0;var y=function(e){i(f,e);var t,a,u,l=s(f);function f(e,t,o,i,s){var a;r(this,f);var u="string"==typeof e?e:"Error",p={name:t,code:o,className:i,type:"FeathersError"};if(Array.isArray(s))p.data=s;else if("object"===n(e)||void 0!==s){var d="object"===n(e)?e:s,y=d.message,m=d.errors,v=h(d,["message","errors"]);u=y||u,p.errors=m,p.data=v}return a=l.call(this,u),Object.assign(c(a),p),a}return t=f,(a=[{key:"toJSON",value:function(){var e={name:this.name,message:this.message,code:this.code,className:this.className};return void 0!==this.data&&(e.data=this.data),void 0!==this.errors&&(e.errors=this.errors),e}}])&&o(t.prototype,a),u&&o(t,u),f}(u(Error));t.FeathersError=y;var m=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"BadRequest",400,"bad-request",o)}return n}(y);t.BadRequest=m;var v=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"NotAuthenticated",401,"not-authenticated",o)}return n}(y);t.NotAuthenticated=v;var b=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"PaymentError",402,"payment-error",o)}return n}(y);t.PaymentError=b;var g=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Forbidden",403,"forbidden",o)}return n}(y);t.Forbidden=g;var _=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"NotFound",404,"not-found",o)}return n}(y);t.NotFound=_;var j=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"MethodNotAllowed",405,"method-not-allowed",o)}return n}(y);t.MethodNotAllowed=j;var w=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"NotAcceptable",406,"not-acceptable",o)}return n}(y);t.NotAcceptable=w;var O=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Timeout",408,"timeout",o)}return n}(y);t.Timeout=O;var k=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Conflict",409,"conflict",o)}return n}(y);t.Conflict=k;var S=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Gone",410,"gone",o)}return n}(y);t.Gone=S;var E=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"LengthRequired",411,"length-required",o)}return n}(y);t.LengthRequired=E;var P=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Unprocessable",422,"unprocessable",o)}return n}(y);t.Unprocessable=P;var x=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"TooManyRequests",429,"too-many-requests",o)}return n}(y);t.TooManyRequests=x;var A=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"GeneralError",500,"general-error",o)}return n}(y);t.GeneralError=A;var C=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"NotImplemented",501,"not-implemented",o)}return n}(y);t.NotImplemented=C;var R=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"BadGateway",502,"bad-gateway",o)}return n}(y);t.BadGateway=R;var T=function(e){i(n,e);var t=s(n);function n(e,o){return r(this,n),t.call(this,e,"Unavailable",503,"unavailable",o)}return n}(y);t.Unavailable=T,t.errors={FeathersError:y,BadRequest:m,NotAuthenticated:v,PaymentError:b,Forbidden:g,NotFound:_,MethodNotAllowed:j,NotAcceptable:w,Timeout:O,Conflict:k,LengthRequired:E,Unprocessable:P,TooManyRequests:x,GeneralError:A,NotImplemented:C,BadGateway:R,Unavailable:T,400:m,401:v,402:b,403:g,404:_,405:j,406:w,408:O,409:k,410:S,411:E,422:P,429:x,500:A,501:C,502:R,503:T},t.convert=function(e){if(!e)return e;var r=t.errors[e.name],o=r?new r(e.message,e.data):new Error(e.message||e);return"object"===n(e)&&Object.assign(o,e),o}},"../feathers/lib/application.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?f(e):t}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Feathers=void 0;var h=d(n("../feathers/lib/version.js")),y=n("../feathers/lib/dependencies.js"),m=n("../feathers/lib/events.js"),v=n("../feathers/lib/hooks/index.js"),b=n("../feathers/lib/service.js"),g=n("../feathers/lib/hooks/legacy.js"),_=y.createDebug("@feathersjs/feathers"),j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(l,e);var t,n,r,s=u(l);function l(){var e,t,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(e=s.call(this)).services={},e.settings={},e.mixins=[v.hookMixin,m.eventMixin],e.version=h.default,e._isSetup=!1,e.appHooks=(t={},n=y.HOOKS,r=[m.eventHook],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t),e.legacyHooks=g.enableLegacyHooks(f(e)),e}return t=l,(n=[{key:"providers",get:function(){return this.mixins}},{key:"get",value:function(e){return this.settings[e]}},{key:"set",value:function(e,t){return this.settings[e]=t,this}},{key:"configure",value:function(e){return e.call(this,this),this}},{key:"defaultService",value:function(e){throw new Error("Can not find service '".concat(e,"'"))}},{key:"service",value:function(e){var t=y.stripSlashes(e)||"/",n=this.services[t];return void 0===n?(this.use(t,this.defaultService(t)),this.service(t)):n}},{key:"use",value:function(e,t,n){var r=this;if("string"!=typeof e)throw new Error("'".concat(e,"' is not a valid service path."));var o=y.stripSlashes(e)||"/",s=t;if("function"==typeof s.service&&s.services)return Object.keys(s.services).forEach((function(e){return r.use("".concat(o,"/").concat(e),s.service(e))})),this;var a,c=b.wrapService(o,t,n),u=b.getServiceOptions(t,n),l=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=i(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw s}}}}(b.protectedMethods);try{for(l.s();!(a=l.n()).done;){var f=a.value;if(u.methods.includes(f))throw new Error("'".concat(f,"' on service '").concat(o,"' is not allowed as a custom method name"))}}catch(p){l.e(p)}finally{l.f()}return _("Registering new service at `".concat(o,"`")),this.mixins.forEach((function(e){return e.call(r,c,o,u)})),this._isSetup&&"function"==typeof c.setup&&(_("Setting up service for `".concat(o,"`")),c.setup(this,o)),this.services[o]=c,this}},{key:"hooks",value:function(e){var t=this,n=e;if(n.before||n.after||n.error)return this.legacyHooks(n);if(Array.isArray(e)){var r;(r=this.appHooks[y.HOOKS]).push.apply(r,o(e))}else{var i=e;Object.keys(i).forEach((function(e){var n=t.appHooks[e]||[];t.appHooks[e]=n.concat(i[e])}))}return this}},{key:"setup",value:function(){for(var e=this,t=Promise.resolve(),n=function(){var n=o[r];t=t.then((function(){var t=e.service(n);if("function"==typeof t.setup)return _("Setting up service for `".concat(n,"`")),t.setup(e,n)}))},r=0,o=Object.keys(this.services);r<o.length;r++)n();return t.then((function(){return e._isSetup=!0,e}))}}])&&a(t.prototype,n),r&&a(t,r),l}(y.EventEmitter);t.Feathers=j},"../feathers/lib/declarations.js":function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},"../feathers/lib/dependencies.js":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var i=n("../../node_modules/events/events.js");Object.defineProperty(t,"EventEmitter",{enumerable:!0,get:function(){return i.EventEmitter}}),o(n("../commons/lib/index.js"),t),o(n("../../node_modules/@feathersjs/hooks/lib/index.js"),t)},"../feathers/lib/events.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.eventMixin=t.eventHook=void 0;var r=n("../feathers/lib/dependencies.js"),o=n("../feathers/lib/service.js");t.eventHook=function(e,t){var n=o.getServiceOptions(e.self).events,r=o.defaultEventMap[e.method]||null;return e.event=r,t().then((function(){"string"!=typeof e.event||n.includes(e.event)||(Array.isArray(e.result)?e.result:[e.result]).forEach((function(t){return e.self.emit(e.event,t,e)}))}))},t.eventMixin=function(e){return"function"==typeof e.on&&"function"==typeof e.emit||Object.assign(e,r.EventEmitter.prototype),e}},"../feathers/lib/hooks/index.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return l(this,n)}}function l(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.hookMixin=t.FeathersHookManager=t.createContext=t.fromErrorHooks=t.fromBeforeHook=t.fromAfterHook=void 0;var p=n("../feathers/lib/dependencies.js"),d=n("../feathers/lib/service.js"),h=n("../feathers/lib/hooks/legacy.js");Object.defineProperty(t,"fromAfterHook",{enumerable:!0,get:function(){return h.fromAfterHook}}),Object.defineProperty(t,"fromBeforeHook",{enumerable:!0,get:function(){return h.fromBeforeHook}}),Object.defineProperty(t,"fromErrorHooks",{enumerable:!0,get:function(){return h.fromErrorHooks}}),t.createContext=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=e[t].createContext;if("function"!=typeof r)throw new Error("Can not create context for method ".concat(t));return r(n)};var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(l,e);var t,n,r,i=u(l);function l(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(n=i.call(this)).app=e,n.method=t,n._middleware=[],n}return t=l,(n=[{key:"collectMiddleware",value:function(e,t){var n=this.app,r=n.appHooks[p.HOOKS].concat(n.appHooks[this.method]||[]),i=h.collectLegacyHooks(this.app,this.method),s=a(f(l.prototype),"collectMiddleware",this).call(this,e,t),c=h.collectLegacyHooks(e,this.method);return[].concat(o(r),o(i),o(s),o(c))}},{key:"initializeContext",value:function(e,t,n){var r=a(f(l.prototype),"initializeContext",this).call(this,e,t,n);return r.params=r.params||{},r}},{key:"middleware",value:function(e){var t;return(t=this._middleware).push.apply(t,o(e)),this}}])&&s(t.prototype,n),r&&s(t,r),l}(p.HookManager);t.FeathersHookManager=y,t.hookMixin=function(e,t,n){if("function"==typeof e.hooks)return e;var r=this,i=d.getHookMethods(e,n).reduce((function(n,i){var s,a=d.defaultServiceArguments[i]||["data","params"];return n[i]=(s=new y(r,i)).params.apply(s,o(a)).props({app:r,path:t,method:i,service:e,event:null,type:null}),n}),{}),s=h.enableLegacyHooks(e);return p.hooks(e,i),e.hooks=function(e){var t=this;return e.before||e.after||e.error?s.call(this,e):Array.isArray(e)?p.hooks(this,e):(Object.keys(e).forEach((function(n){var r=p.getManager(t[n]);if(!(r instanceof y))throw new Error("Method ".concat(n," is not a Feathers hooks enabled service method"));r.middleware(e[n])})),this)},e}},"../feathers/lib/hooks/legacy.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(t,"__esModule",{value:!0}),t.enableLegacyHooks=t.convertHookData=t.collectLegacyHooks=t.fromErrorHooks=t.fromAfterHook=t.fromBeforeHook=void 0;var a=n("../feathers/lib/dependencies.js")._.each;function c(e){return function(t,n){return t.type="before",Promise.resolve(e.call(t.self,t)).then((function(){return t.type=null,n()}))}}function u(e){return function(t,n){return n().then((function(){return t.type="after",e.call(t.self,t)})).then((function(){t.type=null}))}}function l(e){return function(t,n){return n().catch((function(n){var r=Promise.resolve();t.original=Object.assign({},t),t.error=n,t.type="error",delete t.result;var o,s=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=i(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw s}}}}(e);try{var a=function(){var e=o.value;r=r.then((function(){return e.call(t.self,t)}))};for(s.s();!(o=s.n()).done;)a()}catch(c){s.e(c)}finally{s.f()}return r.then((function(){if(t.type=null,void 0===t.result)throw t.error}))}))}}function f(e){var t={};return Array.isArray(e)?t={all:e}:"object"!==r(e)?t={all:[e]}:a(e,(function(e,n){t[n]=Array.isArray(e)?e:[e]})),t}t.fromBeforeHook=c,t.fromAfterHook=u,t.fromErrorHooks=l,t.collectLegacyHooks=function(e,t){var n=e.__hooks,r=n.before[t],i=void 0===r?[]:r,s=n.after[t],a=void 0===s?[]:s,c=n.error[t],u=void 0===c?[]:c,f=i,p=o(a).reverse();return[l(u)].concat(o(f),o(p))},t.convertHookData=f,t.enableLegacyHooks=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:["find","get","create","update","patch","remove"],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["before","after","error"],r={};return n.forEach((function(e){r[e]={}})),Object.defineProperty(e,"__hooks",{configurable:!0,value:r,writable:!0}),function(e){var n=this;return a(e,(function(e,r){if(!n.__hooks[r])throw new Error("'".concat(r,"' is not a valid hook type"));var i=f(e);a(i,(function(e,n){if("all"!==n&&-1===t.indexOf(n))throw new Error("'".concat(n,"' is not a valid hook method"))})),t.forEach((function(e){var t,s=[].concat(o(i.all||[]),o(i[e]||[]));n.__hooks[r][e]=n.__hooks[r][e]||[],"before"===r&&(s=s.map(c)),"after"===r&&(s=s.map(u)),(t=n.__hooks[r][e]).push.apply(t,o(s))}))})),this}}},"../feathers/lib/index.js":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Feathers=t.version=t.feathers=void 0;var s=n("../feathers/lib/dependencies.js"),a=i(n("../feathers/lib/version.js"));t.version=a.default;var c=n("../feathers/lib/application.js");function u(){return new c.Feathers}Object.defineProperty(t,"Feathers",{enumerable:!0,get:function(){return c.Feathers}}),t.feathers=u,u.setDebug=s.setDebug,o(n("../feathers/lib/hooks/index.js"),t),o(n("../feathers/lib/declarations.js"),t),o(n("../feathers/lib/service.js"),t),e.exports=Object.assign(u,e.exports)},"../feathers/lib/service.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.wrapService=t.getServiceOptions=t.getHookMethods=t.protectedMethods=t.defaultEventMap=t.defaultServiceMethods=t.defaultServiceArguments=t.SERVICE=void 0;var r=n("../feathers/lib/dependencies.js");function o(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e[t.SERVICE];if(r)return r;var o=n.methods,i=void 0===o?t.defaultServiceMethods.filter((function(t){return"function"==typeof e[t]})):o,s=n.events,a=void 0===s?e.events||[]:s,c=n.serviceEvents,u=void 0===c?Object.values(t.defaultEventMap).concat(a):c;return Object.assign(Object.assign({},n),{events:a,methods:i,serviceEvents:u})}t.SERVICE=r.createSymbol("@feathersjs/service"),t.defaultServiceArguments={find:["params"],get:["id","params"],create:["data","params"],update:["id","data","params"],patch:["id","data","params"],remove:["id","params"]},t.defaultServiceMethods=Object.keys(t.defaultServiceArguments),t.defaultEventMap={create:"created",update:"updated",patch:"patched",remove:"removed"},t.protectedMethods=Object.keys(Object.prototype).concat(Object.keys(r.EventEmitter.prototype)).concat(["before","after","error","hooks","setup","publish"]),t.getHookMethods=function(e,n){var r=n.methods;return t.defaultServiceMethods.filter((function(t){return"function"==typeof e[t]&&!r.includes(t)})).concat(r)},t.getServiceOptions=o,t.wrapService=function(e,n,r){if(n[t.SERVICE])return n;var i=Object.create(n),s=o(n,r);if(0===Object.keys(s.methods).length&&"function"!=typeof n.setup)throw new Error("Invalid service object passed for path `".concat(e,"`"));return Object.defineProperty(i,t.SERVICE,{value:s}),i}},"../feathers/lib/version.js":function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default="development"},"../rest-client/lib/axios.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.AxiosClient=void 0;var l=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,r,c=a(u);function u(){return o(this,u),c.apply(this,arguments)}return t=u,(n=[{key:"request",value:function(e,t){var n=Object.assign({url:e.url,method:e.method,data:e.body,headers:Object.assign({Accept:"application/json"},this.options.headers,e.headers)},t.connection);return this.connection.request(n).then((function(e){return e.data})).catch((function(e){var t=e.response||e;throw t instanceof Error?t:t.data||t}))}}])&&i(t.prototype,n),r&&i(t,r),u}(n("../rest-client/lib/base.js").Base);t.AxiosClient=l},"../rest-client/lib/base.js":function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Base=void 0;var i=o(n("../../node_modules/qs/lib/index.js")),s=n("../errors/lib/index.js"),a=n("../commons/lib/index.js");function c(e){if("ECONNREFUSED"===e.code)throw new s.Unavailable(e.message,a._.pick(e,"address","port","config"));throw s.convert(e)}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=a.stripSlashes(t.name),this.options=t.options,this.connection=t.connection,this.base="".concat(t.base,"/").concat(this.name)}var t,n,o;return t=e,(n=[{key:"makeUrl",value:function(e,t){var n=this.base;return e=e||{},null!=t&&(n+="/".concat(encodeURIComponent(t))),n+this.getQuery(e)}},{key:"getQuery",value:function(e){if(0!==Object.keys(e).length){var t=i.default.stringify(e);return"?".concat(t)}return""}},{key:"methods",value:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e[t]=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request({body:e,url:this.makeUrl(n.query),method:"POST",headers:Object.assign({"Content-Type":"application/json","X-Service-Method":t},n.headers)},n).catch(c)}})),this}},{key:"find",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.request({url:this.makeUrl(e.query),method:"GET",headers:Object.assign({},e.headers)},e).catch(c)}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return void 0===e?Promise.reject(new Error("id for 'get' can not be undefined")):this.request({url:this.makeUrl(t.query,e),method:"GET",headers:Object.assign({},t.headers)},t).catch(c)}},{key:"create",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request({url:this.makeUrl(t.query),body:e,method:"POST",headers:Object.assign({"Content-Type":"application/json"},t.headers)},t).catch(c)}},{key:"update",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return void 0===e?Promise.reject(new Error("id for 'update' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(n.query,e),body:t,method:"PUT",headers:Object.assign({"Content-Type":"application/json"},n.headers)},n).catch(c)}},{key:"patch",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return void 0===e?Promise.reject(new Error("id for 'patch' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(n.query,e),body:t,method:"PATCH",headers:Object.assign({"Content-Type":"application/json"},n.headers)},n).catch(c)}},{key:"remove",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return void 0===e?Promise.reject(new Error("id for 'remove' can not be undefined, only 'null' when removing multiple entries")):this.request({url:this.makeUrl(t.query,e),method:"DELETE",headers:Object.assign({},t.headers)},t).catch(c)}}])&&r(t.prototype,n),o&&r(t,o),e}();t.Base=u},"../rest-client/lib/fetch.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.FetchClient=void 0;var l=n("../errors/lib/index.js"),f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,r,c=a(u);function u(){return o(this,u),c.apply(this,arguments)}return t=u,(n=[{key:"request",value:function(e,t){var n=Object.assign({},e,t.connection);return n.headers=Object.assign({Accept:"application/json"},this.options.headers,n.headers),e.body&&(n.body=JSON.stringify(e.body)),this.connection(e.url,n).then(this.checkStatus).then((function(e){return 204===e.status?null:e.json()}))}},{key:"checkStatus",value:function(e){return e.ok?e:e.json().catch((function(){return new(l.errors[e.status]||Error)("JSON parsing error")})).then((function(t){throw t.response=e,t}))}}])&&i(t.prototype,n),r&&i(t,r),u}(n("../rest-client/lib/base.js").Base);t.FetchClient=f},"../rest-client/lib/index.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.SuperagentClient=t.FetchClient=t.AxiosClient=void 0;var r=n("../rest-client/lib/base.js"),o=n("../rest-client/lib/axios.js");Object.defineProperty(t,"AxiosClient",{enumerable:!0,get:function(){return o.AxiosClient}});var i=n("../rest-client/lib/fetch.js");Object.defineProperty(t,"FetchClient",{enumerable:!0,get:function(){return i.FetchClient}});var s=n("../rest-client/lib/superagent.js");Object.defineProperty(t,"SuperagentClient",{enumerable:!0,get:function(){return s.SuperagentClient}});var a={superagent:s.SuperagentClient,fetch:i.FetchClient,axios:o.AxiosClient};function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t={Base:r.Base};return Object.keys(a).forEach((function(n){t[n]=function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a[n];if(!t)throw new Error("".concat(n," has to be provided to feathers-rest"));"function"==typeof r&&(o=r,r={});var i=function(n){return new o({base:e,name:n,connection:t,options:r})},s=function(e){if(void 0!==e.rest)throw new Error("Only one default client provider can be configured");e.rest=t,e.defaultService=i};return s.Service=o,s.service=i,s}})),t}t.default=c,e.exports=Object.assign(c,e.exports)},"../rest-client/lib/superagent.js":function(e,t,n){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var o=u(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function c(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.SuperagentClient=void 0;var l=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,r,c=a(u);function u(){return o(this,u),c.apply(this,arguments)}return t=u,(n=[{key:"request",value:function(e,t){var n=this.connection(e.method,e.url).set(this.options.headers||{}).set("Accept","application/json").set(t.connection||{}).set(e.headers||{}).type(e.type||"json");return new Promise((function(t,r){n.set(e.headers),e.body&&n.send(e.body),n.end((function(e,n){if(e){try{var o=e.response;(e=JSON.parse(e.response.text)).response=o}catch(i){}return r(e)}t(n&&n.body)}))}))}}])&&i(t.prototype,n),r&&i(t,r),u}(n("../rest-client/lib/base.js").Base);t.SuperagentClient=l},"../socketio-client/lib/index.js":function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n("../transport-commons/client.js"),o=n("../feathers/lib/index.js");function i(e,t){if(!e)throw new Error("Socket.io connection needs to be provided");var n=function(n){var i=Object.values(o.defaultEventMap),s=Object.assign({},t,{events:i,name:n,connection:e,method:"emit"});return new r.Service(s)},i=function(t){if(void 0!==t.io)throw new Error("Only one default client provider can be configured");t.io=e,t.defaultService=n};return i.Service=r.Service,i.service=n,i}t.default=i,e.exports=Object.assign(i,e.exports)},"../transport-commons/client.js":function(e,t,n){e.exports=n("../transport-commons/lib/client.js")},"../transport-commons/lib/client.js":function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.Service=void 0;var o=n("../errors/lib/index.js"),i=n("../commons/lib/index.js").createDebug("@feathersjs/transport-commons/client"),s=["addListener","emit","listenerCount","listeners","on","once","prependListener","prependOnceListener","removeAllListeners","removeListener"],a=["eventNames","getMaxListeners","setMaxListeners"],c=function(){function e(t){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.events=t.events,this.path=t.name,this.connection=t.connection,this.method=t.method,n=this,a.forEach((function(e){n[e]=function(){var t;if("function"!=typeof this.connection[e])throw new Error("Can not call '".concat(e,"' on the client service connection"));return(t=this.connection)[e].apply(t,arguments)}})),s.forEach((function(e){n[e]=function(t){var n;if("function"!=typeof this.connection[e])throw new Error("Can not call '".concat(e,"' on the client service connection"));var r="".concat(this.path," ").concat(t);i("Calling emitter method ".concat(e," with ")+"namespaced event '".concat(r,"'"));for(var o=arguments.length,s=new Array(o>1?o-1:0),a=1;a<o;a++)s[a-1]=arguments[a];var c=(n=this.connection)[e].apply(n,[r].concat(s));return c===this.connection?this:c}}))}var t,n,c;return t=e,(n=[{key:"send",value:function(e){for(var t=this,n=arguments.length,r=new Array(n>1?n-1:0),s=1;s<n;s++)r[s-1]=arguments[s];return new Promise((function(n,s){var a;r.unshift(e,t.path),r.push((function(e,t){return e?s(o.convert(e)):n(t)})),i("Sending socket.".concat(t.method),r),(a=t.connection)[t.method].apply(a,r)}))}},{key:"methods",value:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e[t]=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.send(t,e,n.query||{})}})),this}},{key:"find",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.send("find",e.query||{})}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.send("get",e,t.query||{})}},{key:"create",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.send("create",e,t.query||{})}},{key:"update",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.send("update",e,t,n.query||{})}},{key:"patch",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.send("patch",e,t,n.query||{})}},{key:"remove",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.send("remove",e,t.query||{})}},{key:"off",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if("function"==typeof this.connection.off){var o,i=(o=this.connection).off.apply(o,["".concat(this.path," ").concat(e)].concat(n));return i===this.connection?this:i}return 0===n.length?this.removeAllListeners(e):this.removeListener.apply(this,[e].concat(n))}}])&&r(t.prototype,n),c&&r(t,c),e}();t.Service=c},"../../node_modules/call-bind/callBound.js":function(e,t,n){var r=n("../../node_modules/get-intrinsic/index.js"),o=n("../../node_modules/call-bind/index.js"),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},"../../node_modules/call-bind/index.js":function(e,t,n){var r=n("../../node_modules/function-bind/index.js"),o=n("../../node_modules/get-intrinsic/index.js"),i=o("%Function.prototype.apply%"),s=o("%Function.prototype.call%"),a=o("%Reflect.apply%",!0)||r.call(s,i),c=o("%Object.getOwnPropertyDescriptor%",!0),u=o("%Object.defineProperty%",!0),l=o("%Math.max%");if(u)try{u({},"a",{value:1})}catch(p){u=null}e.exports=function(e){var t=a(r,s,arguments);if(c&&u){var n=c(t,"length");n.configurable&&u(t,"length",{value:1+l(0,e.length-(arguments.length-1))})}return t};var f=function(){return a(r,i,arguments)};u?u(e.exports,"apply",{value:f}):e.exports.apply=f},"../../node_modules/events/events.js":function(e){var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}y(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,n)}(e,o,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var o,i,s,u;if(a(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=c(e))>0&&s.length>o&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=s.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=l.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):h(o,o.length)}function d(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function y(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var u=c.length,l=h(c,u);for(n=0;n<u;++n)r(l[n],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,f(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,f(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,s;if(a(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,s||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return p(this,e,!0)},i.prototype.rawListeners=function(e){return p(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},i.prototype.listenerCount=d,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"../../node_modules/function-bind/implementation.js":function(e){var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,o="[object Function]";e.exports=function(e){var i=this;if("function"!=typeof i||r.call(i)!==o)throw new TypeError(t+i);for(var s,a=n.call(arguments,1),c=function(){if(this instanceof s){var t=i.apply(this,a.concat(n.call(arguments)));return Object(t)===t?t:this}return i.apply(e,a.concat(n.call(arguments)))},u=Math.max(0,i.length-a.length),l=[],f=0;f<u;f++)l.push("$"+f);if(s=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(c),i.prototype){var p=function(){};p.prototype=i.prototype,s.prototype=new p,p.prototype=null}return s}},"../../node_modules/function-bind/index.js":function(e,t,n){var r=n("../../node_modules/function-bind/implementation.js");e.exports=Function.prototype.bind||r},"../../node_modules/get-intrinsic/index.js":function(e,t,n){var r,o=SyntaxError,i=Function,s=TypeError,a=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(t){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(x){c=null}var u=function(){throw new s},l=c?function(){try{return u}catch(e){try{return c(arguments,"callee").get}catch(t){return u}}}():u,f=n("../../node_modules/has-symbols/index.js")(),p=Object.getPrototypeOf||function(e){return e.__proto__},d={},h="undefined"==typeof Uint8Array?r:p(Uint8Array),y={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":o,"%ThrowTypeError%":l,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},m=function e(t){var n;if("%AsyncFunction%"===t)n=a("async function () {}");else if("%GeneratorFunction%"===t)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=a("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=p(o.prototype))}return y[t]=n,n},v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},b=n("../../node_modules/function-bind/index.js"),g=n("../../node_modules/has/src/index.js"),_=b.call(Function.call,Array.prototype.concat),j=b.call(Function.apply,Array.prototype.splice),w=b.call(Function.call,String.prototype.replace),O=b.call(Function.call,String.prototype.slice),k=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,S=/\\(\\)?/g,E=function(e){var t=O(e,0,1),n=O(e,-1);if("%"===t&&"%"!==n)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var r=[];return w(e,k,(function(e,t,n,o){r[r.length]=n?w(o,S,"$1"):t||e})),r},P=function(e,t){var n,r=e;if(g(v,r)&&(r="%"+(n=v[r])[0]+"%"),g(y,r)){var i=y[r];if(i===d&&(i=m(r)),void 0===i&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new o("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');var n=E(e),r=n.length>0?n[0]:"",i=P("%"+r+"%",t),a=i.name,u=i.value,l=!1,f=i.alias;f&&(r=f[0],j(n,_([0,1],f)));for(var p=1,d=!0;p<n.length;p+=1){var h=n[p],m=O(h,0,1),v=O(h,-1);if(('"'===m||"'"===m||"`"===m||'"'===v||"'"===v||"`"===v)&&m!==v)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&d||(l=!0),g(y,a="%"+(r+="."+h)+"%"))u=y[a];else if(null!=u){if(!(h in u)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&p+1>=n.length){var b=c(u,h);u=(d=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:u[h]}else d=g(u,h),u=u[h];d&&!l&&(y[a]=u)}}return u}},"../../node_modules/has-symbols/index.js":function(e,t,n){var r="undefined"!=typeof Symbol&&Symbol,o=n("../../node_modules/has-symbols/shams.js");e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&o()}},"../../node_modules/has-symbols/shams.js":function(e){e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},"../../node_modules/has/src/index.js":function(e,t,n){var r=n("../../node_modules/function-bind/index.js");e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},"../../node_modules/object-inspect/index.js":function(e,t,n){var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&o&&"function"==typeof o.get?o.get:null,s=r&&Map.prototype.forEach,a="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,u=a&&c&&"function"==typeof c.get?c.get:null,l=a&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,y=Object.prototype.toString,m=Function.prototype.toString,v=String.prototype.match,b="function"==typeof BigInt?BigInt.prototype.valueOf:null,g=Object.getOwnPropertySymbols,_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,j="function"==typeof Symbol&&"object"==typeof Symbol.iterator,w=Object.prototype.propertyIsEnumerable,O=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null),k=n("?c95a").custom,S=k&&C(k)?k:null,E="function"==typeof Symbol&&void 0!==Symbol.toStringTag?Symbol.toStringTag:null;function P(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function x(e){return String(e).replace(/"/g,"&quot;")}function A(e){return!("[object Array]"!==M(e)||E&&"object"==typeof e&&E in e)}function C(e){if(j)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!_)return!1;try{return _.call(e),!0}catch(t){}return!1}e.exports=function e(t,n,r,o){var a=n||{};if(T(a,"quoteStyle")&&"single"!==a.quoteStyle&&"double"!==a.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(T(a,"maxStringLength")&&("number"==typeof a.maxStringLength?a.maxStringLength<0&&a.maxStringLength!==1/0:null!==a.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var c=!T(a,"customInspect")||a.customInspect;if("boolean"!=typeof c&&"symbol"!==c)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(T(a,"indent")&&null!==a.indent&&"\t"!==a.indent&&!(parseInt(a.indent,10)===a.indent&&a.indent>0))throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return I(t,a);if("number"==typeof t)return 0===t?1/0/t>0?"0":"-0":String(t);if("bigint"==typeof t)return String(t)+"n";var y=void 0===a.depth?5:a.depth;if(void 0===r&&(r=0),r>=y&&y>0&&"object"==typeof t)return A(t)?"[Array]":"[Object]";var g,w=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=Array(e.indent+1).join(" ")}return{base:n,prev:Array(t+1).join(n)}}(a,r);if(void 0===o)o=[];else if(N(o,t)>=0)return"[Circular]";function k(t,n,i){if(n&&(o=o.slice()).push(n),i){var s={depth:a.depth};return T(a,"quoteStyle")&&(s.quoteStyle=a.quoteStyle),e(t,s,r+1,o)}return e(t,a,r+1,o)}if("function"==typeof t){var R=function(e){if(e.name)return e.name;var t=v.call(m.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),D=H(t,k);return"[Function"+(R?": "+R:" (anonymous)")+"]"+(D.length>0?" { "+D.join(", ")+" }":"")}if(C(t)){var U=j?String(t).replace(/^(Symbol\(.*\))_[^)]*$/,"$1"):_.call(t);return"object"!=typeof t||j?U:F(U)}if((g=t)&&"object"==typeof g&&("undefined"!=typeof HTMLElement&&g instanceof HTMLElement||"string"==typeof g.nodeName&&"function"==typeof g.getAttribute)){for(var G="<"+String(t.nodeName).toLowerCase(),V=t.attributes||[],z=0;z<V.length;z++)G+=" "+V[z].name+"="+P(x(V[z].value),"double",a);return G+=">",t.childNodes&&t.childNodes.length&&(G+="..."),G+="</"+String(t.nodeName).toLowerCase()+">"}if(A(t)){if(0===t.length)return"[]";var K=H(t,k);return w&&!function(e){for(var t=0;t<e.length;t++)if(N(e[t],"\n")>=0)return!1;return!0}(K)?"["+q(K,w)+"]":"[ "+K.join(", ")+" ]"}if(function(e){return!("[object Error]"!==M(e)||E&&"object"==typeof e&&E in e)}(t)){var W=H(t,k);return 0===W.length?"["+String(t)+"]":"{ ["+String(t)+"] "+W.join(", ")+" }"}if("object"==typeof t&&c){if(S&&"function"==typeof t[S])return t[S]();if("symbol"!==c&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{u.call(e)}catch(G){return!0}return e instanceof Map}catch(t){}return!1}(t)){var X=[];return s.call(t,(function(e,n){X.push(k(n,t,!0)+" => "+k(e,t))})),L("Map",i.call(t),X,w)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e);try{i.call(e)}catch(t){return!0}return e instanceof Set}catch(n){}return!1}(t)){var $=[];return l.call(t,(function(e){$.push(k(e,t))})),L("Set",u.call(t),$,w)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{p.call(e,p)}catch(G){return!0}return e instanceof WeakMap}catch(t){}return!1}(t))return B("WeakMap");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{f.call(e,f)}catch(G){return!0}return e instanceof WeakSet}catch(t){}return!1}(t))return B("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(t){}return!1}(t))return B("WeakRef");if(function(e){return!("[object Number]"!==M(e)||E&&"object"==typeof e&&E in e)}(t))return F(k(Number(t)));if(function(e){if(!e||"object"!=typeof e||!b)return!1;try{return b.call(e),!0}catch(t){}return!1}(t))return F(k(b.call(t)));if(function(e){return!("[object Boolean]"!==M(e)||E&&"object"==typeof e&&E in e)}(t))return F(h.call(t));if(function(e){return!("[object String]"!==M(e)||E&&"object"==typeof e&&E in e)}(t))return F(k(String(t)));if(!function(e){return!("[object Date]"!==M(e)||E&&"object"==typeof e&&E in e)}(t)&&!function(e){return!("[object RegExp]"!==M(e)||E&&"object"==typeof e&&E in e)}(t)){var J=H(t,k),Y=O?O(t)===Object.prototype:t instanceof Object||t.constructor===Object,Q=t instanceof Object?"":"null prototype",Z=!Y&&E&&Object(t)===t&&E in t?M(t).slice(8,-1):Q?"Object":"",ee=(Y||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(Z||Q?"["+[].concat(Z||[],Q||[]).join(": ")+"] ":"");return 0===J.length?ee+"{}":w?ee+"{"+q(J,w)+"}":ee+"{ "+J.join(", ")+" }"}return String(t)};var R=Object.prototype.hasOwnProperty||function(e){return e in this};function T(e,t){return R.call(e,t)}function M(e){return y.call(e)}function N(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function I(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return I(e.slice(0,t.maxStringLength),t)+r}return P(e.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,D),"single",t)}function D(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+t.toString(16).toUpperCase()}function F(e){return"Object("+e+")"}function B(e){return e+" { ? }"}function L(e,t,n,r){return e+" ("+t+") {"+(r?q(n,r):n.join(", "))+"}"}function q(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+e.join(","+n)+"\n"+t.prev}function H(e,t){var n=A(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=T(e,o)?t(e[o],e):""}var i,s="function"==typeof g?g(e):[];if(j){i={};for(var a=0;a<s.length;a++)i["$"+s[a]]=s[a]}for(var c in e)T(e,c)&&(n&&String(Number(c))===c&&c<e.length||j&&i["$"+c]instanceof Symbol||(/[^\w$]/.test(c)?r.push(t(c,e)+": "+t(e[c],e)):r.push(c+": "+t(e[c],e))));if("function"==typeof g)for(var u=0;u<s.length;u++)w.call(e,s[u])&&r.push("["+t(s[u])+"]: "+t(e[s[u]],e));return r}},"../../node_modules/qs/lib/formats.js":function(e){var t=String.prototype.replace,n=/%20/g,r="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:r,RFC3986:o}},"../../node_modules/qs/lib/index.js":function(e,t,n){var r=n("../../node_modules/qs/lib/stringify.js"),o=n("../../node_modules/qs/lib/parse.js"),i=n("../../node_modules/qs/lib/formats.js");e.exports={formats:i,parse:o,stringify:r}},"../../node_modules/qs/lib/parse.js":function(e,t,n){var r=n("../../node_modules/qs/lib/utils.js"),o=Object.prototype.hasOwnProperty,i=Array.isArray,s={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},u=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,a=n.depth>0&&/(\[[^[\]]*])/.exec(i),u=a?i.slice(0,a.index):i,l=[];if(u){if(!n.plainObjects&&o.call(Object.prototype,u)&&!n.allowPrototypes)return;l.push(u)}for(var f=0;n.depth>0&&null!==(a=s.exec(i))&&f<n.depth;){if(f+=1,!n.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!n.allowPrototypes)return;l.push(a[1])}return a&&l.push("["+i.slice(a.index)+"]"),function(e,t,n,r){for(var o=r?t:c(t,n),i=e.length-1;i>=0;--i){var s,a=e[i];if("[]"===a&&n.parseArrays)s=[].concat(o);else{s=n.plainObjects?Object.create(null):{};var u="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,l=parseInt(u,10);n.parseArrays||""!==u?!isNaN(l)&&a!==u&&String(l)===u&&l>=0&&n.parseArrays&&l<=n.arrayLimit?(s=[])[l]=o:s[u]=o:s={0:o}}o=s}return o}(l,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:s.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var l="string"==typeof e?function(e,t){var n,u={},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,p=l.split(t.delimiter,f),d=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<p.length;++n)0===p[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[n]?h="utf-8":"utf8=%26%2310003%3B"===p[n]&&(h="iso-8859-1"),d=n,n=p.length);for(n=0;n<p.length;++n)if(n!==d){var y,m,v=p[n],b=v.indexOf("]="),g=-1===b?v.indexOf("="):b+1;-1===g?(y=t.decoder(v,s.decoder,h,"key"),m=t.strictNullHandling?null:""):(y=t.decoder(v.slice(0,g),s.decoder,h,"key"),m=r.maybeMap(c(v.slice(g+1),t),(function(e){return t.decoder(e,s.decoder,h,"value")}))),m&&t.interpretNumericEntities&&"iso-8859-1"===h&&(m=a(m)),v.indexOf("[]=")>-1&&(m=i(m)?[m]:m),o.call(u,y)?u[y]=r.combine(u[y],m):u[y]=m}return u}(e,n):e,f=n.plainObjects?Object.create(null):{},p=Object.keys(l),d=0;d<p.length;++d){var h=p[d],y=u(h,l[h],n,"string"==typeof e);f=r.merge(f,y,n)}return!0===n.allowSparse?f:r.compact(f)}},"../../node_modules/qs/lib/stringify.js":function(e,t,n){var r=n("../../node_modules/side-channel/index.js"),o=n("../../node_modules/qs/lib/utils.js"),i=n("../../node_modules/qs/lib/formats.js"),s=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},c=Array.isArray,u=Array.prototype.push,l=function(e,t){u.apply(e,c(t)?t:[t])},f=Date.prototype.toISOString,p=i.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:p,formatter:i.formatters[p],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},h=function e(t,n,i,s,a,u,f,p,h,y,m,v,b,g,_){var j,w=t;if(_.has(t))throw new RangeError("Cyclic object value");if("function"==typeof f?w=f(n,w):w instanceof Date?w=y(w):"comma"===i&&c(w)&&(w=o.maybeMap(w,(function(e){return e instanceof Date?y(e):e}))),null===w){if(s)return u&&!b?u(n,d.encoder,g,"key",m):n;w=""}if("string"==typeof(j=w)||"number"==typeof j||"boolean"==typeof j||"symbol"==typeof j||"bigint"==typeof j||o.isBuffer(w))return u?[v(b?n:u(n,d.encoder,g,"key",m))+"="+v(u(w,d.encoder,g,"value",m))]:[v(n)+"="+v(String(w))];var O,k=[];if(void 0===w)return k;if("comma"===i&&c(w))O=[{value:w.length>0?w.join(",")||null:void 0}];else if(c(f))O=f;else{var S=Object.keys(w);O=p?S.sort(p):S}for(var E=0;E<O.length;++E){var P=O[E],x="object"==typeof P&&void 0!==P.value?P.value:w[P];if(!a||null!==x){var A=c(w)?"function"==typeof i?i(n,P):n:n+(h?"."+P:"["+P+"]");_.set(t,!0);var C=r();l(k,e(x,A,i,s,a,u,f,p,h,y,m,v,b,g,C))}}return k};e.exports=function(e,t){var n,o=e,u=function(e){if(!e)return d;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||d.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!s.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=d.filter;return("function"==typeof e.filter||c(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:d.addQueryPrefix,allowDots:void 0===e.allowDots?d.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:d.charsetSentinel,delimiter:void 0===e.delimiter?d.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:d.encode,encoder:"function"==typeof e.encoder?e.encoder:d.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:d.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:d.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:d.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:d.strictNullHandling}}(t);"function"==typeof u.filter?o=(0,u.filter)("",o):c(u.filter)&&(n=u.filter);var f,p=[];if("object"!=typeof o||null===o)return"";f=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var y=a[f];n||(n=Object.keys(o)),u.sort&&n.sort(u.sort);for(var m=r(),v=0;v<n.length;++v){var b=n[v];u.skipNulls&&null===o[b]||l(p,h(o[b],b,y,u.strictNullHandling,u.skipNulls,u.encode?u.encoder:null,u.filter,u.sort,u.allowDots,u.serializeDate,u.format,u.formatter,u.encodeValuesOnly,u.charset,m))}var g=p.join(u.delimiter),_=!0===u.addQueryPrefix?"?":"";return u.charsetSentinel&&("iso-8859-1"===u.charset?_+="utf8=%26%2310003%3B&":_+="utf8=%E2%9C%93&"),g.length>0?_+g:""}},"../../node_modules/qs/lib/utils.js":function(e,t,n){var r=n("../../node_modules/qs/lib/formats.js"),o=Object.prototype.hasOwnProperty,i=Array.isArray,s=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),a=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:a,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],s=o.obj[o.prop],a=Object.keys(s),c=0;c<a.length;++c){var u=a[c],l=s[u];"object"==typeof l&&null!==l&&-1===n.indexOf(l)&&(t.push({obj:s,prop:u}),n.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(o){return r}},encode:function(e,t,n,o,i){if(0===e.length)return e;var a=e;if("symbol"==typeof e?a=Symbol.prototype.toString.call(e):"string"!=typeof e&&(a=String(e)),"iso-8859-1"===n)return escape(a).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",u=0;u<a.length;++u){var l=a.charCodeAt(u);45===l||46===l||95===l||126===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122||i===r.RFC1738&&(40===l||41===l)?c+=a.charAt(u):l<128?c+=s[l]:l<2048?c+=s[192|l>>6]+s[128|63&l]:l<55296||l>=57344?c+=s[224|l>>12]+s[128|l>>6&63]+s[128|63&l]:(u+=1,l=65536+((1023&l)<<10|1023&a.charCodeAt(u)),c+=s[240|l>>18]+s[128|l>>12&63]+s[128|l>>6&63]+s[128|63&l])}return c},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var s=t;return i(t)&&!i(n)&&(s=a(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(o.call(t,i)){var s=t[i];s&&"object"==typeof s&&n&&"object"==typeof n?t[i]=e(s,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var s=n[i];return o.call(t,i)?t[i]=e(t[i],s,r):t[i]=s,t}),s)}}},"../../node_modules/side-channel/index.js":function(e,t,n){var r=n("../../node_modules/get-intrinsic/index.js"),o=n("../../node_modules/call-bind/callBound.js"),i=n("../../node_modules/object-inspect/index.js"),s=r("%TypeError%"),a=r("%WeakMap%",!0),c=r("%Map%",!0),u=o("WeakMap.prototype.get",!0),l=o("WeakMap.prototype.set",!0),f=o("WeakMap.prototype.has",!0),p=o("Map.prototype.get",!0),d=o("Map.prototype.set",!0),h=o("Map.prototype.has",!0),y=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new s("Side channel does not contain "+i(e))},get:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return u(e,r)}else if(c){if(t)return p(t,r)}else if(n)return function(e,t){var n=y(e,t);return n&&n.value}(n,r)},has:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return f(e,r)}else if(c){if(t)return h(t,r)}else if(n)return function(e,t){return!!y(e,t)}(n,r);return!1},set:function(r,o){a&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new a),l(e,r,o)):c?(t||(t=new c),d(t,r,o)):(n||(n={key:{},next:null}),function(e,t,n){var r=y(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,o))}};return r}},"./src/feathers.ts":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.socketio=t.rest=t.authentication=t.errors=void 0;const c=n("../feathers/lib/index.js"),u=a(n("../authentication-client/lib/index.js"));t.authentication=u.default;const l=a(n("../rest-client/lib/index.js"));t.rest=l.default;const f=a(n("../socketio-client/lib/index.js"));t.socketio=f.default,i(n("../feathers/lib/index.js"),t),t.errors=s(n("../errors/lib/index.js")),t.default=c.feathers,e.exports=Object.assign(c.feathers,e.exports)},"?c95a":function(){}},K={},function e(t){var n=K[t];if(void 0!==n)return n.exports;var r=K[t]={exports:{}};return z[t].call(r.exports,r,r.exports,e),r.exports}("./src/feathers.ts")));const J=p.publicRuntimeConfig.feathersStoreKey,Y=p.publicRuntimeConfig.offlineMode?void 0:$();if(!p.publicRuntimeConfig.offlineMode){const e=W(p.publicRuntimeConfig.apiServer,{withCredentials:!0});Y.configure($.socketio(e,{timeout:1e4})),Y.configure($.authentication({storageKey:J}))}const Q=Y;export{Q as a,U as b,D as c,G as d,L as e};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
