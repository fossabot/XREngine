import{a as e,d as a}from"./feathers.42c2841d.js";import{u as t}from"./upload.8895077e.js";import{a2 as r,a3 as i,a4 as n,a5 as s,a6 as c,a7 as o,a8 as d,a9 as f,aa as u,ab as y,ac as p,ad as l,ae as v,af as w,ag as g,ah as m,ai as h,aj as I,ak as q,al as b,am as k,an as _,ao as j,ap as F}from"./_app.e67b0e96.js";function x(){return{type:w}}function C(e){return{type:j,feedId:e}}function G(e){return{type:F,feedId:e}}function R(t,w,g){return async(g,m)=>{try{if(!t||"featured"!==t&&"featuredGuest"!==t)if(t&&"creator"===t){g({type:n});g(function(e){return{type:s,feeds:e}}((await e.service("feed").find({query:{action:"creator",creatorId:w}})).data))}else if(t&&"fired"===t){g({type:c});g(function(e){return{type:o,feeds:e}}((await e.service("feed").find({query:{action:"fired",creatorId:w}})).data))}else if(t&&"bookmark"===t){g({type:d});g(function(e){return{type:f,feeds:e}}((await e.service("feed").find({query:{action:"bookmark",creatorId:w}})).data))}else if(t&&"myFeatured"===t){g({type:u});g(function(e){return{type:y,feeds:e}}((await e.service("feed").find({query:{action:"myFeatured",creatorId:w}})).data))}else if(t&&"admin"===t){if("admin"===m().get("auth").get("user").userRole){g({type:p});g(function(e){return{type:l,feeds:e}}(await e.service("feed").find({query:{action:"admin"}})))}}else{g(function(e){return{type:v,feeds:e}}((await e.service("feed").find({query:{action:t||""}})).data))}else{g({type:r});const a=await e.service("feed").find({query:{action:t}});g((h=a.data,{type:i,feeds:h}))}}catch(I){console.log(I),a(g,I.message)}var h}}function z(t){return async r=>{try{r(x());r(function(e){return{type:g,feed:e}}(await e.service("feed").get(t)))}catch(i){console.log(i),a(r,i.message)}}}function A(t){return async r=>{try{await e.service("feed").patch(t,{viewsCount:t}),r(function(e){return{type:m,feedId:e}}(t))}catch(i){console.log(i),a(r,i.message)}}}function B({title:r,description:i,video:n,preview:s}){return async c=>{try{c(x());const a=await t(n,null),o=await t(s,null);if(a&&o){c(function(e){return{type:h,feed:e}}(await e.service("feed").create({title:r,description:i,videoId:a.file_id,previewId:o.file_id})));return{video:a.origin,preview:o.origin}}}catch(o){console.log(o),a(c,o.message)}}}function D(r,i){return async n=>{try{if(i.video){const e=await t(i.video,null);i.videoId=e.file_id,delete i.video}if(i.preview){const e=await t(i.preview,null);i.previewId=e.file_id,delete i.preview}n(function(e){return{type:I,feed:e}}(await e.service("feed").patch(r,i)))}catch(s){console.log(s),a(n,s.message)}}}function E(t){return async r=>{try{await e.service("feed").patch(t,{featured:1}),r(function(e){return{type:q,feedId:e}}(t))}catch(i){console.log(i),a(r,i.message)}}}function H(t){return async r=>{try{await e.service("feed").patch(t,{featured:0}),r(function(e){return{type:b,feedId:e}}(t))}catch(i){console.log(i),a(r,i.message)}}}function J(t,r,i){return async n=>{try{const a=e=>e.split("/").sort(((e,a)=>a.length-e.length))[0];await e.service("static-resource").remove(a(r)),await e.service("static-resource").remove(a(i)),await e.service("feed").remove(t),n(function(e){return{type:k,feedId:e}}(t))}catch(s){console.log(s),a(n,s.message)}}}function K(){return async e=>{e({type:_})}}export{H as a,C as b,K as c,A as d,z as e,J as f,R as g,B as h,G as r,E as s,D as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
