// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const StaticResource = sequelize.define('staticResource', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    sid: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
    },
    description: {
      type: DataTypes.STRING,
    },
    url: {
      type: DataTypes.STRING,
    },
    key: {
      type: DataTypes.STRING,
    },
    mimeType: {
      type: DataTypes.STRING,
    },
    metadata: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    componentId: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'static_resource',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  StaticResource.associate = (models) => {
    StaticResource.belongsTo(models.staticResourceType, {
      foreignKey: {
        name: 'staticResourceTypeKey',
        field: 'staticResourceType',
      },
      targetKey: 'type',
      as: 'staticResourceType',
    });
    StaticResource.belongsTo(models.user, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'user',
    });
    StaticResource.belongsTo(models.feed, {
      foreignKey: {
        name: 'feedIdKey',
        field: 'feedId',
      },
      as: 'feed',
    });
    StaticResource.belongsTo(models.subscriptionLevel, {
      foreignKey: {
        name: 'subscriptionLevelKey',
        field: 'subscriptionLevel',
      },
      targetKey: 'level',
      as: 'subscriptionLevel',
    });
    StaticResource.belongsTo(models.staticResource, {
      foreignKey: {
        name: 'parentResourceIdKey',
        field: 'parentResourceId',
      },
      as: 'parentResource',
    });
    StaticResource.belongsToMany(models.component, {
      through: 'staticResourceComponent',
      foreignKey: 'staticResourceId',
      otherKey: 'componentId',
      as: 'componentThroughStaticResourceComponents',
    });
    StaticResource.hasMany(models.attribution, {
      foreignKey: {
        name: 'staticResourceIdKey',
        field: 'staticResourceId',
      },
      as: 'staticResourceAttributions',
    });
    StaticResource.hasMany(models.staticResource, {
      foreignKey: {
        name: 'parentResourceIdKey',
        field: 'parentResourceId',
      },
      as: 'parentResourceStaticResources',
    });
  };

  return StaticResource;
};
