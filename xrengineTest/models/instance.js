// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Instance = sequelize.define('instance', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    ipAddress: {
      type: DataTypes.STRING,
    },
    channelId: {
      type: DataTypes.STRING,
    },
    currentUsers: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'instance',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Instance.associate = (models) => {
    Instance.belongsTo(models.location, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'locationId',
      },
      as: 'location',
    });
    Instance.belongsToMany(models.location, {
      through: 'party',
      foreignKey: 'instanceId',
      otherKey: 'locationId',
      as: 'locationThroughParties',
    });
    Instance.hasMany(models.gameserverSubdomainProvision, {
      foreignKey: {
        name: 'instanceIdKey',
        field: 'instanceId',
      },
      as: 'gameserverSubdomainProvisions',
    });
    Instance.hasMany(models.user, {
      foreignKey: {
        name: 'instanceIdKey',
        field: 'instanceId',
      },
      as: 'users',
    });
    Instance.hasMany(models.user, {
      foreignKey: {
        name: 'channelInstanceIdKey',
        field: 'channelInstanceId',
      },
      as: 'channelInstanceUsers',
    });
    Instance.hasMany(models.channel, {
      foreignKey: {
        name: 'instanceIdKey',
        field: 'instanceId',
      },
      as: 'channels',
    });
  };

  return Instance;
};
