// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Feed = sequelize.define('feed', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    description: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    viewCount: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'feed',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Feed.associate = (models) => {
    Feed.belongsTo(models.user, {
      foreignKey: {
        name: 'authorIdKey',
        field: 'authorId',
      },
      as: 'author',
    });
    Feed.belongsToMany(models.user, {
      through: 'feedFires',
      foreignKey: 'feedId',
      otherKey: 'authorId',
      as: 'userThroughFeedFires',
    });
    Feed.belongsToMany(models.feed, {
      through: 'feedBookmark',
      foreignKey: 'feedId',
      otherKey: 'authorId',
      as: 'feedThroughFeedBookmarks',
    });
    Feed.belongsToMany(models.feed, {
      through: 'feedBookmark',
      foreignKey: 'authorId',
      otherKey: 'feedId',
      as: 'feedThroughFeedBookmarksAuthorId',
    });
    Feed.hasMany(models.comments, {
      foreignKey: {
        name: 'feedIdKey',
        field: 'feedId',
      },
      as: 'comments',
    });
    Feed.hasMany(models.staticResource, {
      foreignKey: {
        name: 'feedIdKey',
        field: 'feedId',
      },
      as: 'staticResources',
    });
  };

  return Feed;
};
