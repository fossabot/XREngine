// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const User = sequelize.define('user', {
    id: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    avatarId: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'user',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  User.associate = (models) => {
    User.belongsTo(models.instance, {
      foreignKey: {
        name: 'instanceIdKey',
        field: 'instanceId',
      },
      as: 'instance',
    });
    User.belongsTo(models.instance, {
      foreignKey: {
        name: 'channelInstanceIdKey',
        field: 'channelInstanceId',
      },
      as: 'channelInstance',
    });
    User.belongsTo(models.userRole, {
      foreignKey: {
        name: 'userRoleKey',
        field: 'userRole',
      },
      targetKey: 'role',
      as: 'userRole',
    });
    User.belongsTo(models.party, {
      foreignKey: {
        name: 'partyIdKey',
        field: 'partyId',
      },
      as: 'party',
    });
    User.belongsToMany(models.comments, {
      through: 'commentsFires',
      foreignKey: 'authorId',
      otherKey: 'commentId',
      as: 'commentsThroughCommentsFires',
    });
    User.belongsToMany(models.location, {
      through: 'locationBan',
      foreignKey: 'userId',
      otherKey: 'locationId',
      as: 'locationThroughLocationBans',
    });
    User.belongsToMany(models.feed, {
      through: 'feedFires',
      foreignKey: 'authorId',
      otherKey: 'feedId',
      as: 'feedThroughFeedFires',
    });
    User.hasMany(models.userSettings, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'userSettings',
    });
    User.hasMany(models.collection, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'collections',
    });
    User.hasMany(models.feed, {
      foreignKey: {
        name: 'authorIdKey',
        field: 'authorId',
      },
      as: 'authorFeeds',
    });
    User.hasMany(models.subscription, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'subscriptions',
    });
    User.hasMany(models.identityProvider, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'identityProviders',
    });
    User.hasMany(models.invite, {
      foreignKey: {
        name: 'inviteeIdKey',
        field: 'inviteeId',
      },
      as: 'inviteeInvites',
    });
    User.hasMany(models.invite, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'invites',
    });
    User.hasMany(models.partyUser, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'partyUsers',
    });
    User.hasMany(models.message, {
      foreignKey: {
        name: 'senderIdKey',
        field: 'senderId',
      },
      as: 'senderMessages',
    });
    User.hasMany(models.comments, {
      foreignKey: {
        name: 'authorIdKey',
        field: 'authorId',
      },
      as: 'authorComments',
    });
    User.hasMany(models.messageStatus, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'messageStatuses',
    });
    User.hasMany(models.userRelationship, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'userRelationships',
    });
    User.hasMany(models.userRelationship, {
      foreignKey: {
        name: 'relatedUserIdKey',
        field: 'relatedUserId',
      },
      as: 'relatedUserUserRelationships',
    });
    User.hasMany(models.seat, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'seats',
    });
    User.hasMany(models.channel, {
      foreignKey: {
        name: 'userId1Key',
        field: 'userId1',
      },
      as: 'userId1Channels',
    });
    User.hasMany(models.channel, {
      foreignKey: {
        name: 'userId2Key',
        field: 'userId2',
      },
      as: 'userId2Channels',
    });
    User.hasMany(models.staticResource, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'staticResources',
    });
    User.hasMany(models.groupUser, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'groupUsers',
    });
  };

  return User;
};
